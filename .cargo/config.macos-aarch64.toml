#
# Copyright (c) 2024 Elide Technologies, Inc.
#
# Licensed under the MIT license (the "License"); you may not use this file except in compliance
# with the License. You may obtain a copy of the License at
#
# https://opensource.org/license/mit/
#
# Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
# an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under the License.
#

[build]
rustflags = [
  # Enable Tokio unstable.
  "--cfg",
  "tokio_unstable",

  # Use clang to drive linking via linker plugins, with lld as the linker. Wire in the linker script which fixes LTO
  # arguments via linker plugins.
  "-Clinker=$CARGO_MANIFEST_DIR/tools/scripts/macos-linker.sh",
  "-Clink-arg=-fuse-ld=ld64.lld",

  # Defer LTO to the final linkage step, which happens outside `rustc`.
  "-Clto=thin",
  "-Clinker-plugin-lto",

  # Target the native host CPU.
  "-Ctarget-cpu=apple-m1",

  # Enables NEON support awareness on ARM64 macOS platforms.
  "-Ctarget-feature=+neon,+aes,+crc,+sha2,+sha3,+mte,+sve,+sm4,+sve2,+sve2-aes,+sve2-bitperm,+sve2-sha3,+sve2-sm4",

  # Enforce completely position-independent executables.
  "-Crelocation-model=pie",

  # Enables access to unstable options.
  "-Zunstable-options",

  # Tune for M2, despite compat at M1.
  "-Ztune-cpu=apple-m2",

  # Assigns alignment with macOS build flags in `third_party`; for equivalence to `-mbranch-protection-standard`,
  # see: https://developer.arm.com/documentation/102433/0200/Applying-these-techniques-to-real-code
  "-Zbranch-protection=bti,pac-ret",

  # Thread locals are confined to the inner binary, and are never accessible beyond the VM barrier.
  "-Ztls_model=local-exec",

  # Build the Rust stdlib when we build the runtime, so that flags are applied uniformly.
  "-Zbuild-std",

  # Symbol visibility is set to `hidden` by default.
  "-Zdefault_hidden_visibility=yes",

  # Enable elimination of unused virtual functions if LLVM can prove in the LTO phase that they are never executed.
  "-Zvirtual-function-elimination",
]

[env]
ELIDE_ROOT = { value = ".", relative = true }
INCLUDE = { value = "target/include", relative = true }
LIB = { value = "target/lib", relative = true }
SQLITE3_STATIC = { value = "1" }
BORING_BSSL_PATH = { value = "target/lib/boringssl", relative = true }
BORING_BSSL_INCLUDE_PATH = { value = "target/include", relative = true }
OPENSSL_LIB_DIR = { value = "target/lib", relative = true }
OPENSSL_INCLUDE_DIR = { value = "target/include", relative = true }
SQLITE3_LIB_DIR = { value = "target/lib", relative = true }
SQLITE3_INCLUDE_DIR = { value = "target/include", relative = true }
