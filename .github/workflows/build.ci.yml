name: Framework

on:
  push:
    branches:
      - v3
      - main
      - stable
  pull_request:
    types: [synchronize]

jobs:
  ##
  ## Job: Library Build
  ##

  gradle:
    strategy:
      matrix:
        os: [ubuntu-latest]
        experimental: [false]
        gu-binary: [gu]
        java: [17]
        gvm: [latest]
        include:
          - os: ubuntu-latest
            experimental: false
            gu-binary: gu
            java: 11
            gvm: latest
          - os: macos-latest
            experimental: true
            gu-binary: gu
            java: 17
            gvm: latest
          - os: macos-latest
            experimental: true
            gu-binary: gu
            java: 11
            gvm: latest
          - os: windows-latest
            experimental: true
            gu-binary: gu.cmd
            java: 17
            gvm: latest
          - os: windows-latest
            experimental: true
            gu-binary: gu.cmd
            java: 11
            gvm: latest

    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.experimental }}

    permissions:
      contents: 'read'
      id-token: 'write'
      checks: 'write'
      pull-requests: 'write'

    defaults:
      run:
        shell: bash

    steps:
      ## Setup: GraalVM
      - uses: graalvm/setup-graalvm@v1
        with:
          components: 'native-image'
          version: ${{ matrix.gvm }}
          java-version: ${{ matrix.java }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      ## Setup: Checkout Code
      - uses: actions/checkout@v3

      ## CI: Build
      - name: "üõ†Ô∏è Build"
        uses: gradle/gradle-build-action@v2
        id: gradlebuild
        continue-on-error: ${{ matrix.experimental }}
        env:
          CI: true
        with:
          cache-read-only: ${{ matrix.os != 'ubuntu-latest' }}
          arguments: |
            assemble
            --scan
            --dependency-verification=lenient
            -Pelide.ci=true
            -PbuildSamples=true
            -Pversions.java.language=${{ matrix.java }}

      ## CI: Build
      - name: "Build reports"
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: build-reports-${{ matrix.os }}-java${{ matrix.java }}-gvm-${{ matrix.gvm }}
          path: |
            build/reports/**/*.*

  ##
  ## Job: Testsuite (JVM)
  ##
  tests-jvm:
    runs-on: buildjet-4vcpu-ubuntu-2004
    continue-on-error: true
    permissions:
      contents: 'read'
      id-token: 'write'
      checks: 'write'
      pull-requests: 'write'
    steps:
      ## Setup: Checkout Code
      - uses: actions/checkout@v3

      ## Setup: GraalVM
      - uses: graalvm/setup-graalvm@v1
        with:
          components: 'native-image'
          version: latest
          java-version: 17
          github-token: ${{ secrets.GITHUB_TOKEN }}

      ## Run JVM Tests
      - name: "Run Tests (JVM)"
        uses: gradle/gradle-build-action@v2
        with:
          cache-read-only: false
          arguments: |
            test
            jacocoTestReport
            --scan
            --dependency-verification=strict
            :tools:reports:reports
            -Pelide.ci=true
            -PbuildSamples=true
            -Pversions.java.language=17
            -x nativeCompile
            -x :packages:graalvm:test
            -x :packages:graalvm-js:test
            -x :packages:graalvm-react:test

      ## Collect Reports
      - uses: actions/upload-artifact@v3
        with:
          name: test-reports-jvm
          path: |
            **/build/reports/jacoco/test/jacocoTestReport.xml
            **/build/reports/jacoco/testCodeCoverageReport/jacocoTestReport.xml
            **/build/reports/jacoco/testCodeCoverageReport/testCodeCoverageReport.xml
            tools/reports/build/reports/**/*.xml
            tools/reports/build/test-results/**/*.xml

      ## Annotate test results
      - name: Annotate test results
        uses: elide-tools/action-junit-report@v3
        if: always() # always run even if the previous step fails
        with:
          report_paths: '**/build/test-results/test/TEST-*.xml'

      ## Inflate missing git history
      - name: "Inflate Git history"
        run: git fetch --unshallow

      ## Upload to Codecov (JVM)
      - uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./tools/reports/build/reports/jacoco/testCodeCoverageReport/testCodeCoverageReport.xml
          name: jvm
          fail_ci_if_error: false
          verbose: true

      ## Run Sonar
      - name: "Run Sonar"
        uses: gradle/gradle-build-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          cache-read-only: false
          arguments: |
            jacocoTestReport
            sonarqube
            --scan
            -Pelide.ci=true
            -PbuildSamples=false
            -Pversions.java.language=17
            -x test
            -x jvmTest
            -x nativeCompile
            -x test

  ##
  ## Job: Testsuite (Native)
  ##
  tests-native:
    runs-on: buildjet-16vcpu-ubuntu-2004
    needs: [tests-jvm]
    continue-on-error: true  # temporary
    if: |
      (
        github.ref == 'refs/heads/stable' ||
        contains(github.event.pull_request.labels.*.name, 'ci:build-img-jvm') ||
        contains(github.event.head_commit.message, 'ci:build-img-jvm') ||
        startsWith(github.ref, 'refs/tags/v')
      )
    steps:
      ## Setup: Checkout Code
      - uses: actions/checkout@v3

      ## Setup: GraalVM
      - uses: graalvm/setup-graalvm@v1
        with:
          components: 'native-image'
          version: latest
          java-version: 17
          github-token: ${{ secrets.GITHUB_TOKEN }}

      ## Setup: `gu` components
      - name: Install native-image component
        run: |
          gu install native-image espresso
          gu rebuild-images

      ## Run Native Tests
      - name: "Run Tests (Native)"
        uses: gradle/gradle-build-action@v2
        with:
          cache-read-only: false
          arguments: |
            graalvm:test
            graalvm-js:test
            graalvm-react:test
            :tools:reports:reports
            -Pelide.ci=true
            -Pversions.java.language=17

      ## Collect Reports
      - uses: actions/upload-artifact@v3
        with:
          name: test-reports-native
          path: |
            **/build/reports/jacoco/test/jacocoTestReport.xml
            **/build/reports/jacoco/testCodeCoverageReport/jacocoTestReport.xml
            **/build/reports/jacoco/testCodeCoverageReport/testCodeCoverageReport.xml
            tools/reports/build/reports/**/*.xml
            tools/reports/build/test-results/**/*.xml

  ##
  ## Job: Docker Samples (JVM)
  ##
  docker-jvm:
    runs-on: buildjet-4vcpu-ubuntu-2004
    needs: [gradle]
    if: |
      (
        github.ref == 'refs/heads/stable' ||
        contains(github.event.pull_request.labels.*.name, 'ci:build-img-jvm') ||
        contains(github.event.head_commit.message, 'ci:build-img-jvm') ||
        startsWith(github.ref, 'refs/tags/v')
      )

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      ## Setup: GraalVM
      - uses: graalvm/setup-graalvm@v1
        with:
          components: 'native-image'
          version: latest
          java-version: 17
          github-token: ${{ secrets.GITHUB_TOKEN }}

      ## Setup: QEMU
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      ## Setup: Docker
      - uses: docker/setup-buildx-action@v2
        id: buildx
        with:
          install: true

      ## Setup: Checkout Code
      - uses: actions/checkout@v3

      ## Setup: GCloud Auth
      - id: 'auth'
        name: 'Authorize Service Account'
        uses: 'google-github-actions/auth@v0'
        with:
          credentials_json: '${{ secrets.BUILDBOT_SERVICE_ACCOUNT }}'
          create_credentials_file: true
          export_environment_variables: true
          cleanup_credentials: true

      ## Setup: GCloud SDK
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v0'
        with:
          version: 389.0.0
          project_id: elide-fw

      ## Setup: Docker Auth (GAR)
      - name: "Authorize Docker: GCP"
        run: |
          gcloud auth configure-docker us-docker.pkg.dev

      ## Setup: Docker Auth (GHCR)
      - name: "Authorize Docker: GHCR"
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: elidebot
          password: ${{ secrets.BUILDBOT_GHCR_TOKEN }}

      ## -- Samples -- ##

      ## Docker Samples: Server - Hello World - JVM
      - name: "Samples/Server: Hello World (JVM)"
        uses: gradle/gradle-build-action@v2
        with:
          arguments: |
            -Pelide.ci=true
            -x nativeCompile
            -x test
            :samples:server:helloworld:dockerBuild
            :samples:server:helloworld:dockerPush

      ## Docker Samples: Server - Hello CSS - JVM
      - name: "Samples/Server: Hello CSS (JVM)"
        uses: gradle/gradle-build-action@v2
        with:
          arguments: |
            -Pelide.ci=true
            -x nativeCompile
            -x test
            :samples:server:hellocss:dockerBuild
            :samples:server:hellocss:dockerPush

      ## Docker Samples: Fullstack - Basic - JVM
      - name: "Samples/Fullstack: Basic (JVM)"
        uses: gradle/gradle-build-action@v2
        with:
          arguments: |
            -Pelide.ci=true
            -x nativeCompile
            -x test
            :samples:fullstack:basic:server:dockerBuild
            :samples:fullstack:basic:server:dockerPush

      ## Docker Samples: Fullstack - React - JVM
      - name: "Samples/Fullstack: React (JVM)"
        uses: gradle/gradle-build-action@v2
        with:
          arguments: |
            -Pelide.ci=true
            -x nativeCompile
            -x test
            :samples:fullstack:react:server:dockerBuild
            :samples:fullstack:react:server:dockerPush

      ## Docker Samples: Fullstack - SSR - JVM
      - name: "Samples/Fullstack: Vanilla SSR (JVM)"
        uses: gradle/gradle-build-action@v2
        with:
          arguments: |
            -Pelide.ci=true
            -x nativeCompile
            -x test
            :samples:fullstack:ssr:server:dockerBuild
            :samples:fullstack:ssr:server:dockerPush

      ## Docker Samples: Fullstack - React SSR - JVM
      - name: "Samples/Fullstack: React SSR (JVM)"
        uses: gradle/gradle-build-action@v2
        with:
          arguments: |
            -Pelide.ci=true
            -x nativeCompile
            -x test
            :samples:fullstack:react-ssr:server:dockerBuild
            :samples:fullstack:react-ssr:server:dockerPush


  ##
  ## Job: Docker Samples (JVM)
  ##

  docker-native:
    runs-on: buildjet-16vcpu-ubuntu-2004
    needs: [gradle]
    if: |
      (
        github.ref == 'refs/heads/stable' ||
        contains(github.event.pull_request.labels.*.name, 'ci:build-img-native') ||
        contains(github.event.head_commit.message, 'ci:build-img-native') ||
        startsWith(github.ref, 'refs/tags/v')
      )

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      ## Setup: GraalVM
      - uses: graalvm/setup-graalvm@v1
        with:
          components: 'native-image'
          version: latest
          java-version: 17
          github-token: ${{ secrets.GITHUB_TOKEN }}

      ## Setup: QEMU
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      ## Setup: Docker
      - uses: docker/setup-buildx-action@v2
        id: buildx
        with:
          install: true

      ## Setup: Checkout Code
      - uses: actions/checkout@v3

      ## Setup: `gu` components
      - name: Install native-image component
        run: |
          gu install native-image espresso
          gu rebuild-images

      ## Setup: GCloud Auth
      - id: 'auth'
        name: 'Authorize Service Account'
        uses: 'google-github-actions/auth@v0'
        with:
          credentials_json: '${{ secrets.BUILDBOT_SERVICE_ACCOUNT }}'
          create_credentials_file: true
          export_environment_variables: true
          cleanup_credentials: true

      ## Setup: GCloud SDK
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v0'
        with:
          version: 389.0.0
          project_id: elide-fw

      ## Setup: Docker Auth (GAR)
      - name: "Authorize Docker: GCP"
        run: |
          gcloud auth configure-docker us-docker.pkg.dev

      ## Setup: Docker Auth (GHCR)
      - name: "Authorize Docker: GHCR"
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: elidebot
          password: ${{ secrets.BUILDBOT_GHCR_TOKEN }}

      ## -- Samples -- ##

      ## Docker Samples: Server - Hello World - Native
      - name: "Samples/Server: Hello World (Native)"
        uses: gradle/gradle-build-action@v2
        with:
          arguments: |
            -Pelide.ci=true
            -x test
            :samples:server:helloworld:dockerBuildNative
            :samples:server:helloworld:dockerPushNative

      ## Docker Samples: Server - Hello CSS - Native
      - name: "Samples/Server: Hello CSS (Native)"
        uses: gradle/gradle-build-action@v2
        with:
          arguments: |
            -Pelide.ci=true
            -x test
            :samples:server:hellocss:dockerBuildNative
            :samples:server:hellocss:dockerPushNative

      ## Docker Samples: Fullstack - Basic - Native
      - name: "Samples/Fullstack: Basic (Native)"
        uses: gradle/gradle-build-action@v2
        with:
          arguments: |
            -Pelide.ci=true
            -x test
            :samples:fullstack:basic:server:dockerBuildNative
            :samples:fullstack:basic:server:dockerPushNative

      ## Docker Samples: Fullstack - React - Native
      - name: "Samples/Fullstack: React (Native)"
        uses: gradle/gradle-build-action@v2
        with:
          arguments: |
            -Pelide.ci=true
            -x test
            :samples:fullstack:react:server:dockerBuildNative
            :samples:fullstack:react:server:dockerPushNative

      ## Docker Samples: Fullstack - SSR - Native
      - name: "Samples/Fullstack: Vanilla SSR (Native)"
        uses: gradle/gradle-build-action@v2
        with:
          arguments: |
            -Pelide.ci=true
            -x test
            :samples:fullstack:ssr:server:dockerBuildNative
            :samples:fullstack:ssr:server:dockerPushNative

      ## Docker Samples: Fullstack - React SSR - Native
      - name: "Samples/Fullstack: React SSR (Native)"
        uses: gradle/gradle-build-action@v2
        with:
          arguments: |
            -Pelide.ci=true
            -x test
            :samples:fullstack:react-ssr:server:dockerBuildNative
            :samples:fullstack:react-ssr:server:dockerPushNative
