#
# Copyright (c) 2024 Elide Technologies, Inc.
#
# Licensed under the MIT license (the "License"); you may not use this file except in compliance
# with the License. You may obtain a copy of the License at
#
# https://opensource.org/license/mit/
#
# Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
# an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under the License.
#

name: Framework

"on":
  workflow_dispatch:
    inputs:
      ## Input: Enable Native Targets
      native:
        description: "Native"
        type: boolean
        default: false

      ## Input: Enable Release Targets
      release:
        description: "Release"
        type: boolean
        default: false

      ## Input: Publish Libraries
      publish:
        description: "Publish"
        type: boolean
        default: false

      ## Input: Deploy Samples
      deploy:
        description: "Deploy"
        type: boolean
        default: false

      ## Input: Enable Container Targets
      containers:
        description: "Containers"
        type: boolean
        default: false

      ## Input: Enable Provenance
      provenance:
        description: "Provenance"
        type: boolean
        default: true

      ## Input: Enable macOS
      macos:
        description: "Enable macOS"
        type: boolean
        default: false

      ## Input: Enable Windows
      windows:
        description: "Enable Windows"
        type: boolean
        default: false

      ## Input: Runner
      runner:
        description: "Runner"
        type: string
        default: ubuntu-latest

  workflow_call:
    inputs:
      native:
        description: "Native"
        type: boolean
        default: false
      release:
        description: "Release"
        type: boolean
        default: false
      containers:
        description: "Containers"
        type: boolean
        default: false
      publish:
        description: "Publish"
        type: boolean
        default: false
      deploy:
        description: "Deploy"
        type: boolean
        default: false
      provenance:
        description: "Provenance"
        type: boolean
        default: true
      macos:
        description: "Enable macOS"
        type: boolean
        default: false
      windows:
        description: "Enable Windows"
        type: boolean
        default: false
      runner:
        description: "Runner to use"
        type: string
        default: ubuntu-latest
      runner_large:
        description: "Runner (Large)"
        type: string
        default: ubuntu-latest-8-cores
      runner_large_macos:
        description: "Runner (Large, macOS)"
        type: string
        default: macos-13-xl
      runner_large_windows:
        description: "Runner (Large, Windows)"
        type: string
        default: windows-latest-8-cores

    secrets:
      BUILDLESS_APIKEY:
        required: false
        description: "Buildless API Key"
      BUILDBOT_SERVICE_ACCOUNT:
        required: false
        description: "GCP Service Account"
      BUILDBOT_GHCR_TOKEN:
        required: false
        description: "GHCR Token"
      CODECOV_TOKEN:
        required: false
        description: "Codecov token"
      GRADLE_CONFIGURATION_KEY:
        required: false
        description: "Gradle cache key"

env:
  BUILDLESS_APIKEY: ${{ secrets.BUILDLESS_APIKEY }}
  # SCCACHE_WEBDAV_ENDPOINT: "https://sccache.less.build"
  # SCCACHE_WEBDAV_USERNAME: "apikey"
  # SCCACHE_WEBDAV_PASSWORD: ${{ secrets.BUILDLESS_APIKEY }}
  # SCCACHE_REDIS: "rediss://apikey:${{ secrets.BUILDLESS_APIKEY }}@redis.less.build:6380"

permissions:
  contents: read

jobs:
  ##
  ## Job: Library Build
  ##
  gradle:
    strategy:
      fail-fast: false
      matrix:
        os: [Ubuntu]
        mode: ["Strict"]
        machine:
          - ${{ inputs.runner }}
        provenance: [true]

        # macOS build is disabled until it can be made dynamic.
        #
        #  include:
        #    - os: macOS
        #      mode: Strict
        #      machine: macos-13
        #      provenance: false

    name: "Build (${{ matrix.os }})"
    runs-on: ${{ matrix.machine }}
    continue-on-error: ${{ matrix.mode != 'Strict' }}

    permissions:
      contents: "write"
      actions: "read"
      id-token: "write"
      checks: "write"
      pull-requests: "write"
      packages: "read"
      security-events: "write"

    defaults:
      run:
        shell: bash

    outputs:
      hashes: ${{ steps.hash.outputs.hashes }}

    steps:
      - name: "Setup: Apt Dependencies"
        run: sudo apt-get install -y libtool-bin build-essential libc6-dev
      - name: "Setup: Harden Runner"
        uses: step-security/harden-runner@17d0e2bd7d51742c71671bd19fa12bdc9d40a3d6 # v2.8.1
        with:
          disable-sudo: false
          egress-policy: audit
          allowed-endpoints: >
            agent.less.build:443
            androidx.dev:443
            api.github.com:443
            cli.less.build:443
            d3ob9fqp587by1.cloudfront.net:443
            dl.google.com:443
            dl.less.build:443
            download-cdn.jetbrains.com:443
            download.jetbrains.com:443
            download.oracle.com:443
            edge.pkg.st:443
            maven.elide.dev:443
            github.com:443
            global.less.build:443
            gradle.pkg.st:443
            jpms.pkg.st:443
            keys.openpgp.org:443
            keyserver.ubuntu.com:443
            local.less.build:443
            maven.pkg.jetbrains.space:443
            maven.pkg.st:443
            nodejs.org:443
            npm.pkg.st:443
            objects.githubusercontent.com:443
            pgp.mit.edu:443
            plugins-artifacts.gradle.org:443
            plugins.gradle.org:443
            registry.npmjs.org:443
            repo.maven.apache.org:443
            scans-in.gradle.com:443
            services.gradle.org:443
      - name: "Setup: Clear Tooling Cache"
        run: rm -rf /opt/hostedtoolcache
      - name: "Setup: Checkout"
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          submodules: true
          persist-credentials: false
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: "Setup: Rust"
        uses: actions-rust-lang/setup-rust-toolchain@1fbea72663f6d4c03efaab13560c8a24cfd2a7cc # v1.9.0
        with:
          toolchain: nightly
          components: clippy,rustfmt
          rustflags: ""
      - name: "Setup: SCCache"
        uses: mozilla-actions/sccache-action@89e9040de88b577a072e3760aaf59f585da083af # v0.0.5
      - name: "Setup: Rust Caching"
        run: |
          echo "SCCACHE_GHA_ENABLED=true" >> $GITHUB_ENV
          echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV
      - name: "Setup: GraalVM (Java 22)"
        uses: graalvm/setup-graalvm@2911b2304bee2c2f59b9a67bf45f025a6b6de4b1 # v1.2.2
        with:
          distribution: "graalvm"
          java-version: "22"
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - name: "Setup: Python (3.12)"
        uses: actions/setup-python@39cd14951b08e74b54015e9e001cdefcf80e669f # v5.1.1
        with:
          python-version: 3.12
      - name: "Setup: Buildless"
        if: false  # temporarily disabled
        uses: buildless/setup@30e82389418c7f17046606183bc4c78b2c8913e0 # v1.0.2
      - name: "Setup: Node"
        uses: actions/setup-node@1e60f620b9541d16bece96c5465dc8ee9832be0b # v4.0.3
        with:
          node-version: 22
      - name: "Setup: PNPM"
        uses: pnpm/action-setup@fe02b34f77f8bc703788d5817da081398fad5dd2 # v4.0.0
        with:
          version: "9.2.0"
          run_install: |
            - recursive: true
              args: [--frozen-lockfile, --strict-peer-dependencies]
      - name: "Setup: LLVM 18"
        run: |
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh 18 all
          export LLVM_PATH=/usr/lib/llvm-18
          export PATH="$LLVM_PATH/bin:$PATH"
          export LD_LIBRARY_PATH="$LLVM_PATH/lib:$LD_LIBRARY_PATH"
          export LLVM_CONFIG="$LLVM_PATH/bin/llvm-config"
          echo LLVM_PATH=$LLVM_PATH >> $GITHUB_ENV
          echo LD_LIBRARY_PATH=$LD_LIBRARY_PATH >> $GITHUB_ENV
          echo LLVM_CONFIG=$LLVM_CONFIG >> $GITHUB_ENV
          echo PATH=$PATH >> $GITHUB_ENV
      - name: "Setup: Dependencies"
        run: |
          cargo install cargo-fuzz cargo-insta rustfilt
          pnpm install -g yarn@1.22.19
          python -m pip install uv
          echo "Setting up venv..."
          uv venv
          echo "Installing dependencies via Pip..."
          uv pip install -r requirements.txt
          echo "Activating venv..."
          . .venv/bin/activate
          echo PATH=$PATH >> $GITHUB_ENV
      - name: "Setup: Gradle"
        uses: gradle/actions/setup-gradle@dbbdc275be76ac10734476cc723d82dfe7ec6eda # v3.4.2
        id: gradlebuild
        continue-on-error: ${{ matrix.mode == 'labs' }}
        env:
          CI: true
          BUILDLESS_APIKEY: ${{ secrets.BUILDLESS_APIKEY }}
        with:
          cache-read-only: false
          cache-encryption-key: ${{ secrets.GRADLE_CONFIGURATION_KEY }}
          dependency-graph: generate-and-submit
          gradle-home-cache-cleanup: true
          gradle-home-cache-includes: binaryen
            caches
            jdks
            native
            native-build-tools
            nodejs
            notifications
            wrapper
            yarn
      - name: "Build Environment"
        run: make info 2>&1 | tee build-info.txt
      - name: "üõ†Ô∏è Build Packages"
        env:
          CI: true
          BUILDLESS_APIKEY: ${{ secrets.BUILDLESS_APIKEY }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          TEST_EXCEPTIONS: true
        run: |
          make setup natives -j`nproc` && ./gradlew \
            assemble \
            compileKotlin \
            -x check \
            -x test \
            -x jvmTest \
            -x jsTest \
            -x jsBrowserTest \
            --scan \
            --build-cache \
            --no-daemon \
            --warning-mode=none \
            --dependency-verification=lenient \
            --stacktrace \
            -Pelide.ci=true \
            -PbuildSamples=false \
            -PbuildDocs=false
      - name: "Artifact: Build Outputs"
        uses: actions/upload-artifact@0b2256b8c012f0828dc542b3febcab082c67f72b # v4.3.4
        with:
          name: elide-framework
          path: |
            build-info.txt
            build/libs/**/*.*
            packages/*/build/libs/*.*
            packages/proto/*/build/libs/*.*
            tools/elide-build/build/**/*.*
      - name: "Artifact: Provenance Subject"
        id: hash
        if: ${{ matrix.os == 'ubuntu' && inputs.provenance }}
        run: |
          echo "hashes=$(sha256sum ./packages/*/build/libs/* | base64 -w0)" >> "$GITHUB_OUTPUT"

  ## Report: Provenance
  provenance:
    name: Provenance
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v2.0.0
    if: inputs.provenance
    needs: [gradle]
    permissions:
      actions: "read"
      id-token: "write"
      contents: "write"
    with:
      base64-subjects: "${{ needs.gradle.outputs.hashes }}"
      upload-assets: ${{ github.ref == 'refs/heads/stable' || github.ref == 'refs/heads/main' || startsWith(github.ref, 'release/') || startsWith(github.ref, 'refs/tags/v') }}
