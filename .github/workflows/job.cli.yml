#
# Copyright (c) 2024 Elide Technologies, Inc.
#
# Licensed under the MIT license (the "License"); you may not use this file except in compliance
# with the License. You may obtain a copy of the License at
#
# https://opensource.org/license/mit/
#
# Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
# an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under the License.
#

name: CLI

"on":
  workflow_dispatch:
    inputs:
      ## Input: Version Stamp
      version:
        description: "Version"
        type: string
        default: "1.0.0-SNAPSHOT"

      ## Input: Enable Native Targets
      native:
        description: "Native"
        type: boolean
        default: false

      ## Input: Enable Release Targets
      release:
        description: "Release"
        type: boolean
        default: false

      ## Input: Enable macOS
      macos:
        description: "Enable macOS"
        type: boolean
        default: false

      ## Input: Enable Windows
      windows:
        description: "Enable Windows"
        type: boolean
        default: false

      ## Input: Runner
      runner:
        description: "Runner"
        type: string
        default: ubuntu-latest

      ## Input: Runner (Large)
      runner_large:
        description: "Runner (Large)"
        type: string
        default: ubuntu-latest-8-cores

      ## Input: Runner (Large, macOS)
      runner_large_macos:
        description: "Runner (Large, macOS)"
        type: string
        default: macos-13-xl

      ## Input: Runner (Large, Windows)
      runner_large_windows:
        description: "Runner (Large, Windows)"
        type: string
        default: windows-latest-8-cores

  workflow_call:
    inputs:
      version:
        description: "Version"
        type: string
        default: "1.0.0-SNAPSHOT"
      native:
        description: "Native"
        type: boolean
        default: false
      release:
        description: "Release"
        type: boolean
        default: false
      macos:
        description: "Enable macOS"
        type: boolean
        default: false
      windows:
        description: "Enable Windows"
        type: boolean
        default: false
      runner:
        description: "Runner to use"
        type: string
        default: ubuntu-latest
      runner_large:
        description: "Runner (Large)"
        type: string
        default: ubuntu-latest-8-cores
      runner_large_macos:
        description: "Runner (Large, macOS)"
        type: string
        default: macos-13-xl
      runner_large_windows:
        description: "Runner (Large, Windows)"
        type: string
        default: windows-latest-8-cores

    secrets:
      BUILDBOT_SERVICE_ACCOUNT:
        required: false
        description: "GCP Service Account"
      GRADLE_CONFIGURATION_KEY:
        required: false
        description: "Gradle cache key"

permissions:
  contents: read

env:
  CC: clang-19
  LD: clang-19
  CXX: clang++-19
  AR: llvm-ar-19
  RANLIB: llvm-ranlib-19
  BUILDLESS_APIKEY: ${{ secrets.BUILDLESS_APIKEY }}

jobs:
  ##
  ## Job: CLI (Native Debug)
  ##
  cli-build-debug:
    name: "CLI: Native (Debug, ${{ matrix.os }}, ${{ matrix.arch || 'amd64' }})"
    runs-on: ${{ matrix.runner }}
    continue-on-error: true
    if: inputs.native
    #    if: |
    #      (
    #        github.ref == 'refs/heads/stable' ||
    #        startsWith(github.ref, 'release/') ||
    #        contains(github.event.pull_request.labels.*.name, 'ci:build-cli') ||
    #        contains(github.event.head_commit.message, 'ci:build-cli')
    #      )

    strategy:
      fail-fast: false
      matrix:
        os: ["Linux"]
        arch: ["amd64"]
        runner: ["${{ inputs.runner_large }}"]
        labs: [false]
        tag: [linux-amd64]
        include:
          - os: Linux
            runner: ${{ inputs.runner_large }}
            arch: amd64
            labs: false
            tag: linux-amd64
          - os: macOS
            runner: ${{ inputs.runner_large_macos }}
            arch: amd64
            labs: false
            tag: darwin-amd64

    steps:
      - name: "Setup: Apt Dependencies"
        if: contains(matrix.runner, 'linux')
        run: sudo apt-get install -y libtool-bin build-essential libc6-dev
      - name: "Setup: Harden Runner"
        uses: step-security/harden-runner@4d991eb9b905ef189e4c376166672c3f2f230481 # v2.11.0
        with:
          egress-policy: audit
          disable-sudo: ${{ contains(matrix.runner, 'linux') }}
      - name: "Setup: Checkout"
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          submodules: true
          persist-credentials: false
      - id: "auth"
        name: "Setup: Authorize Service Account"
        uses: google-github-actions/auth@71f986410dfbc7added4569d411d040a91dc6935 # v2.1.8
        with:
          credentials_json: "${{ secrets.BUILDBOT_SERVICE_ACCOUNT }}"
          create_credentials_file: true
          export_environment_variables: true
          cleanup_credentials: true
      - name: "Setup: MSVC"
        if: contains(matrix.runner, 'windows')
        uses: ilammy/msvc-dev-cmd@0b201ec74fa43914dc39ae48a89fd1d8cb592756 # v1.13.0
        with:
          arch: ${{ matrix.arch }}
      - name: "Setup: GraalVM (Java 23)"
        uses: graalvm/setup-graalvm@01ed653ac833fe80569f1ef9f25585ba2811baab # v1.3.3
        with:
          distribution: "graalvm"
          java-version: "23"
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - name: "Setup: Bun"
        uses: oven-sh/setup-bun@4bc047ad259df6fc24a6c9b0f9a0cb08cf17fbe5 # v2.0.1
        with:
          bun-version-file: .bun-version
      - name: "Setup: PNPM"
        uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4.1.0
        with:
          version: "10.5.2"
          run_install: |
            - recursive: true
              args: [--frozen-lockfile, --strict-peer-dependencies]
      - name: "Setup: Node"
        uses: actions/setup-node@1d0ff469b7ec7b3cb9d8673fde0c81c44821de2a # v4.2.0
        with:
          node-version: 23
          cache: "pnpm"
      - name: "Setup: Yarn"
        run: pnpm install -g yarn@1.22.19
      - name: "Setup: Artifacts"
        uses: actions/download-artifact@cc203385981b70ca67e1cc392babf9cc229d5806 # v4.1.9
        continue-on-error: true
        with:
          merge-multiple: true
      - name: "Build: CLI (Native/Debug)"
        uses: gradle/actions/setup-gradle@94baf225fe0a508e581a564467443d0e2379123b # v4.3.0
        env:
          CI: true
          BUILDLESS_APIKEY: ${{ secrets.BUILDLESS_APIKEY }}
        with:
          cache-read-only: true
          cache-encryption-key: ${{ secrets.GRADLE_CONFIGURATION_KEY }}
          dependency-graph: disabled
      - name: "Build: Natives"
        run: make -C third_party && cargo build
      - name: "Build: CLI (Native/Debug)"
        run: |
          ./gradlew \
            :packages:cli:nativeCompile \
            -Prelease=false \
            -PbuildMode=dev \
            --scan \
            --no-daemon \
            --warning-mode=none \
            --dependency-verification=lenient \
            -Pelide.ci=true \
            -PbuildSamples=false \
            -PbuildDocs=false
      - name: "Post-process: Compress (xz)"
        if: success() && !contains(matrix.runner, 'windows')
        run: |
          pushd packages/cli/build/native/nativeCompile;
          xz -9kv elide;
          popd;
          echo "Binary compressed.";
      - name: "Artifacts: Debug Binary (Unix)"
        uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1 # v4.6.1
        if: success() && !contains(matrix.runner, 'windows')
        with:
          name: cli-debug-${{ matrix.tag }}
          path: |
            ./packages/cli/build/native/nativeCompile/elide.xz
      - name: "Artifacts: Debug Binary (Windows)"
        uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1 # v4.6.1
        if: success() && contains(matrix.runner, 'windows')
        with:
          name: cli-debug-${{ matrix.tag }}
          path: |
            ./packages/cli/build/native/nativeCompile/elide
      - name: "Artifacts: Dashboard Dump"
        uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1 # v4.6.1
        if: success()
        with:
          name: cli-debug-report-${{ matrix.tag }}
          path: |
            ./packages/cli/build/native/nativeCompile/elide-tool.bgv

  ##
  ## Job: CLI (Native Release)
  ##
  cli-build-release:
    name: "CLI: Native (Release, ${{ matrix.os }}, ${{ matrix.arch || 'amd64' }})"
    runs-on: ${{ matrix.runner }}
    continue-on-error: true
    if: inputs.native && inputs.release
    #    if: |
    #      (
    #        github.ref == 'refs/heads/stable' ||
    #        contains(github.event.pull_request.labels.*.name, 'ci:build-cli') ||
    #        contains(github.event.head_commit.message, 'ci:build-cli')
    #      )

    strategy:
      fail-fast: false
      matrix:
        os: ["Linux"]
        arch: ["amd64"]
        runner:
          - ${{ inputs.runner_large }}
        labs: [false]
        tag: [linux-amd64]
        include:
          - os: Linux
            runner: ${{ inputs.runner_large }}
            arch: amd64
            labs: false
            tag: linux-amd64
          - os: macOS
            runner: ${{ inputs.runner_large_macos }}
            arch: amd64
            labs: false
            tag: darwin-amd64
          - os: Windows
            runner: ${{ inputs.runner_large_windows }}
            arch: amd64
            tag: windows-amd64
            labs: true

    steps:
      - name: "Setup: Apt Dependencies"
        if: contains(matrix.runner, 'linux')
        run: sudo apt-get install -y libtool-bin build-essential libc6-dev
      - name: "Setup: Harden Runner"
        uses: step-security/harden-runner@4d991eb9b905ef189e4c376166672c3f2f230481 # v2.11.0
        with:
          egress-policy: audit
          disable-sudo: ${{ contains(matrix.runner, 'linux') }}
      - name: "Setup: Checkout"
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          submodules: true
          persist-credentials: false
      - id: "auth"
        name: "Setup: Authorize Service Account"
        uses: google-github-actions/auth@71f986410dfbc7added4569d411d040a91dc6935 # v2.1.8
        with:
          credentials_json: "${{ secrets.BUILDBOT_SERVICE_ACCOUNT }}"
          create_credentials_file: true
          export_environment_variables: true
          cleanup_credentials: true
      - name: "Setup: MSVC"
        if: contains(matrix.runner, 'windows')
        uses: ilammy/msvc-dev-cmd@0b201ec74fa43914dc39ae48a89fd1d8cb592756 # v1.13.0
        with:
          arch: ${{ matrix.arch }}
      - name: "Setup: GraalVM (Java 23)"
        uses: graalvm/setup-graalvm@01ed653ac833fe80569f1ef9f25585ba2811baab # v1.3.3
        with:
          distribution: "graalvm"
          java-version: "23"
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - name: "Setup: Node"
        uses: actions/setup-node@1d0ff469b7ec7b3cb9d8673fde0c81c44821de2a # v4.2.0
        with:
          node-version: 23
      - name: "Setup: Bun"
        uses: oven-sh/setup-bun@4bc047ad259df6fc24a6c9b0f9a0cb08cf17fbe5 # v2.0.1
        with:
          bun-version-file: .bun-version
      - name: "Setup: PNPM"
        uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4.1.0
        with:
          version: "10.5.2"
          run_install: |
            - recursive: true
              args: [--frozen-lockfile, --strict-peer-dependencies]
      - name: "Setup: Yarn"
        run: pnpm install -g yarn@1.22.19
      - name: "Setup: Artifacts"
        uses: actions/download-artifact@cc203385981b70ca67e1cc392babf9cc229d5806 # v4.1.9
        continue-on-error: true
        with:
          merge-multiple: true
      - name: "Setup: Gradle"
        uses: gradle/actions/setup-gradle@94baf225fe0a508e581a564467443d0e2379123b # v4.3.0
        env:
          CI: true
        with:
          cache-read-only: true
          cache-encryption-key: ${{ secrets.GRADLE_CONFIGURATION_KEY }}
          dependency-graph: disabled
      - name: "Build: Natives"
        run: make -C third_party RELEASE=yes && cargo build --release
      - name: "Build: CLI (Native/Release)"
        run: |
          ./gradlew \
            :packages:cli:nativeOptimizedCompile \
            -Prelease=true \
            -Pelide.buildMode=release \
            -PbuildMode=release \
            -Pelide.stamp=true \
            --scan \
            --no-daemon \
            --warning-mode=none \
            --dependency-verification=lenient \
            -Pelide.ci=true \
            -PbuildSamples=false \
            -PbuildDocs=false \
            -Pversion=${{ inputs.version }} \
            -Pelide.version=${{ inputs.version }}
      - name: "Artifacts: Release Binary (Posix)"
        uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1 # v4.6.1
        if: success() && contains(matrix.runner, 'windows') != true
        with:
          name: cli-release-${{ matrix.tag }}
          path: |
            ./packages/cli/build/nativeOptimizedCompile/elide-${{ inputs.version }}-${{ matrix.tag }}.tgz
            ./packages/cli/build/nativeOptimizedCompile/elide-${{ inputs.version }}-${{ matrix.tag }}.txz
            ./packages/cli/build/nativeOptimizedCompile/elide-${{ inputs.version }}-${{ matrix.tag }}.*.tgz
            ./packages/cli/build/nativeOptimizedCompile/elide-${{ inputs.version }}-${{ matrix.tag }}.*.txz
      - name: "Artifacts: Release Binary (Windows)"
        uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1 # v4.6.1
        if: success() && contains(matrix.runner, 'windows')
        with:
          name: cli-release-${{ matrix.tag }}
          path: |
            ./packages/cli/build/nativeOptimizedCompile/elide-${{ inputs.version }}-${{ matrix.tag }}.zip
            ./packages/cli/build/nativeOptimizedCompile/elide-${{ inputs.version }}-${{ matrix.tag }}.*.zip
