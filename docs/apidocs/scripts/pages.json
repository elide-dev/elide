[{"name":"GENERIC","description":"elide.server.assets.AssetType.GENERIC","location":"packages/server/elide.server.assets/-asset-type/-g-e-n-e-r-i-c/index.html","searchKeys":["GENERIC","GENERIC","elide.server.assets.AssetType.GENERIC"]},{"name":"SCRIPT","description":"elide.server.assets.AssetType.SCRIPT","location":"packages/server/elide.server.assets/-asset-type/-s-c-r-i-p-t/index.html","searchKeys":["SCRIPT","SCRIPT","elide.server.assets.AssetType.SCRIPT"]},{"name":"STYLESHEET","description":"elide.server.assets.AssetType.STYLESHEET","location":"packages/server/elide.server.assets/-asset-type/-s-t-y-l-e-s-h-e-e-t/index.html","searchKeys":["STYLESHEET","STYLESHEET","elide.server.assets.AssetType.STYLESHEET"]},{"name":"TEXT","description":"elide.server.assets.AssetType.TEXT","location":"packages/server/elide.server.assets/-asset-type/-t-e-x-t/index.html","searchKeys":["TEXT","TEXT","elide.server.assets.AssetType.TEXT"]},{"name":"abstract class BaseController : ElideController","description":"elide.server.controller.BaseController","location":"packages/server/elide.server.controller/-base-controller/index.html","searchKeys":["BaseController","abstract class BaseController : ElideController","elide.server.controller.BaseController"]},{"name":"abstract class BaseResponseHandler<ResponseBody> : ResponseHandler<ResponseBody> ","description":"elide.server.BaseResponseHandler","location":"packages/server/elide.server/-base-response-handler/index.html","searchKeys":["BaseResponseHandler","abstract class BaseResponseHandler<ResponseBody> : ResponseHandler<ResponseBody> ","elide.server.BaseResponseHandler"]},{"name":"abstract class BuiltinController : PageController, StatusEnabledController","description":"elide.server.controller.builtin.BuiltinController","location":"packages/server/elide.server.controller.builtin/-builtin-controller/index.html","searchKeys":["BuiltinController","abstract class BuiltinController : PageController, StatusEnabledController","elide.server.controller.builtin.BuiltinController"]},{"name":"abstract class PageController : BaseController","description":"elide.server.controller.PageController","location":"packages/server/elide.server.controller/-page-controller/index.html","searchKeys":["PageController","abstract class PageController : BaseController","elide.server.controller.PageController"]},{"name":"abstract class PageWithProps<State> : PageController","description":"elide.server.controller.PageWithProps","location":"packages/server/elide.server.controller/-page-with-props/index.html","searchKeys":["PageWithProps","abstract class PageWithProps<State> : PageController","elide.server.controller.PageWithProps"]},{"name":"abstract fun assets(): AssetManager","description":"elide.server.controller.ElideController.assets","location":"packages/server/elide.server.controller/-elide-controller/assets.html","searchKeys":["assets","abstract fun assets(): AssetManager","elide.server.controller.ElideController.assets"]},{"name":"abstract fun context(): ApplicationContext","description":"elide.server.controller.ElideController.context","location":"packages/server/elide.server.controller/-elide-controller/context.html","searchKeys":["context","abstract fun context(): ApplicationContext","elide.server.controller.ElideController.context"]},{"name":"abstract fun findByModuleId(moduleId: AssetModuleId): ServerAsset?","description":"elide.server.assets.AssetResolver.findByModuleId","location":"packages/server/elide.server.assets/-asset-resolver/find-by-module-id.html","searchKeys":["findByModuleId","abstract fun findByModuleId(moduleId: AssetModuleId): ServerAsset?","elide.server.assets.AssetResolver.findByModuleId"]},{"name":"abstract fun findLoadManifest(candidates: List<Pair<ManifestFormat, String>>): AssetBundle?","description":"elide.server.assets.AssetManifestLoader.findLoadManifest","location":"packages/server/elide.server.assets/-asset-manifest-loader/find-load-manifest.html","searchKeys":["findLoadManifest","abstract fun findLoadManifest(candidates: List<Pair<ManifestFormat, String>>): AssetBundle?","elide.server.assets.AssetManifestLoader.findLoadManifest"]},{"name":"abstract fun findManifest(candidates: List<Pair<ManifestFormat, String>>): Pair<ManifestFormat, InputStream>?","description":"elide.server.assets.AssetManifestLoader.findManifest","location":"packages/server/elide.server.assets/-asset-manifest-loader/find-manifest.html","searchKeys":["findManifest","abstract fun findManifest(candidates: List<Pair<ManifestFormat, String>>): Pair<ManifestFormat, InputStream>?","elide.server.assets.AssetManifestLoader.findManifest"]},{"name":"abstract fun linkForAsset(module: AssetModuleId, overrideType: AssetType? = null): String","description":"elide.server.assets.AssetManager.linkForAsset","location":"packages/server/elide.server.assets/-asset-manager/link-for-asset.html","searchKeys":["linkForAsset","abstract fun linkForAsset(module: AssetModuleId, overrideType: AssetType? = null): String","elide.server.assets.AssetManager.linkForAsset"]},{"name":"abstract fun pointerTo(moduleId: AssetModuleId): AssetPointer?","description":"elide.server.assets.AssetReader.pointerTo","location":"packages/server/elide.server.assets/-asset-reader/pointer-to.html","searchKeys":["pointerTo","abstract fun pointerTo(moduleId: AssetModuleId): AssetPointer?","elide.server.assets.AssetReader.pointerTo"]},{"name":"abstract fun resolve(path: String): ServerAsset?","description":"elide.server.assets.AssetResolver.resolve","location":"packages/server/elide.server.assets/-asset-resolver/resolve.html","searchKeys":["resolve","abstract fun resolve(path: String): ServerAsset?","elide.server.assets.AssetResolver.resolve"]},{"name":"abstract fun service(): ListeningExecutorService","description":"elide.server.runtime.AppExecutor.service","location":"packages/server/elide.server.runtime/-app-executor/service.html","searchKeys":["service","abstract fun service(): ListeningExecutorService","elide.server.runtime.AppExecutor.service"]},{"name":"abstract suspend fun handle(request: HttpRequest<out Any>): RawResponse","description":"elide.server.controller.builtin.BuiltinController.handle","location":"packages/server/elide.server.controller.builtin/-builtin-controller/handle.html","searchKeys":["handle","abstract suspend fun handle(request: HttpRequest<out Any>): RawResponse","elide.server.controller.builtin.BuiltinController.handle"]},{"name":"abstract suspend fun readAsync(descriptor: ServerAsset, request: HttpRequest<*>): Deferred<RenderedAsset>","description":"elide.server.assets.AssetReader.readAsync","location":"packages/server/elide.server.assets/-asset-reader/read-async.html","searchKeys":["readAsync","abstract suspend fun readAsync(descriptor: ServerAsset, request: HttpRequest<*>): Deferred<RenderedAsset>","elide.server.assets.AssetReader.readAsync"]},{"name":"abstract suspend fun render(): Publisher<R>","description":"elide.server.StreamingSuspensionRenderer.render","location":"packages/server/elide.server/-streaming-suspension-renderer/render.html","searchKeys":["render","abstract suspend fun render(): Publisher<R>","elide.server.StreamingSuspensionRenderer.render"]},{"name":"abstract suspend fun render(): R","description":"elide.server.SuspensionRenderer.render","location":"packages/server/elide.server/-suspension-renderer/render.html","searchKeys":["render","abstract suspend fun render(): R","elide.server.SuspensionRenderer.render"]},{"name":"abstract suspend fun renderAssetAsync(request: HttpRequest<*>, asset: ServerAsset): Deferred<StreamedAssetResponse>","description":"elide.server.assets.AssetManager.renderAssetAsync","location":"packages/server/elide.server.assets/-asset-manager/render-asset-async.html","searchKeys":["renderAssetAsync","abstract suspend fun renderAssetAsync(request: HttpRequest<*>, asset: ServerAsset): Deferred<StreamedAssetResponse>","elide.server.assets.AssetManager.renderAssetAsync"]},{"name":"abstract suspend fun respond(response: MutableHttpResponse<ResponseBody>): MutableHttpResponse<ResponseBody>","description":"elide.server.ResponseHandler.respond","location":"packages/server/elide.server/-response-handler/respond.html","searchKeys":["respond","abstract suspend fun respond(response: MutableHttpResponse<ResponseBody>): MutableHttpResponse<ResponseBody>","elide.server.ResponseHandler.respond"]},{"name":"abstract val logging: Logger","description":"elide.server.assets.AssetManager.logging","location":"packages/server/elide.server.assets/-asset-manager/logging.html","searchKeys":["logging","abstract val logging: Logger","elide.server.assets.AssetManager.logging"]},{"name":"abstract val reader: AssetReader","description":"elide.server.assets.AssetManager.reader","location":"packages/server/elide.server.assets/-asset-manager/reader.html","searchKeys":["reader","abstract val reader: AssetReader","elide.server.assets.AssetManager.reader"]},{"name":"annotation class Page(val route: String = UriMapping.DEFAULT_URI, val name: String = \"\", val produces: Array<String> = [MediaType.TEXT_HTML], val consumes: Array<String> = [], val precompile: Boolean = true)","description":"elide.server.annotations.Page","location":"packages/server/elide.server.annotations/-page/index.html","searchKeys":["Page","annotation class Page(val route: String = UriMapping.DEFAULT_URI, val name: String = \"\", val produces: Array<String> = [MediaType.TEXT_HTML], val consumes: Array<String> = [], val precompile: Boolean = true)","elide.server.annotations.Page"]},{"name":"class AppStartupListener : ApplicationEventListener<ServerStartupEvent> ","description":"elide.server.Application.AppStartupListener","location":"packages/server/elide.server/-application/-app-startup-listener/index.html","searchKeys":["AppStartupListener","class AppStartupListener : ApplicationEventListener<ServerStartupEvent> ","elide.server.Application.AppStartupListener"]},{"name":"class AssetControllerÂ constructor(assetManager: AssetManager) : StatusEnabledController","description":"elide.server.assets.AssetController","location":"packages/server/elide.server.assets/-asset-controller/index.html","searchKeys":["AssetController","class AssetControllerÂ constructor(assetManager: AssetManager) : StatusEnabledController","elide.server.assets.AssetController"]},{"name":"class AssetHandler(initialExpectedType: AssetType? = null, handler: ElideController, request: HttpRequest<*>, moduleId: AtomicReference<AssetModuleId?> = AtomicReference(null), expectedType: AtomicReference<AssetType?> = AtomicReference(initialExpectedType)) : BaseResponseHandler<ByteArray> ","description":"elide.server.AssetHandler","location":"packages/server/elide.server/-asset-handler/index.html","searchKeys":["AssetHandler","class AssetHandler(initialExpectedType: AssetType? = null, handler: ElideController, request: HttpRequest<*>, moduleId: AtomicReference<AssetModuleId?> = AtomicReference(null), expectedType: AtomicReference<AssetType?> = AtomicReference(initialExpectedType)) : BaseResponseHandler<ByteArray> ","elide.server.AssetHandler"]},{"name":"class DefaultExecutorÂ constructor(uncaughtHandler: Thread.UncaughtExceptionHandler) : AppExecutor","description":"elide.server.runtime.AppExecutor.DefaultExecutor","location":"packages/server/elide.server.runtime/-app-executor/-default-executor/index.html","searchKeys":["DefaultExecutor","class DefaultExecutorÂ constructor(uncaughtHandler: Thread.UncaughtExceptionHandler) : AppExecutor","elide.server.runtime.AppExecutor.DefaultExecutor"]},{"name":"class HeaderFinalizingFilter : HttpServerFilter","description":"elide.server.http.HeaderFinalizingFilter","location":"packages/server/elide.server.http/-header-finalizing-filter/index.html","searchKeys":["HeaderFinalizingFilter","class HeaderFinalizingFilter : HttpServerFilter","elide.server.http.HeaderFinalizingFilter"]},{"name":"class HtmlRenderer(prettyhtml: Boolean = false, handler: PageController? = null, builder: suspend HTML.() -> Unit) : SuspensionRenderer<ByteArrayOutputStream> ","description":"elide.server.HtmlRenderer","location":"packages/server/elide.server/-html-renderer/index.html","searchKeys":["HtmlRenderer","class HtmlRenderer(prettyhtml: Boolean = false, handler: PageController? = null, builder: suspend HTML.() -> Unit) : SuspensionRenderer<ByteArrayOutputStream> ","elide.server.HtmlRenderer"]},{"name":"class NotFoundController : BuiltinController","description":"elide.server.controller.builtin.NotFoundController","location":"packages/server/elide.server.controller.builtin/-not-found-controller/index.html","searchKeys":["NotFoundController","class NotFoundController : BuiltinController","elide.server.controller.builtin.NotFoundController"]},{"name":"class RenderedAsset(val module: AssetModuleId, val type: AssetType, val variant: CompressionMode, val headers: Map<String, String>, val size: Long, val lastModified: Long, val digest: Pair<HashAlgorithm, ByteString>?, val producer: () -> ByteString)","description":"elide.server.assets.RenderedAsset","location":"packages/server/elide.server.assets/-rendered-asset/index.html","searchKeys":["RenderedAsset","class RenderedAsset(val module: AssetModuleId, val type: AssetType, val variant: CompressionMode, val headers: Map<String, String>, val size: Long, val lastModified: Long, val digest: Pair<HashAlgorithm, ByteString>?, val producer: () -> ByteString)","elide.server.assets.RenderedAsset"]},{"name":"class RequestContextFilter : HttpServerFilter","description":"elide.server.http.RequestContextFilter","location":"packages/server/elide.server.http/-request-context-filter/index.html","searchKeys":["RequestContextFilter","class RequestContextFilter : HttpServerFilter","elide.server.http.RequestContextFilter"]},{"name":"class Script(descriptor: AssetBundle.ScriptBundle, index: SortedSet<Int>?) : ServerAsset","description":"elide.server.assets.ServerAsset.Script","location":"packages/server/elide.server.assets/-server-asset/-script/index.html","searchKeys":["Script","class Script(descriptor: AssetBundle.ScriptBundle, index: SortedSet<Int>?) : ServerAsset","elide.server.assets.ServerAsset.Script"]},{"name":"class ServerAssetManager : AssetManager","description":"elide.server.assets.ServerAssetManager","location":"packages/server/elide.server.assets/-server-asset-manager/index.html","searchKeys":["ServerAssetManager","class ServerAssetManager : AssetManager","elide.server.assets.ServerAssetManager"]},{"name":"class ServerAssetReader : AssetReader","description":"elide.server.assets.ServerAssetReader","location":"packages/server/elide.server.assets/-server-asset-reader/index.html","searchKeys":["ServerAssetReader","class ServerAssetReader : AssetReader","elide.server.assets.ServerAssetReader"]},{"name":"class ServerConfigurator : ApplicationContextConfigurer","description":"elide.server.cfg.ServerConfigurator","location":"packages/server/elide.server.cfg/-server-configurator/index.html","searchKeys":["ServerConfigurator","class ServerConfigurator : ApplicationContextConfigurer","elide.server.cfg.ServerConfigurator"]},{"name":"class ServerErrorController : BuiltinController","description":"elide.server.controller.builtin.ServerErrorController","location":"packages/server/elide.server.controller.builtin/-server-error-controller/index.html","searchKeys":["ServerErrorController","class ServerErrorController : BuiltinController","elide.server.controller.builtin.ServerErrorController"]},{"name":"class ServerSSRRenderer(body: BODY, handler: ElideController, request: HttpRequest<*>, script: ExecutableScript, buffer: StringBuilder = StringBuilder(), job: AtomicReference<Job?> = AtomicReference(null)) : SuspensionRenderer<ByteArrayOutputStream> ","description":"elide.server.ssr.ServerSSRRenderer","location":"packages/server/elide.server.ssr/-server-s-s-r-renderer/index.html","searchKeys":["ServerSSRRenderer","class ServerSSRRenderer(body: BODY, handler: ElideController, request: HttpRequest<*>, script: ExecutableScript, buffer: StringBuilder = StringBuilder(), job: AtomicReference<Job?> = AtomicReference(null)) : SuspensionRenderer<ByteArrayOutputStream> ","elide.server.ssr.ServerSSRRenderer"]},{"name":"class Stylesheet(descriptor: AssetBundle.StyleBundle, index: SortedSet<Int>?) : ServerAsset","description":"elide.server.assets.ServerAsset.Stylesheet","location":"packages/server/elide.server.assets/-server-asset/-stylesheet/index.html","searchKeys":["Stylesheet","class Stylesheet(descriptor: AssetBundle.StyleBundle, index: SortedSet<Int>?) : ServerAsset","elide.server.assets.ServerAsset.Stylesheet"]},{"name":"class Text(descriptor: AssetBundle.GenericBundle, index: SortedSet<Int>?) : ServerAsset","description":"elide.server.assets.ServerAsset.Text","location":"packages/server/elide.server.assets/-server-asset/-text/index.html","searchKeys":["Text","class Text(descriptor: AssetBundle.GenericBundle, index: SortedSet<Int>?) : ServerAsset","elide.server.assets.ServerAsset.Text"]},{"name":"const val DEFAULT_ASSET_PREFIX: String","description":"elide.server.cfg.AssetConfig.Companion.DEFAULT_ASSET_PREFIX","location":"packages/server/elide.server.cfg/-asset-config/-companion/-d-e-f-a-u-l-t_-a-s-s-e-t_-p-r-e-f-i-x.html","searchKeys":["DEFAULT_ASSET_PREFIX","const val DEFAULT_ASSET_PREFIX: String","elide.server.cfg.AssetConfig.Companion.DEFAULT_ASSET_PREFIX"]},{"name":"const val DEFAULT_ENABLE_ETAGS: Boolean = true","description":"elide.server.cfg.AssetConfig.Companion.DEFAULT_ENABLE_ETAGS","location":"packages/server/elide.server.cfg/-asset-config/-companion/-d-e-f-a-u-l-t_-e-n-a-b-l-e_-e-t-a-g-s.html","searchKeys":["DEFAULT_ENABLE_ETAGS","const val DEFAULT_ENABLE_ETAGS: Boolean = true","elide.server.cfg.AssetConfig.Companion.DEFAULT_ENABLE_ETAGS"]},{"name":"const val DEFAULT_PREFER_WEAK_ETAGS: Boolean = false","description":"elide.server.cfg.AssetConfig.Companion.DEFAULT_PREFER_WEAK_ETAGS","location":"packages/server/elide.server.cfg/-asset-config/-companion/-d-e-f-a-u-l-t_-p-r-e-f-e-r_-w-e-a-k_-e-t-a-g-s.html","searchKeys":["DEFAULT_PREFER_WEAK_ETAGS","const val DEFAULT_PREFER_WEAK_ETAGS: Boolean = false","elide.server.cfg.AssetConfig.Companion.DEFAULT_PREFER_WEAK_ETAGS"]},{"name":"const val DEFAULT_REWRITING_ENABLED: Boolean = true","description":"elide.server.cfg.AssetConfig.Companion.DEFAULT_REWRITING_ENABLED","location":"packages/server/elide.server.cfg/-asset-config/-companion/-d-e-f-a-u-l-t_-r-e-w-r-i-t-i-n-g_-e-n-a-b-l-e-d.html","searchKeys":["DEFAULT_REWRITING_ENABLED","const val DEFAULT_REWRITING_ENABLED: Boolean = true","elide.server.cfg.AssetConfig.Companion.DEFAULT_REWRITING_ENABLED"]},{"name":"const val DEFAULT_SSR_DOM_ID: String","description":"elide.server.DEFAULT_SSR_DOM_ID","location":"packages/server/elide.server/-d-e-f-a-u-l-t_-s-s-r_-d-o-m_-i-d.html","searchKeys":["DEFAULT_SSR_DOM_ID","const val DEFAULT_SSR_DOM_ID: String","elide.server.DEFAULT_SSR_DOM_ID"]},{"name":"const val EMBEDDED_ROOT: String","description":"elide.server.EMBEDDED_ROOT","location":"packages/server/elide.server/-e-m-b-e-d-d-e-d_-r-o-o-t.html","searchKeys":["EMBEDDED_ROOT","const val EMBEDDED_ROOT: String","elide.server.EMBEDDED_ROOT"]},{"name":"const val priority: Int","description":"elide.server.runtime.AppExecutor.DefaultSettings.priority","location":"packages/server/elide.server.runtime/-app-executor/-default-settings/priority.html","searchKeys":["priority","const val priority: Int","elide.server.runtime.AppExecutor.DefaultSettings.priority"]},{"name":"const val ssrId: String","description":"elide.server.ssr.ServerSSRRenderer.Companion.ssrId","location":"packages/server/elide.server.ssr/-server-s-s-r-renderer/-companion/ssr-id.html","searchKeys":["ssrId","const val ssrId: String","elide.server.ssr.ServerSSRRenderer.Companion.ssrId"]},{"name":"const val waitTimeout: Long = 10","description":"elide.server.assets.ServerAssetManager.Companion.waitTimeout","location":"packages/server/elide.server.assets/-server-asset-manager/-companion/wait-timeout.html","searchKeys":["waitTimeout","const val waitTimeout: Long = 10","elide.server.assets.ServerAssetManager.Companion.waitTimeout"]},{"name":"constructor()","description":"elide.server.Application.AppStartupListener.AppStartupListener","location":"packages/server/elide.server/-application/-app-startup-listener/-app-startup-listener.html","searchKeys":["AppStartupListener","constructor()","elide.server.Application.AppStartupListener.AppStartupListener"]},{"name":"constructor()","description":"elide.server.BaseResponseHandler.BaseResponseHandler","location":"packages/server/elide.server/-base-response-handler/-base-response-handler.html","searchKeys":["BaseResponseHandler","constructor()","elide.server.BaseResponseHandler.BaseResponseHandler"]},{"name":"constructor()","description":"elide.server.cfg.ServerConfigurator.ServerConfigurator","location":"packages/server/elide.server.cfg/-server-configurator/-server-configurator.html","searchKeys":["ServerConfigurator","constructor()","elide.server.cfg.ServerConfigurator.ServerConfigurator"]},{"name":"constructor()","description":"elide.server.controller.BaseController.BaseController","location":"packages/server/elide.server.controller/-base-controller/-base-controller.html","searchKeys":["BaseController","constructor()","elide.server.controller.BaseController.BaseController"]},{"name":"constructor()","description":"elide.server.controller.PageController.PageController","location":"packages/server/elide.server.controller/-page-controller/-page-controller.html","searchKeys":["PageController","constructor()","elide.server.controller.PageController.PageController"]},{"name":"constructor()","description":"elide.server.controller.builtin.BuiltinController.BuiltinController","location":"packages/server/elide.server.controller.builtin/-builtin-controller/-builtin-controller.html","searchKeys":["BuiltinController","constructor()","elide.server.controller.builtin.BuiltinController.BuiltinController"]},{"name":"constructor()","description":"elide.server.controller.builtin.NotFoundController.NotFoundController","location":"packages/server/elide.server.controller.builtin/-not-found-controller/-not-found-controller.html","searchKeys":["NotFoundController","constructor()","elide.server.controller.builtin.NotFoundController.NotFoundController"]},{"name":"constructor()","description":"elide.server.controller.builtin.ServerErrorController.ServerErrorController","location":"packages/server/elide.server.controller.builtin/-server-error-controller/-server-error-controller.html","searchKeys":["ServerErrorController","constructor()","elide.server.controller.builtin.ServerErrorController.ServerErrorController"]},{"name":"constructor()","description":"elide.server.http.HeaderFinalizingFilter.HeaderFinalizingFilter","location":"packages/server/elide.server.http/-header-finalizing-filter/-header-finalizing-filter.html","searchKeys":["HeaderFinalizingFilter","constructor()","elide.server.http.HeaderFinalizingFilter.HeaderFinalizingFilter"]},{"name":"constructor()","description":"elide.server.http.RequestContextFilter.RequestContextFilter","location":"packages/server/elide.server.http/-request-context-filter/-request-context-filter.html","searchKeys":["RequestContextFilter","constructor()","elide.server.http.RequestContextFilter.RequestContextFilter"]},{"name":"constructor()","description":"elide.server.runtime.jvm.UncaughtExceptionHandler.UncaughtExceptionHandler","location":"packages/server/elide.server.runtime.jvm/-uncaught-exception-handler/-uncaught-exception-handler.html","searchKeys":["UncaughtExceptionHandler","constructor()","elide.server.runtime.jvm.UncaughtExceptionHandler.UncaughtExceptionHandler"]},{"name":"constructor(assetManager: AssetManager)","description":"elide.server.assets.AssetController.AssetController","location":"packages/server/elide.server.assets/-asset-controller/-asset-controller.html","searchKeys":["AssetController","constructor(assetManager: AssetManager)","elide.server.assets.AssetController.AssetController"]},{"name":"constructor(assets: AssetConfig = object : AssetConfig {})","description":"elide.server.cfg.ServerConfig.ServerConfig","location":"packages/server/elide.server.cfg/-server-config/-server-config.html","searchKeys":["ServerConfig","constructor(assets: AssetConfig = object : AssetConfig {})","elide.server.cfg.ServerConfig.ServerConfig"]},{"name":"constructor(body: BODY, handler: ElideController, request: HttpRequest<*>, script: ExecutableScript, buffer: StringBuilder = StringBuilder(), job: AtomicReference<Job?> = AtomicReference(null))","description":"elide.server.ssr.ServerSSRRenderer.ServerSSRRenderer","location":"packages/server/elide.server.ssr/-server-s-s-r-renderer/-server-s-s-r-renderer.html","searchKeys":["ServerSSRRenderer","constructor(body: BODY, handler: ElideController, request: HttpRequest<*>, script: ExecutableScript, buffer: StringBuilder = StringBuilder(), job: AtomicReference<Job?> = AtomicReference(null))","elide.server.ssr.ServerSSRRenderer.ServerSSRRenderer"]},{"name":"constructor(descriptor: AssetBundle.GenericBundle, index: SortedSet<Int>?)","description":"elide.server.assets.ServerAsset.Text.Text","location":"packages/server/elide.server.assets/-server-asset/-text/-text.html","searchKeys":["Text","constructor(descriptor: AssetBundle.GenericBundle, index: SortedSet<Int>?)","elide.server.assets.ServerAsset.Text.Text"]},{"name":"constructor(descriptor: AssetBundle.ScriptBundle, index: SortedSet<Int>?)","description":"elide.server.assets.ServerAsset.Script.Script","location":"packages/server/elide.server.assets/-server-asset/-script/-script.html","searchKeys":["Script","constructor(descriptor: AssetBundle.ScriptBundle, index: SortedSet<Int>?)","elide.server.assets.ServerAsset.Script.Script"]},{"name":"constructor(descriptor: AssetBundle.StyleBundle, index: SortedSet<Int>?)","description":"elide.server.assets.ServerAsset.Stylesheet.Stylesheet","location":"packages/server/elide.server.assets/-server-asset/-stylesheet/-stylesheet.html","searchKeys":["Stylesheet","constructor(descriptor: AssetBundle.StyleBundle, index: SortedSet<Int>?)","elide.server.assets.ServerAsset.Stylesheet.Stylesheet"]},{"name":"constructor(initialExpectedType: AssetType? = null, handler: ElideController, request: HttpRequest<*>, moduleId: AtomicReference<AssetModuleId?> = AtomicReference(null), expectedType: AtomicReference<AssetType?> = AtomicReference(initialExpectedType))","description":"elide.server.AssetHandler.AssetHandler","location":"packages/server/elide.server/-asset-handler/-asset-handler.html","searchKeys":["AssetHandler","constructor(initialExpectedType: AssetType? = null, handler: ElideController, request: HttpRequest<*>, moduleId: AtomicReference<AssetModuleId?> = AtomicReference(null), expectedType: AtomicReference<AssetType?> = AtomicReference(initialExpectedType))","elide.server.AssetHandler.AssetHandler"]},{"name":"constructor(module: AssetModuleId, assetType: AssetType, href: String, type: String? = null, inline: Boolean = false, preload: Boolean = false)","description":"elide.server.assets.AssetReference.AssetReference","location":"packages/server/elide.server.assets/-asset-reference/-asset-reference.html","searchKeys":["AssetReference","constructor(module: AssetModuleId, assetType: AssetType, href: String, type: String? = null, inline: Boolean = false, preload: Boolean = false)","elide.server.assets.AssetReference.AssetReference"]},{"name":"constructor(module: AssetModuleId, type: AssetType, variant: CompressionMode, headers: Map<String, String>, size: Long, lastModified: Long, digest: Pair<HashAlgorithm, ByteString>?, producer: () -> ByteString)","description":"elide.server.assets.RenderedAsset.RenderedAsset","location":"packages/server/elide.server.assets/-rendered-asset/-rendered-asset.html","searchKeys":["RenderedAsset","constructor(module: AssetModuleId, type: AssetType, variant: CompressionMode, headers: Map<String, String>, size: Long, lastModified: Long, digest: Pair<HashAlgorithm, ByteString>?, producer: () -> ByteString)","elide.server.assets.RenderedAsset.RenderedAsset"]},{"name":"constructor(moduleId: AssetModuleId, type: AssetType, token: String, tag: String, etag: String, modified: Long, index: SortedSet<Int>?)","description":"elide.server.assets.AssetPointer.AssetPointer","location":"packages/server/elide.server.assets/-asset-pointer/-asset-pointer.html","searchKeys":["AssetPointer","constructor(moduleId: AssetModuleId, type: AssetType, token: String, tag: String, etag: String, modified: Long, index: SortedSet<Int>?)","elide.server.assets.AssetPointer.AssetPointer"]},{"name":"constructor(name: String)","description":"elide.server.http.RequestContext.Key.Key","location":"packages/server/elide.server.http/-request-context/-key/-key.html","searchKeys":["Key","constructor(name: String)","elide.server.http.RequestContext.Key.Key"]},{"name":"constructor(prettyhtml: Boolean = false, handler: PageController? = null, builder: suspend HTML.() -> Unit)","description":"elide.server.HtmlRenderer.HtmlRenderer","location":"packages/server/elide.server/-html-renderer/-html-renderer.html","searchKeys":["HtmlRenderer","constructor(prettyhtml: Boolean = false, handler: PageController? = null, builder: suspend HTML.() -> Unit)","elide.server.HtmlRenderer.HtmlRenderer"]},{"name":"constructor(uncaughtHandler: Thread.UncaughtExceptionHandler)","description":"elide.server.runtime.AppExecutor.DefaultExecutor.DefaultExecutor","location":"packages/server/elide.server.runtime/-app-executor/-default-executor/-default-executor.html","searchKeys":["DefaultExecutor","constructor(uncaughtHandler: Thread.UncaughtExceptionHandler)","elide.server.runtime.AppExecutor.DefaultExecutor.DefaultExecutor"]},{"name":"data class AssetPointer(val moduleId: AssetModuleId, val type: AssetType, val token: String, val tag: String, val etag: String, val modified: Long, val index: SortedSet<Int>?) : Serializable","description":"elide.server.assets.AssetPointer","location":"packages/server/elide.server.assets/-asset-pointer/index.html","searchKeys":["AssetPointer","data class AssetPointer(val moduleId: AssetModuleId, val type: AssetType, val token: String, val tag: String, val etag: String, val modified: Long, val index: SortedSet<Int>?) : Serializable","elide.server.assets.AssetPointer"]},{"name":"data class AssetReference(val module: AssetModuleId, val assetType: AssetType, val href: String, val type: String? = null, val inline: Boolean = false, val preload: Boolean = false) : Serializable","description":"elide.server.assets.AssetReference","location":"packages/server/elide.server.assets/-asset-reference/index.html","searchKeys":["AssetReference","data class AssetReference(val module: AssetModuleId, val assetType: AssetType, val href: String, val type: String? = null, val inline: Boolean = false, val preload: Boolean = false) : Serializable","elide.server.assets.AssetReference"]},{"name":"data class Key(val name: String)","description":"elide.server.http.RequestContext.Key","location":"packages/server/elide.server.http/-request-context/-key/index.html","searchKeys":["Key","data class Key(val name: String)","elide.server.http.RequestContext.Key"]},{"name":"data class ServerConfig(var assets: AssetConfig = object : AssetConfig {})","description":"elide.server.cfg.ServerConfig","location":"packages/server/elide.server.cfg/-server-config/index.html","searchKeys":["ServerConfig","data class ServerConfig(var assets: AssetConfig = object : AssetConfig {})","elide.server.cfg.ServerConfig"]},{"name":"enum AssetType : Enum<AssetType> ","description":"elide.server.assets.AssetType","location":"packages/server/elide.server.assets/-asset-type/index.html","searchKeys":["AssetType","enum AssetType : Enum<AssetType> ","elide.server.assets.AssetType"]},{"name":"fun BODY.script(asset: AssetReference, defer: Boolean = false, async: Boolean = false, type: String = JAVASCRIPT_TYPE, attrs: Map<String, String>? = null)","description":"elide.server.script","location":"packages/server/elide.server/script.html","searchKeys":["script","fun BODY.script(asset: AssetReference, defer: Boolean = false, async: Boolean = false, type: String = JAVASCRIPT_TYPE, attrs: Map<String, String>? = null)","elide.server.script"]},{"name":"fun BODY.script(uri: String, defer: Boolean = false, async: Boolean = false, type: String = JAVASCRIPT_TYPE, attrs: Map<String, String>? = null)","description":"elide.server.script","location":"packages/server/elide.server/script.html","searchKeys":["script","fun BODY.script(uri: String, defer: Boolean = false, async: Boolean = false, type: String = JAVASCRIPT_TYPE, attrs: Map<String, String>? = null)","elide.server.script"]},{"name":"fun HEAD.script(asset: AssetReference, defer: Boolean = false, async: Boolean = false, nomodule: Boolean = false, type: String = JAVASCRIPT_TYPE, attrs: Map<String, String>? = null)","description":"elide.server.script","location":"packages/server/elide.server/script.html","searchKeys":["script","fun HEAD.script(asset: AssetReference, defer: Boolean = false, async: Boolean = false, nomodule: Boolean = false, type: String = JAVASCRIPT_TYPE, attrs: Map<String, String>? = null)","elide.server.script"]},{"name":"fun HEAD.script(uri: String, defer: Boolean = false, async: Boolean = false, type: String = JAVASCRIPT_TYPE, attrs: Map<String, String>? = null)","description":"elide.server.script","location":"packages/server/elide.server/script.html","searchKeys":["script","fun HEAD.script(uri: String, defer: Boolean = false, async: Boolean = false, type: String = JAVASCRIPT_TYPE, attrs: Map<String, String>? = null)","elide.server.script"]},{"name":"fun HEAD.stylesheet(asset: AssetReference, media: String? = null, attrs: SortedMap<String, String>? = null)","description":"elide.server.stylesheet","location":"packages/server/elide.server/stylesheet.html","searchKeys":["stylesheet","fun HEAD.stylesheet(asset: AssetReference, media: String? = null, attrs: SortedMap<String, String>? = null)","elide.server.stylesheet"]},{"name":"fun HEAD.stylesheet(uri: String, media: String? = null, attrs: Map<String, String>? = null)","description":"elide.server.stylesheet","location":"packages/server/elide.server/stylesheet.html","searchKeys":["stylesheet","fun HEAD.stylesheet(uri: String, media: String? = null, attrs: Map<String, String>? = null)","elide.server.stylesheet"]},{"name":"fun acquire(): AppExecutor","description":"elide.server.runtime.AppExecutor.DefaultExecutor.Companion.acquire","location":"packages/server/elide.server.runtime/-app-executor/-default-executor/-companion/acquire.html","searchKeys":["acquire","fun acquire(): AppExecutor","elide.server.runtime.AppExecutor.DefaultExecutor.Companion.acquire"]},{"name":"fun asset(module: AssetModuleId, handler: PageController.AssetReferenceBuilder.() -> Unit? = null): AssetReference","description":"elide.server.controller.PageController.asset","location":"packages/server/elide.server.controller/-page-controller/asset.html","searchKeys":["asset","fun asset(module: AssetModuleId, handler: PageController.AssetReferenceBuilder.() -> Unit? = null): AssetReference","elide.server.controller.PageController.asset"]},{"name":"fun assetType(type: AssetType)","description":"elide.server.AssetHandler.assetType","location":"packages/server/elide.server/-asset-handler/asset-type.html","searchKeys":["assetType","fun assetType(type: AssetType)","elide.server.AssetHandler.assetType"]},{"name":"fun css(block: CssBuilder.() -> Unit): FinalizedAssetResponse","description":"elide.server.css","location":"packages/server/elide.server/css.html","searchKeys":["css","fun css(block: CssBuilder.() -> Unit): FinalizedAssetResponse","elide.server.css"]},{"name":"fun initialize()","description":"elide.server.runtime.jvm.SecurityProviderConfigurator.initialize","location":"packages/server/elide.server.runtime.jvm/-security-provider-configurator/initialize.html","searchKeys":["initialize","fun initialize()","elide.server.runtime.jvm.SecurityProviderConfigurator.initialize"]},{"name":"fun initializeOnWarmup(callable: suspend () -> Unit)","description":"elide.server.Application.Initialization.initializeOnWarmup","location":"packages/server/elide.server/-application/-initialization/initialize-on-warmup.html","searchKeys":["initializeOnWarmup","fun initializeOnWarmup(callable: suspend () -> Unit)","elide.server.Application.Initialization.initializeOnWarmup"]},{"name":"fun initializeWithServer(callable: suspend () -> Unit)","description":"elide.server.Application.Initialization.initializeWithServer","location":"packages/server/elide.server/-application/-initialization/initialize-with-server.html","searchKeys":["initializeWithServer","fun initializeWithServer(callable: suspend () -> Unit)","elide.server.Application.Initialization.initializeWithServer"]},{"name":"fun module(id: AssetModuleId, type: AssetType? = null)","description":"elide.server.AssetHandler.module","location":"packages/server/elide.server/-asset-handler/module.html","searchKeys":["module","fun module(id: AssetModuleId, type: AssetType? = null)","elide.server.AssetHandler.module"]},{"name":"fun overrideExecutor(exec: ListeningScheduledExecutorService)","description":"elide.server.runtime.AppExecutor.DefaultExecutor.overrideExecutor","location":"packages/server/elide.server.runtime/-app-executor/-default-executor/override-executor.html","searchKeys":["overrideExecutor","fun overrideExecutor(exec: ListeningScheduledExecutorService)","elide.server.runtime.AppExecutor.DefaultExecutor.overrideExecutor"]},{"name":"fun ready(): Boolean","description":"elide.server.runtime.jvm.SecurityProviderConfigurator.ready","location":"packages/server/elide.server.runtime.jvm/-security-provider-configurator/ready.html","searchKeys":["ready","fun ready(): Boolean","elide.server.runtime.jvm.SecurityProviderConfigurator.ready"]},{"name":"fun staticFile(file: String, contentType: String): HttpResponse<*>","description":"elide.server.staticFile","location":"packages/server/elide.server/static-file.html","searchKeys":["staticFile","fun staticFile(file: String, contentType: String): HttpResponse<*>","elide.server.staticFile"]},{"name":"fun valueOf(value: String): AssetType","description":"elide.server.assets.AssetType.valueOf","location":"packages/server/elide.server.assets/-asset-type/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): AssetType","elide.server.assets.AssetType.valueOf"]},{"name":"fun values(): Array<AssetType>","description":"elide.server.assets.AssetType.values","location":"packages/server/elide.server.assets/-asset-type/values.html","searchKeys":["values","fun values(): Array<AssetType>","elide.server.assets.AssetType.values"]},{"name":"inline suspend fun <T : Tag, R> T.visitAndFinalizeSuspend(consumer: TagConsumer<R>, crossinline block: suspend T.() -> Unit): R","description":"elide.server.visitAndFinalizeSuspend","location":"packages/server/elide.server/visit-and-finalize-suspend.html","searchKeys":["visitAndFinalizeSuspend","inline suspend fun <T : Tag, R> T.visitAndFinalizeSuspend(consumer: TagConsumer<R>, crossinline block: suspend T.() -> Unit): R","elide.server.visitAndFinalizeSuspend"]},{"name":"inline suspend fun <T : Tag> T.visitSuspend(crossinline block: suspend T.() -> Unit)","description":"kotlinx.html.visitSuspend","location":"packages/server/kotlinx.html/visit-suspend.html","searchKeys":["visitSuspend","inline suspend fun <T : Tag> T.visitSuspend(crossinline block: suspend T.() -> Unit)","kotlinx.html.visitSuspend"]},{"name":"inline suspend fun <T : Tag> T.visitTagSuspend(crossinline block: suspend T.() -> Unit)","description":"kotlinx.html.visitTagSuspend","location":"packages/server/kotlinx.html/visit-tag-suspend.html","searchKeys":["visitTagSuspend","inline suspend fun <T : Tag> T.visitTagSuspend(crossinline block: suspend T.() -> Unit)","kotlinx.html.visitTagSuspend"]},{"name":"inline suspend fun <T, C : TagConsumer<T>> C.htmlSuspend(namespace: String? = null, crossinline block: suspend HTML.() -> Unit): T","description":"elide.server.htmlSuspend","location":"packages/server/elide.server/html-suspend.html","searchKeys":["htmlSuspend","inline suspend fun <T, C : TagConsumer<T>> C.htmlSuspend(namespace: String? = null, crossinline block: suspend HTML.() -> Unit): T","elide.server.htmlSuspend"]},{"name":"inline suspend fun HTML.body(classes: String? = null, crossinline block: suspend BODY.() -> Unit)","description":"kotlinx.html.tagext.body","location":"packages/server/kotlinx.html.tagext/body.html","searchKeys":["body","inline suspend fun HTML.body(classes: String? = null, crossinline block: suspend BODY.() -> Unit)","kotlinx.html.tagext.body"]},{"name":"inline suspend fun HTML.head(crossinline block: suspend HEAD.() -> Unit)","description":"kotlinx.html.tagext.head","location":"packages/server/kotlinx.html.tagext/head.html","searchKeys":["head","inline suspend fun HTML.head(crossinline block: suspend HEAD.() -> Unit)","kotlinx.html.tagext.head"]},{"name":"inner class AssetReferenceBuilder","description":"elide.server.controller.PageController.AssetReferenceBuilder","location":"packages/server/elide.server.controller/-page-controller/-asset-reference-builder/index.html","searchKeys":["AssetReferenceBuilder","inner class AssetReferenceBuilder","elide.server.controller.PageController.AssetReferenceBuilder"]},{"name":"interface AppExecutor","description":"elide.server.runtime.AppExecutor","location":"packages/server/elide.server.runtime/-app-executor/index.html","searchKeys":["AppExecutor","interface AppExecutor","elide.server.runtime.AppExecutor"]},{"name":"interface Application","description":"elide.server.Application","location":"packages/server/elide.server/-application/index.html","searchKeys":["Application","interface Application","elide.server.Application"]},{"name":"interface AssetConfig : Toggleable","description":"elide.server.cfg.AssetConfig","location":"packages/server/elide.server.cfg/-asset-config/index.html","searchKeys":["AssetConfig","interface AssetConfig : Toggleable","elide.server.cfg.AssetConfig"]},{"name":"interface AssetManager","description":"elide.server.assets.AssetManager","location":"packages/server/elide.server.assets/-asset-manager/index.html","searchKeys":["AssetManager","interface AssetManager","elide.server.assets.AssetManager"]},{"name":"interface AssetManifestLoader","description":"elide.server.assets.AssetManifestLoader","location":"packages/server/elide.server.assets/-asset-manifest-loader/index.html","searchKeys":["AssetManifestLoader","interface AssetManifestLoader","elide.server.assets.AssetManifestLoader"]},{"name":"interface AssetReader : AssetResolver","description":"elide.server.assets.AssetReader","location":"packages/server/elide.server.assets/-asset-reader/index.html","searchKeys":["AssetReader","interface AssetReader : AssetResolver","elide.server.assets.AssetReader"]},{"name":"interface AssetResolver","description":"elide.server.assets.AssetResolver","location":"packages/server/elide.server.assets/-asset-resolver/index.html","searchKeys":["AssetResolver","interface AssetResolver","elide.server.assets.AssetResolver"]},{"name":"interface ElideController","description":"elide.server.controller.ElideController","location":"packages/server/elide.server.controller/-elide-controller/index.html","searchKeys":["ElideController","interface ElideController","elide.server.controller.ElideController"]},{"name":"interface ResponseHandler<ResponseBody>","description":"elide.server.ResponseHandler","location":"packages/server/elide.server/-response-handler/index.html","searchKeys":["ResponseHandler","interface ResponseHandler<ResponseBody>","elide.server.ResponseHandler"]},{"name":"interface ServerInitializer","description":"elide.server.ServerInitializer","location":"packages/server/elide.server/-server-initializer/index.html","searchKeys":["ServerInitializer","interface ServerInitializer","elide.server.ServerInitializer"]},{"name":"interface StatusEnabledController","description":"elide.server.controller.StatusEnabledController","location":"packages/server/elide.server.controller/-status-enabled-controller/index.html","searchKeys":["StatusEnabledController","interface StatusEnabledController","elide.server.controller.StatusEnabledController"]},{"name":"interface StreamingSuspensionRenderer<R>","description":"elide.server.StreamingSuspensionRenderer","location":"packages/server/elide.server/-streaming-suspension-renderer/index.html","searchKeys":["StreamingSuspensionRenderer","interface StreamingSuspensionRenderer<R>","elide.server.StreamingSuspensionRenderer"]},{"name":"interface SuspensionRenderer<R>","description":"elide.server.SuspensionRenderer","location":"packages/server/elide.server/-suspension-renderer/index.html","searchKeys":["SuspensionRenderer","interface SuspensionRenderer<R>","elide.server.SuspensionRenderer"]},{"name":"object Companion","description":"elide.server.assets.AssetManifestLoader.Companion","location":"packages/server/elide.server.assets/-asset-manifest-loader/-companion/index.html","searchKeys":["Companion","object Companion","elide.server.assets.AssetManifestLoader.Companion"]},{"name":"object Companion","description":"elide.server.assets.ServerAssetManager.Companion","location":"packages/server/elide.server.assets/-server-asset-manager/-companion/index.html","searchKeys":["Companion","object Companion","elide.server.assets.ServerAssetManager.Companion"]},{"name":"object Companion","description":"elide.server.cfg.AssetConfig.Companion","location":"packages/server/elide.server.cfg/-asset-config/-companion/index.html","searchKeys":["Companion","object Companion","elide.server.cfg.AssetConfig.Companion"]},{"name":"object Companion","description":"elide.server.cfg.ServerConfigurator.Companion","location":"packages/server/elide.server.cfg/-server-configurator/-companion/index.html","searchKeys":["Companion","object Companion","elide.server.cfg.ServerConfigurator.Companion"]},{"name":"object Companion","description":"elide.server.http.RequestContext.Key.Companion","location":"packages/server/elide.server.http/-request-context/-key/-companion/index.html","searchKeys":["Companion","object Companion","elide.server.http.RequestContext.Key.Companion"]},{"name":"object Companion","description":"elide.server.runtime.AppExecutor.Companion","location":"packages/server/elide.server.runtime/-app-executor/-companion/index.html","searchKeys":["Companion","object Companion","elide.server.runtime.AppExecutor.Companion"]},{"name":"object Companion","description":"elide.server.runtime.AppExecutor.DefaultExecutor.Companion","location":"packages/server/elide.server.runtime/-app-executor/-default-executor/-companion/index.html","searchKeys":["Companion","object Companion","elide.server.runtime.AppExecutor.DefaultExecutor.Companion"]},{"name":"object Companion","description":"elide.server.ssr.ServerSSRRenderer.Companion","location":"packages/server/elide.server.ssr/-server-s-s-r-renderer/-companion/index.html","searchKeys":["Companion","object Companion","elide.server.ssr.ServerSSRRenderer.Companion"]},{"name":"object DefaultSettings","description":"elide.server.runtime.AppExecutor.DefaultSettings","location":"packages/server/elide.server.runtime/-app-executor/-default-settings/index.html","searchKeys":["DefaultSettings","object DefaultSettings","elide.server.runtime.AppExecutor.DefaultSettings"]},{"name":"object Initialization","description":"elide.server.Application.Initialization","location":"packages/server/elide.server/-application/-initialization/index.html","searchKeys":["Initialization","object Initialization","elide.server.Application.Initialization"]},{"name":"object RequestContext","description":"elide.server.http.RequestContext","location":"packages/server/elide.server.http/-request-context/index.html","searchKeys":["RequestContext","object RequestContext","elide.server.http.RequestContext"]},{"name":"object SecurityProviderConfigurator","description":"elide.server.runtime.jvm.SecurityProviderConfigurator","location":"packages/server/elide.server.runtime.jvm/-security-provider-configurator/index.html","searchKeys":["SecurityProviderConfigurator","object SecurityProviderConfigurator","elide.server.runtime.jvm.SecurityProviderConfigurator"]},{"name":"open class UncaughtExceptionHandler : Thread.UncaughtExceptionHandler","description":"elide.server.runtime.jvm.UncaughtExceptionHandler","location":"packages/server/elide.server.runtime.jvm/-uncaught-exception-handler/index.html","searchKeys":["UncaughtExceptionHandler","open class UncaughtExceptionHandler : Thread.UncaughtExceptionHandler","elide.server.runtime.jvm.UncaughtExceptionHandler"]},{"name":"open fun boot(args: Array<String>)","description":"elide.server.Application.boot","location":"packages/server/elide.server/-application/boot.html","searchKeys":["boot","open fun boot(args: Array<String>)","elide.server.Application.boot"]},{"name":"open fun executor(): Executor","description":"elide.server.runtime.AppExecutor.executor","location":"packages/server/elide.server.runtime/-app-executor/executor.html","searchKeys":["executor","open fun executor(): Executor","elide.server.runtime.AppExecutor.executor"]},{"name":"open fun findAssetByModuleId(asset: AssetModuleId): AssetPointer?","description":"elide.server.assets.AssetManager.findAssetByModuleId","location":"packages/server/elide.server.assets/-asset-manager/find-asset-by-module-id.html","searchKeys":["findAssetByModuleId","open fun findAssetByModuleId(asset: AssetModuleId): AssetPointer?","elide.server.assets.AssetManager.findAssetByModuleId"]},{"name":"open fun findLoadManifest(): AssetBundle?","description":"elide.server.assets.AssetManifestLoader.findLoadManifest","location":"packages/server/elide.server.assets/-asset-manifest-loader/find-load-manifest.html","searchKeys":["findLoadManifest","open fun findLoadManifest(): AssetBundle?","elide.server.assets.AssetManifestLoader.findLoadManifest"]},{"name":"open fun findManifest(): Pair<ManifestFormat, InputStream>?","description":"elide.server.assets.AssetManifestLoader.findManifest","location":"packages/server/elide.server.assets/-asset-manifest-loader/find-manifest.html","searchKeys":["findManifest","open fun findManifest(): Pair<ManifestFormat, InputStream>?","elide.server.assets.AssetManifestLoader.findManifest"]},{"name":"open fun initialize()","description":"elide.server.ServerInitializer.initialize","location":"packages/server/elide.server/-server-initializer/initialize.html","searchKeys":["initialize","open fun initialize()","elide.server.ServerInitializer.initialize"]},{"name":"open fun resolve(request: HttpRequest<*>): ServerAsset?","description":"elide.server.assets.AssetResolver.resolve","location":"packages/server/elide.server.assets/-asset-resolver/resolve.html","searchKeys":["resolve","open fun resolve(request: HttpRequest<*>): ServerAsset?","elide.server.assets.AssetResolver.resolve"]},{"name":"open fun resolve(request: HttpRequest<*>, moduleId: String? = null): ServerAsset?","description":"elide.server.assets.AssetManager.resolve","location":"packages/server/elide.server.assets/-asset-manager/resolve.html","searchKeys":["resolve","open fun resolve(request: HttpRequest<*>, moduleId: String? = null): ServerAsset?","elide.server.assets.AssetManager.resolve"]},{"name":"open fun serveNotFoundAsync(request: HttpRequest<*>): Deferred<StreamedAssetResponse>","description":"elide.server.assets.AssetManager.serveNotFoundAsync","location":"packages/server/elide.server.assets/-asset-manager/serve-not-found-async.html","searchKeys":["serveNotFoundAsync","open fun serveNotFoundAsync(request: HttpRequest<*>): Deferred<StreamedAssetResponse>","elide.server.assets.AssetManager.serveNotFoundAsync"]},{"name":"open override fun assets(): AssetManager","description":"elide.server.controller.PageController.assets","location":"packages/server/elide.server.controller/-page-controller/assets.html","searchKeys":["assets","open override fun assets(): AssetManager","elide.server.controller.PageController.assets"]},{"name":"open override fun configure(builder: ApplicationContextBuilder)","description":"elide.server.cfg.ServerConfigurator.configure","location":"packages/server/elide.server.cfg/-server-configurator/configure.html","searchKeys":["configure","open override fun configure(builder: ApplicationContextBuilder)","elide.server.cfg.ServerConfigurator.configure"]},{"name":"open override fun context(): ApplicationContext","description":"elide.server.controller.PageController.context","location":"packages/server/elide.server.controller/-page-controller/context.html","searchKeys":["context","open override fun context(): ApplicationContext","elide.server.controller.PageController.context"]},{"name":"open override fun doFilter(request: HttpRequest<*>, chain: ServerFilterChain): Publisher<MutableHttpResponse<*>>","description":"elide.server.http.HeaderFinalizingFilter.doFilter","location":"packages/server/elide.server.http/-header-finalizing-filter/do-filter.html","searchKeys":["doFilter","open override fun doFilter(request: HttpRequest<*>, chain: ServerFilterChain): Publisher<MutableHttpResponse<*>>","elide.server.http.HeaderFinalizingFilter.doFilter"]},{"name":"open override fun doFilter(request: HttpRequest<*>, chain: ServerFilterChain): Publisher<MutableHttpResponse<*>>","description":"elide.server.http.RequestContextFilter.doFilter","location":"packages/server/elide.server.http/-request-context-filter/do-filter.html","searchKeys":["doFilter","open override fun doFilter(request: HttpRequest<*>, chain: ServerFilterChain): Publisher<MutableHttpResponse<*>>","elide.server.http.RequestContextFilter.doFilter"]},{"name":"open override fun findByModuleId(moduleId: AssetModuleId): ServerAsset?","description":"elide.server.assets.ServerAssetReader.findByModuleId","location":"packages/server/elide.server.assets/-server-asset-reader/find-by-module-id.html","searchKeys":["findByModuleId","open override fun findByModuleId(moduleId: AssetModuleId): ServerAsset?","elide.server.assets.ServerAssetReader.findByModuleId"]},{"name":"open override fun linkForAsset(module: AssetModuleId, overrideType: AssetType?): String","description":"elide.server.assets.ServerAssetManager.linkForAsset","location":"packages/server/elide.server.assets/-server-asset-manager/link-for-asset.html","searchKeys":["linkForAsset","open override fun linkForAsset(module: AssetModuleId, overrideType: AssetType?): String","elide.server.assets.ServerAssetManager.linkForAsset"]},{"name":"open override fun onApplicationEvent(event: ServerStartupEvent)","description":"elide.server.Application.AppStartupListener.onApplicationEvent","location":"packages/server/elide.server/-application/-app-startup-listener/on-application-event.html","searchKeys":["onApplicationEvent","open override fun onApplicationEvent(event: ServerStartupEvent)","elide.server.Application.AppStartupListener.onApplicationEvent"]},{"name":"open override fun pointerTo(moduleId: AssetModuleId): AssetPointer?","description":"elide.server.assets.ServerAssetReader.pointerTo","location":"packages/server/elide.server.assets/-server-asset-reader/pointer-to.html","searchKeys":["pointerTo","open override fun pointerTo(moduleId: AssetModuleId): AssetPointer?","elide.server.assets.ServerAssetReader.pointerTo"]},{"name":"open override fun resolve(path: String): ServerAsset?","description":"elide.server.assets.ServerAssetReader.resolve","location":"packages/server/elide.server.assets/-server-asset-reader/resolve.html","searchKeys":["resolve","open override fun resolve(path: String): ServerAsset?","elide.server.assets.ServerAssetReader.resolve"]},{"name":"open override fun service(): ListeningScheduledExecutorService","description":"elide.server.runtime.AppExecutor.DefaultExecutor.service","location":"packages/server/elide.server.runtime/-app-executor/-default-executor/service.html","searchKeys":["service","open override fun service(): ListeningScheduledExecutorService","elide.server.runtime.AppExecutor.DefaultExecutor.service"]},{"name":"open override fun uncaughtException(thread: Thread, err: Throwable)","description":"elide.server.runtime.jvm.UncaughtExceptionHandler.uncaughtException","location":"packages/server/elide.server.runtime.jvm/-uncaught-exception-handler/uncaught-exception.html","searchKeys":["uncaughtException","open override fun uncaughtException(thread: Thread, err: Throwable)","elide.server.runtime.jvm.UncaughtExceptionHandler.uncaughtException"]},{"name":"open override val logging: Logger","description":"elide.server.assets.ServerAssetManager.logging","location":"packages/server/elide.server.assets/-server-asset-manager/logging.html","searchKeys":["logging","open override val logging: Logger","elide.server.assets.ServerAssetManager.logging"]},{"name":"open override val reader: AssetReader","description":"elide.server.assets.ServerAssetManager.reader","location":"packages/server/elide.server.assets/-server-asset-manager/reader.html","searchKeys":["reader","open override val reader: AssetReader","elide.server.assets.ServerAssetManager.reader"]},{"name":"open suspend fun finalizeAsync(state: RequestState): Deferred<Pair<State?, String?>>","description":"elide.server.controller.PageWithProps.finalizeAsync","location":"packages/server/elide.server.controller/-page-with-props/finalize-async.html","searchKeys":["finalizeAsync","open suspend fun finalizeAsync(state: RequestState): Deferred<Pair<State?, String?>>","elide.server.controller.PageWithProps.finalizeAsync"]},{"name":"open suspend fun props(state: RequestState): State?","description":"elide.server.controller.PageWithProps.props","location":"packages/server/elide.server.controller/-page-with-props/props.html","searchKeys":["props","open suspend fun props(state: RequestState): State?","elide.server.controller.PageWithProps.props"]},{"name":"open suspend fun propsAsync(state: RequestState): Deferred<State?>","description":"elide.server.controller.PageWithProps.propsAsync","location":"packages/server/elide.server.controller/-page-with-props/props-async.html","searchKeys":["propsAsync","open suspend fun propsAsync(state: RequestState): Deferred<State?>","elide.server.controller.PageWithProps.propsAsync"]},{"name":"open suspend fun serveAsync(request: HttpRequest<*>, moduleId: String? = null): Deferred<StreamedAssetResponse>","description":"elide.server.assets.AssetManager.serveAsync","location":"packages/server/elide.server.assets/-asset-manager/serve-async.html","searchKeys":["serveAsync","open suspend fun serveAsync(request: HttpRequest<*>, moduleId: String? = null): Deferred<StreamedAssetResponse>","elide.server.assets.AssetManager.serveAsync"]},{"name":"open suspend override fun handle(request: HttpRequest<out Any>): RawResponse","description":"elide.server.controller.builtin.NotFoundController.handle","location":"packages/server/elide.server.controller.builtin/-not-found-controller/handle.html","searchKeys":["handle","open suspend override fun handle(request: HttpRequest<out Any>): RawResponse","elide.server.controller.builtin.NotFoundController.handle"]},{"name":"open suspend override fun handle(request: HttpRequest<out Any>): RawResponse","description":"elide.server.controller.builtin.ServerErrorController.handle","location":"packages/server/elide.server.controller.builtin/-server-error-controller/handle.html","searchKeys":["handle","open suspend override fun handle(request: HttpRequest<out Any>): RawResponse","elide.server.controller.builtin.ServerErrorController.handle"]},{"name":"open suspend override fun readAsync(descriptor: ServerAsset, request: HttpRequest<*>): Deferred<RenderedAsset>","description":"elide.server.assets.ServerAssetReader.readAsync","location":"packages/server/elide.server.assets/-server-asset-reader/read-async.html","searchKeys":["readAsync","open suspend override fun readAsync(descriptor: ServerAsset, request: HttpRequest<*>): Deferred<RenderedAsset>","elide.server.assets.ServerAssetReader.readAsync"]},{"name":"open suspend override fun render(): ByteArrayOutputStream","description":"elide.server.HtmlRenderer.render","location":"packages/server/elide.server/-html-renderer/render.html","searchKeys":["render","open suspend override fun render(): ByteArrayOutputStream","elide.server.HtmlRenderer.render"]},{"name":"open suspend override fun render(): ByteArrayOutputStream","description":"elide.server.ssr.ServerSSRRenderer.render","location":"packages/server/elide.server.ssr/-server-s-s-r-renderer/render.html","searchKeys":["render","open suspend override fun render(): ByteArrayOutputStream","elide.server.ssr.ServerSSRRenderer.render"]},{"name":"open suspend override fun renderAssetAsync(request: HttpRequest<*>, asset: ServerAsset): Deferred<StreamedAssetResponse>","description":"elide.server.assets.ServerAssetManager.renderAssetAsync","location":"packages/server/elide.server.assets/-server-asset-manager/render-asset-async.html","searchKeys":["renderAssetAsync","open suspend override fun renderAssetAsync(request: HttpRequest<*>, asset: ServerAsset): Deferred<StreamedAssetResponse>","elide.server.assets.ServerAssetManager.renderAssetAsync"]},{"name":"open suspend override fun respond(response: MutableHttpResponse<ResponseBody>): MutableHttpResponse<ResponseBody>","description":"elide.server.BaseResponseHandler.respond","location":"packages/server/elide.server/-base-response-handler/respond.html","searchKeys":["respond","open suspend override fun respond(response: MutableHttpResponse<ResponseBody>): MutableHttpResponse<ResponseBody>","elide.server.BaseResponseHandler.respond"]},{"name":"open val etags: Boolean?","description":"elide.server.cfg.AssetConfig.etags","location":"packages/server/elide.server.cfg/-asset-config/etags.html","searchKeys":["etags","open val etags: Boolean?","elide.server.cfg.AssetConfig.etags"]},{"name":"open val hashLinks: Boolean?","description":"elide.server.cfg.AssetConfig.hashLinks","location":"packages/server/elide.server.cfg/-asset-config/hash-links.html","searchKeys":["hashLinks","open val hashLinks: Boolean?","elide.server.cfg.AssetConfig.hashLinks"]},{"name":"open val preferWeakEtags: Boolean?","description":"elide.server.cfg.AssetConfig.preferWeakEtags","location":"packages/server/elide.server.cfg/-asset-config/prefer-weak-etags.html","searchKeys":["preferWeakEtags","open val preferWeakEtags: Boolean?","elide.server.cfg.AssetConfig.preferWeakEtags"]},{"name":"open val prefix: String?","description":"elide.server.cfg.AssetConfig.prefix","location":"packages/server/elide.server.cfg/-asset-config/prefix.html","searchKeys":["prefix","open val prefix: String?","elide.server.cfg.AssetConfig.prefix"]},{"name":"open val rewriting: Boolean?","description":"elide.server.cfg.AssetConfig.rewriting","location":"packages/server/elide.server.cfg/-asset-config/rewriting.html","searchKeys":["rewriting","open val rewriting: Boolean?","elide.server.cfg.AssetConfig.rewriting"]},{"name":"sealed class ServerAsset","description":"elide.server.assets.ServerAsset","location":"packages/server/elide.server.assets/-server-asset/index.html","searchKeys":["ServerAsset","sealed class ServerAsset","elide.server.assets.ServerAsset"]},{"name":"suspend fun <R> async(operation: suspend () -> R): Deferred<R>","description":"elide.server.runtime.AppExecutor.Companion.async","location":"packages/server/elide.server.runtime/-app-executor/-companion/async.html","searchKeys":["async","suspend fun <R> async(operation: suspend () -> R): Deferred<R>","elide.server.runtime.AppExecutor.Companion.async"]},{"name":"suspend fun <R> io(operation: suspend () -> R): R","description":"elide.server.runtime.AppExecutor.Companion.io","location":"packages/server/elide.server.runtime/-app-executor/-companion/io.html","searchKeys":["io","suspend fun <R> io(operation: suspend () -> R): R","elide.server.runtime.AppExecutor.Companion.io"]},{"name":"suspend fun BODY.injectSSR(handler: ElideController, request: HttpRequest<*>, domId: String = DEFAULT_SSR_DOM_ID, classes: Set<String> = emptySet(), attrs: List<Pair<String, String>> = emptyList(), path: String? = null, embeddedRoot: String? = null)","description":"elide.server.injectSSR","location":"packages/server/elide.server/inject-s-s-r.html","searchKeys":["injectSSR","suspend fun BODY.injectSSR(handler: ElideController, request: HttpRequest<*>, domId: String = DEFAULT_SSR_DOM_ID, classes: Set<String> = emptySet(), attrs: List<Pair<String, String>> = emptyList(), path: String? = null, embeddedRoot: String? = null)","elide.server.injectSSR"]},{"name":"suspend fun BODY.streamSSR(handler: ElideController, request: HttpRequest<*>, domId: String = DEFAULT_SSR_DOM_ID, classes: Set<String> = emptySet(), attrs: List<Pair<String, String>> = emptyList(), path: String = SSR_SCRIPT_DEFAULT, embeddedRoot: String = EMBEDDED_ROOT)","description":"elide.server.streamSSR","location":"packages/server/elide.server/stream-s-s-r.html","searchKeys":["streamSSR","suspend fun BODY.streamSSR(handler: ElideController, request: HttpRequest<*>, domId: String = DEFAULT_SSR_DOM_ID, classes: Set<String> = emptySet(), attrs: List<Pair<String, String>> = emptyList(), path: String = SSR_SCRIPT_DEFAULT, embeddedRoot: String = EMBEDDED_ROOT)","elide.server.streamSSR"]},{"name":"suspend fun PageController.asset(request: HttpRequest<*>, moduleId: AssetModuleId, type: AssetType? = null): FinalizedAssetResponse","description":"elide.server.asset","location":"packages/server/elide.server/asset.html","searchKeys":["asset","suspend fun PageController.asset(request: HttpRequest<*>, moduleId: AssetModuleId, type: AssetType? = null): FinalizedAssetResponse","elide.server.asset"]},{"name":"suspend fun PageController.asset(request: HttpRequest<*>, type: AssetType? = null, block: suspend AssetHandler.() -> Unit): FinalizedAssetResponse","description":"elide.server.asset","location":"packages/server/elide.server/asset.html","searchKeys":["asset","suspend fun PageController.asset(request: HttpRequest<*>, type: AssetType? = null, block: suspend AssetHandler.() -> Unit): FinalizedAssetResponse","elide.server.asset"]},{"name":"suspend fun PageController.html(block: suspend HTML.() -> Unit): RawResponse","description":"elide.server.html","location":"packages/server/elide.server/html.html","searchKeys":["html","suspend fun PageController.html(block: suspend HTML.() -> Unit): RawResponse","elide.server.html"]},{"name":"suspend fun PageController.script(request: HttpRequest<*>, block: AssetHandler.() -> Unit): FinalizedAssetResponse","description":"elide.server.script","location":"packages/server/elide.server/script.html","searchKeys":["script","suspend fun PageController.script(request: HttpRequest<*>, block: AssetHandler.() -> Unit): FinalizedAssetResponse","elide.server.script"]},{"name":"suspend fun PageController.script(request: HttpRequest<*>, moduleId: AssetModuleId): FinalizedAssetResponse","description":"elide.server.script","location":"packages/server/elide.server/script.html","searchKeys":["script","suspend fun PageController.script(request: HttpRequest<*>, moduleId: AssetModuleId): FinalizedAssetResponse","elide.server.script"]},{"name":"suspend fun PageController.stylesheet(request: HttpRequest<*>, block: AssetHandler.() -> Unit): FinalizedAssetResponse","description":"elide.server.stylesheet","location":"packages/server/elide.server/stylesheet.html","searchKeys":["stylesheet","suspend fun PageController.stylesheet(request: HttpRequest<*>, block: AssetHandler.() -> Unit): FinalizedAssetResponse","elide.server.stylesheet"]},{"name":"suspend fun PageController.stylesheet(request: HttpRequest<*>, moduleId: AssetModuleId): FinalizedAssetResponse","description":"elide.server.stylesheet","location":"packages/server/elide.server/stylesheet.html","searchKeys":["stylesheet","suspend fun PageController.stylesheet(request: HttpRequest<*>, moduleId: AssetModuleId): FinalizedAssetResponse","elide.server.stylesheet"]},{"name":"suspend fun assetGet(request: HttpRequest<*>, tag: String, ext: String): FinalizedAssetResponse","description":"elide.server.assets.AssetController.assetGet","location":"packages/server/elide.server.assets/-asset-controller/asset-get.html","searchKeys":["assetGet","suspend fun assetGet(request: HttpRequest<*>, tag: String, ext: String): FinalizedAssetResponse","elide.server.assets.AssetController.assetGet"]},{"name":"suspend fun renderResponse(response: MutableHttpResponse<ByteArrayOutputStream>): MutableHttpResponse<ByteArrayOutputStream>","description":"elide.server.ssr.ServerSSRRenderer.renderResponse","location":"packages/server/elide.server.ssr/-server-s-s-r-renderer/render-response.html","searchKeys":["renderResponse","suspend fun renderResponse(response: MutableHttpResponse<ByteArrayOutputStream>): MutableHttpResponse<ByteArrayOutputStream>","elide.server.ssr.ServerSSRRenderer.renderResponse"]},{"name":"suspend fun renderSuspendAsync(): Deferred<String>","description":"elide.server.ssr.ServerSSRRenderer.renderSuspendAsync","location":"packages/server/elide.server.ssr/-server-s-s-r-renderer/render-suspend-async.html","searchKeys":["renderSuspendAsync","suspend fun renderSuspendAsync(): Deferred<String>","elide.server.ssr.ServerSSRRenderer.renderSuspendAsync"]},{"name":"suspend fun ssr(request: HttpRequest<*>, path: String = SSR_SCRIPT_DEFAULT, response: MutableHttpResponse<ByteArrayOutputStream> = HttpResponse.ok(), wrap: Boolean = false, block: suspend HTML.() -> Unit): Mono<HttpResponse<Publisher<ByteArray>>>","description":"elide.server.ssr","location":"packages/server/elide.server/ssr.html","searchKeys":["ssr","suspend fun ssr(request: HttpRequest<*>, path: String = SSR_SCRIPT_DEFAULT, response: MutableHttpResponse<ByteArrayOutputStream> = HttpResponse.ok(), wrap: Boolean = false, block: suspend HTML.() -> Unit): Mono<HttpResponse<Publisher<ByteArray>>>","elide.server.ssr"]},{"name":"typealias AssetModuleId = String","description":"elide.server.AssetModuleId","location":"packages/server/elide.server/-asset-module-id/index.html","searchKeys":["AssetModuleId","typealias AssetModuleId = String","elide.server.AssetModuleId"]},{"name":"typealias AssetTag = String","description":"elide.server.AssetTag","location":"packages/server/elide.server/-asset-tag/index.html","searchKeys":["AssetTag","typealias AssetTag = String","elide.server.AssetTag"]},{"name":"typealias Eager = elide.annotations.Eager","description":"elide.server.annotations.Eager","location":"packages/server/elide.server.annotations/-eager/index.html","searchKeys":["Eager","typealias Eager = elide.annotations.Eager","elide.server.annotations.Eager"]},{"name":"typealias FinalizedAsset = ByteArray","description":"elide.server.FinalizedAsset","location":"packages/server/elide.server/-finalized-asset/index.html","searchKeys":["FinalizedAsset","typealias FinalizedAsset = ByteArray","elide.server.FinalizedAsset"]},{"name":"typealias FinalizedAssetResponse = MutableHttpResponse<FinalizedAsset>","description":"elide.server.FinalizedAssetResponse","location":"packages/server/elide.server/-finalized-asset-response/index.html","searchKeys":["FinalizedAssetResponse","typealias FinalizedAssetResponse = MutableHttpResponse<FinalizedAsset>","elide.server.FinalizedAssetResponse"]},{"name":"typealias RawPayload = ByteArray","description":"elide.server.RawPayload","location":"packages/server/elide.server/-raw-payload/index.html","searchKeys":["RawPayload","typealias RawPayload = ByteArray","elide.server.RawPayload"]},{"name":"typealias RawResponse = HttpResponse<RawPayload>","description":"elide.server.RawResponse","location":"packages/server/elide.server/-raw-response/index.html","searchKeys":["RawResponse","typealias RawResponse = HttpResponse<RawPayload>","elide.server.RawResponse"]},{"name":"typealias StreamedAsset = Pair<MediaType, ByteArray>","description":"elide.server.StreamedAsset","location":"packages/server/elide.server/-streamed-asset/index.html","searchKeys":["StreamedAsset","typealias StreamedAsset = Pair<MediaType, ByteArray>","elide.server.StreamedAsset"]},{"name":"typealias StreamedAssetResponse = MutableHttpResponse<StreamedAsset>","description":"elide.server.StreamedAssetResponse","location":"packages/server/elide.server/-streamed-asset-response/index.html","searchKeys":["StreamedAssetResponse","typealias StreamedAssetResponse = MutableHttpResponse<StreamedAsset>","elide.server.StreamedAssetResponse"]},{"name":"val ASSET_MANAGER: RequestContext.Key","description":"elide.server.http.RequestContext.Key.Companion.ASSET_MANAGER","location":"packages/server/elide.server.http/-request-context/-key/-companion/-a-s-s-e-t_-m-a-n-a-g-e-r.html","searchKeys":["ASSET_MANAGER","val ASSET_MANAGER: RequestContext.Key","elide.server.http.RequestContext.Key.Companion.ASSET_MANAGER"]},{"name":"val DEFAULT_INVOCATION_BASE: String? = null","description":"elide.server.DEFAULT_INVOCATION_BASE","location":"packages/server/elide.server/-d-e-f-a-u-l-t_-i-n-v-o-c-a-t-i-o-n_-b-a-s-e.html","searchKeys":["DEFAULT_INVOCATION_BASE","val DEFAULT_INVOCATION_BASE: String? = null","elide.server.DEFAULT_INVOCATION_BASE"]},{"name":"val assetType: AssetType","description":"elide.server.assets.AssetReference.assetType","location":"packages/server/elide.server.assets/-asset-reference/asset-type.html","searchKeys":["assetType","val assetType: AssetType","elide.server.assets.AssetReference.assetType"]},{"name":"val bannedConfig: SortedSet<String>","description":"elide.server.cfg.ServerConfigurator.Companion.bannedConfig","location":"packages/server/elide.server.cfg/-server-configurator/-companion/banned-config.html","searchKeys":["bannedConfig","val bannedConfig: SortedSet<String>","elide.server.cfg.ServerConfigurator.Companion.bannedConfig"]},{"name":"val baseMap: SortedMap<String, Any>","description":"elide.server.cfg.ServerConfigurator.Companion.baseMap","location":"packages/server/elide.server.cfg/-server-configurator/-companion/base-map.html","searchKeys":["baseMap","val baseMap: SortedMap<String, Any>","elide.server.cfg.ServerConfigurator.Companion.baseMap"]},{"name":"val cipherSuites: List<String>","description":"elide.server.cfg.ServerConfigurator.Companion.cipherSuites","location":"packages/server/elide.server.cfg/-server-configurator/-companion/cipher-suites.html","searchKeys":["cipherSuites","val cipherSuites: List<String>","elide.server.cfg.ServerConfigurator.Companion.cipherSuites"]},{"name":"val consumes: Array<String>","description":"elide.server.annotations.Page.consumes","location":"packages/server/elide.server.annotations/-page/consumes.html","searchKeys":["consumes","val consumes: Array<String>","elide.server.annotations.Page.consumes"]},{"name":"val defaultAccessLogExclusions: SortedSet<String>","description":"elide.server.cfg.ServerConfigurator.Companion.defaultAccessLogExclusions","location":"packages/server/elide.server.cfg/-server-configurator/-companion/default-access-log-exclusions.html","searchKeys":["defaultAccessLogExclusions","val defaultAccessLogExclusions: SortedSet<String>","elide.server.cfg.ServerConfigurator.Companion.defaultAccessLogExclusions"]},{"name":"val digest: Pair<HashAlgorithm, ByteString>?","description":"elide.server.assets.RenderedAsset.digest","location":"packages/server/elide.server.assets/-rendered-asset/digest.html","searchKeys":["digest","val digest: Pair<HashAlgorithm, ByteString>?","elide.server.assets.RenderedAsset.digest"]},{"name":"val entries: EnumEntries<AssetType>","description":"elide.server.assets.AssetType.entries","location":"packages/server/elide.server.assets/-asset-type/entries.html","searchKeys":["entries","val entries: EnumEntries<AssetType>","elide.server.assets.AssetType.entries"]},{"name":"val etag: String","description":"elide.server.assets.AssetPointer.etag","location":"packages/server/elide.server.assets/-asset-pointer/etag.html","searchKeys":["etag","val etag: String","elide.server.assets.AssetPointer.etag"]},{"name":"val headers: Map<String, String>","description":"elide.server.assets.RenderedAsset.headers","location":"packages/server/elide.server.assets/-rendered-asset/headers.html","searchKeys":["headers","val headers: Map<String, String>","elide.server.assets.RenderedAsset.headers"]},{"name":"val href: String","description":"elide.server.assets.AssetReference.href","location":"packages/server/elide.server.assets/-asset-reference/href.html","searchKeys":["href","val href: String","elide.server.assets.AssetReference.href"]},{"name":"val index: SortedSet<Int>?","description":"elide.server.assets.AssetPointer.index","location":"packages/server/elide.server.assets/-asset-pointer/--index--.html","searchKeys":["index","val index: SortedSet<Int>?","elide.server.assets.AssetPointer.index"]},{"name":"val inline: Boolean = false","description":"elide.server.assets.AssetReference.inline","location":"packages/server/elide.server.assets/-asset-reference/inline.html","searchKeys":["inline","val inline: Boolean = false","elide.server.assets.AssetReference.inline"]},{"name":"val labsMap: SortedMap<String, Any>","description":"elide.server.cfg.ServerConfigurator.Companion.labsMap","location":"packages/server/elide.server.cfg/-server-configurator/-companion/labs-map.html","searchKeys":["labsMap","val labsMap: SortedMap<String, Any>","elide.server.cfg.ServerConfigurator.Companion.labsMap"]},{"name":"val lastModified: Long","description":"elide.server.assets.RenderedAsset.lastModified","location":"packages/server/elide.server.assets/-rendered-asset/last-modified.html","searchKeys":["lastModified","val lastModified: Long","elide.server.assets.RenderedAsset.lastModified"]},{"name":"val modified: Long","description":"elide.server.assets.AssetPointer.modified","location":"packages/server/elide.server.assets/-asset-pointer/modified.html","searchKeys":["modified","val modified: Long","elide.server.assets.AssetPointer.modified"]},{"name":"val module: AssetModuleId","description":"elide.server.assets.AssetReference.module","location":"packages/server/elide.server.assets/-asset-reference/module.html","searchKeys":["module","val module: AssetModuleId","elide.server.assets.AssetReference.module"]},{"name":"val module: AssetModuleId","description":"elide.server.assets.RenderedAsset.module","location":"packages/server/elide.server.assets/-rendered-asset/module.html","searchKeys":["module","val module: AssetModuleId","elide.server.assets.RenderedAsset.module"]},{"name":"val moduleId: AssetModuleId","description":"elide.server.assets.AssetPointer.moduleId","location":"packages/server/elide.server.assets/-asset-pointer/module-id.html","searchKeys":["moduleId","val moduleId: AssetModuleId","elide.server.assets.AssetPointer.moduleId"]},{"name":"val name: String","description":"elide.server.annotations.Page.name","location":"packages/server/elide.server.annotations/-page/name.html","searchKeys":["name","val name: String","elide.server.annotations.Page.name"]},{"name":"val name: String","description":"elide.server.http.RequestContext.Key.name","location":"packages/server/elide.server.http/-request-context/-key/name.html","searchKeys":["name","val name: String","elide.server.http.RequestContext.Key.name"]},{"name":"val nonTestMap: SortedMap<String, Any>","description":"elide.server.cfg.ServerConfigurator.Companion.nonTestMap","location":"packages/server/elide.server.cfg/-server-configurator/-companion/non-test-map.html","searchKeys":["nonTestMap","val nonTestMap: SortedMap<String, Any>","elide.server.cfg.ServerConfigurator.Companion.nonTestMap"]},{"name":"val poolSize: Int","description":"elide.server.runtime.AppExecutor.DefaultSettings.poolSize","location":"packages/server/elide.server.runtime/-app-executor/-default-settings/pool-size.html","searchKeys":["poolSize","val poolSize: Int","elide.server.runtime.AppExecutor.DefaultSettings.poolSize"]},{"name":"val precompile: Boolean = true","description":"elide.server.annotations.Page.precompile","location":"packages/server/elide.server.annotations/-page/precompile.html","searchKeys":["precompile","val precompile: Boolean = true","elide.server.annotations.Page.precompile"]},{"name":"val preload: Boolean = false","description":"elide.server.assets.AssetReference.preload","location":"packages/server/elide.server.assets/-asset-reference/preload.html","searchKeys":["preload","val preload: Boolean = false","elide.server.assets.AssetReference.preload"]},{"name":"val producer: () -> ByteString","description":"elide.server.assets.RenderedAsset.producer","location":"packages/server/elide.server.assets/-rendered-asset/producer.html","searchKeys":["producer","val producer: () -> ByteString","elide.server.assets.RenderedAsset.producer"]},{"name":"val produces: Array<String>","description":"elide.server.annotations.Page.produces","location":"packages/server/elide.server.annotations/-page/produces.html","searchKeys":["produces","val produces: Array<String>","elide.server.annotations.Page.produces"]},{"name":"val route: String","description":"elide.server.annotations.Page.route","location":"packages/server/elide.server.annotations/-page/route.html","searchKeys":["route","val route: String","elide.server.annotations.Page.route"]},{"name":"val size: Long","description":"elide.server.assets.RenderedAsset.size","location":"packages/server/elide.server.assets/-rendered-asset/size.html","searchKeys":["size","val size: Long","elide.server.assets.RenderedAsset.size"]},{"name":"val systemProps: SortedMap<String, String>","description":"elide.server.cfg.ServerConfigurator.Companion.systemProps","location":"packages/server/elide.server.cfg/-server-configurator/-companion/system-props.html","searchKeys":["systemProps","val systemProps: SortedMap<String, String>","elide.server.cfg.ServerConfigurator.Companion.systemProps"]},{"name":"val tag: String","description":"elide.server.assets.AssetPointer.tag","location":"packages/server/elide.server.assets/-asset-pointer/tag.html","searchKeys":["tag","val tag: String","elide.server.assets.AssetPointer.tag"]},{"name":"val token: String","description":"elide.server.assets.AssetPointer.token","location":"packages/server/elide.server.assets/-asset-pointer/token.html","searchKeys":["token","val token: String","elide.server.assets.AssetPointer.token"]},{"name":"val type: AssetType","description":"elide.server.assets.AssetPointer.type","location":"packages/server/elide.server.assets/-asset-pointer/type.html","searchKeys":["type","val type: AssetType","elide.server.assets.AssetPointer.type"]},{"name":"val type: AssetType","description":"elide.server.assets.RenderedAsset.type","location":"packages/server/elide.server.assets/-rendered-asset/type.html","searchKeys":["type","val type: AssetType","elide.server.assets.RenderedAsset.type"]},{"name":"val type: String? = null","description":"elide.server.assets.AssetReference.type","location":"packages/server/elide.server.assets/-asset-reference/type.html","searchKeys":["type","val type: String? = null","elide.server.assets.AssetReference.type"]},{"name":"val variant: CompressionMode","description":"elide.server.assets.RenderedAsset.variant","location":"packages/server/elide.server.assets/-rendered-asset/variant.html","searchKeys":["variant","val variant: CompressionMode","elide.server.assets.RenderedAsset.variant"]},{"name":"var assets: AssetConfig","description":"elide.server.cfg.ServerConfig.assets","location":"packages/server/elide.server.cfg/-server-config/assets.html","searchKeys":["assets","var assets: AssetConfig","elide.server.cfg.ServerConfig.assets"]},{"name":"var inline: Boolean","description":"elide.server.controller.PageController.AssetReferenceBuilder.inline","location":"packages/server/elide.server.controller/-page-controller/-asset-reference-builder/inline.html","searchKeys":["inline","var inline: Boolean","elide.server.controller.PageController.AssetReferenceBuilder.inline"]},{"name":"var module: AssetModuleId","description":"elide.server.controller.PageController.AssetReferenceBuilder.module","location":"packages/server/elide.server.controller/-page-controller/-asset-reference-builder/module.html","searchKeys":["module","var module: AssetModuleId","elide.server.controller.PageController.AssetReferenceBuilder.module"]},{"name":"var preload: Boolean","description":"elide.server.controller.PageController.AssetReferenceBuilder.preload","location":"packages/server/elide.server.controller/-page-controller/-asset-reference-builder/preload.html","searchKeys":["preload","var preload: Boolean","elide.server.controller.PageController.AssetReferenceBuilder.preload"]},{"name":"BASE64","description":"elide.core.encoding.Encoding.BASE64","location":"packages/core/elide.core.encoding/-encoding/-b-a-s-e64/index.html","searchKeys":["BASE64","BASE64","elide.core.encoding.Encoding.BASE64"]},{"name":"HEX","description":"elide.core.encoding.Encoding.HEX","location":"packages/core/elide.core.encoding/-encoding/-h-e-x/index.html","searchKeys":["HEX","HEX","elide.core.encoding.Encoding.HEX"]},{"name":"IDENTITY","description":"elide.core.crypto.HashAlgorithm.IDENTITY","location":"packages/core/elide.core.crypto/-hash-algorithm/-i-d-e-n-t-i-t-y/index.html","searchKeys":["IDENTITY","IDENTITY","elide.core.crypto.HashAlgorithm.IDENTITY"]},{"name":"MD5","description":"elide.core.crypto.HashAlgorithm.MD5","location":"packages/core/elide.core.crypto/-hash-algorithm/-m-d5/index.html","searchKeys":["MD5","MD5","elide.core.crypto.HashAlgorithm.MD5"]},{"name":"SHA1","description":"elide.core.crypto.HashAlgorithm.SHA1","location":"packages/core/elide.core.crypto/-hash-algorithm/-s-h-a1/index.html","searchKeys":["SHA1","SHA1","elide.core.crypto.HashAlgorithm.SHA1"]},{"name":"SHA3_224","description":"elide.core.crypto.HashAlgorithm.SHA3_224","location":"packages/core/elide.core.crypto/-hash-algorithm/-s-h-a3_224/index.html","searchKeys":["SHA3_224","SHA3_224","elide.core.crypto.HashAlgorithm.SHA3_224"]},{"name":"SHA3_256","description":"elide.core.crypto.HashAlgorithm.SHA3_256","location":"packages/core/elide.core.crypto/-hash-algorithm/-s-h-a3_256/index.html","searchKeys":["SHA3_256","SHA3_256","elide.core.crypto.HashAlgorithm.SHA3_256"]},{"name":"SHA3_512","description":"elide.core.crypto.HashAlgorithm.SHA3_512","location":"packages/core/elide.core.crypto/-hash-algorithm/-s-h-a3_512/index.html","searchKeys":["SHA3_512","SHA3_512","elide.core.crypto.HashAlgorithm.SHA3_512"]},{"name":"SHA_256","description":"elide.core.crypto.HashAlgorithm.SHA_256","location":"packages/core/elide.core.crypto/-hash-algorithm/-s-h-a_256/index.html","searchKeys":["SHA_256","SHA_256","elide.core.crypto.HashAlgorithm.SHA_256"]},{"name":"SHA_512","description":"elide.core.crypto.HashAlgorithm.SHA_512","location":"packages/core/elide.core.crypto/-hash-algorithm/-s-h-a_512/index.html","searchKeys":["SHA_512","SHA_512","elide.core.crypto.HashAlgorithm.SHA_512"]},{"name":"UTF_16","description":"elide.core.encoding.Encoding.UTF_16","location":"packages/core/elide.core.encoding/-encoding/-u-t-f_16/index.html","searchKeys":["UTF_16","UTF_16","elide.core.encoding.Encoding.UTF_16"]},{"name":"UTF_32","description":"elide.core.encoding.Encoding.UTF_32","location":"packages/core/elide.core.encoding/-encoding/-u-t-f_32/index.html","searchKeys":["UTF_32","UTF_32","elide.core.encoding.Encoding.UTF_32"]},{"name":"UTF_8","description":"elide.core.encoding.Encoding.UTF_8","location":"packages/core/elide.core.encoding/-encoding/-u-t-f_8/index.html","searchKeys":["UTF_8","UTF_8","elide.core.encoding.Encoding.UTF_8"]},{"name":"abstract class AbstractResolver<T : Symbolic<T>> : Symbolic.SealedResolver<T, Symbolic<T>> ","description":"elide.core.api.Symbolic.AbstractResolver","location":"packages/core/elide.core.api/-symbolic/-abstract-resolver/index.html","searchKeys":["AbstractResolver","abstract class AbstractResolver<T : Symbolic<T>> : Symbolic.SealedResolver<T, Symbolic<T>> ","elide.core.api.Symbolic.AbstractResolver"]},{"name":"abstract fun decodeBytes(data: ByteArray): ByteArray","description":"elide.core.encoding.Decoder.decodeBytes","location":"packages/core/elide.core.encoding/-decoder/decode-bytes.html","searchKeys":["decodeBytes","abstract fun decodeBytes(data: ByteArray): ByteArray","elide.core.encoding.Decoder.decodeBytes"]},{"name":"abstract fun encode(data: ByteArray): Raw","description":"elide.core.encoding.Encoder.encode","location":"packages/core/elide.core.encoding/-encoder/encode.html","searchKeys":["encode","abstract fun encode(data: ByteArray): Raw","elide.core.encoding.Encoder.encode"]},{"name":"abstract fun encoding(): Encoding","description":"elide.core.encoding.CodecIdentifiable.encoding","location":"packages/core/elide.core.encoding/-codec-identifiable/encoding.html","searchKeys":["encoding","abstract fun encoding(): Encoding","elide.core.encoding.CodecIdentifiable.encoding"]},{"name":"abstract fun resolve(symbol: T): Concrete?","description":"elide.core.api.Symbolic.Resolver.resolve","location":"packages/core/elide.core.api/-symbolic/-resolver/resolve.html","searchKeys":["resolve","abstract fun resolve(symbol: T): Concrete?","elide.core.api.Symbolic.Resolver.resolve"]},{"name":"abstract override fun resolve(symbol: T): Concrete","description":"elide.core.api.Symbolic.Enumerated.resolve","location":"packages/core/elide.core.api/-symbolic/-enumerated/resolve.html","searchKeys":["resolve","abstract override fun resolve(symbol: T): Concrete","elide.core.api.Symbolic.Enumerated.resolve"]},{"name":"abstract val data: ByteArray","description":"elide.core.encoding.EncodedData.data","location":"packages/core/elide.core.encoding/-encoded-data/data.html","searchKeys":["data","abstract val data: ByteArray","elide.core.encoding.EncodedData.data"]},{"name":"abstract val encoding: Encoding","description":"elide.core.encoding.EncodedData.encoding","location":"packages/core/elide.core.encoding/-encoded-data/encoding.html","searchKeys":["encoding","abstract val encoding: Encoding","elide.core.encoding.EncodedData.encoding"]},{"name":"abstract val name: String","description":"elide.core.api.Symbolic.AbstractResolver.name","location":"packages/core/elide.core.api/-symbolic/-abstract-resolver/name.html","searchKeys":["name","abstract val name: String","elide.core.api.Symbolic.AbstractResolver.name"]},{"name":"abstract val string: String","description":"elide.core.encoding.EncodedData.string","location":"packages/core/elide.core.encoding/-encoded-data/string.html","searchKeys":["string","abstract val string: String","elide.core.encoding.EncodedData.string"]},{"name":"abstract val symbol: T","description":"elide.core.api.Symbolic.symbol","location":"packages/core/elide.core.api/-symbolic/symbol.html","searchKeys":["symbol","abstract val symbol: T","elide.core.api.Symbolic.symbol"]},{"name":"class Decoder","description":"elide.core.encoding.base64.DefaultBase64.Decoder","location":"packages/core/elide.core.encoding.base64/-default-base64/-decoder/index.html","searchKeys":["Decoder","class Decoder","elide.core.encoding.base64.DefaultBase64.Decoder"]},{"name":"class Unresolved : IllegalStateException","description":"elide.core.api.Symbolic.Unresolved","location":"packages/core/elide.core.api/-symbolic/-unresolved/index.html","searchKeys":["Unresolved","class Unresolved : IllegalStateException","elide.core.api.Symbolic.Unresolved"]},{"name":"constructor()","description":"elide.core.api.Symbolic.AbstractResolver.AbstractResolver","location":"packages/core/elide.core.api/-symbolic/-abstract-resolver/-abstract-resolver.html","searchKeys":["AbstractResolver","constructor()","elide.core.api.Symbolic.AbstractResolver.AbstractResolver"]},{"name":"constructor()","description":"elide.core.encoding.base64.Base64.Decoder.Decoder","location":"packages/core/elide.core.encoding.base64/-base64/-decoder/-decoder.html","searchKeys":["Decoder","constructor()","elide.core.encoding.base64.Base64.Decoder.Decoder"]},{"name":"constructor()","description":"elide.core.encoding.base64.DefaultBase64.Decoder.Decoder","location":"packages/core/elide.core.encoding.base64/-default-base64/-decoder/-decoder.html","searchKeys":["Decoder","constructor()","elide.core.encoding.base64.DefaultBase64.Decoder.Decoder"]},{"name":"constructor()","description":"elide.core.encoding.base64.DefaultBase64.Encoder.Encoder","location":"packages/core/elide.core.encoding.base64/-default-base64/-encoder/-encoder.html","searchKeys":["Encoder","constructor()","elide.core.encoding.base64.DefaultBase64.Encoder.Encoder"]},{"name":"constructor()","description":"elide.core.platform.PlatformDefaults.PlatformDefaults","location":"packages/core/elide.core.platform/-platform-defaults/-platform-defaults.html","searchKeys":["PlatformDefaults","constructor()","elide.core.platform.PlatformDefaults.PlatformDefaults"]},{"name":"constructor(data: ByteArray)","description":"elide.core.encoding.base64.Base64Data.Base64Data","location":"packages/core/elide.core.encoding.base64/-base64-data/-base64-data.html","searchKeys":["Base64Data","constructor(data: ByteArray)","elide.core.encoding.base64.Base64Data.Base64Data"]},{"name":"constructor(encoded: String)","description":"elide.core.encoding.hex.HexData.HexData","location":"packages/core/elide.core.encoding.hex/-hex-data/-hex-data.html","searchKeys":["HexData","constructor(encoded: String)","elide.core.encoding.hex.HexData.HexData"]},{"name":"enum Encoding : Enum<Encoding> ","description":"elide.core.encoding.Encoding","location":"packages/core/elide.core.encoding/-encoding/index.html","searchKeys":["Encoding","enum Encoding : Enum<Encoding> ","elide.core.encoding.Encoding"]},{"name":"enum HashAlgorithm : Enum<HashAlgorithm> ","description":"elide.core.crypto.HashAlgorithm","location":"packages/core/elide.core.crypto/-hash-algorithm/index.html","searchKeys":["HashAlgorithm","enum HashAlgorithm : Enum<HashAlgorithm> ","elide.core.crypto.HashAlgorithm"]},{"name":"expect annotation class Inline","description":"elide.core.annotations.Inline","location":"packages/core/elide.core.annotations/-inline/index.html","searchKeys":["Inline","expect annotation class Inline","elide.core.annotations.Inline"]},{"name":"expect annotation class Static","description":"elide.core.annotations.Static","location":"packages/core/elide.core.annotations/-static/index.html","searchKeys":["Static","expect annotation class Static","elide.core.annotations.Static"]},{"name":"expect class Decoder","description":"elide.core.encoding.base64.Base64.Decoder","location":"packages/core/elide.core.encoding.base64/-base64/-decoder/index.html","searchKeys":["Decoder","expect class Decoder","elide.core.encoding.base64.Base64.Decoder"]},{"name":"expect class Encoder","description":"elide.core.encoding.base64.Base64.Encoder","location":"packages/core/elide.core.encoding.base64/-base64/-encoder/index.html","searchKeys":["Encoder","expect class Encoder","elide.core.encoding.base64.Base64.Encoder"]},{"name":"expect class PlatformDefaults : PlatformDefaults","description":"elide.core.platform.PlatformDefaults","location":"packages/core/elide.core.platform/-platform-defaults/index.html","searchKeys":["PlatformDefaults","expect class PlatformDefaults : PlatformDefaults","elide.core.platform.PlatformDefaults"]},{"name":"expect constructor()","description":"elide.core.encoding.base64.Base64.Encoder.Encoder","location":"packages/core/elide.core.encoding.base64/-base64/-encoder/-encoder.html","searchKeys":["Encoder","expect constructor()","elide.core.encoding.base64.Base64.Encoder.Encoder"]},{"name":"expect fun decode(src: ByteArray): ByteArray","description":"elide.core.encoding.base64.Base64.Decoder.decode","location":"packages/core/elide.core.encoding.base64/-base64/-decoder/decode.html","searchKeys":["decode","expect fun decode(src: ByteArray): ByteArray","elide.core.encoding.base64.Base64.Decoder.decode"]},{"name":"expect fun encode(src: ByteArray): ByteArray","description":"elide.core.encoding.base64.Base64.Encoder.encode","location":"packages/core/elide.core.encoding.base64/-base64/-encoder/encode.html","searchKeys":["encode","expect fun encode(src: ByteArray): ByteArray","elide.core.encoding.base64.Base64.Encoder.encode"]},{"name":"expect fun encodeWebSafe(data: ByteArray): ByteArray","description":"elide.core.encoding.base64.Base64.encodeWebSafe","location":"packages/core/elide.core.encoding.base64/-base64/encode-web-safe.html","searchKeys":["encodeWebSafe","expect fun encodeWebSafe(data: ByteArray): ByteArray","elide.core.encoding.base64.Base64.encodeWebSafe"]},{"name":"expect fun encodeWebSafe(string: String): String","description":"elide.core.encoding.base64.Base64.encodeWebSafe","location":"packages/core/elide.core.encoding.base64/-base64/encode-web-safe.html","searchKeys":["encodeWebSafe","expect fun encodeWebSafe(string: String): String","elide.core.encoding.base64.Base64.encodeWebSafe"]},{"name":"expect object Base64 : Codec<Base64Data> ","description":"elide.core.encoding.base64.Base64","location":"packages/core/elide.core.encoding.base64/-base64/index.html","searchKeys":["Base64","expect object Base64 : Codec<Base64Data> ","elide.core.encoding.base64.Base64"]},{"name":"expect object Companion","description":"elide.core.encoding.base64.Base64.Decoder.Companion","location":"packages/core/elide.core.encoding.base64/-base64/-decoder/-companion/index.html","searchKeys":["Companion","expect object Companion","elide.core.encoding.base64.Base64.Decoder.Companion"]},{"name":"expect object Companion","description":"elide.core.encoding.base64.Base64.Encoder.Companion","location":"packages/core/elide.core.encoding.base64/-base64/-encoder/-companion/index.html","searchKeys":["Companion","expect object Companion","elide.core.encoding.base64.Base64.Encoder.Companion"]},{"name":"expect object Hex : Codec<HexData> ","description":"elide.core.encoding.hex.Hex","location":"packages/core/elide.core.encoding.hex/-hex/index.html","searchKeys":["Hex","expect object Hex : Codec<HexData> ","elide.core.encoding.hex.Hex"]},{"name":"expect open override fun decode(data: Base64Data): ByteArray","description":"elide.core.encoding.base64.Base64.decode","location":"packages/core/elide.core.encoding.base64/-base64/decode.html","searchKeys":["decode","expect open override fun decode(data: Base64Data): ByteArray","elide.core.encoding.base64.Base64.decode"]},{"name":"expect open override fun decodeBytes(data: ByteArray): ByteArray","description":"elide.core.encoding.hex.Hex.decodeBytes","location":"packages/core/elide.core.encoding.hex/-hex/decode-bytes.html","searchKeys":["decodeBytes","expect open override fun decodeBytes(data: ByteArray): ByteArray","elide.core.encoding.hex.Hex.decodeBytes"]},{"name":"expect open override fun decoder(): Decoder<Base64Data>","description":"elide.core.encoding.base64.Base64.decoder","location":"packages/core/elide.core.encoding.base64/-base64/decoder.html","searchKeys":["decoder","expect open override fun decoder(): Decoder<Base64Data>","elide.core.encoding.base64.Base64.decoder"]},{"name":"expect open override fun encode(data: ByteArray): HexData","description":"elide.core.encoding.hex.Hex.encode","location":"packages/core/elide.core.encoding.hex/-hex/encode.html","searchKeys":["encode","expect open override fun encode(data: ByteArray): HexData","elide.core.encoding.hex.Hex.encode"]},{"name":"expect open override fun encoder(): Encoder<Base64Data>","description":"elide.core.encoding.base64.Base64.encoder","location":"packages/core/elide.core.encoding.base64/-base64/encoder.html","searchKeys":["encoder","expect open override fun encoder(): Encoder<Base64Data>","elide.core.encoding.base64.Base64.encoder"]},{"name":"expect open override fun encoding(): Encoding","description":"elide.core.encoding.base64.Base64.encoding","location":"packages/core/elide.core.encoding.base64/-base64/encoding.html","searchKeys":["encoding","expect open override fun encoding(): Encoding","elide.core.encoding.base64.Base64.encoding"]},{"name":"expect open override fun encoding(): Encoding","description":"elide.core.encoding.hex.Hex.encoding","location":"packages/core/elide.core.encoding.hex/-hex/encoding.html","searchKeys":["encoding","expect open override fun encoding(): Encoding","elide.core.encoding.hex.Hex.encoding"]},{"name":"expect val DEFAULT: Base64.Decoder","description":"elide.core.encoding.base64.Base64.Decoder.Companion.DEFAULT","location":"packages/core/elide.core.encoding.base64/-base64/-decoder/-companion/-d-e-f-a-u-l-t.html","searchKeys":["DEFAULT","expect val DEFAULT: Base64.Decoder","elide.core.encoding.base64.Base64.Decoder.Companion.DEFAULT"]},{"name":"expect val DEFAULT: Base64.Encoder","description":"elide.core.encoding.base64.Base64.Encoder.Companion.DEFAULT","location":"packages/core/elide.core.encoding.base64/-base64/-encoder/-companion/-d-e-f-a-u-l-t.html","searchKeys":["DEFAULT","expect val DEFAULT: Base64.Encoder","elide.core.encoding.base64.Base64.Encoder.Companion.DEFAULT"]},{"name":"expect val DEFAULT_WEBSAFE: Base64.Encoder","description":"elide.core.encoding.base64.Base64.Encoder.Companion.DEFAULT_WEBSAFE","location":"packages/core/elide.core.encoding.base64/-base64/-encoder/-companion/-d-e-f-a-u-l-t_-w-e-b-s-a-f-e.html","searchKeys":["DEFAULT_WEBSAFE","expect val DEFAULT_WEBSAFE: Base64.Encoder","elide.core.encoding.base64.Base64.Encoder.Companion.DEFAULT_WEBSAFE"]},{"name":"fun ByteArray.toBase64(): Base64Data","description":"elide.core.encoding.toBase64","location":"packages/core/elide.core.encoding/to-base64.html","searchKeys":["toBase64","fun ByteArray.toBase64(): Base64Data","elide.core.encoding.toBase64"]},{"name":"fun ByteArray.toBase64Bytes(): ByteArray","description":"elide.core.encoding.toBase64Bytes","location":"packages/core/elide.core.encoding/to-base64-bytes.html","searchKeys":["toBase64Bytes","fun ByteArray.toBase64Bytes(): ByteArray","elide.core.encoding.toBase64Bytes"]},{"name":"fun ByteArray.toBase64String(): String","description":"elide.core.encoding.toBase64String","location":"packages/core/elide.core.encoding/to-base64-string.html","searchKeys":["toBase64String","fun ByteArray.toBase64String(): String","elide.core.encoding.toBase64String"]},{"name":"fun ByteArray.toHex(): HexData","description":"elide.core.encoding.toHex","location":"packages/core/elide.core.encoding/to-hex.html","searchKeys":["toHex","fun ByteArray.toHex(): HexData","elide.core.encoding.toHex"]},{"name":"fun ByteArray.toHexBytes(): ByteArray","description":"elide.core.encoding.toHexBytes","location":"packages/core/elide.core.encoding/to-hex-bytes.html","searchKeys":["toHexBytes","fun ByteArray.toHexBytes(): ByteArray","elide.core.encoding.toHexBytes"]},{"name":"fun ByteArray.toHexString(): String","description":"elide.core.encoding.toHexString","location":"packages/core/elide.core.encoding/to-hex-string.html","searchKeys":["toHexString","fun ByteArray.toHexString(): String","elide.core.encoding.toHexString"]},{"name":"fun String.toBase64(): Base64Data","description":"elide.core.encoding.toBase64","location":"packages/core/elide.core.encoding/to-base64.html","searchKeys":["toBase64","fun String.toBase64(): Base64Data","elide.core.encoding.toBase64"]},{"name":"fun String.toBase64Bytes(): ByteArray","description":"elide.core.encoding.toBase64Bytes","location":"packages/core/elide.core.encoding/to-base64-bytes.html","searchKeys":["toBase64Bytes","fun String.toBase64Bytes(): ByteArray","elide.core.encoding.toBase64Bytes"]},{"name":"fun String.toBase64String(): String","description":"elide.core.encoding.toBase64String","location":"packages/core/elide.core.encoding/to-base64-string.html","searchKeys":["toBase64String","fun String.toBase64String(): String","elide.core.encoding.toBase64String"]},{"name":"fun String.toHex(): HexData","description":"elide.core.encoding.toHex","location":"packages/core/elide.core.encoding/to-hex.html","searchKeys":["toHex","fun String.toHex(): HexData","elide.core.encoding.toHex"]},{"name":"fun String.toHexBytes(): ByteArray","description":"elide.core.encoding.toHexBytes","location":"packages/core/elide.core.encoding/to-hex-bytes.html","searchKeys":["toHexBytes","fun String.toHexBytes(): ByteArray","elide.core.encoding.toHexBytes"]},{"name":"fun String.toHexString(): String","description":"elide.core.encoding.toHexString","location":"packages/core/elide.core.encoding/to-hex-string.html","searchKeys":["toHexString","fun String.toHexString(): String","elide.core.encoding.toHexString"]},{"name":"fun decode(src: ByteArray): ByteArray","description":"elide.core.encoding.base64.DefaultBase64.Decoder.decode","location":"packages/core/elide.core.encoding.base64/-default-base64/-decoder/decode.html","searchKeys":["decode","fun decode(src: ByteArray): ByteArray","elide.core.encoding.base64.DefaultBase64.Decoder.decode"]},{"name":"fun encode(src: ByteArray): ByteArray","description":"elide.core.encoding.base64.DefaultBase64.Encoder.encode","location":"packages/core/elide.core.encoding.base64/-default-base64/-encoder/encode.html","searchKeys":["encode","fun encode(src: ByteArray): ByteArray","elide.core.encoding.base64.DefaultBase64.Encoder.encode"]},{"name":"fun encodeWebSafe(data: ByteArray): ByteArray","description":"elide.core.encoding.base64.DefaultBase64.encodeWebSafe","location":"packages/core/elide.core.encoding.base64/-default-base64/encode-web-safe.html","searchKeys":["encodeWebSafe","fun encodeWebSafe(data: ByteArray): ByteArray","elide.core.encoding.base64.DefaultBase64.encodeWebSafe"]},{"name":"fun encodeWebSafe(string: String): String","description":"elide.core.encoding.base64.DefaultBase64.encodeWebSafe","location":"packages/core/elide.core.encoding.base64/-default-base64/encode-web-safe.html","searchKeys":["encodeWebSafe","fun encodeWebSafe(string: String): String","elide.core.encoding.base64.DefaultBase64.encodeWebSafe"]},{"name":"fun valueOf(value: String): Encoding","description":"elide.core.encoding.Encoding.valueOf","location":"packages/core/elide.core.encoding/-encoding/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): Encoding","elide.core.encoding.Encoding.valueOf"]},{"name":"fun valueOf(value: String): HashAlgorithm","description":"elide.core.crypto.HashAlgorithm.valueOf","location":"packages/core/elide.core.crypto/-hash-algorithm/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): HashAlgorithm","elide.core.crypto.HashAlgorithm.valueOf"]},{"name":"fun values(): Array<Encoding>","description":"elide.core.encoding.Encoding.values","location":"packages/core/elide.core.encoding/-encoding/values.html","searchKeys":["values","fun values(): Array<Encoding>","elide.core.encoding.Encoding.values"]},{"name":"fun values(): Array<HashAlgorithm>","description":"elide.core.crypto.HashAlgorithm.values","location":"packages/core/elide.core.crypto/-hash-algorithm/values.html","searchKeys":["values","fun values(): Array<HashAlgorithm>","elide.core.crypto.HashAlgorithm.values"]},{"name":"interface Codec<Raw : EncodedData> : Encoder<Raw> , Decoder<Raw> , CodecIdentifiable","description":"elide.core.encoding.Codec","location":"packages/core/elide.core.encoding/-codec/index.html","searchKeys":["Codec","interface Codec<Raw : EncodedData> : Encoder<Raw> , Decoder<Raw> , CodecIdentifiable","elide.core.encoding.Codec"]},{"name":"interface CodecIdentifiable","description":"elide.core.encoding.CodecIdentifiable","location":"packages/core/elide.core.encoding/-codec-identifiable/index.html","searchKeys":["CodecIdentifiable","interface CodecIdentifiable","elide.core.encoding.CodecIdentifiable"]},{"name":"interface Decoder<Raw : EncodedData> : CodecIdentifiable","description":"elide.core.encoding.Decoder","location":"packages/core/elide.core.encoding/-decoder/index.html","searchKeys":["Decoder","interface Decoder<Raw : EncodedData> : CodecIdentifiable","elide.core.encoding.Decoder"]},{"name":"interface EncodedData","description":"elide.core.encoding.EncodedData","location":"packages/core/elide.core.encoding/-encoded-data/index.html","searchKeys":["EncodedData","interface EncodedData","elide.core.encoding.EncodedData"]},{"name":"interface Encoder<Raw : EncodedData> : CodecIdentifiable","description":"elide.core.encoding.Encoder","location":"packages/core/elide.core.encoding/-encoder/index.html","searchKeys":["Encoder","interface Encoder<Raw : EncodedData> : CodecIdentifiable","elide.core.encoding.Encoder"]},{"name":"interface Enumerated<T : Any, Concrete : Symbolic<T>> : Symbolic.Resolver<T, Concrete> ","description":"elide.core.api.Symbolic.Enumerated","location":"packages/core/elide.core.api/-symbolic/-enumerated/index.html","searchKeys":["Enumerated","interface Enumerated<T : Any, Concrete : Symbolic<T>> : Symbolic.Resolver<T, Concrete> ","elide.core.api.Symbolic.Enumerated"]},{"name":"interface PlatformDefaults","description":"elide.core.PlatformDefaults","location":"packages/core/elide.core/-platform-defaults/index.html","searchKeys":["PlatformDefaults","interface PlatformDefaults","elide.core.PlatformDefaults"]},{"name":"interface Resolver<T : Any, Concrete : Symbolic<T>>","description":"elide.core.api.Symbolic.Resolver","location":"packages/core/elide.core.api/-symbolic/-resolver/index.html","searchKeys":["Resolver","interface Resolver<T : Any, Concrete : Symbolic<T>>","elide.core.api.Symbolic.Resolver"]},{"name":"interface SealedResolver<T : Any, Concrete : Symbolic<T>> : Symbolic.Enumerated<T, Concrete> ","description":"elide.core.api.Symbolic.SealedResolver","location":"packages/core/elide.core.api/-symbolic/-sealed-resolver/index.html","searchKeys":["SealedResolver","interface SealedResolver<T : Any, Concrete : Symbolic<T>> : Symbolic.Enumerated<T, Concrete> ","elide.core.api.Symbolic.SealedResolver"]},{"name":"interface Symbolic<T>","description":"elide.core.api.Symbolic","location":"packages/core/elide.core.api/-symbolic/index.html","searchKeys":["Symbolic","interface Symbolic<T>","elide.core.api.Symbolic"]},{"name":"object Companion","description":"elide.core.encoding.base64.DefaultBase64.Decoder.Companion","location":"packages/core/elide.core.encoding.base64/-default-base64/-decoder/-companion/index.html","searchKeys":["Companion","object Companion","elide.core.encoding.base64.DefaultBase64.Decoder.Companion"]},{"name":"object Companion","description":"elide.core.encoding.base64.DefaultBase64.Encoder.Companion","location":"packages/core/elide.core.encoding.base64/-default-base64/-encoder/-companion/index.html","searchKeys":["Companion","object Companion","elide.core.encoding.base64.DefaultBase64.Encoder.Companion"]},{"name":"object DefaultBase64 : Codec<Base64Data> ","description":"elide.core.encoding.base64.DefaultBase64","location":"packages/core/elide.core.encoding.base64/-default-base64/index.html","searchKeys":["DefaultBase64","object DefaultBase64 : Codec<Base64Data> ","elide.core.encoding.base64.DefaultBase64"]},{"name":"object DefaultHex : Codec<HexData> ","description":"elide.core.encoding.hex.DefaultHex","location":"packages/core/elide.core.encoding.hex/-default-hex/index.html","searchKeys":["DefaultHex","object DefaultHex : Codec<HexData> ","elide.core.encoding.hex.DefaultHex"]},{"name":"object Defaults : PlatformDefaults","description":"elide.core.Defaults","location":"packages/core/elide.core/-defaults/index.html","searchKeys":["Defaults","object Defaults : PlatformDefaults","elide.core.Defaults"]},{"name":"open class Encoder","description":"elide.core.encoding.base64.DefaultBase64.Encoder","location":"packages/core/elide.core.encoding.base64/-default-base64/-encoder/index.html","searchKeys":["Encoder","open class Encoder","elide.core.encoding.base64.DefaultBase64.Encoder"]},{"name":"open fun decode(data: Raw): ByteArray","description":"elide.core.encoding.Decoder.decode","location":"packages/core/elide.core.encoding/-decoder/decode.html","searchKeys":["decode","open fun decode(data: Raw): ByteArray","elide.core.encoding.Decoder.decode"]},{"name":"open fun decodeString(string: String): ByteArray","description":"elide.core.encoding.Decoder.decodeString","location":"packages/core/elide.core.encoding/-decoder/decode-string.html","searchKeys":["decodeString","open fun decodeString(string: String): ByteArray","elide.core.encoding.Decoder.decodeString"]},{"name":"open fun decodeToString(data: ByteArray): String","description":"elide.core.encoding.Decoder.decodeToString","location":"packages/core/elide.core.encoding/-decoder/decode-to-string.html","searchKeys":["decodeToString","open fun decodeToString(data: ByteArray): String","elide.core.encoding.Decoder.decodeToString"]},{"name":"open fun decodeToString(string: String): String","description":"elide.core.encoding.Decoder.decodeToString","location":"packages/core/elide.core.encoding/-decoder/decode-to-string.html","searchKeys":["decodeToString","open fun decodeToString(string: String): String","elide.core.encoding.Decoder.decodeToString"]},{"name":"open fun decoder(): Decoder<Raw>","description":"elide.core.encoding.Codec.decoder","location":"packages/core/elide.core.encoding/-codec/decoder.html","searchKeys":["decoder","open fun decoder(): Decoder<Raw>","elide.core.encoding.Codec.decoder"]},{"name":"open fun encodeBytes(data: ByteArray): ByteArray","description":"elide.core.encoding.Encoder.encodeBytes","location":"packages/core/elide.core.encoding/-encoder/encode-bytes.html","searchKeys":["encodeBytes","open fun encodeBytes(data: ByteArray): ByteArray","elide.core.encoding.Encoder.encodeBytes"]},{"name":"open fun encodeString(string: String): ByteArray","description":"elide.core.encoding.Encoder.encodeString","location":"packages/core/elide.core.encoding/-encoder/encode-string.html","searchKeys":["encodeString","open fun encodeString(string: String): ByteArray","elide.core.encoding.Encoder.encodeString"]},{"name":"open fun encodeToString(data: ByteArray): String","description":"elide.core.encoding.Encoder.encodeToString","location":"packages/core/elide.core.encoding/-encoder/encode-to-string.html","searchKeys":["encodeToString","open fun encodeToString(data: ByteArray): String","elide.core.encoding.Encoder.encodeToString"]},{"name":"open fun encodeToString(string: String): String","description":"elide.core.encoding.Encoder.encodeToString","location":"packages/core/elide.core.encoding/-encoder/encode-to-string.html","searchKeys":["encodeToString","open fun encodeToString(string: String): String","elide.core.encoding.Encoder.encodeToString"]},{"name":"open fun encoder(): Encoder<Raw>","description":"elide.core.encoding.Codec.encoder","location":"packages/core/elide.core.encoding/-codec/encoder.html","searchKeys":["encoder","open fun encoder(): Encoder<Raw>","elide.core.encoding.Codec.encoder"]},{"name":"open fun resolveSymbol(symbol: T): Concrete","description":"elide.core.api.Symbolic.Resolver.resolveSymbol","location":"packages/core/elide.core.api/-symbolic/-resolver/resolve-symbol.html","searchKeys":["resolveSymbol","open fun resolveSymbol(symbol: T): Concrete","elide.core.api.Symbolic.Resolver.resolveSymbol"]},{"name":"open fun unresolved(requested: T): Symbolic.Unresolved","description":"elide.core.api.Symbolic.Enumerated.unresolved","location":"packages/core/elide.core.api/-symbolic/-enumerated/unresolved.html","searchKeys":["unresolved","open fun unresolved(requested: T): Symbolic.Unresolved","elide.core.api.Symbolic.Enumerated.unresolved"]},{"name":"open override fun decodeBytes(data: ByteArray): ByteArray","description":"elide.core.encoding.base64.Base64.decodeBytes","location":"packages/core/elide.core.encoding.base64/-base64/[js]decode-bytes.html","searchKeys":["decodeBytes","open override fun decodeBytes(data: ByteArray): ByteArray","elide.core.encoding.base64.Base64.decodeBytes"]},{"name":"open override fun decodeBytes(data: ByteArray): ByteArray","description":"elide.core.encoding.base64.Base64.decodeBytes","location":"packages/core/elide.core.encoding.base64/-base64/[jvm]decode-bytes.html","searchKeys":["decodeBytes","open override fun decodeBytes(data: ByteArray): ByteArray","elide.core.encoding.base64.Base64.decodeBytes"]},{"name":"open override fun decodeBytes(data: ByteArray): ByteArray","description":"elide.core.encoding.base64.Base64.decodeBytes","location":"packages/core/elide.core.encoding.base64/-base64/[native]decode-bytes.html","searchKeys":["decodeBytes","open override fun decodeBytes(data: ByteArray): ByteArray","elide.core.encoding.base64.Base64.decodeBytes"]},{"name":"open override fun decodeBytes(data: ByteArray): ByteArray","description":"elide.core.encoding.base64.DefaultBase64.decodeBytes","location":"packages/core/elide.core.encoding.base64/-default-base64/decode-bytes.html","searchKeys":["decodeBytes","open override fun decodeBytes(data: ByteArray): ByteArray","elide.core.encoding.base64.DefaultBase64.decodeBytes"]},{"name":"open override fun decodeBytes(data: ByteArray): ByteArray","description":"elide.core.encoding.hex.DefaultHex.decodeBytes","location":"packages/core/elide.core.encoding.hex/-default-hex/decode-bytes.html","searchKeys":["decodeBytes","open override fun decodeBytes(data: ByteArray): ByteArray","elide.core.encoding.hex.DefaultHex.decodeBytes"]},{"name":"open override fun encode(data: ByteArray): Base64Data","description":"elide.core.encoding.base64.Base64.encode","location":"packages/core/elide.core.encoding.base64/-base64/[js]encode.html","searchKeys":["encode","open override fun encode(data: ByteArray): Base64Data","elide.core.encoding.base64.Base64.encode"]},{"name":"open override fun encode(data: ByteArray): Base64Data","description":"elide.core.encoding.base64.Base64.encode","location":"packages/core/elide.core.encoding.base64/-base64/[jvm]encode.html","searchKeys":["encode","open override fun encode(data: ByteArray): Base64Data","elide.core.encoding.base64.Base64.encode"]},{"name":"open override fun encode(data: ByteArray): Base64Data","description":"elide.core.encoding.base64.Base64.encode","location":"packages/core/elide.core.encoding.base64/-base64/[native]encode.html","searchKeys":["encode","open override fun encode(data: ByteArray): Base64Data","elide.core.encoding.base64.Base64.encode"]},{"name":"open override fun encode(data: ByteArray): Base64Data","description":"elide.core.encoding.base64.DefaultBase64.encode","location":"packages/core/elide.core.encoding.base64/-default-base64/encode.html","searchKeys":["encode","open override fun encode(data: ByteArray): Base64Data","elide.core.encoding.base64.DefaultBase64.encode"]},{"name":"open override fun encode(data: ByteArray): HexData","description":"elide.core.encoding.hex.DefaultHex.encode","location":"packages/core/elide.core.encoding.hex/-default-hex/encode.html","searchKeys":["encode","open override fun encode(data: ByteArray): HexData","elide.core.encoding.hex.DefaultHex.encode"]},{"name":"open override fun encoding(): Encoding","description":"elide.core.encoding.base64.DefaultBase64.encoding","location":"packages/core/elide.core.encoding.base64/-default-base64/encoding.html","searchKeys":["encoding","open override fun encoding(): Encoding","elide.core.encoding.base64.DefaultBase64.encoding"]},{"name":"open override fun encoding(): Encoding","description":"elide.core.encoding.hex.DefaultHex.encoding","location":"packages/core/elide.core.encoding.hex/-default-hex/encoding.html","searchKeys":["encoding","open override fun encoding(): Encoding","elide.core.encoding.hex.DefaultHex.encoding"]},{"name":"open override val charset: String","description":"elide.core.Defaults.charset","location":"packages/core/elide.core/-defaults/charset.html","searchKeys":["charset","open override val charset: String","elide.core.Defaults.charset"]},{"name":"open override val data: ByteArray","description":"elide.core.encoding.base64.Base64Data.data","location":"packages/core/elide.core.encoding.base64/-base64-data/data.html","searchKeys":["data","open override val data: ByteArray","elide.core.encoding.base64.Base64Data.data"]},{"name":"open override val data: ByteArray","description":"elide.core.encoding.hex.HexData.data","location":"packages/core/elide.core.encoding.hex/-hex-data/data.html","searchKeys":["data","open override val data: ByteArray","elide.core.encoding.hex.HexData.data"]},{"name":"open override val encoding: Encoding","description":"elide.core.encoding.base64.Base64Data.encoding","location":"packages/core/elide.core.encoding.base64/-base64-data/encoding.html","searchKeys":["encoding","open override val encoding: Encoding","elide.core.encoding.base64.Base64Data.encoding"]},{"name":"open override val encoding: Encoding","description":"elide.core.encoding.hex.HexData.encoding","location":"packages/core/elide.core.encoding.hex/-hex-data/encoding.html","searchKeys":["encoding","open override val encoding: Encoding","elide.core.encoding.hex.HexData.encoding"]},{"name":"open override val string: String","description":"elide.core.encoding.base64.Base64Data.string","location":"packages/core/elide.core.encoding.base64/-base64-data/string.html","searchKeys":["string","open override val string: String","elide.core.encoding.base64.Base64Data.string"]},{"name":"open override val string: String","description":"elide.core.encoding.hex.HexData.string","location":"packages/core/elide.core.encoding.hex/-hex-data/string.html","searchKeys":["string","open override val string: String","elide.core.encoding.hex.HexData.string"]},{"name":"open val charset: String","description":"elide.core.PlatformDefaults.charset","location":"packages/core/elide.core/-platform-defaults/charset.html","searchKeys":["charset","open val charset: String","elide.core.PlatformDefaults.charset"]},{"name":"typealias Base64 = DefaultBase64","description":"elide.core.encoding.Base64","location":"packages/core/elide.core.encoding/-base64/index.html","searchKeys":["Base64","typealias Base64 = DefaultBase64","elide.core.encoding.Base64"]},{"name":"typealias Hex = DefaultHex","description":"elide.core.encoding.Hex","location":"packages/core/elide.core.encoding/-hex/index.html","searchKeys":["Hex","typealias Hex = DefaultHex","elide.core.encoding.Hex"]},{"name":"val CHARACTER_SET: CharArray","description":"elide.core.encoding.hex.DefaultHex.CHARACTER_SET","location":"packages/core/elide.core.encoding.hex/-default-hex/-c-h-a-r-a-c-t-e-r_-s-e-t.html","searchKeys":["CHARACTER_SET","val CHARACTER_SET: CharArray","elide.core.encoding.hex.DefaultHex.CHARACTER_SET"]},{"name":"val DEFAULT: DefaultBase64.Decoder","description":"elide.core.encoding.base64.DefaultBase64.Decoder.Companion.DEFAULT","location":"packages/core/elide.core.encoding.base64/-default-base64/-decoder/-companion/-d-e-f-a-u-l-t.html","searchKeys":["DEFAULT","val DEFAULT: DefaultBase64.Decoder","elide.core.encoding.base64.DefaultBase64.Decoder.Companion.DEFAULT"]},{"name":"val DEFAULT: DefaultBase64.Encoder","description":"elide.core.encoding.base64.DefaultBase64.Encoder.Companion.DEFAULT","location":"packages/core/elide.core.encoding.base64/-default-base64/-encoder/-companion/-d-e-f-a-u-l-t.html","searchKeys":["DEFAULT","val DEFAULT: DefaultBase64.Encoder","elide.core.encoding.base64.DefaultBase64.Encoder.Companion.DEFAULT"]},{"name":"val DEFAULT_WEBSAFE: DefaultBase64.Encoder","description":"elide.core.encoding.base64.DefaultBase64.Encoder.Companion.DEFAULT_WEBSAFE","location":"packages/core/elide.core.encoding.base64/-default-base64/-encoder/-companion/-d-e-f-a-u-l-t_-w-e-b-s-a-f-e.html","searchKeys":["DEFAULT_WEBSAFE","val DEFAULT_WEBSAFE: DefaultBase64.Encoder","elide.core.encoding.base64.DefaultBase64.Encoder.Companion.DEFAULT_WEBSAFE"]},{"name":"val entries: EnumEntries<Encoding>","description":"elide.core.encoding.Encoding.entries","location":"packages/core/elide.core.encoding/-encoding/entries.html","searchKeys":["entries","val entries: EnumEntries<Encoding>","elide.core.encoding.Encoding.entries"]},{"name":"val entries: EnumEntries<HashAlgorithm>","description":"elide.core.crypto.HashAlgorithm.entries","location":"packages/core/elide.core.crypto/-hash-algorithm/entries.html","searchKeys":["entries","val entries: EnumEntries<HashAlgorithm>","elide.core.crypto.HashAlgorithm.entries"]},{"name":"value class Base64Data(val data: ByteArray) : EncodedData","description":"elide.core.encoding.base64.Base64Data","location":"packages/core/elide.core.encoding.base64/-base64-data/index.html","searchKeys":["Base64Data","value class Base64Data(val data: ByteArray) : EncodedData","elide.core.encoding.base64.Base64Data"]},{"name":"value class HexData(encoded: String) : EncodedData","description":"elide.core.encoding.hex.HexData","location":"packages/core/elide.core.encoding.hex/-hex-data/index.html","searchKeys":["HexData","value class HexData(encoded: String) : EncodedData","elide.core.encoding.hex.HexData"]},{"name":"BASE64","description":"elide.util.Encoding.BASE64","location":"packages/base/elide.util/-encoding/-b-a-s-e64/index.html","searchKeys":["BASE64","BASE64","elide.util.Encoding.BASE64"]},{"name":"DEBUG","description":"elide.runtime.LogLevel.DEBUG","location":"packages/base/elide.runtime/-log-level/-d-e-b-u-g/index.html","searchKeys":["DEBUG","DEBUG","elide.runtime.LogLevel.DEBUG"]},{"name":"ERROR","description":"elide.runtime.LogLevel.ERROR","location":"packages/base/elide.runtime/-log-level/-e-r-r-o-r/index.html","searchKeys":["ERROR","ERROR","elide.runtime.LogLevel.ERROR"]},{"name":"HEX","description":"elide.util.Encoding.HEX","location":"packages/base/elide.util/-encoding/-h-e-x/index.html","searchKeys":["HEX","HEX","elide.util.Encoding.HEX"]},{"name":"INFO","description":"elide.runtime.LogLevel.INFO","location":"packages/base/elide.runtime/-log-level/-i-n-f-o/index.html","searchKeys":["INFO","INFO","elide.runtime.LogLevel.INFO"]},{"name":"LIVE","description":"elide.AppEnvironment.LIVE","location":"packages/base/elide/-app-environment/-l-i-v-e/index.html","searchKeys":["LIVE","LIVE","elide.AppEnvironment.LIVE"]},{"name":"SANDBOX","description":"elide.AppEnvironment.SANDBOX","location":"packages/base/elide/-app-environment/-s-a-n-d-b-o-x/index.html","searchKeys":["SANDBOX","SANDBOX","elide.AppEnvironment.SANDBOX"]},{"name":"TRACE","description":"elide.runtime.LogLevel.TRACE","location":"packages/base/elide.runtime/-log-level/-t-r-a-c-e/index.html","searchKeys":["TRACE","TRACE","elide.runtime.LogLevel.TRACE"]},{"name":"WARN","description":"elide.runtime.LogLevel.WARN","location":"packages/base/elide.runtime/-log-level/-w-a-r-n/index.html","searchKeys":["WARN","WARN","elide.runtime.LogLevel.WARN"]},{"name":"abstract fun decode(data: ByteArray): ByteArray","description":"elide.util.Encoder.decode","location":"packages/base/elide.util/-encoder/decode.html","searchKeys":["decode","abstract fun decode(data: ByteArray): ByteArray","elide.util.Encoder.decode"]},{"name":"abstract fun decode(string: String): ByteArray","description":"elide.util.Encoder.decode","location":"packages/base/elide.util/-encoder/decode.html","searchKeys":["decode","abstract fun decode(string: String): ByteArray","elide.util.Encoder.decode"]},{"name":"abstract fun decodeToString(data: ByteArray): String","description":"elide.util.Encoder.decodeToString","location":"packages/base/elide.util/-encoder/decode-to-string.html","searchKeys":["decodeToString","abstract fun decodeToString(data: ByteArray): String","elide.util.Encoder.decodeToString"]},{"name":"abstract fun decodeToString(string: String): String","description":"elide.util.Encoder.decodeToString","location":"packages/base/elide.util/-encoder/decode-to-string.html","searchKeys":["decodeToString","abstract fun decodeToString(string: String): String","elide.util.Encoder.decodeToString"]},{"name":"abstract fun encode(data: ByteArray): ByteArray","description":"elide.util.Encoder.encode","location":"packages/base/elide.util/-encoder/encode.html","searchKeys":["encode","abstract fun encode(data: ByteArray): ByteArray","elide.util.Encoder.encode"]},{"name":"abstract fun encode(string: String): ByteArray","description":"elide.util.Encoder.encode","location":"packages/base/elide.util/-encoder/encode.html","searchKeys":["encode","abstract fun encode(string: String): ByteArray","elide.util.Encoder.encode"]},{"name":"abstract fun encodeToString(data: ByteArray): String","description":"elide.util.Encoder.encodeToString","location":"packages/base/elide.util/-encoder/encode-to-string.html","searchKeys":["encodeToString","abstract fun encodeToString(data: ByteArray): String","elide.util.Encoder.encodeToString"]},{"name":"abstract fun encodeToString(string: String): String","description":"elide.util.Encoder.encodeToString","location":"packages/base/elide.util/-encoder/encode-to-string.html","searchKeys":["encodeToString","abstract fun encodeToString(string: String): String","elide.util.Encoder.encodeToString"]},{"name":"abstract fun encoding(): Encoding","description":"elide.util.Encoder.encoding","location":"packages/base/elide.util/-encoder/encoding.html","searchKeys":["encoding","abstract fun encoding(): Encoding","elide.util.Encoder.encoding"]},{"name":"annotation class API","description":"elide.annotations.API","location":"packages/base/elide.annotations/-a-p-i/index.html","searchKeys":["API","annotation class API","elide.annotations.API"]},{"name":"annotation class Eager","description":"elide.annotations.Eager","location":"packages/base/elide.annotations/-eager/index.html","searchKeys":["Eager","annotation class Eager","elide.annotations.Eager"]},{"name":"annotation class Endpoint","description":"elide.annotations.Endpoint","location":"packages/base/elide.annotations/-endpoint/index.html","searchKeys":["Endpoint","annotation class Endpoint","elide.annotations.Endpoint"]},{"name":"annotation class Experimental","description":"elide.annotations.base.Experimental","location":"packages/base/elide.annotations.base/-experimental/index.html","searchKeys":["Experimental","annotation class Experimental","elide.annotations.base.Experimental"]},{"name":"annotation class Experimental","description":"elide.annotations.core.Experimental","location":"packages/base/elide.annotations.core/-experimental/index.html","searchKeys":["Experimental","annotation class Experimental","elide.annotations.core.Experimental"]},{"name":"annotation class Generated","description":"elide.annotations.Generated","location":"packages/base/elide.annotations/-generated/index.html","searchKeys":["Generated","annotation class Generated","elide.annotations.Generated"]},{"name":"annotation class Internal","description":"elide.annotations.base.Internal","location":"packages/base/elide.annotations.base/-internal/index.html","searchKeys":["Internal","annotation class Internal","elide.annotations.base.Internal"]},{"name":"annotation class Internal","description":"elide.annotations.core.Internal","location":"packages/base/elide.annotations.core/-internal/index.html","searchKeys":["Internal","annotation class Internal","elide.annotations.core.Internal"]},{"name":"annotation class Logic","description":"elide.annotations.Logic","location":"packages/base/elide.annotations/-logic/index.html","searchKeys":["Logic","annotation class Logic","elide.annotations.Logic"]},{"name":"annotation class Sensitive","description":"elide.annotations.data.Sensitive","location":"packages/base/elide.annotations.data/-sensitive/index.html","searchKeys":["Sensitive","annotation class Sensitive","elide.annotations.data.Sensitive"]},{"name":"class Decoder","description":"elide.util.Base64Kt.Decoder","location":"packages/base/elide.util/-base64-kt/-decoder/index.html","searchKeys":["Decoder","class Decoder","elide.util.Base64Kt.Decoder"]},{"name":"class Encoder","description":"elide.util.Base64Kt.Encoder","location":"packages/base/elide.util/-base64-kt/-encoder/index.html","searchKeys":["Encoder","class Encoder","elide.util.Base64Kt.Encoder"]},{"name":"class Logger(logger: Logger) : Logger","description":"elide.runtime.jvm.Logger","location":"packages/base/elide.runtime.jvm/-logger/index.html","searchKeys":["Logger","class Logger(logger: Logger) : Logger","elide.runtime.jvm.Logger"]},{"name":"const val DEFAULT_INSPECT_PORT: Int = 4200","description":"elide.util.RuntimeFlag.DEFAULT_INSPECT_PORT","location":"packages/base/elide.util/-runtime-flag/-d-e-f-a-u-l-t_-i-n-s-p-e-c-t_-p-o-r-t.html","searchKeys":["DEFAULT_INSPECT_PORT","const val DEFAULT_INSPECT_PORT: Int = 4200","elide.util.RuntimeFlag.DEFAULT_INSPECT_PORT"]},{"name":"const val generatedPackage: String","description":"elide.runtime.Runtime.generatedPackage","location":"packages/base/elide.runtime/-runtime/generated-package.html","searchKeys":["generatedPackage","const val generatedPackage: String","elide.runtime.Runtime.generatedPackage"]},{"name":"constructor()","description":"elide.runtime.Logging.Logging","location":"packages/base/elide.runtime/-logging/-logging.html","searchKeys":["Logging","constructor()","elide.runtime.Logging.Logging"]},{"name":"constructor()","description":"elide.util.Base64Kt.Decoder.Decoder","location":"packages/base/elide.util/-base64-kt/-decoder/-decoder.html","searchKeys":["Decoder","constructor()","elide.util.Base64Kt.Decoder.Decoder"]},{"name":"constructor(logger: Logger)","description":"elide.runtime.jvm.Logger.Logger","location":"packages/base/elide.runtime.jvm/-logger/-logger.html","searchKeys":["Logger","constructor(logger: Logger)","elide.runtime.jvm.Logger.Logger"]},{"name":"constructor(name: String? = null)","description":"elide.runtime.js.Logger.Logger","location":"packages/base/elide.runtime.js/-logger/-logger.html","searchKeys":["Logger","constructor(name: String? = null)","elide.runtime.js.Logger.Logger"]},{"name":"data class Logger(val name: String? = null) : Logger","description":"elide.runtime.js.Logger","location":"packages/base/elide.runtime.js/-logger/index.html","searchKeys":["Logger","data class Logger(val name: String? = null) : Logger","elide.runtime.js.Logger"]},{"name":"enum AppEnvironment : Enum<AppEnvironment> ","description":"elide.AppEnvironment","location":"packages/base/elide/-app-environment/index.html","searchKeys":["AppEnvironment","enum AppEnvironment : Enum<AppEnvironment> ","elide.AppEnvironment"]},{"name":"enum Encoding : Enum<Encoding> ","description":"elide.util.Encoding","location":"packages/base/elide.util/-encoding/index.html","searchKeys":["Encoding","enum Encoding : Enum<Encoding> ","elide.util.Encoding"]},{"name":"enum LogLevel : Enum<LogLevel> ","description":"elide.runtime.LogLevel","location":"packages/base/elide.runtime/-log-level/index.html","searchKeys":["LogLevel","enum LogLevel : Enum<LogLevel> ","elide.runtime.LogLevel"]},{"name":"expect abstract fun isEnabled(level: LogLevel): Boolean","description":"elide.runtime.Logger.isEnabled","location":"packages/base/elide.runtime/-logger/is-enabled.html","searchKeys":["isEnabled","expect abstract fun isEnabled(level: LogLevel): Boolean","elide.runtime.Logger.isEnabled"]},{"name":"expect abstract fun log(level: LogLevel, message: List<Any>, levelChecked: Boolean = false)","description":"elide.runtime.Logger.log","location":"packages/base/elide.runtime/-logger/log.html","searchKeys":["log","expect abstract fun log(level: LogLevel, message: List<Any>, levelChecked: Boolean = false)","elide.runtime.Logger.log"]},{"name":"expect annotation class Context","description":"elide.annotations.Context","location":"packages/base/elide.annotations/-context/index.html","searchKeys":["Context","expect annotation class Context","elide.annotations.Context"]},{"name":"expect annotation class Factory","description":"elide.annotations.Factory","location":"packages/base/elide.annotations/-factory/index.html","searchKeys":["Factory","expect annotation class Factory","elide.annotations.Factory"]},{"name":"expect annotation class Inject","description":"elide.annotations.Inject","location":"packages/base/elide.annotations/-inject/index.html","searchKeys":["Inject","expect annotation class Inject","elide.annotations.Inject"]},{"name":"expect annotation class Named","description":"elide.annotations.Named","location":"packages/base/elide.annotations/-named/index.html","searchKeys":["Named","expect annotation class Named","elide.annotations.Named"]},{"name":"expect annotation class Qualifier","description":"elide.annotations.Qualifier","location":"packages/base/elide.annotations/-qualifier/index.html","searchKeys":["Qualifier","expect annotation class Qualifier","elide.annotations.Qualifier"]},{"name":"expect annotation class Singleton","description":"elide.annotations.Singleton","location":"packages/base/elide.annotations/-singleton/index.html","searchKeys":["Singleton","expect annotation class Singleton","elide.annotations.Singleton"]},{"name":"expect class Logging","description":"elide.runtime.Logging","location":"packages/base/elide.runtime/-logging/index.html","searchKeys":["Logging","expect class Logging","elide.runtime.Logging"]},{"name":"expect fun encodeWebSafe(data: ByteArray): ByteArray","description":"elide.util.Base64.encodeWebSafe","location":"packages/base/elide.util/-base64/encode-web-safe.html","searchKeys":["encodeWebSafe","expect fun encodeWebSafe(data: ByteArray): ByteArray","elide.util.Base64.encodeWebSafe"]},{"name":"expect fun encodeWebSafe(string: String): String","description":"elide.util.Base64.encodeWebSafe","location":"packages/base/elide.util/-base64/encode-web-safe.html","searchKeys":["encodeWebSafe","expect fun encodeWebSafe(string: String): String","elide.util.Base64.encodeWebSafe"]},{"name":"expect fun logger(): Logger","description":"elide.runtime.Logging.logger","location":"packages/base/elide.runtime/-logging/logger.html","searchKeys":["logger","expect fun logger(): Logger","elide.runtime.Logging.logger"]},{"name":"expect fun logger(name: String): Logger","description":"elide.runtime.Logging.logger","location":"packages/base/elide.runtime/-logging/logger.html","searchKeys":["logger","expect fun logger(name: String): Logger","elide.runtime.Logging.logger"]},{"name":"expect fun random(): String","description":"elide.util.UUID.random","location":"packages/base/elide.util/-u-u-i-d/random.html","searchKeys":["random","expect fun random(): String","elide.util.UUID.random"]},{"name":"expect interface Logger","description":"elide.runtime.Logger","location":"packages/base/elide.runtime/-logger/index.html","searchKeys":["Logger","expect interface Logger","elide.runtime.Logger"]},{"name":"expect object Base64 : Encoder","description":"elide.util.Base64","location":"packages/base/elide.util/-base64/index.html","searchKeys":["Base64","expect object Base64 : Encoder","elide.util.Base64"]},{"name":"expect object UUID","description":"elide.util.UUID","location":"packages/base/elide.util/-u-u-i-d/index.html","searchKeys":["UUID","expect object UUID","elide.util.UUID"]},{"name":"expect open fun debug(producer: () -> String)","description":"elide.runtime.Logger.debug","location":"packages/base/elide.runtime/-logger/debug.html","searchKeys":["debug","expect open fun debug(producer: () -> String)","elide.runtime.Logger.debug"]},{"name":"expect open fun debug(vararg message: Any)","description":"elide.runtime.Logger.debug","location":"packages/base/elide.runtime/-logger/debug.html","searchKeys":["debug","expect open fun debug(vararg message: Any)","elide.runtime.Logger.debug"]},{"name":"expect open fun error(producer: () -> String)","description":"elide.runtime.Logger.error","location":"packages/base/elide.runtime/-logger/error.html","searchKeys":["error","expect open fun error(producer: () -> String)","elide.runtime.Logger.error"]},{"name":"expect open fun error(vararg message: Any)","description":"elide.runtime.Logger.error","location":"packages/base/elide.runtime/-logger/error.html","searchKeys":["error","expect open fun error(vararg message: Any)","elide.runtime.Logger.error"]},{"name":"expect open fun info(producer: () -> String)","description":"elide.runtime.Logger.info","location":"packages/base/elide.runtime/-logger/info.html","searchKeys":["info","expect open fun info(producer: () -> String)","elide.runtime.Logger.info"]},{"name":"expect open fun info(vararg message: Any)","description":"elide.runtime.Logger.info","location":"packages/base/elide.runtime/-logger/info.html","searchKeys":["info","expect open fun info(vararg message: Any)","elide.runtime.Logger.info"]},{"name":"expect open fun trace(producer: () -> String)","description":"elide.runtime.Logger.trace","location":"packages/base/elide.runtime/-logger/trace.html","searchKeys":["trace","expect open fun trace(producer: () -> String)","elide.runtime.Logger.trace"]},{"name":"expect open fun trace(vararg message: Any)","description":"elide.runtime.Logger.trace","location":"packages/base/elide.runtime/-logger/trace.html","searchKeys":["trace","expect open fun trace(vararg message: Any)","elide.runtime.Logger.trace"]},{"name":"expect open fun warn(producer: () -> String)","description":"elide.runtime.Logger.warn","location":"packages/base/elide.runtime/-logger/warn.html","searchKeys":["warn","expect open fun warn(producer: () -> String)","elide.runtime.Logger.warn"]},{"name":"expect open fun warn(vararg message: Any)","description":"elide.runtime.Logger.warn","location":"packages/base/elide.runtime/-logger/warn.html","searchKeys":["warn","expect open fun warn(vararg message: Any)","elide.runtime.Logger.warn"]},{"name":"expect open fun warning(producer: () -> String)","description":"elide.runtime.Logger.warning","location":"packages/base/elide.runtime/-logger/warning.html","searchKeys":["warning","expect open fun warning(producer: () -> String)","elide.runtime.Logger.warning"]},{"name":"expect open fun warning(vararg message: Any)","description":"elide.runtime.Logger.warning","location":"packages/base/elide.runtime/-logger/warning.html","searchKeys":["warning","expect open fun warning(vararg message: Any)","elide.runtime.Logger.warning"]},{"name":"expect open override fun decode(data: ByteArray): ByteArray","description":"elide.util.Base64.decode","location":"packages/base/elide.util/-base64/decode.html","searchKeys":["decode","expect open override fun decode(data: ByteArray): ByteArray","elide.util.Base64.decode"]},{"name":"expect open override fun decode(string: String): ByteArray","description":"elide.util.Base64.decode","location":"packages/base/elide.util/-base64/decode.html","searchKeys":["decode","expect open override fun decode(string: String): ByteArray","elide.util.Base64.decode"]},{"name":"expect open override fun decodeToString(data: ByteArray): String","description":"elide.util.Base64.decodeToString","location":"packages/base/elide.util/-base64/decode-to-string.html","searchKeys":["decodeToString","expect open override fun decodeToString(data: ByteArray): String","elide.util.Base64.decodeToString"]},{"name":"expect open override fun decodeToString(string: String): String","description":"elide.util.Base64.decodeToString","location":"packages/base/elide.util/-base64/decode-to-string.html","searchKeys":["decodeToString","expect open override fun decodeToString(string: String): String","elide.util.Base64.decodeToString"]},{"name":"expect open override fun encode(data: ByteArray): ByteArray","description":"elide.util.Base64.encode","location":"packages/base/elide.util/-base64/encode.html","searchKeys":["encode","expect open override fun encode(data: ByteArray): ByteArray","elide.util.Base64.encode"]},{"name":"expect open override fun encode(string: String): ByteArray","description":"elide.util.Base64.encode","location":"packages/base/elide.util/-base64/encode.html","searchKeys":["encode","expect open override fun encode(string: String): ByteArray","elide.util.Base64.encode"]},{"name":"expect open override fun encodeToString(data: ByteArray): String","description":"elide.util.Base64.encodeToString","location":"packages/base/elide.util/-base64/encode-to-string.html","searchKeys":["encodeToString","expect open override fun encodeToString(data: ByteArray): String","elide.util.Base64.encodeToString"]},{"name":"expect open override fun encodeToString(string: String): String","description":"elide.util.Base64.encodeToString","location":"packages/base/elide.util/-base64/encode-to-string.html","searchKeys":["encodeToString","expect open override fun encodeToString(string: String): String","elide.util.Base64.encodeToString"]},{"name":"fun <R> resolve(name: String, defaultValue: String, then: (String) -> R): R","description":"elide.util.RuntimeFlag.resolve","location":"packages/base/elide.util/-runtime-flag/resolve.html","searchKeys":["resolve","fun <R> resolve(name: String, defaultValue: String, then: (String) -> R): R","elide.util.RuntimeFlag.resolve"]},{"name":"fun ArrayBuffer.toByteArray(): ByteArray","description":"elide.runtime.js.toByteArray","location":"packages/base/elide.runtime.js/to-byte-array.html","searchKeys":["toByteArray","fun ArrayBuffer.toByteArray(): ByteArray","elide.runtime.js.toByteArray"]},{"name":"fun ArrayBuffer?.toByteArray(): ByteArray?","description":"elide.runtime.js.toByteArray","location":"packages/base/elide.runtime.js/to-byte-array.html","searchKeys":["toByteArray","fun ArrayBuffer?.toByteArray(): ByteArray?","elide.runtime.js.toByteArray"]},{"name":"fun ByteArray.toBase64(): ByteArray","description":"elide.util.toBase64","location":"packages/base/elide.util/to-base64.html","searchKeys":["toBase64","fun ByteArray.toBase64(): ByteArray","elide.util.toBase64"]},{"name":"fun ByteArray.toBase64String(): String","description":"elide.util.toBase64String","location":"packages/base/elide.util/to-base64-string.html","searchKeys":["toBase64String","fun ByteArray.toBase64String(): String","elide.util.toBase64String"]},{"name":"fun LogLevel.isEnabled(logger: Logger): Boolean","description":"elide.runtime.jvm.isEnabled","location":"packages/base/elide.runtime.jvm/is-enabled.html","searchKeys":["isEnabled","fun LogLevel.isEnabled(logger: Logger): Boolean","elide.runtime.jvm.isEnabled"]},{"name":"fun LogLevel.resolve(logger: Logger): (String) -> Unit","description":"elide.runtime.jvm.resolve","location":"packages/base/elide.runtime.jvm/resolve.html","searchKeys":["resolve","fun LogLevel.resolve(logger: Logger): (String) -> Unit","elide.runtime.jvm.resolve"]},{"name":"fun String.toBase64(): ByteArray","description":"elide.util.toBase64","location":"packages/base/elide.util/to-base64.html","searchKeys":["toBase64","fun String.toBase64(): ByteArray","elide.util.toBase64"]},{"name":"fun String.toBase64String(): String","description":"elide.util.toBase64String","location":"packages/base/elide.util/to-base64-string.html","searchKeys":["toBase64String","fun String.toBase64String(): String","elide.util.toBase64String"]},{"name":"fun String.toHex(): ByteArray","description":"elide.util.toHex","location":"packages/base/elide.util/to-hex.html","searchKeys":["toHex","fun String.toHex(): ByteArray","elide.util.toHex"]},{"name":"fun String.toHexString(): String","description":"elide.util.toHexString","location":"packages/base/elide.util/to-hex-string.html","searchKeys":["toHexString","fun String.toHexString(): String","elide.util.toHexString"]},{"name":"fun acquire(): Logger","description":"elide.runtime.Logging.Companion.acquire","location":"packages/base/elide.runtime/-logging/[js]-companion/acquire.html","searchKeys":["acquire","fun acquire(): Logger","elide.runtime.Logging.Companion.acquire"]},{"name":"fun decode(src: ByteArray): ByteArray","description":"elide.util.Base64Kt.Decoder.decode","location":"packages/base/elide.util/-base64-kt/-decoder/decode.html","searchKeys":["decode","fun decode(src: ByteArray): ByteArray","elide.util.Base64Kt.Decoder.decode"]},{"name":"fun encode(src: ByteArray): ByteArray","description":"elide.util.Base64Kt.Encoder.encode","location":"packages/base/elide.util/-base64-kt/-encoder/encode.html","searchKeys":["encode","fun encode(src: ByteArray): ByteArray","elide.util.Base64Kt.Encoder.encode"]},{"name":"fun named(name: String): Logger","description":"elide.runtime.Logging.Companion.named","location":"packages/base/elide.runtime/-logging/[js]-companion/named.html","searchKeys":["named","fun named(name: String): Logger","elide.runtime.Logging.Companion.named"]},{"name":"fun named(name: String): Logger","description":"elide.runtime.Logging.Companion.named","location":"packages/base/elide.runtime/-logging/[jvm]-companion/named.html","searchKeys":["named","fun named(name: String): Logger","elide.runtime.Logging.Companion.named"]},{"name":"fun of(target: Class<*>): Logger","description":"elide.runtime.Logging.Companion.of","location":"packages/base/elide.runtime/-logging/[jvm]-companion/of.html","searchKeys":["of","fun of(target: Class<*>): Logger","elide.runtime.Logging.Companion.of"]},{"name":"fun of(target: KClass<*>): Logger","description":"elide.runtime.Logging.Companion.of","location":"packages/base/elide.runtime/-logging/[js]-companion/of.html","searchKeys":["of","fun of(target: KClass<*>): Logger","elide.runtime.Logging.Companion.of"]},{"name":"fun of(target: KClass<*>): Logger","description":"elide.runtime.Logging.Companion.of","location":"packages/base/elide.runtime/-logging/[jvm]-companion/of.html","searchKeys":["of","fun of(target: KClass<*>): Logger","elide.runtime.Logging.Companion.of"]},{"name":"fun root(): Logger","description":"elide.runtime.Logging.Companion.root","location":"packages/base/elide.runtime/-logging/[js]-companion/root.html","searchKeys":["root","fun root(): Logger","elide.runtime.Logging.Companion.root"]},{"name":"fun root(): Logger","description":"elide.runtime.Logging.Companion.root","location":"packages/base/elide.runtime/-logging/[jvm]-companion/root.html","searchKeys":["root","fun root(): Logger","elide.runtime.Logging.Companion.root"]},{"name":"fun setArgs(args: Array<String>)","description":"elide.util.RuntimeFlag.setArgs","location":"packages/base/elide.util/-runtime-flag/set-args.html","searchKeys":["setArgs","fun setArgs(args: Array<String>)","elide.util.RuntimeFlag.setArgs"]},{"name":"fun valueOf(value: String): AppEnvironment","description":"elide.AppEnvironment.valueOf","location":"packages/base/elide/-app-environment/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): AppEnvironment","elide.AppEnvironment.valueOf"]},{"name":"fun valueOf(value: String): Encoding","description":"elide.util.Encoding.valueOf","location":"packages/base/elide.util/-encoding/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): Encoding","elide.util.Encoding.valueOf"]},{"name":"fun valueOf(value: String): LogLevel","description":"elide.runtime.LogLevel.valueOf","location":"packages/base/elide.runtime/-log-level/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): LogLevel","elide.runtime.LogLevel.valueOf"]},{"name":"fun values(): Array<AppEnvironment>","description":"elide.AppEnvironment.values","location":"packages/base/elide/-app-environment/values.html","searchKeys":["values","fun values(): Array<AppEnvironment>","elide.AppEnvironment.values"]},{"name":"fun values(): Array<Encoding>","description":"elide.util.Encoding.values","location":"packages/base/elide.util/-encoding/values.html","searchKeys":["values","fun values(): Array<Encoding>","elide.util.Encoding.values"]},{"name":"fun values(): Array<LogLevel>","description":"elide.runtime.LogLevel.values","location":"packages/base/elide.runtime/-log-level/values.html","searchKeys":["values","fun values(): Array<LogLevel>","elide.runtime.LogLevel.values"]},{"name":"interface Encoder","description":"elide.util.Encoder","location":"packages/base/elide.util/-encoder/index.html","searchKeys":["Encoder","interface Encoder","elide.util.Encoder"]},{"name":"object Base64Kt","description":"elide.util.Base64Kt","location":"packages/base/elide.util/-base64-kt/index.html","searchKeys":["Base64Kt","object Base64Kt","elide.util.Base64Kt"]},{"name":"object Companion","description":"elide.runtime.Logging.Companion","location":"packages/base/elide.runtime/-logging/[js]-companion/index.html","searchKeys":["Companion","object Companion","elide.runtime.Logging.Companion"]},{"name":"object Companion","description":"elide.runtime.Logging.Companion","location":"packages/base/elide.runtime/-logging/[jvm]-companion/index.html","searchKeys":["Companion","object Companion","elide.runtime.Logging.Companion"]},{"name":"object Companion","description":"elide.util.Base64Kt.Decoder.Companion","location":"packages/base/elide.util/-base64-kt/-decoder/-companion/index.html","searchKeys":["Companion","object Companion","elide.util.Base64Kt.Decoder.Companion"]},{"name":"object Companion","description":"elide.util.Base64Kt.Encoder.Companion","location":"packages/base/elide.util/-base64-kt/-encoder/-companion/index.html","searchKeys":["Companion","object Companion","elide.util.Base64Kt.Encoder.Companion"]},{"name":"object Hex : Encoder","description":"elide.util.Hex","location":"packages/base/elide.util/-hex/index.html","searchKeys":["Hex","object Hex : Encoder","elide.util.Hex"]},{"name":"object Runtime","description":"elide.runtime.Runtime","location":"packages/base/elide.runtime/-runtime/index.html","searchKeys":["Runtime","object Runtime","elide.runtime.Runtime"]},{"name":"object RuntimeFlag","description":"elide.util.RuntimeFlag","location":"packages/base/elide.util/-runtime-flag/index.html","searchKeys":["RuntimeFlag","object RuntimeFlag","elide.util.RuntimeFlag"]},{"name":"open override fun decode(data: ByteArray): ByteArray","description":"elide.util.Hex.decode","location":"packages/base/elide.util/-hex/decode.html","searchKeys":["decode","open override fun decode(data: ByteArray): ByteArray","elide.util.Hex.decode"]},{"name":"open override fun decode(string: String): ByteArray","description":"elide.util.Hex.decode","location":"packages/base/elide.util/-hex/decode.html","searchKeys":["decode","open override fun decode(string: String): ByteArray","elide.util.Hex.decode"]},{"name":"open override fun decodeToString(data: ByteArray): String","description":"elide.util.Hex.decodeToString","location":"packages/base/elide.util/-hex/decode-to-string.html","searchKeys":["decodeToString","open override fun decodeToString(data: ByteArray): String","elide.util.Hex.decodeToString"]},{"name":"open override fun decodeToString(string: String): String","description":"elide.util.Hex.decodeToString","location":"packages/base/elide.util/-hex/decode-to-string.html","searchKeys":["decodeToString","open override fun decodeToString(string: String): String","elide.util.Hex.decodeToString"]},{"name":"open override fun encode(data: ByteArray): ByteArray","description":"elide.util.Hex.encode","location":"packages/base/elide.util/-hex/encode.html","searchKeys":["encode","open override fun encode(data: ByteArray): ByteArray","elide.util.Hex.encode"]},{"name":"open override fun encode(string: String): ByteArray","description":"elide.util.Hex.encode","location":"packages/base/elide.util/-hex/encode.html","searchKeys":["encode","open override fun encode(string: String): ByteArray","elide.util.Hex.encode"]},{"name":"open override fun encodeToString(data: ByteArray): String","description":"elide.util.Hex.encodeToString","location":"packages/base/elide.util/-hex/encode-to-string.html","searchKeys":["encodeToString","open override fun encodeToString(data: ByteArray): String","elide.util.Hex.encodeToString"]},{"name":"open override fun encodeToString(string: String): String","description":"elide.util.Hex.encodeToString","location":"packages/base/elide.util/-hex/encode-to-string.html","searchKeys":["encodeToString","open override fun encodeToString(string: String): String","elide.util.Hex.encodeToString"]},{"name":"open override fun encoding(): Encoding","description":"elide.util.Base64.encoding","location":"packages/base/elide.util/-base64/[js]encoding.html","searchKeys":["encoding","open override fun encoding(): Encoding","elide.util.Base64.encoding"]},{"name":"open override fun encoding(): Encoding","description":"elide.util.Base64.encoding","location":"packages/base/elide.util/-base64/[jvm]encoding.html","searchKeys":["encoding","open override fun encoding(): Encoding","elide.util.Base64.encoding"]},{"name":"open override fun encoding(): Encoding","description":"elide.util.Base64.encoding","location":"packages/base/elide.util/-base64/[native]encoding.html","searchKeys":["encoding","open override fun encoding(): Encoding","elide.util.Base64.encoding"]},{"name":"open override fun encoding(): Encoding","description":"elide.util.Hex.encoding","location":"packages/base/elide.util/-hex/encoding.html","searchKeys":["encoding","open override fun encoding(): Encoding","elide.util.Hex.encoding"]},{"name":"open override fun isEnabled(level: LogLevel): Boolean","description":"elide.runtime.js.Logger.isEnabled","location":"packages/base/elide.runtime.js/-logger/is-enabled.html","searchKeys":["isEnabled","open override fun isEnabled(level: LogLevel): Boolean","elide.runtime.js.Logger.isEnabled"]},{"name":"open override fun isEnabled(level: LogLevel): Boolean","description":"elide.runtime.jvm.Logger.isEnabled","location":"packages/base/elide.runtime.jvm/-logger/is-enabled.html","searchKeys":["isEnabled","open override fun isEnabled(level: LogLevel): Boolean","elide.runtime.jvm.Logger.isEnabled"]},{"name":"open override fun log(level: LogLevel, message: List<Any>, levelChecked: Boolean)","description":"elide.runtime.js.Logger.log","location":"packages/base/elide.runtime.js/-logger/log.html","searchKeys":["log","open override fun log(level: LogLevel, message: List<Any>, levelChecked: Boolean)","elide.runtime.js.Logger.log"]},{"name":"open override fun log(level: LogLevel, message: List<Any>, levelChecked: Boolean)","description":"elide.runtime.jvm.Logger.log","location":"packages/base/elide.runtime.jvm/-logger/log.html","searchKeys":["log","open override fun log(level: LogLevel, message: List<Any>, levelChecked: Boolean)","elide.runtime.jvm.Logger.log"]},{"name":"typealias ConsoleCallable = (Array<Any?>) -> Unit","description":"elide.runtime.js.ConsoleCallable","location":"packages/base/elide.runtime.js/-console-callable/index.html","searchKeys":["ConsoleCallable","typealias ConsoleCallable = (Array<Any?>) -> Unit","elide.runtime.js.ConsoleCallable"]},{"name":"val CHARACTER_SET: CharArray","description":"elide.util.Base64.CHARACTER_SET","location":"packages/base/elide.util/-base64/-c-h-a-r-a-c-t-e-r_-s-e-t.html","searchKeys":["CHARACTER_SET","val CHARACTER_SET: CharArray","elide.util.Base64.CHARACTER_SET"]},{"name":"val CHARACTER_SET: CharArray","description":"elide.util.Hex.CHARACTER_SET","location":"packages/base/elide.util/-hex/-c-h-a-r-a-c-t-e-r_-s-e-t.html","searchKeys":["CHARACTER_SET","val CHARACTER_SET: CharArray","elide.util.Hex.CHARACTER_SET"]},{"name":"val CHARACTER_SET_WEBSAFE: CharArray","description":"elide.util.Base64.CHARACTER_SET_WEBSAFE","location":"packages/base/elide.util/-base64/-c-h-a-r-a-c-t-e-r_-s-e-t_-w-e-b-s-a-f-e.html","searchKeys":["CHARACTER_SET_WEBSAFE","val CHARACTER_SET_WEBSAFE: CharArray","elide.util.Base64.CHARACTER_SET_WEBSAFE"]},{"name":"val DEFAULT: Base64Kt.Decoder","description":"elide.util.Base64Kt.Decoder.Companion.DEFAULT","location":"packages/base/elide.util/-base64-kt/-decoder/-companion/-d-e-f-a-u-l-t.html","searchKeys":["DEFAULT","val DEFAULT: Base64Kt.Decoder","elide.util.Base64Kt.Decoder.Companion.DEFAULT"]},{"name":"val DEFAULT: Base64Kt.Encoder","description":"elide.util.Base64Kt.Encoder.Companion.DEFAULT","location":"packages/base/elide.util/-base64-kt/-encoder/-companion/-d-e-f-a-u-l-t.html","searchKeys":["DEFAULT","val DEFAULT: Base64Kt.Encoder","elide.util.Base64Kt.Encoder.Companion.DEFAULT"]},{"name":"val DEFAULT_WEBSAFE: Base64Kt.Encoder","description":"elide.util.Base64Kt.Encoder.Companion.DEFAULT_WEBSAFE","location":"packages/base/elide.util/-base64-kt/-encoder/-companion/-d-e-f-a-u-l-t_-w-e-b-s-a-f-e.html","searchKeys":["DEFAULT_WEBSAFE","val DEFAULT_WEBSAFE: Base64Kt.Encoder","elide.util.Base64Kt.Encoder.Companion.DEFAULT_WEBSAFE"]},{"name":"val LogLevel.jvmLevel: Level","description":"elide.runtime.jvm.jvmLevel","location":"packages/base/elide.runtime.jvm/jvm-level.html","searchKeys":["jvmLevel","val LogLevel.jvmLevel: Level","elide.runtime.jvm.jvmLevel"]},{"name":"val appEnv: AppEnvironment","description":"elide.util.RuntimeFlag.appEnv","location":"packages/base/elide.util/-runtime-flag/app-env.html","searchKeys":["appEnv","val appEnv: AppEnvironment","elide.util.RuntimeFlag.appEnv"]},{"name":"val decoder: Base64Kt.Decoder","description":"elide.util.Base64Kt.decoder","location":"packages/base/elide.util/-base64-kt/decoder.html","searchKeys":["decoder","val decoder: Base64Kt.Decoder","elide.util.Base64Kt.decoder"]},{"name":"val encoder: Base64Kt.Encoder","description":"elide.util.Base64Kt.encoder","location":"packages/base/elide.util/-base64-kt/encoder.html","searchKeys":["encoder","val encoder: Base64Kt.Encoder","elide.util.Base64Kt.encoder"]},{"name":"val entries: EnumEntries<AppEnvironment>","description":"elide.AppEnvironment.entries","location":"packages/base/elide/-app-environment/entries.html","searchKeys":["entries","val entries: EnumEntries<AppEnvironment>","elide.AppEnvironment.entries"]},{"name":"val entries: EnumEntries<Encoding>","description":"elide.util.Encoding.entries","location":"packages/base/elide.util/-encoding/entries.html","searchKeys":["entries","val entries: EnumEntries<Encoding>","elide.util.Encoding.entries"]},{"name":"val entries: EnumEntries<LogLevel>","description":"elide.runtime.LogLevel.entries","location":"packages/base/elide.runtime/-log-level/entries.html","searchKeys":["entries","val entries: EnumEntries<LogLevel>","elide.runtime.LogLevel.entries"]},{"name":"val inspect: Boolean","description":"elide.util.RuntimeFlag.inspect","location":"packages/base/elide.util/-runtime-flag/inspect.html","searchKeys":["inspect","val inspect: Boolean","elide.util.RuntimeFlag.inspect"]},{"name":"val inspectHost: String","description":"elide.util.RuntimeFlag.inspectHost","location":"packages/base/elide.util/-runtime-flag/inspect-host.html","searchKeys":["inspectHost","val inspectHost: String","elide.util.RuntimeFlag.inspectHost"]},{"name":"val inspectInternal: Boolean","description":"elide.util.RuntimeFlag.inspectInternal","location":"packages/base/elide.util/-runtime-flag/inspect-internal.html","searchKeys":["inspectInternal","val inspectInternal: Boolean","elide.util.RuntimeFlag.inspectInternal"]},{"name":"val inspectPath: String?","description":"elide.util.RuntimeFlag.inspectPath","location":"packages/base/elide.util/-runtime-flag/inspect-path.html","searchKeys":["inspectPath","val inspectPath: String?","elide.util.RuntimeFlag.inspectPath"]},{"name":"val inspectPort: Int","description":"elide.util.RuntimeFlag.inspectPort","location":"packages/base/elide.util/-runtime-flag/inspect-port.html","searchKeys":["inspectPort","val inspectPort: Int","elide.util.RuntimeFlag.inspectPort"]},{"name":"val inspectSecure: Boolean","description":"elide.util.RuntimeFlag.inspectSecure","location":"packages/base/elide.util/-runtime-flag/inspect-secure.html","searchKeys":["inspectSecure","val inspectSecure: Boolean","elide.util.RuntimeFlag.inspectSecure"]},{"name":"val inspectSuspend: Boolean","description":"elide.util.RuntimeFlag.inspectSuspend","location":"packages/base/elide.util/-runtime-flag/inspect-suspend.html","searchKeys":["inspectSuspend","val inspectSuspend: Boolean","elide.util.RuntimeFlag.inspectSuspend"]},{"name":"val inspectWait: Boolean","description":"elide.util.RuntimeFlag.inspectWait","location":"packages/base/elide.util/-runtime-flag/inspect-wait.html","searchKeys":["inspectWait","val inspectWait: Boolean","elide.util.RuntimeFlag.inspectWait"]},{"name":"val name: String? = null","description":"elide.runtime.js.Logger.name","location":"packages/base/elide.runtime.js/-logger/name.html","searchKeys":["name","val name: String? = null","elide.runtime.js.Logger.name"]},{"name":"val warmup: Boolean","description":"elide.util.RuntimeFlag.warmup","location":"packages/base/elide.util/-runtime-flag/warmup.html","searchKeys":["warmup","val warmup: Boolean","elide.util.RuntimeFlag.warmup"]},{"name":"abstract class ElideServerTest : Test","description":"elide.server.ElideServerTest","location":"packages/test/elide.server/-elide-server-test/index.html","searchKeys":["ElideServerTest","abstract class ElideServerTest : Test","elide.server.ElideServerTest"]},{"name":"class TestAppExecutor : AppExecutor","description":"elide.server.runtime.TestAppExecutor","location":"packages/test/elide.server.runtime/-test-app-executor/index.html","searchKeys":["TestAppExecutor","class TestAppExecutor : AppExecutor","elide.server.runtime.TestAppExecutor"]},{"name":"constructor()","description":"elide.server.ElideServerTest.ElideServerTest","location":"packages/test/elide.server/-elide-server-test/-elide-server-test.html","searchKeys":["ElideServerTest","constructor()","elide.server.ElideServerTest.ElideServerTest"]},{"name":"constructor()","description":"elide.server.runtime.TestAppExecutor.TestAppExecutor","location":"packages/test/elide.server.runtime/-test-app-executor/-test-app-executor.html","searchKeys":["TestAppExecutor","constructor()","elide.server.runtime.TestAppExecutor.TestAppExecutor"]},{"name":"constructor()","description":"elide.testing.Test.Test","location":"packages/test/elide.testing/-test/-test.html","searchKeys":["Test","constructor()","elide.testing.Test.Test"]},{"name":"expect abstract class Test","description":"elide.testing.Test","location":"packages/test/elide.testing/-test/index.html","searchKeys":["Test","expect abstract class Test","elide.testing.Test"]},{"name":"expect annotation class Test","description":"elide.testing.annotations.Test","location":"packages/test/elide.testing.annotations/-test/index.html","searchKeys":["Test","expect annotation class Test","elide.testing.annotations.Test"]},{"name":"expect annotation class TestCase","description":"elide.testing.annotations.TestCase","location":"packages/test/elide.testing.annotations/-test-case/index.html","searchKeys":["TestCase","expect annotation class TestCase","elide.testing.annotations.TestCase"]},{"name":"fun <P : Any, R : Any> exchange(request: MutableHttpRequest<P>, status: Int? = 200, responseType: Class<R>, block: HttpResponse<R>.() -> Unit? = null): HttpResponse<R>","description":"elide.server.ElideServerTest.exchange","location":"packages/test/elide.server/-elide-server-test/exchange.html","searchKeys":["exchange","fun <P : Any, R : Any> exchange(request: MutableHttpRequest<P>, status: Int? = 200, responseType: Class<R>, block: HttpResponse<R>.() -> Unit? = null): HttpResponse<R>","elide.server.ElideServerTest.exchange"]},{"name":"fun exchange(request: MutableHttpRequest<Any>, status: Int? = 200, block: HttpResponse<Any>.() -> Unit? = null): HttpResponse<Any>","description":"elide.server.ElideServerTest.exchange","location":"packages/test/elide.server/-elide-server-test/exchange.html","searchKeys":["exchange","fun exchange(request: MutableHttpRequest<Any>, status: Int? = 200, block: HttpResponse<Any>.() -> Unit? = null): HttpResponse<Any>","elide.server.ElideServerTest.exchange"]},{"name":"fun exchangeHTML(request: MutableHttpRequest<Any>, accept: String? = \"text/html,*/*\", status: Int? = 200, block: HttpResponse<Any>.(Document) -> Unit? = null): HttpResponse<Any>","description":"elide.server.ElideServerTest.exchangeHTML","location":"packages/test/elide.server/-elide-server-test/exchange-h-t-m-l.html","searchKeys":["exchangeHTML","fun exchangeHTML(request: MutableHttpRequest<Any>, accept: String? = \"text/html,*/*\", status: Int? = 200, block: HttpResponse<Any>.(Document) -> Unit? = null): HttpResponse<Any>","elide.server.ElideServerTest.exchangeHTML"]},{"name":"fun loadBinary(name: String): ByteArray","description":"elide.server.TestUtil.loadBinary","location":"packages/test/elide.server/-test-util/load-binary.html","searchKeys":["loadBinary","fun loadBinary(name: String): ByteArray","elide.server.TestUtil.loadBinary"]},{"name":"fun loadFixture(name: String): String","description":"elide.server.TestUtil.loadFixture","location":"packages/test/elide.server/-test-util/load-fixture.html","searchKeys":["loadFixture","fun loadFixture(name: String): String","elide.server.TestUtil.loadFixture"]},{"name":"lateinit var app: EmbeddedServer","description":"elide.server.ElideServerTest.app","location":"packages/test/elide.server/-elide-server-test/app.html","searchKeys":["app","lateinit var app: EmbeddedServer","elide.server.ElideServerTest.app"]},{"name":"lateinit var beanContext: BeanContext","description":"elide.server.ElideServerTest.beanContext","location":"packages/test/elide.server/-elide-server-test/bean-context.html","searchKeys":["beanContext","lateinit var beanContext: BeanContext","elide.server.ElideServerTest.beanContext"]},{"name":"lateinit var client: HttpClient","description":"elide.server.ElideServerTest.client","location":"packages/test/elide.server/-elide-server-test/client.html","searchKeys":["client","lateinit var client: HttpClient","elide.server.ElideServerTest.client"]},{"name":"lateinit var context: ApplicationContext","description":"elide.server.ElideServerTest.context","location":"packages/test/elide.server/-elide-server-test/context.html","searchKeys":["context","lateinit var context: ApplicationContext","elide.server.ElideServerTest.context"]},{"name":"object ElideTesting","description":"elide.testing.ElideTesting","location":"packages/test/elide.testing/-elide-testing/index.html","searchKeys":["ElideTesting","object ElideTesting","elide.testing.ElideTesting"]},{"name":"object TestUtil","description":"elide.server.TestUtil","location":"packages/test/elide.server/-test-util/index.html","searchKeys":["TestUtil","object TestUtil","elide.server.TestUtil"]},{"name":"open override fun service(): ListeningScheduledExecutorService","description":"elide.server.runtime.TestAppExecutor.service","location":"packages/test/elide.server.runtime/-test-app-executor/service.html","searchKeys":["service","open override fun service(): ListeningScheduledExecutorService","elide.server.runtime.TestAppExecutor.service"]},{"name":"abstract fun render(): R","description":"elide.ssr.ResponseRenderer.render","location":"packages/ssr/elide.ssr/-response-renderer/render.html","searchKeys":["render","abstract fun render(): R","elide.ssr.ResponseRenderer.render"]},{"name":"class Error(val err: Any, val status: Int = 500, val headers: Map<String, String> = emptyMap()) : StreamResponse","description":"elide.ssr.StreamResponse.Error","location":"packages/ssr/elide.ssr/-stream-response/-error/index.html","searchKeys":["Error","class Error(val err: Any, val status: Int = 500, val headers: Map<String, String> = emptyMap()) : StreamResponse","elide.ssr.StreamResponse.Error"]},{"name":"class Success(val stream: RenderedStream) : StreamResponse","description":"elide.ssr.StreamResponse.Success","location":"packages/ssr/elide.ssr/-stream-response/-success/index.html","searchKeys":["Success","class Success(val stream: RenderedStream) : StreamResponse","elide.ssr.StreamResponse.Success"]},{"name":"constructor(err: Any, status: Int = 500, headers: Map<String, String> = emptyMap())","description":"elide.ssr.StreamResponse.Error.Error","location":"packages/ssr/elide.ssr/-stream-response/-error/-error.html","searchKeys":["Error","constructor(err: Any, status: Int = 500, headers: Map<String, String> = emptyMap())","elide.ssr.StreamResponse.Error.Error"]},{"name":"constructor(ids: Array<String>, key: String, css: String)","description":"elide.ssr.CssChunk.CssChunk","location":"packages/ssr/elide.ssr/-css-chunk/-css-chunk.html","searchKeys":["CssChunk","constructor(ids: Array<String>, key: String, css: String)","elide.ssr.CssChunk.CssChunk"]},{"name":"constructor(request: HttpRequest<*>, principal: Principal?, path: String = request.path)","description":"elide.ssr.type.RequestState.RequestState","location":"packages/ssr/elide.ssr.type/-request-state/-request-state.html","searchKeys":["RequestState","constructor(request: HttpRequest<*>, principal: Principal?, path: String = request.path)","elide.ssr.type.RequestState.RequestState"]},{"name":"constructor(status: Int, html: String, headers: Map<String, String>, criticalCss: String, styleChunks: Array<CssChunk>)","description":"elide.ssr.RenderedStream.RenderedStream","location":"packages/ssr/elide.ssr/-rendered-stream/-rendered-stream.html","searchKeys":["RenderedStream","constructor(status: Int, html: String, headers: Map<String, String>, criticalCss: String, styleChunks: Array<CssChunk>)","elide.ssr.RenderedStream.RenderedStream"]},{"name":"constructor(stream: RenderedStream)","description":"elide.ssr.StreamResponse.Success.Success","location":"packages/ssr/elide.ssr/-stream-response/-success/-success.html","searchKeys":["Success","constructor(stream: RenderedStream)","elide.ssr.StreamResponse.Success.Success"]},{"name":"data class CssChunkÂ constructor(val ids: Array<String>, val key: String, val css: String)","description":"elide.ssr.CssChunk","location":"packages/ssr/elide.ssr/-css-chunk/index.html","searchKeys":["CssChunk","data class CssChunkÂ constructor(val ids: Array<String>, val key: String, val css: String)","elide.ssr.CssChunk"]},{"name":"data class RenderedStreamÂ constructor(val status: Int, val html: String, val headers: Map<String, String>, val criticalCss: String, val styleChunks: Array<CssChunk>)","description":"elide.ssr.RenderedStream","location":"packages/ssr/elide.ssr/-rendered-stream/index.html","searchKeys":["RenderedStream","data class RenderedStreamÂ constructor(val status: Int, val html: String, val headers: Map<String, String>, val criticalCss: String, val styleChunks: Array<CssChunk>)","elide.ssr.RenderedStream"]},{"name":"data class RequestState(val request: HttpRequest<*>, val principal: Principal?, val path: String = request.path)","description":"elide.ssr.type.RequestState","location":"packages/ssr/elide.ssr.type/-request-state/index.html","searchKeys":["RequestState","data class RequestState(val request: HttpRequest<*>, val principal: Principal?, val path: String = request.path)","elide.ssr.type.RequestState"]},{"name":"expect annotation class Polyglot","description":"elide.vm.annotations.Polyglot","location":"packages/ssr/elide.vm.annotations/-polyglot/index.html","searchKeys":["Polyglot","expect annotation class Polyglot","elide.vm.annotations.Polyglot"]},{"name":"expect annotation class Props","description":"elide.ssr.annotations.Props","location":"packages/ssr/elide.ssr.annotations/-props/index.html","searchKeys":["Props","expect annotation class Props","elide.ssr.annotations.Props"]},{"name":"fun error(thr: Throwable): StreamResponse","description":"elide.ssr.StreamResponse.Companion.error","location":"packages/ssr/elide.ssr/-stream-response/-companion/error.html","searchKeys":["error","fun error(thr: Throwable): StreamResponse","elide.ssr.StreamResponse.Companion.error"]},{"name":"fun success(content: String, headers: Map<String, String> = emptyMap(), status: Int = 200, criticalCss: String = \"\", styleChunks: Array<CssChunk> = emptyArray()): StreamResponse","description":"elide.ssr.StreamResponse.Companion.success","location":"packages/ssr/elide.ssr/-stream-response/-companion/success.html","searchKeys":["success","fun success(content: String, headers: Map<String, String> = emptyMap(), status: Int = 200, criticalCss: String = \"\", styleChunks: Array<CssChunk> = emptyArray()): StreamResponse","elide.ssr.StreamResponse.Companion.success"]},{"name":"interface ResponseRenderer<R>","description":"elide.ssr.ResponseRenderer","location":"packages/ssr/elide.ssr/-response-renderer/index.html","searchKeys":["ResponseRenderer","interface ResponseRenderer<R>","elide.ssr.ResponseRenderer"]},{"name":"interface ServerRenderer : ResponseRenderer<ByteArrayOutputStream> ","description":"elide.ssr.ServerRenderer","location":"packages/ssr/elide.ssr/-server-renderer/index.html","searchKeys":["ServerRenderer","interface ServerRenderer : ResponseRenderer<ByteArrayOutputStream> ","elide.ssr.ServerRenderer"]},{"name":"interface ServerResponse","description":"elide.ssr.ServerResponse","location":"packages/ssr/elide.ssr/-server-response/index.html","searchKeys":["ServerResponse","interface ServerResponse","elide.ssr.ServerResponse"]},{"name":"object Companion","description":"elide.ssr.StreamResponse.Companion","location":"packages/ssr/elide.ssr/-stream-response/-companion/index.html","searchKeys":["Companion","object Companion","elide.ssr.StreamResponse.Companion"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"elide.ssr.CssChunk.equals","location":"packages/ssr/elide.ssr/-css-chunk/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","elide.ssr.CssChunk.equals"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"elide.ssr.RenderedStream.equals","location":"packages/ssr/elide.ssr/-rendered-stream/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","elide.ssr.RenderedStream.equals"]},{"name":"open override fun hashCode(): Int","description":"elide.ssr.CssChunk.hashCode","location":"packages/ssr/elide.ssr/-css-chunk/hash-code.html","searchKeys":["hashCode","open override fun hashCode(): Int","elide.ssr.CssChunk.hashCode"]},{"name":"open override fun hashCode(): Int","description":"elide.ssr.RenderedStream.hashCode","location":"packages/ssr/elide.ssr/-rendered-stream/hash-code.html","searchKeys":["hashCode","open override fun hashCode(): Int","elide.ssr.RenderedStream.hashCode"]},{"name":"open override fun toString(): String","description":"elide.ssr.CssChunk.toString","location":"packages/ssr/elide.ssr/-css-chunk/to-string.html","searchKeys":["toString","open override fun toString(): String","elide.ssr.CssChunk.toString"]},{"name":"open override val content: String","description":"elide.ssr.StreamResponse.content","location":"packages/ssr/elide.ssr/-stream-response/content.html","searchKeys":["content","open override val content: String","elide.ssr.StreamResponse.content"]},{"name":"open override val fin: Boolean = true","description":"elide.ssr.StreamResponse.fin","location":"packages/ssr/elide.ssr/-stream-response/fin.html","searchKeys":["fin","open override val fin: Boolean = true","elide.ssr.StreamResponse.fin"]},{"name":"open override val hasContent: Boolean = false","description":"elide.ssr.StreamResponse.hasContent","location":"packages/ssr/elide.ssr/-stream-response/has-content.html","searchKeys":["hasContent","open override val hasContent: Boolean = false","elide.ssr.StreamResponse.hasContent"]},{"name":"open override val headers: Map<String, String>","description":"elide.ssr.StreamResponse.headers","location":"packages/ssr/elide.ssr/-stream-response/headers.html","searchKeys":["headers","open override val headers: Map<String, String>","elide.ssr.StreamResponse.headers"]},{"name":"open override val status: Int = 200","description":"elide.ssr.StreamResponse.status","location":"packages/ssr/elide.ssr/-stream-response/status.html","searchKeys":["status","open override val status: Int = 200","elide.ssr.StreamResponse.status"]},{"name":"open val content: String","description":"elide.ssr.ServerResponse.content","location":"packages/ssr/elide.ssr/-server-response/content.html","searchKeys":["content","open val content: String","elide.ssr.ServerResponse.content"]},{"name":"open val css: String","description":"elide.ssr.ServerResponse.css","location":"packages/ssr/elide.ssr/-server-response/css.html","searchKeys":["css","open val css: String","elide.ssr.ServerResponse.css"]},{"name":"open val fin: Boolean","description":"elide.ssr.ServerResponse.fin","location":"packages/ssr/elide.ssr/-server-response/fin.html","searchKeys":["fin","open val fin: Boolean","elide.ssr.ServerResponse.fin"]},{"name":"open val hasContent: Boolean","description":"elide.ssr.ServerResponse.hasContent","location":"packages/ssr/elide.ssr/-server-response/has-content.html","searchKeys":["hasContent","open val hasContent: Boolean","elide.ssr.ServerResponse.hasContent"]},{"name":"open val headers: Map<String, String>?","description":"elide.ssr.ServerResponse.headers","location":"packages/ssr/elide.ssr/-server-response/headers.html","searchKeys":["headers","open val headers: Map<String, String>?","elide.ssr.ServerResponse.headers"]},{"name":"open val status: Int?","description":"elide.ssr.ServerResponse.status","location":"packages/ssr/elide.ssr/-server-response/status.html","searchKeys":["status","open val status: Int?","elide.ssr.ServerResponse.status"]},{"name":"sealed class StreamResponse : ServerResponse","description":"elide.ssr.StreamResponse","location":"packages/ssr/elide.ssr/-stream-response/index.html","searchKeys":["StreamResponse","sealed class StreamResponse : ServerResponse","elide.ssr.StreamResponse"]},{"name":"val criticalCss: String","description":"elide.ssr.RenderedStream.criticalCss","location":"packages/ssr/elide.ssr/-rendered-stream/critical-css.html","searchKeys":["criticalCss","val criticalCss: String","elide.ssr.RenderedStream.criticalCss"]},{"name":"val css: String","description":"elide.ssr.CssChunk.css","location":"packages/ssr/elide.ssr/-css-chunk/css.html","searchKeys":["css","val css: String","elide.ssr.CssChunk.css"]},{"name":"val err: Any","description":"elide.ssr.StreamResponse.Error.err","location":"packages/ssr/elide.ssr/-stream-response/-error/err.html","searchKeys":["err","val err: Any","elide.ssr.StreamResponse.Error.err"]},{"name":"val headers: Map<String, String>","description":"elide.ssr.RenderedStream.headers","location":"packages/ssr/elide.ssr/-rendered-stream/headers.html","searchKeys":["headers","val headers: Map<String, String>","elide.ssr.RenderedStream.headers"]},{"name":"val html: String","description":"elide.ssr.RenderedStream.html","location":"packages/ssr/elide.ssr/-rendered-stream/html.html","searchKeys":["html","val html: String","elide.ssr.RenderedStream.html"]},{"name":"val ids: Array<String>","description":"elide.ssr.CssChunk.ids","location":"packages/ssr/elide.ssr/-css-chunk/ids.html","searchKeys":["ids","val ids: Array<String>","elide.ssr.CssChunk.ids"]},{"name":"val key: String","description":"elide.ssr.CssChunk.key","location":"packages/ssr/elide.ssr/-css-chunk/key.html","searchKeys":["key","val key: String","elide.ssr.CssChunk.key"]},{"name":"val path: String","description":"elide.ssr.type.RequestState.path","location":"packages/ssr/elide.ssr.type/-request-state/path.html","searchKeys":["path","val path: String","elide.ssr.type.RequestState.path"]},{"name":"val principal: Principal?","description":"elide.ssr.type.RequestState.principal","location":"packages/ssr/elide.ssr.type/-request-state/principal.html","searchKeys":["principal","val principal: Principal?","elide.ssr.type.RequestState.principal"]},{"name":"val request: HttpRequest<*>","description":"elide.ssr.type.RequestState.request","location":"packages/ssr/elide.ssr.type/-request-state/request.html","searchKeys":["request","val request: HttpRequest<*>","elide.ssr.type.RequestState.request"]},{"name":"val status: Int","description":"elide.ssr.RenderedStream.status","location":"packages/ssr/elide.ssr/-rendered-stream/status.html","searchKeys":["status","val status: Int","elide.ssr.RenderedStream.status"]},{"name":"val stream: RenderedStream","description":"elide.ssr.StreamResponse.Success.stream","location":"packages/ssr/elide.ssr/-stream-response/-success/stream.html","searchKeys":["stream","val stream: RenderedStream","elide.ssr.StreamResponse.Success.stream"]},{"name":"val styleChunks: Array<CssChunk>","description":"elide.ssr.RenderedStream.styleChunks","location":"packages/ssr/elide.ssr/-rendered-stream/style-chunks.html","searchKeys":["styleChunks","val styleChunks: Array<CssChunk>","elide.ssr.RenderedStream.styleChunks"]}]