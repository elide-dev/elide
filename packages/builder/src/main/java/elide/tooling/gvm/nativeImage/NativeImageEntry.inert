/*
 * Copyright (c) 2024-2025 Elide Technologies, Inc.
 *
 * Licensed under the MIT license (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 *   https://opensource.org/license/mit/
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under the License.
 */
package elide.tooling.gvm.nativeImage;

import com.oracle.svm.core.annotate.*;
import com.oracle.svm.driver.NativeImage;
import java.util.function.Function;

/** Patches the Native Image entrypoint not to exit the VM on success or failure. */
@KeepOriginal
@TargetClass(className = "com.oracle.svm.driver.NativeImage")
public final class NativeImageEntry extends NativeImage {
  private NativeImageEntry(BuildConfiguration config) {
    super(config);
  }

  @Alias
  @KeepOriginal
  @TargetElement(name = "build")
  @SuppressWarnings("unused")
  private static void base(BuildConfiguration config, Function<BuildConfiguration, NativeImage> nativeImageProvider) {
    throw new UnsupportedOperationException("Stubbed.");
  }

  @Substitute
  private static void build(BuildConfiguration config, Function<BuildConfiguration, NativeImage> nativeImageProvider) {
    try {
      base(config, nativeImageProvider);
    } catch (NativeImageError nativeImageErr) {
      // let through native image errors, because `performBuild` handles them
      throw nativeImageErr;
    } catch (Throwable anyError) {
      // catch all other errors in a way that elide can handle them
      throw NativeImageResult.failure(anyError);
    }
    // cancel further execution and indicate success
    throw NativeImageResult.success();
  }
}
