/// Describes an Elide project and its dependencies, build, distribution, and runtime configuration.
@ModuleInfo { minPklVersion = "0.28.1" }
module elide.project

import "Jvm.pkl" as jvm
import "Kotlin.pkl" as kotlin

/// A name for the project.
name: String?

/// Version of the project.
version: String?

/// Optional description for the project, displayed when published as a package.
description: String?

/// Relative path to the source file evaluated by the runtime on startup.
entrypoint: String?

/// Script mappings; each entry is a name and a script to run.
scripts: Mapping<String, String> = new {}

//
// ------ Dependencies ----------------------------------------------------------------------------------------------
//

/// Specifies a package version string, which can be `latest`, or a specific semver, or a version range.
typealias PackageVersion = "latest" | String

/// Typealias for a dependency repository name.
typealias RepositoryName = String

/// Typealias for a dependency repository URL.
typealias RepositoryUrl = Uri

/// Describes an NPM package dependency.
class NpmPackageSpec {
  /// The name of the package.
  name: String

  /// The requested version, including any additional syntax for version ranges (e.g. '^1.5.0').
  version: String?
}

/// Describes an NPM repository to include when resolving dependencies.
class NpmRepositorySpec {
  /// Name of this custom NPM repository.
  name: RepositoryName

  /// Base URL for this NPM repository.
  url: RepositoryUrl
}

/// Configuration for JavaScript dependency resolution using NPM.
class NpmDependencies {
  /// A list of NPM package dependencies to be resolved for this project.
  packages: Listing<NpmPackageSpec> = new {}

  /// A list of NPM package dependencies used only in development environments.
  devPackages: Listing<NpmPackageSpec> = new {}
}

/// Describes a Maven package dependency.
class MavenPackageSpec {
  /// Group for the package.
  group: String?

  /// Name for the package.
  name: String?

  /// Version or symbolic version for the package.
  version: PackageVersion

  /// Full Maven coordinate for the package; if specified, this is preferred to the group and name.
  coordinate: String?

  /// Name of a custom repository to pull this dependency from.
  repository: RepositoryName?
}

/// Describes a Maven repository to include when resolving dependencies.
class MavenRepositorySpec {
  /// URL where this repository can be accessed.
  url: RepositoryUrl?

  /// File path to a local repository.
  path: String?
}

/// Configuration for Maven dependency resolution.
class MavenDependencies {
  /// A list of Maven package dependencies to be resolved for this project.
  packages: Listing<MavenPackageSpec> = new {}

  /// A suite of extra Maven repositories.
  repositories: Mapping<String, MavenRepositorySpec> = new {}
}

/// Describes a Pip package dependency.
class PipPackageSpec {
  /// The name of the package.
  name: String
}

/// Configuration for Python dependency resolution using Pip.
class PipDependencies {
  /// A list of Pip packages to be resolved for this project.
  packages: Listing<PipPackageSpec> = new {}

  /// A list of optional Pip packages to be resolved by consumers of this project
  optionalPackages: Mapping<String, Listing<PipPackageSpec>> = new {}
}

/// Describes a Gem dependency.
class GemSpec {
  /// The name of the gem.
  name: String

  /// The version spec of the gem.
  version: String?
}

/// Configuration for Ruby dependency resolution using Gems.
class GemDependencies {
  /// A list of gems to be resolved for this project.
  packages: Listing<GemSpec> = new {}

  /// A list of gems to be resolved for this project in development mode only.
  devPackages: Listing<GemSpec> = new {}
}

/// Describes a HuggingFace AI model dependency.
class HuggingFace {
  /// Repository holding the model.
  repository: String

  /// Model name.
  model: String
}

/// Configuration for HuggingFace AI model dependencies.
class HuggingFaceDependencies {
  /// Models to download and use.
  models: Listing<HuggingFace> = new {}
}

/// Dependency resolution configuration.
class Dependencies {
  /// Configure JVM dependencies using Maven.
  maven: MavenDependencies = new {}

  /// Configure JavaScript dependencies using NPM.
  npm: NpmDependencies = new {}

  /// Configure Python dependencies using Pip.
  pip: PipDependencies = new {}

  /// Configure Ruby dependencies using Gems.
  gems: GemDependencies = new {}

  /// Configure HuggingFace AI model dependencies.
  huggingface: HuggingFaceDependencies = new {}
}

/// Dependency resolution configuration.
dependencies: Dependencies = new {}

//
// ------ Configuration ---------------------------------------------------------------------------------------------
//

/// Configure JVM runtime settings.
jvm: jvm.JvmSettings

/// Configure Kotlin language settings.
kotlin: kotlin.KotlinSettings
