/// Describes an Elide project and its dependencies, build, distribution, and runtime configuration.
@ModuleInfo { minPklVersion = "0.28.1" }
module elide.project

import "Base.pkl" as _common
import "Dev.pkl" as _dev
import "Sources.pkl" as _srcs
import "Infra.pkl" as _infra
import "Ops.pkl" as _ops
import "Artifacts.pkl" as _artifacts
import "Products.pkl" as _products
import "Task.pkl" as _tasks
import "Workspace.pkl" as _workspace
import "Lockfile.pkl" as _lockfile

import "Container.pkl" as _container
import "Jvm.pkl" as _jvm
import "Java.pkl" as _java
import "Kotlin.pkl" as _kotlin
import "Python.pkl" as _python
import "Ruby.pkl" as _ruby
import "JavaScript.pkl" as _js
import "TypeScript.pkl" as _ts
import "NativeImage.pkl" as _nativeImage
import "HuggingFace.pkl" as _huggingface
import "Testing.pkl" as _testing
import "Pkl.pkl" as _pkl

/// Name of a script within the project's configuration.
typealias ScriptName = String

/// Entrypoint definition.
typealias Entrypoint = Listing<_common.FilePath>

/// Workspaces are specified as string paths or as fully-typed module objects.
typealias Workspace = String | _workspace.WorkspaceModule

/// Class which models a full Elide project configuration; this structure is identical to the structure of the owning
/// module at `elide.project`.
class ElideProject {
  /// A name for the project.
  name: String?

  /// Version of the project.
  version: String?

  /// Optional description for the project, displayed when published as a package.
  description: String?

  /// Relative path to the source file evaluated by the runtime on startup.
  entrypoint: Entrypoint?

  /// Script mappings; each entry is a name and a script to run.
  scripts: Mapping<ScriptName, _common.ShellCommand | _common.FilePath | String> = new {}

  /// Dependency resolution configuration.
  dependencies: Dependencies = new {}

  /// Workspaces that are part of this project.
  workspaces: Listing<Workspace> = new {}

  /// Configure JVM runtime settings.
  jvm: _jvm.JvmSettings?

  /// Configure Java language settings.
  java: _java.JavaSettings?

  /// Configure Kotlin language settings.
  kotlin: _kotlin.KotlinSettings?

  /// Configure JavaScript language settings.
  javascript: _js.JavaScriptSettings?

  /// Configure TypeScript language settings.
  typescript: _ts.TypeScriptSettings?

  /// Configure Python language settings.
  python: _python.PythonSettings?

  /// Configure Ruby language settings.
  ruby: _ruby.RubySettings?

  /// Configure Pkl language settings.
  pkl: _pkl.PklSettings?

  /// Project-wide settings for the Native Image compiler.
  nativeImage: _nativeImage.NativeImageSettings?

  /// Top-level project sources definition.
  sources: _srcs.Sources

  /// Development settings for this project.
  dev: _dev.DevSettings

  /// Artifacts to be produced by this project.
  artifacts: _artifacts.Artifacts

  /// Final product configurations for this project.
  products: _products.Products

  /// Infrastructure settings for this project.
  infra: _infra.InfraSettings?

  /// Project operational settings.,
  ops: _ops.Operations?

  /// Settings and configuration for project tests.
  tests: _testing.Testing?

  /// Settings which govern Elide's lockfile.
  lockfile: _lockfile.LockfileSettings?
}

/// A name for the project.
name: String?

/// Version of the project.
version: String?

/// Optional description for the project, displayed when published as a package.
description: String?

/// Relative path to the source file evaluated by the runtime on startup.
entrypoint: Entrypoint?

/// Script mappings; each entry is a name and a script to run.
scripts: Mapping<ScriptName, _common.ShellCommand | _common.FilePath | String> = new {}

/// Workspaces that are part of this project.
workspaces: Listing<Workspace> = new {}

//
// ------ Dependencies ----------------------------------------------------------------------------------------------
//

/// Dependency resolution configuration.
class Dependencies {
  /// Configure JVM dependencies using Maven.
  maven: _jvm.MavenDependencies = new {}

  /// Configure JavaScript dependencies using NPM.
  npm: _js.NpmDependencies = new {}

  /// Configure Python dependencies using Pip.
  pip: _python.PipDependencies = new {}

  /// Configure Ruby dependencies using Gems.
  gems: _ruby.GemDependencies = new {}

  /// Configures Pkl dependencies.
  pkl: _pkl.PklDependencies = new {}

  /// Configure HuggingFace AI model dependencies.
  huggingface: _huggingface.HuggingFaceDependencies = new {}
}

/// Dependency resolution configuration.
dependencies: Dependencies = new {}

//
// ------ Configuration ---------------------------------------------------------------------------------------------
//

/// Configure JVM runtime settings.
jvm: _jvm.JvmSettings?

/// Configure Java language settings.
java: _java.JavaSettings?

/// Configure Kotlin language settings.
kotlin: _kotlin.KotlinSettings?

/// Configure JavaScript language settings.
javascript: _js.JavaScriptSettings?

/// Configure TypeScript language settings.
typescript: _ts.TypeScriptSettings?

/// Configure Python language settings.
python: _python.PythonSettings?

/// Configure Ruby language settings.
ruby: _ruby.RubySettings?

/// Configure Pkl language settings.
pkl: _pkl.PklSettings?

/// Project-wide settings for the Native Image compiler.
nativeImage: _nativeImage.NativeImageSettings?

//
// ------ Structure -------------------------------------------------------------------------------------------------
//

/// Top-level project sources definition.
sources: _srcs.Sources = new {}

/// Development settings for this project.
dev: _dev.DevSettings = new {}

/// Artifacts to be produced by this project.
artifacts: _artifacts.Artifacts = new {}

/// Final product configurations for this project.
products: _products.Products = new {}

/// Infrastructure settings for this project.
infra: _infra.InfraSettings = new {}

/// Project operational settings.,
ops: _ops.Operations = new {}

/// Settings and configuration for project tests.
tests: _testing.Testing?

/// Settings which govern Elide's lockfile.
lockfile: _lockfile.LockfileSettings = new {}

//
// ------ Execution -------------------------------------------------------------------------------------------------
//

/// Default tasks which are supported by all builds.
defaultTasks: _tasks.DefaultTasks = new {}

/// Main tasks container for this project.
tasks: _tasks.Tasks = new {}


/// Create a simple JAR artifact with defaults.
function jar() = new _jvm.Jar {}

/// Create a Native Image from an artifact and entrypoint.
function nativeImage(_from: String) = new _nativeImage.NativeImage {
  from { _from }
}

/// Create a Native Image shared library from an artifact.
function nativeSharedLibrary(_from: String) = new _nativeImage.NativeImage {
  from { _from }
  type = "library"
}

/// Create a container image description with the provided target and base.
function containerImage(_from: String) = new _container.ContainerImage {
  from { _from }
}

/// Create a container image description with the provided target and base.
function containerImageAt(
  _from: String,
  target: _container.ContainerCoordinate
) = new _container.ContainerImage {
  image = target
  from { _from }
}

/// Create a container image description with the provided target and base.
function containerImageWithBase(
  _from: String,
  target: _container.ContainerCoordinate,
  targetBase: _container.ContainerCoordinate
) = new _container.ContainerImage {
  image = target
  base = targetBase
  from { _from }
}
