<?xml version='1.0' encoding='UTF-8'?>
<SmellBaseline>
  <ManuallySuppressedIssues/>
  <CurrentIssues>
    <ID>ComplexCondition:NodeAssertTest.kt$NodeAssertTest$(left is Value &amp;&amp; left.isNull) || (right is Value &amp;&amp; right.isNull)</ID>
    <ID>CyclomaticComplexMethod:NodeFilesystem.kt$NodeFilesystemProxy$override fun getMember(key: String?): Any?</ID>
    <ID>ExplicitGarbageCollectionCall:EmbeddedGuestVFSImpl.kt$EmbeddedGuestVFSImpl$gc()</ID>
    <ID>ForbiddenComment:HostVFS.kt$HostVFS$// @TODO: OS-specific? configurable?</ID>
    <ID>ForbiddenComment:IntrinsicsResolver.kt$IntrinsicsResolver$// @TODO: disablement</ID>
    <ID>ForbiddenComment:JavaScript.kt$JavaScript$// @TODO: breakage in graalvm with `en_US`</ID>
    <ID>ForbiddenComment:JsEncoding.kt$TextDecoder$// @TODO: honor `DecodeOptions` from host?</ID>
    <ID>ForbiddenComment:NettyHttpResponse.kt$NettyHttpResponse$// TODO: support JSON objects and other types of content</ID>
    <ID>ForbiddenComment:NodeAssert.kt$NodeAssertModule$// @TODO: fully support `ProxyObject` so this module can be synthetic</ID>
    <ID>ForbiddenComment:NodeChildProcess.kt$NodeChildProcessModule$// @TODO: need ProxyObject support for NodeChildProcess</ID>
    <ID>ForbiddenComment:NodeOperatingSystem.kt$NodeOperatingSystem.BaseOS$// @TODO: implement 5 and 15 minute averages</ID>
    <ID>ForbiddenComment:NodePathTest.kt$NodePathTest$// @TODO: adopting `ProxyObject` means this object will no longer show up as a host object.</ID>
    <ID>ForbiddenComment:NodePathTest.kt$NodePathTest$// @TODO: this was the first use of the `assert` module; the order of expected/actual args is probably wrong</ID>
    <ID>ForbiddenComment:NodePathTest.kt$NodePathTest$// @TODO: this will need normalization for non-unix test runs</ID>
    <ID>ForbiddenComment:NodeZlib.kt$BrotliDecompressStream$// @TODO: flushing for readables</ID>
    <ID>ForbiddenComment:NodeZlib.kt$InflateStream$// @TODO: flushing for readables</ID>
    <ID>ForbiddenComment:NodeZlib.kt$NodeZlib$// @TODO: honor zlib options</ID>
    <ID>ForbiddenComment:NodeZlib.kt$NodeZlib$// @TODO: not yet implemented</ID>
    <ID>ForbiddenComment:NodeZlib.kt$UnzipStream$// @TODO: flushing for readables</ID>
    <ID>ForbiddenComment:TypeError.kt$// @TODO: deprecate and replace with type mapping</ID>
    <ID>ImplicitDefaultLocale:NodeOperatingSystem.kt$NodeOperatingSystem.BaseOS$String.format( "%d.%d.%d.%d", (bits and 0x0000000000ff000000L) shr 24, (bits and 0x0000000000ff0000L) shr 16, (bits and 0x0000000000ff00L) shr 8, bits and 0xffL, )</ID>
    <ID>IteratorNotThrowingNoSuchElementException:FetchHeadersIntrinsic.kt$FetchHeadersIntrinsic$&lt;no name provided> : Iterator</ID>
    <ID>IteratorNotThrowingNoSuchElementException:JsIterator.kt$JsIterator&lt;T> : IteratorProxyIteratorProxyIterable</ID>
    <ID>LargeClass:AbstractJsMapTest.kt$AbstractJsMapTest&lt;MapLike> : AbstractJsTest</ID>
    <ID>LargeClass:URLIntrinsicTest.kt$URLIntrinsicTest : AbstractJsIntrinsicTest</ID>
    <ID>LongMethod:AbstractJsMapTest.kt$AbstractJsMapTest$@Suppress("ReplaceGetOrSet") protected open fun testMapGeneric(prefix: String, factory: () -> MapLike): List&lt;DynamicTest></ID>
    <ID>LongMethod:AbstractJsMapTest.kt$AbstractJsMapTest$protected open fun testMapMutable(prefix: String, factory: () -> MapLike): List&lt;DynamicTest></ID>
    <ID>MagicNumber:DebugConfig.kt$DebugConfig.DebugAdapterConfig$4711</ID>
    <ID>MagicNumber:DebugConfig.kt$DebugConfig.InspectorConfig$4200</ID>
    <ID>MagicNumber:FetchResponse.kt$FetchResponse$200</ID>
    <ID>MagicNumber:FetchResponse.kt$FetchResponse$299</ID>
    <ID>MagicNumber:HttpServerConfig.kt$HttpServerConfig$65535</ID>
    <ID>MagicNumber:NettyRequestHandler.kt$NettyRequestHandler$404</ID>
    <ID>MagicNumber:URLIntrinsic.kt$URLIntrinsic.Companion$65535</ID>
    <ID>MagicNumber:URLIntrinsic.kt$URLIntrinsic.ParsedURL.Companion$31</ID>
    <ID>MatchingDeclarationName:AbstractJSException.kt$AbstractJsException</ID>
    <ID>MatchingDeclarationName:DebugPlugin.kt$Debug</ID>
    <ID>MatchingDeclarationName:EnvPlugin.kt$Environment</ID>
    <ID>MatchingDeclarationName:Types.kt$GuestHandlerFunction</ID>
    <ID>MatchingDeclarationName:VfsPlugin.kt$Vfs</ID>
    <ID>MaxLineLength:EmbeddedGuestVFSImpl.kt$EmbeddedGuestVFSImpl$assert(bundleStream.canReadEntryData(entry)) { "Bundle '${bundle.location}' cannot read entry '${info.path}'" }</ID>
    <ID>MaxLineLength:JsConcurrentMap.kt$JsConcurrentMap.Factory$*</ID>
    <ID>MaxLineLength:JsMutableMultiMap.kt$JsMutableMultiMap.Factory$@JvmStatic override</ID>
    <ID>MaxLineLength:URLIntrinsicTest.kt$URLIntrinsicTest$"equal,https://dl.elide.dev/test?abc=123&amp;def=456,https://dl.elide.dev/test?abc=123&amp;def=456,true,URLs should be equal"</ID>
    <ID>MaxLineLength:URLIntrinsicTest.kt$URLIntrinsicTest$"equal,https://dl.elide.dev:123/test?abc=123&amp;def=456#hi,https://dl.elide.dev:123/test?abc=123&amp;def=456#hi,true,URLs should be equal"</ID>
    <ID>MaxLineLength:URLIntrinsicTest.kt$URLIntrinsicTest$"equal,https://user:pass@dl.elide.dev/test?abc=123&amp;def=456,https://user:pass@dl.elide.dev/test?abc=123&amp;def=456,true,URLs should be equal"</ID>
    <ID>MaxLineLength:URLIntrinsicTest.kt$URLIntrinsicTest$"not-equal,https://github.com,https://github.com/elide-dev/v3,false,two URLs which differ in path should not be equal"</ID>
    <ID>MaxLineLength:URLIntrinsicTest.kt$URLIntrinsicTest$"not-equal,https://google.com,https://google.com:443,false,two URLs with the same effective port should not be equal"</ID>
    <ID>MaxLineLength:URLIntrinsicTest.kt$URLIntrinsicTest$"not-equal,https://google.com/,https://google.com:443,false,two URLs with the same effective path/port should be equal"</ID>
    <ID>NestedClassesVisibility:URLSearchParamsIntrinsic.kt$URLSearchParamsIntrinsic$MutableURLSearchParams : AbstractMutableURLSearchParamsIMutableSearchParams</ID>
    <ID>NestedClassesVisibility:URLSearchParamsIntrinsic.kt$URLSearchParamsIntrinsic$URLSearchParams : AbstractURLSearchParamsIURLSearchParams</ID>
    <ID>PrintStackTrace:AbstractDelegateVFS.kt$AbstractDelegateVFS$thr</ID>
    <ID>RethrowCaughtException:AbstractGVMScript.kt$AbstractGVMScript$throw exc</ID>
    <ID>SpreadOperator:AbstractDelegateVFS.kt$AbstractDelegateVFS$(segments[0], *segments.drop(1).toTypedArray())</ID>
    <ID>SpreadOperator:EmbeddedGuestVFSImpl.kt$EmbeddedGuestVFSImpl.EmbeddedVFSFactory$(*supportedFeatures())</ID>
    <ID>SpreadOperator:EmbeddedGuestVFSImpl.kt$EmbeddedGuestVFSImpl.EmbeddedVFSFactory$(views.first(), *(views.drop(1).toTypedArray()))</ID>
    <ID>SpreadOperator:NativeTransportFeature.kt$NativeTransportFeature$( "umbrella", *impl, builtin = true, )</ID>
    <ID>SpreadOperator:NativeTransportFeature.kt$NativeTransportFeature$("epoll", "aarch64", *epollImpls)</ID>
    <ID>SpreadOperator:NativeTransportFeature.kt$NativeTransportFeature$("epoll", "x86-64", *epollImpls)</ID>
    <ID>SpreadOperator:NativeTransportFeature.kt$NativeTransportFeature$("kqueue", "aarch64", *kqueueImpls)</ID>
    <ID>SpreadOperator:NativeTransportFeature.kt$NativeTransportFeature$("kqueue", "x86-64", *kqueueImpls)</ID>
    <ID>SpreadOperator:SQLiteTransactor.kt$SQLiteTransactor$(*args)</ID>
    <ID>SpreadOperator:SqliteModule.kt$SqliteDatabaseProxy$(*args)</ID>
    <ID>SpreadOperator:SqliteModule.kt$SqliteDatabaseProxy$(query.asHostObject&lt;Statement>(), *it.drop(1).toTypedArray())</ID>
    <ID>SpreadOperator:SqliteModule.kt$SqliteDatabaseProxy$(query.asString(), *it.drop(1).toTypedArray())</ID>
    <ID>SpreadOperator:SqliteModule.kt$SqliteDatabaseProxy$(query.asString(), *rest)</ID>
    <ID>SwallowedException:FetchHeadersIntrinsic.kt$FetchHeadersIntrinsic$err: ClassCastException</ID>
    <ID>SwallowedException:NettyTransport.kt$NettyTransport$unsatisfied: UnsatisfiedLinkError</ID>
    <ID>SwallowedException:NodeEvents.kt$EventAwareRelay$e: Throwable</ID>
    <ID>SwallowedException:URLIntrinsic.kt$URLIntrinsic.ParsedURL$e: java.net.URISyntaxException</ID>
    <ID>SwallowedException:URLIntrinsic.kt$URLIntrinsic.ParsedURL$syntaxErr: java.net.URISyntaxException</ID>
    <ID>SwallowedException:WebCryptoIntrinsicTest.kt$WebCryptoIntrinsicTest$err: Throwable</ID>
    <ID>ThrowingExceptionFromFinally:AbstractDualTest.kt$AbstractDualTest.TestResultContext$throw AssertionError("Expected failure, but test passed.")</ID>
    <ID>ThrowingExceptionFromFinally:AbstractDualTest.kt$AbstractDualTest.TestResultContext$throw exc.get()!!</ID>
    <ID>ThrowsCount:SqliteQueryRenderer.kt$SqliteQueryRenderer$private fun StringBuilder.renderValue( trigger: Char, renderedSoFar: Int, subject: String, position: Int, ctx: QueryTemplateContext?, ): Int</ID>
    <ID>ThrowsCount:URLSearchParamsIntrinsic.kt$private fun IURLSearchParams.pluckMember(key: String): Any</ID>
    <ID>TooGenericExceptionCaught:AbstractDelegateVFS.kt$AbstractDelegateVFS$thr: Throwable</ID>
    <ID>TooGenericExceptionCaught:AbstractGVMScript.kt$AbstractGVMScript$exc: Exception</ID>
    <ID>TooGenericExceptionCaught:JsIterator.kt$JsIterator.JsIteratorImpl$err: Throwable</ID>
    <ID>TooGenericExceptionCaught:NodeEvents.kt$EventAwareRelay$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:SqliteModule.kt$SqliteDatabaseProxy$err: Throwable</ID>
    <ID>TooGenericExceptionCaught:SqliteModule.kt$SqliteDatabaseProxy.SQLiteTransactionImpl$err: Throwable</ID>
    <ID>UnusedParameter:VfsPlugin.kt$Vfs$@Suppress("unused_parameter") builder: PolyglotEngineBuilder</ID>
    <ID>UnusedPrivateMember:HttpServerAgent.kt$HttpServerAgent.Companion$private fun resolveLanguage(source: Source): GuestLanguage</ID>
    <ID>UnusedPrivateProperty:AbstractJsIntrinsicTest.kt$AbstractJsIntrinsicTest$private val testInject: Boolean = true</ID>
  </CurrentIssues>
</SmellBaseline>
