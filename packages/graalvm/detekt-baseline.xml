<?xml version='1.0' encoding='UTF-8'?>
<SmellBaseline>
  <ManuallySuppressedIssues/>
  <CurrentIssues>
    <ID>ComplexCondition:AbstractStaticNativeLibraryFeature.kt$AbstractStaticNativeLibraryFeature$!it.builtin &amp;&amp; !it.registerPrefix &amp;&amp; !it.registerJni &amp;&amp; !it.eager</ID>
    <ID>ComplexCondition:NodeAssertTest.kt$NodeAssertTest$(left is Value &amp;&amp; left.isNull) || (right is Value &amp;&amp; right.isNull)</ID>
    <ID>CyclomaticComplexMethod:ConsoleIntrinsic.kt$ConsoleIntrinsic$internal fun formatLogComponent(arg: Any?): Any</ID>
    <ID>CyclomaticComplexMethod:CustomEvent.kt$CustomEvent$override fun getMember(key: String?): Any?</ID>
    <ID>CyclomaticComplexMethod:NettyHttpResponse.kt$NettyHttpResponse$override fun getMember(key: String?): Any?</ID>
    <ID>CyclomaticComplexMethod:NodeEvents.kt$NodeEventsModuleFacade$@Polyglot override fun getMember(key: String): Any?</ID>
    <ID>CyclomaticComplexMethod:NodeOperatingSystem.kt$NodeOperatingSystem.ModuleBase$override fun getMember(key: String?): Any?</ID>
    <ID>CyclomaticComplexMethod:NodePaths.kt$NodePaths.BasePaths$@Polyglot override fun format(pathObject: Any): String</ID>
    <ID>CyclomaticComplexMethod:NodePaths.kt$NodePaths.BasePaths$override fun getMember(key: String): Any?</ID>
    <ID>CyclomaticComplexMethod:SqliteModule.kt$SqliteDatabaseProxy$override fun getMember(key: String?): Any?</ID>
    <ID>CyclomaticComplexMethod:URLIntrinsic.kt$URLIntrinsic.URLValue$override fun putMember(key: String?, value: Value?)</ID>
    <ID>CyclomaticComplexMethod:URLSearchParamsIntrinsic.kt$private fun IURLSearchParams.pluckMember(key: String): Any</ID>
    <ID>ExplicitGarbageCollectionCall:EmbeddedGuestVFSImpl.kt$EmbeddedGuestVFSImpl$gc()</ID>
    <ID>ForbiddenComment:HostVFS.kt$HostVFS$// @TODO: OS-specific? configurable?</ID>
    <ID>ForbiddenComment:IntrinsicsResolver.kt$IntrinsicsResolver$// @TODO: disablement</ID>
    <ID>ForbiddenComment:JsEncoding.kt$TextDecoder$// @TODO: honor `DecodeOptions` from host?</ID>
    <ID>ForbiddenComment:NettyHttpResponse.kt$NettyHttpResponse$// TODO: support JSON objects and other types of content</ID>
    <ID>ForbiddenComment:NodeOperatingSystem.kt$NodeOperatingSystem.BaseOS$// @TODO: implement 5 and 15 minute averages</ID>
    <ID>ForbiddenComment:NodePathTest.kt$NodePathTest$// @TODO: adopting `ProxyObject` means this object will no longer show up as a host object.</ID>
    <ID>ForbiddenComment:NodePathTest.kt$NodePathTest$// @TODO: this was the first use of the `assert` module; the order of expected/actual args is probably wrong</ID>
    <ID>ForbiddenComment:NodePathTest.kt$NodePathTest$// @TODO: this will need normalization for non-unix test runs</ID>
    <ID>ForbiddenComment:TypeError.kt$// @TODO: deprecate and replace with type mapping</ID>
    <ID>ImplicitDefaultLocale:NodeOperatingSystem.kt$NodeOperatingSystem.BaseOS$String.format( "%d.%d.%d.%d", (bits and 0x0000000000ff000000L) shr 24, (bits and 0x0000000000ff0000L) shr 16, (bits and 0x0000000000ff00L) shr 8, bits and 0xffL, )</ID>
    <ID>IteratorNotThrowingNoSuchElementException:FetchHeadersIntrinsic.kt$FetchHeadersIntrinsic$&lt;no name provided> : Iterator</ID>
    <ID>IteratorNotThrowingNoSuchElementException:JsIterator.kt$JsIterator&lt;T> : IteratorProxyIteratorProxyIterable</ID>
    <ID>LargeClass:AbstractJsMapTest.kt$AbstractJsMapTest&lt;MapLike> : AbstractJsTest</ID>
    <ID>LargeClass:URLIntrinsicTest.kt$URLIntrinsicTest : AbstractJsIntrinsicTest</ID>
    <ID>LongMethod:AbstractJsMapTest.kt$AbstractJsMapTest$@Suppress("ReplaceGetOrSet") protected open fun testMapGeneric(prefix: String, factory: () -> MapLike): List&lt;DynamicTest></ID>
    <ID>LongMethod:AbstractJsMapTest.kt$AbstractJsMapTest$protected open fun testMapMutable(prefix: String, factory: () -> MapLike): List&lt;DynamicTest></ID>
    <ID>LongParameterList:AbstractStaticNativeLibraryFeature.kt$AbstractStaticNativeLibraryFeature$( name: String, vararg layout: String, type: NativeLibType = STATIC, linkName: String = name, builtin: Boolean = true, registerJni: Boolean = true, registerPrefix: Boolean = builtin, eager: Boolean = false, absolutePath: Path? = null, initializer: Boolean = false, deps: List&lt;String> = emptyList(), )</ID>
    <ID>LongParameterList:NativeLibraryFeature.kt$NativeLibraryFeature.NativeLibInfo.Companion$( name: String, vararg layout: String, type: NativeLibType = STATIC, linkName: String = name, prefix: Boolean, jni: Boolean, builtin: Boolean, eager: Boolean, absolutePath: Path?, initializer: Boolean, deps: List&lt;String>, )</ID>
    <ID>MagicNumber:DebugConfig.kt$DebugConfig.DebugAdapterConfig$4711</ID>
    <ID>MagicNumber:DebugConfig.kt$DebugConfig.InspectorConfig$4200</ID>
    <ID>MagicNumber:ExecutableScript.kt$ExecutableScript.ScriptSource$3</ID>
    <ID>MagicNumber:ExecutableScript.kt$ExecutableScript.ScriptType$5</ID>
    <ID>MagicNumber:FetchResponse.kt$FetchResponse$200</ID>
    <ID>MagicNumber:FetchResponse.kt$FetchResponse$299</ID>
    <ID>MagicNumber:GraalVMEngine.kt$GraalVMEngine.Companion$4</ID>
    <ID>MagicNumber:GraalVMEngine.kt$GraalVMEngine.Companion$8</ID>
    <ID>MagicNumber:HttpServerConfig.kt$HttpServerConfig$65535</ID>
    <ID>MagicNumber:JsProxy.kt$JsProxy.PropertyProxy$3</ID>
    <ID>MagicNumber:NettyRequestHandler.kt$NettyRequestHandler$404</ID>
    <ID>MagicNumber:URLIntrinsic.kt$URLIntrinsic.Companion$65535</ID>
    <ID>MagicNumber:URLIntrinsic.kt$URLIntrinsic.ParsedURL$3</ID>
    <ID>MagicNumber:URLIntrinsic.kt$URLIntrinsic.ParsedURL.Companion$31</ID>
    <ID>MagicNumber:URLSearchParamsIntrinsic.kt$0x7F</ID>
    <ID>MatchingDeclarationName:AbstractJSException.kt$AbstractJsException</ID>
    <ID>MatchingDeclarationName:DebugPlugin.kt$Debug</ID>
    <ID>MatchingDeclarationName:EnvPlugin.kt$Environment</ID>
    <ID>MatchingDeclarationName:Types.kt$GuestHandlerFunction</ID>
    <ID>MatchingDeclarationName:VfsPlugin.kt$Vfs</ID>
    <ID>MaxLineLength:EmbeddedGuestVFSImpl.kt$EmbeddedGuestVFSImpl$assert(bundleStream.canReadEntryData(entry)) { "Bundle '${bundle.location}' cannot read entry '${info.path}'" }</ID>
    <ID>MaxLineLength:JsConcurrentMap.kt$JsConcurrentMap.Factory$*</ID>
    <ID>MaxLineLength:JsMutableMultiMap.kt$JsMutableMultiMap.Factory$@JvmStatic override</ID>
    <ID>MaxLineLength:URLIntrinsicTest.kt$URLIntrinsicTest$"equal,https://dl.elide.dev/test?abc=123&amp;def=456,https://dl.elide.dev/test?abc=123&amp;def=456,true,URLs should be equal"</ID>
    <ID>MaxLineLength:URLIntrinsicTest.kt$URLIntrinsicTest$"equal,https://dl.elide.dev:123/test?abc=123&amp;def=456#hi,https://dl.elide.dev:123/test?abc=123&amp;def=456#hi,true,URLs should be equal"</ID>
    <ID>MaxLineLength:URLIntrinsicTest.kt$URLIntrinsicTest$"equal,https://user:pass@dl.elide.dev/test?abc=123&amp;def=456,https://user:pass@dl.elide.dev/test?abc=123&amp;def=456,true,URLs should be equal"</ID>
    <ID>MaxLineLength:URLIntrinsicTest.kt$URLIntrinsicTest$"not-equal,https://github.com,https://github.com/elide-dev/v3,false,two URLs which differ in path should not be equal"</ID>
    <ID>MaxLineLength:URLIntrinsicTest.kt$URLIntrinsicTest$"not-equal,https://google.com,https://google.com:443,false,two URLs with the same effective port should not be equal"</ID>
    <ID>MaxLineLength:URLIntrinsicTest.kt$URLIntrinsicTest$"not-equal,https://google.com/,https://google.com:443,false,two URLs with the same effective path/port should be equal"</ID>
    <ID>NestedBlockDepth:NodeStream.kt$AbstractReadable$private fun pump(untilHaltedOrExhausted: Boolean = true)</ID>
    <ID>NestedBlockDepth:SqliteQueryRenderer.kt$SqliteQueryRenderer$private fun StringBuilder.renderValue( trigger: Char, renderedSoFar: Int, subject: String, position: Int, ctx: QueryTemplateContext?, ): Int</ID>
    <ID>NestedClassesVisibility:URLSearchParamsIntrinsic.kt$URLSearchParamsIntrinsic$MutableURLSearchParams : AbstractMutableURLSearchParamsIMutableSearchParams</ID>
    <ID>NestedClassesVisibility:URLSearchParamsIntrinsic.kt$URLSearchParamsIntrinsic$URLSearchParams : AbstractURLSearchParamsIURLSearchParams</ID>
    <ID>PrintStackTrace:AbstractDelegateVFS.kt$AbstractDelegateVFS$thr</ID>
    <ID>RethrowCaughtException:AbstractGVMScript.kt$AbstractGVMScript$throw exc</ID>
    <ID>ReturnCount:GraalVMRuntime.kt$GraalVMRuntime.Companion$internal fun resolveVersion(source: String = System.getProperty(SYSTEM_JVM_VERSION)): Version?</ID>
    <ID>ReturnCount:NodePaths.kt$NodePaths.BasePaths$@Polyglot override fun format(pathObject: Any): String</ID>
    <ID>SpreadOperator:AbstractDelegateVFS.kt$AbstractDelegateVFS$(segments[0], *segments.drop(1).toTypedArray())</ID>
    <ID>SpreadOperator:AbstractStaticNativeLibraryFeature.kt$AbstractStaticNativeLibraryFeature$(it.name, *it.deps.toTypedArray())</ID>
    <ID>SpreadOperator:EmbeddedGuestVFSImpl.kt$EmbeddedGuestVFSImpl.EmbeddedVFSFactory$(*supportedFeatures())</ID>
    <ID>SpreadOperator:EmbeddedGuestVFSImpl.kt$EmbeddedGuestVFSImpl.EmbeddedVFSFactory$(views.first(), *(views.drop(1).toTypedArray()))</ID>
    <ID>SpreadOperator:FrameworkFeature.kt$FrameworkFeature$(*clazz.declaredConstructors)</ID>
    <ID>SpreadOperator:FrameworkFeature.kt$FrameworkFeature$(*clazz.declaredFields)</ID>
    <ID>SpreadOperator:FrameworkFeature.kt$FrameworkFeature$(*clazz.declaredMethods)</ID>
    <ID>SpreadOperator:GraalVMEngine.kt$GraalVMEngine.Companion$(*languages)</ID>
    <ID>SpreadOperator:NativeCryptoFeature.kt$NativeCryptoFeature$( "netty_tcnative_linux_$archTag", *tcnative, builtin = true, )</ID>
    <ID>SpreadOperator:NativeCryptoFeature.kt$NativeCryptoFeature$( "netty_tcnative_osx_$archTag", *tcnative, builtin = true, )</ID>
    <ID>SpreadOperator:NativeCryptoFeature.kt$NativeCryptoFeature$( "transport", *tcnative, builtin = true, initializer = true, absolutePath = Path(System.getProperty("elide.target")).resolve("libtransport.a"), )</ID>
    <ID>SpreadOperator:NativeCryptoFeature.kt$NativeCryptoFeature$(lib, *deps)</ID>
    <ID>SpreadOperator:NativeSQLiteFeature.kt$NativeSQLiteFeature$(*fields( NativeDB::class.java, "pointer", "busyHandler", "commitListener", "updateListener", "progressHandler", ))</ID>
    <ID>SpreadOperator:NativeSQLiteFeature.kt$NativeSQLiteFeature$(*fields(Function::class.java, "context", "value", "args"))</ID>
    <ID>SpreadOperator:NativeTransportFeature.kt$NativeTransportFeature$( "umbrella", *impl, builtin = true, )</ID>
    <ID>SpreadOperator:NativeTransportFeature.kt$NativeTransportFeature$("epoll", "aarch64", *epollImpls)</ID>
    <ID>SpreadOperator:NativeTransportFeature.kt$NativeTransportFeature$("epoll", "x86-64", *epollImpls)</ID>
    <ID>SpreadOperator:NativeTransportFeature.kt$NativeTransportFeature$("kqueue", "aarch64", *kqueueImpls)</ID>
    <ID>SpreadOperator:NativeTransportFeature.kt$NativeTransportFeature$("kqueue", "x86-64", *kqueueImpls)</ID>
    <ID>SpreadOperator:NodeEvents.kt$BoundEventListener$(*args)</ID>
    <ID>SpreadOperator:NodeFilesystem.kt$(src.toJavaPath(), dest.toJavaPath(), *copyOpts(mode))</ID>
    <ID>SpreadOperator:NodePaths.kt$NodePaths.BasePaths$(args[0].asString(), *args.drop(1).map { it.asString() }.toTypedArray())</ID>
    <ID>SpreadOperator:NodePaths.kt$PathBuf$(args[0].asString(), *args.drop(1).map { it.asString() }.toTypedArray())</ID>
    <ID>SpreadOperator:SQLiteTransactor.kt$SQLiteTransactor$(*args)</ID>
    <ID>SpreadOperator:SqliteModule.kt$SqliteDatabaseProxy$(*args)</ID>
    <ID>SpreadOperator:SqliteModule.kt$SqliteDatabaseProxy$(query.asHostObject&lt;Statement>(), *it.drop(1).toTypedArray())</ID>
    <ID>SpreadOperator:SqliteModule.kt$SqliteDatabaseProxy$(query.asString(), *it.drop(1).toTypedArray())</ID>
    <ID>SpreadOperator:SqliteModule.kt$SqliteDatabaseProxy$(query.asString(), *rest)</ID>
    <ID>SwallowedException:AbstractStaticNativeLibraryFeature.kt$AbstractStaticNativeLibraryFeature$fnf: FileNotFoundException</ID>
    <ID>SwallowedException:FetchHeadersIntrinsic.kt$FetchHeadersIntrinsic$err: ClassCastException</ID>
    <ID>SwallowedException:GraalVMEngine.kt$GraalVMEngine$uoe: UnsupportedOperationException</ID>
    <ID>SwallowedException:NettyTransport.kt$NettyTransport$unsatisfied: UnsatisfiedLinkError</ID>
    <ID>SwallowedException:NodeEvents.kt$EventAwareRelay$e: Throwable</ID>
    <ID>SwallowedException:NodeProcess.kt$NodeProcess.NodeProcessModuleImpl$uoe: UnsupportedOperationException</ID>
    <ID>SwallowedException:NodeStream.kt$AbstractReadable$ese: EndStreamException</ID>
    <ID>SwallowedException:URLIntrinsic.kt$URLIntrinsic.ParsedURL$e: java.net.URISyntaxException</ID>
    <ID>SwallowedException:URLIntrinsic.kt$URLIntrinsic.ParsedURL$syntaxErr: java.net.URISyntaxException</ID>
    <ID>SwallowedException:WebCryptoIntrinsicTest.kt$WebCryptoIntrinsicTest$err: Throwable</ID>
    <ID>ThrowingExceptionFromFinally:AbstractDualTest.kt$AbstractDualTest.TestResultContext$throw AssertionError("Expected failure, but test passed.")</ID>
    <ID>ThrowingExceptionFromFinally:AbstractDualTest.kt$AbstractDualTest.TestResultContext$throw exc.get()!!</ID>
    <ID>ThrowsCount:SqliteQueryRenderer.kt$SqliteQueryRenderer$private fun StringBuilder.renderValue( trigger: Char, renderedSoFar: Int, subject: String, position: Int, ctx: QueryTemplateContext?, ): Int</ID>
    <ID>ThrowsCount:URLSearchParamsIntrinsic.kt$private fun IURLSearchParams.pluckMember(key: String): Any</ID>
    <ID>TooGenericExceptionCaught:AbstractDelegateVFS.kt$AbstractDelegateVFS$thr: Throwable</ID>
    <ID>TooGenericExceptionCaught:AbstractGVMScript.kt$AbstractGVMScript$exc: Exception</ID>
    <ID>TooGenericExceptionCaught:JavaScript.kt$JavaScript$err: Throwable</ID>
    <ID>TooGenericExceptionCaught:JsIterator.kt$JsIterator.JsIteratorImpl$err: Throwable</ID>
    <ID>TooGenericExceptionCaught:NodeEvents.kt$EventAwareRelay$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:NodeStream.kt$AbstractReadable$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:SqliteModule.kt$SqliteDatabaseProxy$err: Throwable</ID>
    <ID>TooGenericExceptionCaught:SqliteModule.kt$SqliteDatabaseProxy.SQLiteTransactionImpl$err: Throwable</ID>
    <ID>TooGenericExceptionThrown:FrameworkFeature.kt$FrameworkFeature$throw RuntimeException( "Failed to find method " + methodName + " for class " + clazz.name, e )</ID>
    <ID>TooGenericExceptionThrown:FrameworkFeature.kt$FrameworkFeature$throw RuntimeException("Failed to load classes under package name.", e)</ID>
    <ID>TooManyFunctions:AbstractDelegateVFS.kt$AbstractDelegateVFS&lt;VFS> : GuestVFSAbstractBaseVFS</ID>
    <ID>TooManyFunctions:BaseMutableJsMultiMap.kt$BaseMutableJsMultiMap&lt;K: Any, V> : BaseJsMultiMapMutableMapMutableMultiMapLike</ID>
    <ID>TooManyFunctions:CompoundVFSImpl.kt$CompoundVFSImpl : AbstractBaseVFS</ID>
    <ID>TooManyFunctions:NodeEvents.kt$EventAwareRelay : EventAware</ID>
    <ID>TooManyFunctions:NodeFilesystem.kt$NodeFilesystemProxy : NodeFilesystemAPIFilesystemBase</ID>
    <ID>TooManyFunctions:NodeOperatingSystem.kt$NodeOperatingSystem$BaseOS : ModuleBaseOperatingSystemAPIProxyObject</ID>
    <ID>TooManyFunctions:NodeStream.kt$AbstractReadable&lt;T> : AbstractStreamReadable</ID>
    <ID>TooManyFunctions:Readable.kt$Readable : StatefulStreamEventEmitterEventTargetProxyObjectProxyIterable</ID>
    <ID>UnusedParameter:GraalVMContext.kt$GraalVMContext$options: EvaluationOptions</ID>
    <ID>UnusedParameter:SqliteQueryRenderer.kt$SqliteQueryRenderer$ctx: QueryTemplateContext? = null</ID>
    <ID>UnusedParameter:SqliteQueryRenderer.kt$SqliteQueryRenderer$position: Int = -1</ID>
    <ID>UnusedParameter:SqliteQueryRenderer.kt$SqliteQueryRenderer$soFar: Int = -1</ID>
    <ID>UnusedParameter:SqliteQueryRenderer.kt$SqliteQueryRenderer$subject: String</ID>
    <ID>UnusedParameter:VfsPlugin.kt$Vfs$@Suppress("unused_parameter") builder: PolyglotEngineBuilder</ID>
    <ID>UnusedPrivateMember:HttpServerAgent.kt$HttpServerAgent.Companion$private fun resolveLanguage(source: Source): GuestLanguage</ID>
    <ID>UnusedPrivateMember:NativeCryptoFeature.kt$NativeCryptoFeature$private fun renameNativeCryptoLib(lib: String): String</ID>
    <ID>UnusedPrivateProperty:AbstractJsIntrinsicTest.kt$AbstractJsIntrinsicTest$private val testInject: Boolean = true</ID>
  </CurrentIssues>
</SmellBaseline>
