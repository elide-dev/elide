/*
 * Copyright (c) 2024 Elide Technologies, Inc.
 *
 * Licensed under the MIT license (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 *   https://opensource.org/license/mit/
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under the License.
 */

const process = this["process"] || {
  pid: -1,
  cwd: () => "",
  env: {},
  NODE_DEBUG: false,
  NODE_ENV: "production",
  noDeprecation: false,
};

const window = globalThis || this;
const global = globalThis || this;
const self = globalThis || this;
let gc = null;
(function (factory) {
  typeof define === "function" && define.amd ? define(factory) : factory();
})(function () {
  "use strict";

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", {
      writable: false,
    });
    return Constructor;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true,
      },
    });
    Object.defineProperty(subClass, "prototype", {
      writable: false,
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
  }

  function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf
      ? Object.getPrototypeOf.bind()
      : function _getPrototypeOf(o) {
          return o.__proto__ || Object.getPrototypeOf(o);
        };
    return _getPrototypeOf(o);
  }

  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf
      ? Object.setPrototypeOf.bind()
      : function _setPrototypeOf(o, p) {
          o.__proto__ = p;
          return o;
        };
    return _setPrototypeOf(o, p);
  }

  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;

    try {
      Boolean.prototype.valueOf.call(
        Reflect.construct(Boolean, [], function () {})
      );
      return true;
    } catch (e) {
      return false;
    }
  }

  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError(
        "this hasn't been initialised - super() hasn't been called"
      );
    }

    return self;
  }

  function _possibleConstructorReturn(self, call) {
    if (call && (typeof call === "object" || typeof call === "function")) {
      return call;
    } else if (call !== void 0) {
      throw new TypeError(
        "Derived constructors may only return object or undefined"
      );
    }

    return _assertThisInitialized(self);
  }

  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();

    return function _createSuperInternal() {
      var Super = _getPrototypeOf(Derived),
        result;

      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf(this).constructor;

        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }

      return _possibleConstructorReturn(this, result);
    };
  }

  function _superPropBase(object, property) {
    while (!Object.prototype.hasOwnProperty.call(object, property)) {
      object = _getPrototypeOf(object);
      if (object === null) break;
    }

    return object;
  }

  function _get() {
    if (typeof Reflect !== "undefined" && Reflect.get) {
      _get = Reflect.get.bind();
    } else {
      _get = function _get(target, property, receiver) {
        var base = _superPropBase(target, property);

        if (!base) return;
        var desc = Object.getOwnPropertyDescriptor(base, property);

        if (desc.get) {
          return desc.get.call(arguments.length < 3 ? target : receiver);
        }

        return desc.value;
      };
    }

    return _get.apply(this, arguments);
  }

  var Emitter = /*#__PURE__*/ (function () {
    function Emitter() {
      _classCallCheck(this, Emitter);

      Object.defineProperty(this, "listeners", {
        value: {},
        writable: true,
        configurable: true,
      });
    }

    _createClass(Emitter, [
      {
        key: "addEventListener",
        value: function addEventListener(type, callback, options) {
          if (!(type in this.listeners)) {
            this.listeners[type] = [];
          }

          this.listeners[type].push({
            callback: callback,
            options: options,
          });
        },
      },
      {
        key: "removeEventListener",
        value: function removeEventListener(type, callback) {
          if (!(type in this.listeners)) {
            return;
          }

          var stack = this.listeners[type];

          for (var i = 0, l = stack.length; i < l; i++) {
            if (stack[i].callback === callback) {
              stack.splice(i, 1);
              return;
            }
          }
        },
      },
      {
        key: "dispatchEvent",
        value: function dispatchEvent(event) {
          if (!(event.type in this.listeners)) {
            return;
          }

          var stack = this.listeners[event.type];
          var stackToCall = stack.slice();

          for (var i = 0, l = stackToCall.length; i < l; i++) {
            var listener = stackToCall[i];

            try {
              listener.callback.call(this, event);
            } catch (e) {
              Promise.resolve().then(function () {
                throw e;
              });
            }

            if (listener.options && listener.options.once) {
              this.removeEventListener(event.type, listener.callback);
            }
          }

          return !event.defaultPrevented;
        },
      },
    ]);

    return Emitter;
  })();

  var AbortSignal = /*#__PURE__*/ (function (_Emitter) {
    _inherits(AbortSignal, _Emitter);

    var _super = _createSuper(AbortSignal);

    function AbortSignal() {
      var _this;

      _classCallCheck(this, AbortSignal);

      _this = _super.call(this); // Some versions of babel does not transpile super() correctly for IE <= 10, if the parent
      // constructor has failed to run, then "this.listeners" will still be undefined and then we call
      // the parent constructor directly instead as a workaround. For general details, see babel bug:
      // https://github.com/babel/babel/issues/3041
      // This hack was added as a fix for the issue described here:
      // https://github.com/Financial-Times/polyfill-library/pull/59#issuecomment-477558042

      if (!_this.listeners) {
        Emitter.call(_assertThisInitialized(_this));
      } // Compared to assignment, Object.defineProperty makes properties non-enumerable by default and
      // we want Object.keys(new AbortController().signal) to be [] for compat with the native impl

      Object.defineProperty(_assertThisInitialized(_this), "aborted", {
        value: false,
        writable: true,
        configurable: true,
      });
      Object.defineProperty(_assertThisInitialized(_this), "onabort", {
        value: null,
        writable: true,
        configurable: true,
      });
      return _this;
    }

    _createClass(AbortSignal, [
      {
        key: "toString",
        value: function toString() {
          return "[object AbortSignal]";
        },
      },
      {
        key: "dispatchEvent",
        value: function dispatchEvent(event) {
          if (event.type === "abort") {
            this.aborted = true;

            if (typeof this.onabort === "function") {
              this.onabort.call(this, event);
            }
          }

          _get(
            _getPrototypeOf(AbortSignal.prototype),
            "dispatchEvent",
            this
          ).call(this, event);
        },
      },
    ]);

    return AbortSignal;
  })(Emitter);
  var AbortController = /*#__PURE__*/ (function () {
    function AbortController() {
      _classCallCheck(this, AbortController);

      // Compared to assignment, Object.defineProperty makes properties non-enumerable by default and
      // we want Object.keys(new AbortController()) to be [] for compat with the native impl
      Object.defineProperty(this, "signal", {
        value: new AbortSignal(),
        writable: true,
        configurable: true,
      });
    }

    _createClass(AbortController, [
      {
        key: "abort",
        value: function abort() {
          var event;

          try {
            event = new Event("abort");
          } catch (e) {
            if (typeof document !== "undefined") {
              if (!document.createEvent) {
                // For Internet Explorer 8:
                event = document.createEventObject();
                event.type = "abort";
              } else {
                // For Internet Explorer 11:
                event = document.createEvent("Event");
                event.initEvent("abort", false, false);
              }
            } else {
              // Fallback where document isn't available:
              event = {
                type: "abort",
                bubbles: false,
                cancelable: false,
              };
            }
          }

          this.signal.dispatchEvent(event);
        },
      },
      {
        key: "toString",
        value: function toString() {
          return "[object AbortController]";
        },
      },
    ]);

    return AbortController;
  })();

  if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
    // These are necessary to make sure that we get correct output for:
    // Object.prototype.toString.call(new AbortController())
    AbortController.prototype[Symbol.toStringTag] = "AbortController";
    AbortSignal.prototype[Symbol.toStringTag] = "AbortSignal";
  }

  function polyfillNeeded(self) {
    if (self.__FORCE_INSTALL_ABORTCONTROLLER_POLYFILL) {
      console.log(
        "__FORCE_INSTALL_ABORTCONTROLLER_POLYFILL=true is set, will force install polyfill"
      );
      return true;
    } // Note that the "unfetch" minimal fetch polyfill defines fetch() without
    // defining window.Request, and this polyfill need to work on top of unfetch
    // so the below feature detection needs the !self.AbortController part.
    // The Request.prototype check is also needed because Safari versions 11.1.2
    // up to and including 12.1.x has a window.AbortController present but still
    // does NOT correctly implement abortable fetch:
    // https://bugs.webkit.org/show_bug.cgi?id=174980#c2

    return (
      (typeof self.Request === "function" &&
        !self.Request.prototype.hasOwnProperty("signal")) ||
      !self.AbortController
    );
  }

  (function (self) {
    if (!polyfillNeeded(self)) {
      return;
    }

    self.AbortController = AbortController;
    self.AbortSignal = AbortSignal;
  })(typeof self !== "undefined" ? self : global);
});

const AbortController = global["AbortController"];
const AbortSignal = global["AbortSignal"];

var embedded = (() => {
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __esm = (fn, res) =>
    function __init() {
      return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])((fn = 0))), res;
    };
  var __commonJS = (cb, mod) =>
    function __require() {
      return (
        mod ||
          (0, cb[__getOwnPropNames(cb)[0]])(
            (mod = { exports: {} }).exports,
            mod
          ),
        mod.exports
      );
    };

  // ../../samples/fullstack/react-ssr/node/build/esbuild/process-shim.js
  var process;
  var init_process_shim = __esm({
    "../../samples/fullstack/react-ssr/node/build/esbuild/process-shim.js"() {
      process = {
        pid: -1,
        cwd: () => "",
        env: {},
        NODE_DEBUG: false,
        NODE_ENV: "production",
        noDeprecation: false,
      };
    },
  });

  // node_modules/react/cjs/react.production.min.js
  var require_react_production_min = __commonJS({
    "node_modules/react/cjs/react.production.min.js"(exports) {
      "use strict";
      init_process_shim();
      var l = Symbol.for("react.element");
      var n = Symbol.for("react.portal");
      var p = Symbol.for("react.fragment");
      var q = Symbol.for("react.strict_mode");
      var r = Symbol.for("react.profiler");
      var t = Symbol.for("react.provider");
      var u = Symbol.for("react.context");
      var v = Symbol.for("react.forward_ref");
      var w = Symbol.for("react.suspense");
      var x = Symbol.for("react.memo");
      var y = Symbol.for("react.lazy");
      var z = Symbol.iterator;
      function A(a) {
        if (a === null || typeof a !== "object") return null;
        a = (z && a[z]) || a["@@iterator"];
        return typeof a === "function" ? a : null;
      }
      var B = {
        isMounted: function () {
          return false;
        },
        enqueueForceUpdate: function () {},
        enqueueReplaceState: function () {},
        enqueueSetState: function () {},
      };
      var C = Object.assign;
      var D = {};
      function E(a, b, e) {
        this.props = a;
        this.context = b;
        this.refs = D;
        this.updater = e || B;
      }
      E.prototype.isReactComponent = {};
      E.prototype.setState = function (a, b) {
        if (typeof a !== "object" && typeof a !== "function" && a != null)
          throw Error(
            "setState(...): takes an object of state variables to update or a function which returns an object of state variables."
          );
        this.updater.enqueueSetState(this, a, b, "setState");
      };
      E.prototype.forceUpdate = function (a) {
        this.updater.enqueueForceUpdate(this, a, "forceUpdate");
      };
      function F() {}
      F.prototype = E.prototype;
      function G(a, b, e) {
        this.props = a;
        this.context = b;
        this.refs = D;
        this.updater = e || B;
      }
      var H = (G.prototype = new F());
      H.constructor = G;
      C(H, E.prototype);
      H.isPureReactComponent = true;
      var I = Array.isArray;
      var J = Object.prototype.hasOwnProperty;
      var K = { current: null };
      var L = { key: true, ref: true, __self: true, __source: true };
      function M(a, b, e) {
        var d,
          c = {},
          k = null,
          h = null;
        if (b != null)
          for (d in (b.ref !== void 0 && (h = b.ref),
          b.key !== void 0 && (k = "" + b.key),
          b))
            J.call(b, d) && !L.hasOwnProperty(d) && (c[d] = b[d]);
        var g = arguments.length - 2;
        if (g === 1) c.children = e;
        else if (1 < g) {
          for (var f = Array(g), m = 0; m < g; m++) f[m] = arguments[m + 2];
          c.children = f;
        }
        if (a && a.defaultProps)
          for (d in ((g = a.defaultProps), g)) c[d] === void 0 && (c[d] = g[d]);
        return {
          $$typeof: l,
          type: a,
          key: k,
          ref: h,
          props: c,
          _owner: K.current,
        };
      }
      function N(a, b) {
        return {
          $$typeof: l,
          type: a.type,
          key: b,
          ref: a.ref,
          props: a.props,
          _owner: a._owner,
        };
      }
      function O(a) {
        return typeof a === "object" && a !== null && a.$$typeof === l;
      }
      function escape(a) {
        var b = { "=": "=0", ":": "=2" };
        return (
          "$" +
          a.replace(/[=:]/g, function (a2) {
            return b[a2];
          })
        );
      }
      var P = /\/+/g;
      function Q(a, b) {
        return typeof a === "object" && a !== null && a.key != null
          ? escape("" + a.key)
          : b.toString(36);
      }
      function R(a, b, e, d, c) {
        var k = typeof a;
        if (k === "undefined" || k === "boolean") a = null;
        var h = false;
        if (a === null) h = true;
        else
          switch (k) {
            case "string":
            case "number":
              h = true;
              break;
            case "object":
              switch (a.$$typeof) {
                case l:
                case n:
                  h = true;
              }
          }
        if (h)
          return (
            (h = a),
            (c = c(h)),
            (a = d === "" ? "." + Q(h, 0) : d),
            I(c)
              ? ((e = ""),
                a != null && (e = a.replace(P, "$&/") + "/"),
                R(c, b, e, "", function (a2) {
                  return a2;
                }))
              : c != null &&
                (O(c) &&
                  (c = N(
                    c,
                    e +
                      (!c.key || (h && h.key === c.key)
                        ? ""
                        : ("" + c.key).replace(P, "$&/") + "/") +
                      a
                  )),
                b.push(c)),
            1
          );
        h = 0;
        d = d === "" ? "." : d + ":";
        if (I(a))
          for (var g = 0; g < a.length; g++) {
            k = a[g];
            var f = d + Q(k, g);
            h += R(k, b, e, f, c);
          }
        else if (((f = A(a)), typeof f === "function"))
          for (a = f.call(a), g = 0; !(k = a.next()).done; )
            (k = k.value), (f = d + Q(k, g++)), (h += R(k, b, e, f, c));
        else if (k === "object")
          throw (
            ((b = String(a)),
            Error(
              "Objects are not valid as a React child (found: " +
                (b === "[object Object]"
                  ? "object with keys {" + Object.keys(a).join(", ") + "}"
                  : b) +
                "). If you meant to render a collection of children, use an array instead."
            ))
          );
        return h;
      }
      function S(a, b, e) {
        if (a == null) return a;
        var d = [],
          c = 0;
        R(a, d, "", "", function (a2) {
          return b.call(e, a2, c++);
        });
        return d;
      }
      function T(a) {
        if (a._status === -1) {
          var b = a._result;
          b = b();
          b.then(
            function (b2) {
              if (a._status === 0 || a._status === -1)
                (a._status = 1), (a._result = b2);
            },
            function (b2) {
              if (a._status === 0 || a._status === -1)
                (a._status = 2), (a._result = b2);
            }
          );
          a._status === -1 && ((a._status = 0), (a._result = b));
        }
        if (a._status === 1) return a._result.default;
        throw a._result;
      }
      var U = { current: null };
      var V = { transition: null };
      var W = {
        ReactCurrentDispatcher: U,
        ReactCurrentBatchConfig: V,
        ReactCurrentOwner: K,
      };
      exports.Children = {
        map: S,
        forEach: function (a, b, e) {
          S(
            a,
            function () {
              b.apply(this, arguments);
            },
            e
          );
        },
        count: function (a) {
          var b = 0;
          S(a, function () {
            b++;
          });
          return b;
        },
        toArray: function (a) {
          return (
            S(a, function (a2) {
              return a2;
            }) || []
          );
        },
        only: function (a) {
          if (!O(a))
            throw Error(
              "React.Children.only expected to receive a single React element child."
            );
          return a;
        },
      };
      exports.Component = E;
      exports.Fragment = p;
      exports.Profiler = r;
      exports.PureComponent = G;
      exports.StrictMode = q;
      exports.Suspense = w;
      exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = W;
      exports.cloneElement = function (a, b, e) {
        if (a === null || a === void 0)
          throw Error(
            "React.cloneElement(...): The argument must be a React element, but you passed " +
              a +
              "."
          );
        var d = C({}, a.props),
          c = a.key,
          k = a.ref,
          h = a._owner;
        if (b != null) {
          b.ref !== void 0 && ((k = b.ref), (h = K.current));
          b.key !== void 0 && (c = "" + b.key);
          if (a.type && a.type.defaultProps) var g = a.type.defaultProps;
          for (f in b)
            J.call(b, f) &&
              !L.hasOwnProperty(f) &&
              (d[f] = b[f] === void 0 && g !== void 0 ? g[f] : b[f]);
        }
        var f = arguments.length - 2;
        if (f === 1) d.children = e;
        else if (1 < f) {
          g = Array(f);
          for (var m = 0; m < f; m++) g[m] = arguments[m + 2];
          d.children = g;
        }
        return {
          $$typeof: l,
          type: a.type,
          key: c,
          ref: k,
          props: d,
          _owner: h,
        };
      };
      exports.createContext = function (a) {
        a = {
          $$typeof: u,
          _currentValue: a,
          _currentValue2: a,
          _threadCount: 0,
          Provider: null,
          Consumer: null,
          _defaultValue: null,
          _globalName: null,
        };
        a.Provider = { $$typeof: t, _context: a };
        return (a.Consumer = a);
      };
      exports.createElement = M;
      exports.createFactory = function (a) {
        var b = M.bind(null, a);
        b.type = a;
        return b;
      };
      exports.createRef = function () {
        return { current: null };
      };
      exports.forwardRef = function (a) {
        return { $$typeof: v, render: a };
      };
      exports.isValidElement = O;
      exports.lazy = function (a) {
        return { $$typeof: y, _payload: { _status: -1, _result: a }, _init: T };
      };
      exports.memo = function (a, b) {
        return { $$typeof: x, type: a, compare: b === void 0 ? null : b };
      };
      exports.startTransition = function (a) {
        var b = V.transition;
        V.transition = {};
        try {
          a();
        } finally {
          V.transition = b;
        }
      };
      exports.unstable_act = function () {
        throw Error("act(...) is not supported in production builds of React.");
      };
      exports.useCallback = function (a, b) {
        return U.current.useCallback(a, b);
      };
      exports.useContext = function (a) {
        return U.current.useContext(a);
      };
      exports.useDebugValue = function () {};
      exports.useDeferredValue = function (a) {
        return U.current.useDeferredValue(a);
      };
      exports.useEffect = function (a, b) {
        return U.current.useEffect(a, b);
      };
      exports.useId = function () {
        return U.current.useId();
      };
      exports.useImperativeHandle = function (a, b, e) {
        return U.current.useImperativeHandle(a, b, e);
      };
      exports.useInsertionEffect = function (a, b) {
        return U.current.useInsertionEffect(a, b);
      };
      exports.useLayoutEffect = function (a, b) {
        return U.current.useLayoutEffect(a, b);
      };
      exports.useMemo = function (a, b) {
        return U.current.useMemo(a, b);
      };
      exports.useReducer = function (a, b, e) {
        return U.current.useReducer(a, b, e);
      };
      exports.useRef = function (a) {
        return U.current.useRef(a);
      };
      exports.useState = function (a) {
        return U.current.useState(a);
      };
      exports.useSyncExternalStore = function (a, b, e) {
        return U.current.useSyncExternalStore(a, b, e);
      };
      exports.useTransition = function () {
        return U.current.useTransition();
      };
      exports.version = "18.2.0";
    },
  });

  // node_modules/react/cjs/react.development.js
  var require_react_development = __commonJS({
    "node_modules/react/cjs/react.development.js"(exports, module) {
      "use strict";
      init_process_shim();
      if (process.env.NODE_ENV !== "production") {
        (function () {
          "use strict";
          if (
            typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" &&
            typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart ===
              "function"
          ) {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(
              new Error()
            );
          }
          var ReactVersion = "18.2.0";
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator =
              (MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL]) ||
              maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactCurrentDispatcher = {
            current: null,
          };
          var ReactCurrentBatchConfig = {
            transition: null,
          };
          var ReactCurrentActQueue = {
            current: null,
            isBatchingLegacy: false,
            didScheduleLegacyUpdate: false,
          };
          var ReactCurrentOwner = {
            current: null,
          };
          var ReactDebugCurrentFrame = {};
          var currentExtraStackFrame = null;
          function setExtraStackFrame(stack) {
            {
              currentExtraStackFrame = stack;
            }
          }
          {
            ReactDebugCurrentFrame.setExtraStackFrame = function (stack) {
              {
                currentExtraStackFrame = stack;
              }
            };
            ReactDebugCurrentFrame.getCurrentStack = null;
            ReactDebugCurrentFrame.getStackAddendum = function () {
              var stack = "";
              if (currentExtraStackFrame) {
                stack += currentExtraStackFrame;
              }
              var impl = ReactDebugCurrentFrame.getCurrentStack;
              if (impl) {
                stack += impl() || "";
              }
              return stack;
            };
          }
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var ReactSharedInternals = {
            ReactCurrentDispatcher,
            ReactCurrentBatchConfig,
            ReactCurrentOwner,
          };
          {
            ReactSharedInternals.ReactDebugCurrentFrame =
              ReactDebugCurrentFrame;
            ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
          }
          function warn(format) {
            {
              {
                for (
                  var _len = arguments.length,
                    args = new Array(_len > 1 ? _len - 1 : 0),
                    _key = 1;
                  _key < _len;
                  _key++
                ) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format, args);
              }
            }
          }
          function error(format) {
            {
              {
                for (
                  var _len2 = arguments.length,
                    args = new Array(_len2 > 1 ? _len2 - 1 : 0),
                    _key2 = 1;
                  _key2 < _len2;
                  _key2++
                ) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 =
                ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function (item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(
                console[level],
                console,
                argsWithFormat
              );
            }
          }
          var didWarnStateUpdateForUnmountedComponent = {};
          function warnNoop(publicInstance, callerName) {
            {
              var _constructor = publicInstance.constructor;
              var componentName =
                (_constructor &&
                  (_constructor.displayName || _constructor.name)) ||
                "ReactClass";
              var warningKey = componentName + "." + callerName;
              if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
                return;
              }
              error(
                "Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.",
                callerName,
                componentName
              );
              didWarnStateUpdateForUnmountedComponent[warningKey] = true;
            }
          }
          var ReactNoopUpdateQueue = {
            isMounted: function (publicInstance) {
              return false;
            },
            enqueueForceUpdate: function (
              publicInstance,
              callback,
              callerName
            ) {
              warnNoop(publicInstance, "forceUpdate");
            },
            enqueueReplaceState: function (
              publicInstance,
              completeState,
              callback,
              callerName
            ) {
              warnNoop(publicInstance, "replaceState");
            },
            enqueueSetState: function (
              publicInstance,
              partialState,
              callback,
              callerName
            ) {
              warnNoop(publicInstance, "setState");
            },
          };
          var assign = Object.assign;
          var emptyObject = {};
          {
            Object.freeze(emptyObject);
          }
          function Component(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          Component.prototype.isReactComponent = {};
          Component.prototype.setState = function (partialState, callback) {
            if (
              typeof partialState !== "object" &&
              typeof partialState !== "function" &&
              partialState != null
            ) {
              throw new Error(
                "setState(...): takes an object of state variables to update or a function which returns an object of state variables."
              );
            }
            this.updater.enqueueSetState(
              this,
              partialState,
              callback,
              "setState"
            );
          };
          Component.prototype.forceUpdate = function (callback) {
            this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
          };
          {
            var deprecatedAPIs = {
              isMounted: [
                "isMounted",
                "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks.",
              ],
              replaceState: [
                "replaceState",
                "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236).",
              ],
            };
            var defineDeprecationWarning = function (methodName, info) {
              Object.defineProperty(Component.prototype, methodName, {
                get: function () {
                  warn(
                    "%s(...) is deprecated in plain JavaScript React classes. %s",
                    info[0],
                    info[1]
                  );
                  return void 0;
                },
              });
            };
            for (var fnName in deprecatedAPIs) {
              if (deprecatedAPIs.hasOwnProperty(fnName)) {
                defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
              }
            }
          }
          function ComponentDummy() {}
          ComponentDummy.prototype = Component.prototype;
          function PureComponent(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          var pureComponentPrototype = (PureComponent.prototype =
            new ComponentDummy());
          pureComponentPrototype.constructor = PureComponent;
          assign(pureComponentPrototype, Component.prototype);
          pureComponentPrototype.isPureReactComponent = true;
          function createRef() {
            var refObject = {
              current: null,
            };
            {
              Object.seal(refObject);
            }
            return refObject;
          }
          var isArrayImpl = Array.isArray;
          function isArray(a) {
            return isArrayImpl(a);
          }
          function typeName(value) {
            {
              var hasToStringTag =
                typeof Symbol === "function" && Symbol.toStringTag;
              var type =
                (hasToStringTag && value[Symbol.toStringTag]) ||
                value.constructor.name ||
                "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error(
                  "The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.",
                  typeName(value)
                );
                return testStringCoercion(value);
              }
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== ""
              ? wrapperName + "(" + functionName + ")"
              : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error(
                  "Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."
                );
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true,
          };
          var specialPropKeyWarningShown,
            specialPropRefWarningShown,
            didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config) {
            {
              if (hasOwnProperty.call(config, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.ref !== void 0;
          }
          function hasValidKey(config) {
            {
              if (hasOwnProperty.call(config, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.key !== void 0;
          }
          function defineKeyPropWarningGetter(props, displayName) {
            var warnAboutAccessingKey = function () {
              {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error(
                    "%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)",
                    displayName
                  );
                }
              }
            };
            warnAboutAccessingKey.isReactWarning = true;
            Object.defineProperty(props, "key", {
              get: warnAboutAccessingKey,
              configurable: true,
            });
          }
          function defineRefPropWarningGetter(props, displayName) {
            var warnAboutAccessingRef = function () {
              {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error(
                    "%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)",
                    displayName
                  );
                }
              }
            };
            warnAboutAccessingRef.isReactWarning = true;
            Object.defineProperty(props, "ref", {
              get: warnAboutAccessingRef,
              configurable: true,
            });
          }
          function warnIfStringRefCannotBeAutoConverted(config) {
            {
              if (
                typeof config.ref === "string" &&
                ReactCurrentOwner.current &&
                config.__self &&
                ReactCurrentOwner.current.stateNode !== config.__self
              ) {
                var componentName = getComponentNameFromType(
                  ReactCurrentOwner.current.type
                );
                if (!didWarnAboutStringRefs[componentName]) {
                  error(
                    'Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref',
                    componentName,
                    config.ref
                  );
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          var ReactElement = function (
            type,
            key,
            ref,
            self2,
            source,
            owner,
            props
          ) {
            var element = {
              $$typeof: REACT_ELEMENT_TYPE,
              type,
              key,
              ref,
              props,
              _owner: owner,
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false,
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self2,
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source,
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          };
          function createElement(type, config, children) {
            var propName;
            var props = {};
            var key = null;
            var ref = null;
            var self2 = null;
            var source = null;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                {
                  warnIfStringRefCannotBeAutoConverted(config);
                }
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              self2 = config.__self === void 0 ? null : config.__self;
              source = config.__source === void 0 ? null : config.__source;
              for (propName in config) {
                if (
                  hasOwnProperty.call(config, propName) &&
                  !RESERVED_PROPS.hasOwnProperty(propName)
                ) {
                  props[propName] = config[propName];
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i = 0; i < childrenLength; i++) {
                childArray[i] = arguments[i + 2];
              }
              {
                if (Object.freeze) {
                  Object.freeze(childArray);
                }
              }
              props.children = childArray;
            }
            if (type && type.defaultProps) {
              var defaultProps = type.defaultProps;
              for (propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
            }
            {
              if (key || ref) {
                var displayName =
                  typeof type === "function"
                    ? type.displayName || type.name || "Unknown"
                    : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
            }
            return ReactElement(
              type,
              key,
              ref,
              self2,
              source,
              ReactCurrentOwner.current,
              props
            );
          }
          function cloneAndReplaceKey(oldElement, newKey) {
            var newElement = ReactElement(
              oldElement.type,
              newKey,
              oldElement.ref,
              oldElement._self,
              oldElement._source,
              oldElement._owner,
              oldElement.props
            );
            return newElement;
          }
          function cloneElement(element, config, children) {
            if (element === null || element === void 0) {
              throw new Error(
                "React.cloneElement(...): The argument must be a React element, but you passed " +
                  element +
                  "."
              );
            }
            var propName;
            var props = assign({}, element.props);
            var key = element.key;
            var ref = element.ref;
            var self2 = element._self;
            var source = element._source;
            var owner = element._owner;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                owner = ReactCurrentOwner.current;
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              var defaultProps;
              if (element.type && element.type.defaultProps) {
                defaultProps = element.type.defaultProps;
              }
              for (propName in config) {
                if (
                  hasOwnProperty.call(config, propName) &&
                  !RESERVED_PROPS.hasOwnProperty(propName)
                ) {
                  if (config[propName] === void 0 && defaultProps !== void 0) {
                    props[propName] = defaultProps[propName];
                  } else {
                    props[propName] = config[propName];
                  }
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i = 0; i < childrenLength; i++) {
                childArray[i] = arguments[i + 2];
              }
              props.children = childArray;
            }
            return ReactElement(
              element.type,
              key,
              ref,
              self2,
              source,
              owner,
              props
            );
          }
          function isValidElement(object) {
            return (
              typeof object === "object" &&
              object !== null &&
              object.$$typeof === REACT_ELEMENT_TYPE
            );
          }
          var SEPARATOR = ".";
          var SUBSEPARATOR = ":";
          function escape(key) {
            var escapeRegex = /[=:]/g;
            var escaperLookup = {
              "=": "=0",
              ":": "=2",
            };
            var escapedString = key.replace(escapeRegex, function (match) {
              return escaperLookup[match];
            });
            return "$" + escapedString;
          }
          var didWarnAboutMaps = false;
          var userProvidedKeyEscapeRegex = /\/+/g;
          function escapeUserProvidedKey(text) {
            return text.replace(userProvidedKeyEscapeRegex, "$&/");
          }
          function getElementKey(element, index) {
            if (
              typeof element === "object" &&
              element !== null &&
              element.key != null
            ) {
              {
                checkKeyStringCoercion(element.key);
              }
              return escape("" + element.key);
            }
            return index.toString(36);
          }
          function mapIntoArray(
            children,
            array,
            escapedPrefix,
            nameSoFar,
            callback
          ) {
            var type = typeof children;
            if (type === "undefined" || type === "boolean") {
              children = null;
            }
            var invokeCallback = false;
            if (children === null) {
              invokeCallback = true;
            } else {
              switch (type) {
                case "string":
                case "number":
                  invokeCallback = true;
                  break;
                case "object":
                  switch (children.$$typeof) {
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                      invokeCallback = true;
                  }
              }
            }
            if (invokeCallback) {
              var _child = children;
              var mappedChild = callback(_child);
              var childKey =
                nameSoFar === ""
                  ? SEPARATOR + getElementKey(_child, 0)
                  : nameSoFar;
              if (isArray(mappedChild)) {
                var escapedChildKey = "";
                if (childKey != null) {
                  escapedChildKey = escapeUserProvidedKey(childKey) + "/";
                }
                mapIntoArray(
                  mappedChild,
                  array,
                  escapedChildKey,
                  "",
                  function (c) {
                    return c;
                  }
                );
              } else if (mappedChild != null) {
                if (isValidElement(mappedChild)) {
                  {
                    if (
                      mappedChild.key &&
                      (!_child || _child.key !== mappedChild.key)
                    ) {
                      checkKeyStringCoercion(mappedChild.key);
                    }
                  }
                  mappedChild = cloneAndReplaceKey(
                    mappedChild,
                    escapedPrefix +
                      (mappedChild.key &&
                      (!_child || _child.key !== mappedChild.key)
                        ? escapeUserProvidedKey("" + mappedChild.key) + "/"
                        : "") +
                      childKey
                  );
                }
                array.push(mappedChild);
              }
              return 1;
            }
            var child;
            var nextName;
            var subtreeCount = 0;
            var nextNamePrefix =
              nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
            if (isArray(children)) {
              for (var i = 0; i < children.length; i++) {
                child = children[i];
                nextName = nextNamePrefix + getElementKey(child, i);
                subtreeCount += mapIntoArray(
                  child,
                  array,
                  escapedPrefix,
                  nextName,
                  callback
                );
              }
            } else {
              var iteratorFn = getIteratorFn(children);
              if (typeof iteratorFn === "function") {
                var iterableChildren = children;
                {
                  if (iteratorFn === iterableChildren.entries) {
                    if (!didWarnAboutMaps) {
                      warn(
                        "Using Maps as children is not supported. Use an array of keyed ReactElements instead."
                      );
                    }
                    didWarnAboutMaps = true;
                  }
                }
                var iterator = iteratorFn.call(iterableChildren);
                var step;
                var ii = 0;
                while (!(step = iterator.next()).done) {
                  child = step.value;
                  nextName = nextNamePrefix + getElementKey(child, ii++);
                  subtreeCount += mapIntoArray(
                    child,
                    array,
                    escapedPrefix,
                    nextName,
                    callback
                  );
                }
              } else if (type === "object") {
                var childrenString = String(children);
                throw new Error(
                  "Objects are not valid as a React child (found: " +
                    (childrenString === "[object Object]"
                      ? "object with keys {" +
                        Object.keys(children).join(", ") +
                        "}"
                      : childrenString) +
                    "). If you meant to render a collection of children, use an array instead."
                );
              }
            }
            return subtreeCount;
          }
          function mapChildren(children, func, context) {
            if (children == null) {
              return children;
            }
            var result = [];
            var count = 0;
            mapIntoArray(children, result, "", "", function (child) {
              return func.call(context, child, count++);
            });
            return result;
          }
          function countChildren(children) {
            var n = 0;
            mapChildren(children, function () {
              n++;
            });
            return n;
          }
          function forEachChildren(children, forEachFunc, forEachContext) {
            mapChildren(
              children,
              function () {
                forEachFunc.apply(this, arguments);
              },
              forEachContext
            );
          }
          function toArray(children) {
            return (
              mapChildren(children, function (child) {
                return child;
              }) || []
            );
          }
          function onlyChild(children) {
            if (!isValidElement(children)) {
              throw new Error(
                "React.Children.only expected to receive a single React element child."
              );
            }
            return children;
          }
          function createContext(defaultValue) {
            var context = {
              $$typeof: REACT_CONTEXT_TYPE,
              _currentValue: defaultValue,
              _currentValue2: defaultValue,
              _threadCount: 0,
              Provider: null,
              Consumer: null,
              _defaultValue: null,
              _globalName: null,
            };
            context.Provider = {
              $$typeof: REACT_PROVIDER_TYPE,
              _context: context,
            };
            var hasWarnedAboutUsingNestedContextConsumers = false;
            var hasWarnedAboutUsingConsumerProvider = false;
            var hasWarnedAboutDisplayNameOnConsumer = false;
            {
              var Consumer = {
                $$typeof: REACT_CONTEXT_TYPE,
                _context: context,
              };
              Object.defineProperties(Consumer, {
                Provider: {
                  get: function () {
                    if (!hasWarnedAboutUsingConsumerProvider) {
                      hasWarnedAboutUsingConsumerProvider = true;
                      error(
                        "Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?"
                      );
                    }
                    return context.Provider;
                  },
                  set: function (_Provider) {
                    context.Provider = _Provider;
                  },
                },
                _currentValue: {
                  get: function () {
                    return context._currentValue;
                  },
                  set: function (_currentValue) {
                    context._currentValue = _currentValue;
                  },
                },
                _currentValue2: {
                  get: function () {
                    return context._currentValue2;
                  },
                  set: function (_currentValue2) {
                    context._currentValue2 = _currentValue2;
                  },
                },
                _threadCount: {
                  get: function () {
                    return context._threadCount;
                  },
                  set: function (_threadCount) {
                    context._threadCount = _threadCount;
                  },
                },
                Consumer: {
                  get: function () {
                    if (!hasWarnedAboutUsingNestedContextConsumers) {
                      hasWarnedAboutUsingNestedContextConsumers = true;
                      error(
                        "Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?"
                      );
                    }
                    return context.Consumer;
                  },
                },
                displayName: {
                  get: function () {
                    return context.displayName;
                  },
                  set: function (displayName) {
                    if (!hasWarnedAboutDisplayNameOnConsumer) {
                      warn(
                        "Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.",
                        displayName
                      );
                      hasWarnedAboutDisplayNameOnConsumer = true;
                    }
                  },
                },
              });
              context.Consumer = Consumer;
            }
            {
              context._currentRenderer = null;
              context._currentRenderer2 = null;
            }
            return context;
          }
          var Uninitialized = -1;
          var Pending = 0;
          var Resolved = 1;
          var Rejected = 2;
          function lazyInitializer(payload) {
            if (payload._status === Uninitialized) {
              var ctor = payload._result;
              var thenable = ctor();
              thenable.then(
                function (moduleObject2) {
                  if (
                    payload._status === Pending ||
                    payload._status === Uninitialized
                  ) {
                    var resolved = payload;
                    resolved._status = Resolved;
                    resolved._result = moduleObject2;
                  }
                },
                function (error2) {
                  if (
                    payload._status === Pending ||
                    payload._status === Uninitialized
                  ) {
                    var rejected = payload;
                    rejected._status = Rejected;
                    rejected._result = error2;
                  }
                }
              );
              if (payload._status === Uninitialized) {
                var pending = payload;
                pending._status = Pending;
                pending._result = thenable;
              }
            }
            if (payload._status === Resolved) {
              var moduleObject = payload._result;
              {
                if (moduleObject === void 0) {
                  error(
                    "lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?",
                    moduleObject
                  );
                }
              }
              {
                if (!("default" in moduleObject)) {
                  error(
                    "lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))",
                    moduleObject
                  );
                }
              }
              return moduleObject.default;
            } else {
              throw payload._result;
            }
          }
          function lazy(ctor) {
            var payload = {
              _status: Uninitialized,
              _result: ctor,
            };
            var lazyType = {
              $$typeof: REACT_LAZY_TYPE,
              _payload: payload,
              _init: lazyInitializer,
            };
            {
              var defaultProps;
              var propTypes;
              Object.defineProperties(lazyType, {
                defaultProps: {
                  configurable: true,
                  get: function () {
                    return defaultProps;
                  },
                  set: function (newDefaultProps) {
                    error(
                      "React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it."
                    );
                    defaultProps = newDefaultProps;
                    Object.defineProperty(lazyType, "defaultProps", {
                      enumerable: true,
                    });
                  },
                },
                propTypes: {
                  configurable: true,
                  get: function () {
                    return propTypes;
                  },
                  set: function (newPropTypes) {
                    error(
                      "React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it."
                    );
                    propTypes = newPropTypes;
                    Object.defineProperty(lazyType, "propTypes", {
                      enumerable: true,
                    });
                  },
                },
              });
            }
            return lazyType;
          }
          function forwardRef(render) {
            {
              if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
                error(
                  "forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...))."
                );
              } else if (typeof render !== "function") {
                error(
                  "forwardRef requires a render function but was given %s.",
                  render === null ? "null" : typeof render
                );
              } else {
                if (render.length !== 0 && render.length !== 2) {
                  error(
                    "forwardRef render functions accept exactly two parameters: props and ref. %s",
                    render.length === 1
                      ? "Did you forget to use the ref parameter?"
                      : "Any additional parameter will be undefined."
                  );
                }
              }
              if (render != null) {
                if (render.defaultProps != null || render.propTypes != null) {
                  error(
                    "forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?"
                  );
                }
              }
            }
            var elementType = {
              $$typeof: REACT_FORWARD_REF_TYPE,
              render,
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function () {
                  return ownName;
                },
                set: function (name) {
                  ownName = name;
                  if (!render.name && !render.displayName) {
                    render.displayName = name;
                  }
                },
              });
            }
            return elementType;
          }
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (
              type === REACT_FRAGMENT_TYPE ||
              type === REACT_PROFILER_TYPE ||
              enableDebugTracing ||
              type === REACT_STRICT_MODE_TYPE ||
              type === REACT_SUSPENSE_TYPE ||
              type === REACT_SUSPENSE_LIST_TYPE ||
              enableLegacyHidden ||
              type === REACT_OFFSCREEN_TYPE ||
              enableScopeAPI ||
              enableCacheElement ||
              enableTransitionTracing
            ) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (
                type.$$typeof === REACT_LAZY_TYPE ||
                type.$$typeof === REACT_MEMO_TYPE ||
                type.$$typeof === REACT_PROVIDER_TYPE ||
                type.$$typeof === REACT_CONTEXT_TYPE ||
                type.$$typeof === REACT_FORWARD_REF_TYPE ||
                type.$$typeof === REACT_MODULE_REFERENCE ||
                type.getModuleId !== void 0
              ) {
                return true;
              }
            }
            return false;
          }
          function memo(type, compare) {
            {
              if (!isValidElementType(type)) {
                error(
                  "memo: The first argument must be a component. Instead received: %s",
                  type === null ? "null" : typeof type
                );
              }
            }
            var elementType = {
              $$typeof: REACT_MEMO_TYPE,
              type,
              compare: compare === void 0 ? null : compare,
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function () {
                  return ownName;
                },
                set: function (name) {
                  ownName = name;
                  if (!type.name && !type.displayName) {
                    type.displayName = name;
                  }
                },
              });
            }
            return elementType;
          }
          function resolveDispatcher() {
            var dispatcher = ReactCurrentDispatcher.current;
            {
              if (dispatcher === null) {
                error(
                  "Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem."
                );
              }
            }
            return dispatcher;
          }
          function useContext(Context) {
            var dispatcher = resolveDispatcher();
            {
              if (Context._context !== void 0) {
                var realContext = Context._context;
                if (realContext.Consumer === Context) {
                  error(
                    "Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?"
                  );
                } else if (realContext.Provider === Context) {
                  error(
                    "Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?"
                  );
                }
              }
            }
            return dispatcher.useContext(Context);
          }
          function useState(initialState) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useState(initialState);
          }
          function useReducer(reducer, initialArg, init) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useReducer(reducer, initialArg, init);
          }
          function useRef(initialValue) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useRef(initialValue);
          }
          function useEffect(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useEffect(create, deps);
          }
          function useInsertionEffect(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useInsertionEffect(create, deps);
          }
          function useLayoutEffect(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useLayoutEffect(create, deps);
          }
          function useCallback(callback, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useCallback(callback, deps);
          }
          function useMemo(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useMemo(create, deps);
          }
          function useImperativeHandle(ref, create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useImperativeHandle(ref, create, deps);
          }
          function useDebugValue(value, formatterFn) {
            {
              var dispatcher = resolveDispatcher();
              return dispatcher.useDebugValue(value, formatterFn);
            }
          }
          function useTransition() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useTransition();
          }
          function useDeferredValue(value) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDeferredValue(value);
          }
          function useId() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useId();
          }
          function useSyncExternalStore(
            subscribe,
            getSnapshot,
            getServerSnapshot
          ) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useSyncExternalStore(
              subscribe,
              getSnapshot,
              getServerSnapshot
            );
          }
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {}
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true,
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props,
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true,
                };
                Object.defineProperties(console, {
                  log: assign({}, props, {
                    value: prevLog,
                  }),
                  info: assign({}, props, {
                    value: prevInfo,
                  }),
                  warn: assign({}, props, {
                    value: prevWarn,
                  }),
                  error: assign({}, props, {
                    value: prevError,
                  }),
                  group: assign({}, props, {
                    value: prevGroup,
                  }),
                  groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed,
                  }),
                  groupEnd: assign({}, props, {
                    value: prevGroupEnd,
                  }),
                });
              }
              if (disabledDepth < 0) {
                error(
                  "disabledDepth fell below zero. This is a bug in React. Please file an issue."
                );
              }
            }
          }
          var ReactCurrentDispatcher$1 =
            ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match = x.stack.trim().match(/\n( *(at )?)/);
                  prefix = (match && match[1]) || "";
                }
              }
              return "\n" + prefix + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function () {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function () {
                    throw Error();
                  },
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame =
                            "\n" + sampleLines[s].replace(" at new ", " at ");
                          if (
                            fn.displayName &&
                            _frame.includes("<anonymous>")
                          ) {
                            _frame = _frame.replace(
                              "<anonymous>",
                              fn.displayName
                            );
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher$1.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name
              ? describeBuiltInComponentFrame(name)
              : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component2) {
            var prototype = Component2.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(
                  type,
                  shouldConstruct(type)
                );
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(
                    type.type,
                    source,
                    ownerFn
                  );
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(
                      init(payload),
                      source,
                      ownerFn
                    );
                  } catch (x) {}
                }
              }
            }
            return "";
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 =
            ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(
                  element.type,
                  element._source,
                  owner ? owner.type : null
                );
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(
            typeSpecs,
            values,
            location,
            componentName,
            element
          ) {
            {
              var has = Function.call.bind(hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error(
                        (componentName || "React class") +
                          ": " +
                          location +
                          " type `" +
                          typeSpecName +
                          "` is invalid; it must be a function, usually from the `prop-types` package, but received `" +
                          typeof typeSpecs[typeSpecName] +
                          "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`."
                      );
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](
                      values,
                      typeSpecName,
                      componentName,
                      location,
                      null,
                      "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"
                    );
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error(
                      "%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).",
                      componentName || "React class",
                      location,
                      typeSpecName,
                      typeof error$1
                    );
                    setCurrentlyValidatingElement(null);
                  }
                  if (
                    error$1 instanceof Error &&
                    !(error$1.message in loggedTypeFailures)
                  ) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(
                  element.type,
                  element._source,
                  owner ? owner.type : null
                );
                setExtraStackFrame(stack);
              } else {
                setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function getDeclarationErrorAddendum() {
            if (ReactCurrentOwner.current) {
              var name = getComponentNameFromType(
                ReactCurrentOwner.current.type
              );
              if (name) {
                return "\n\nCheck the render method of `" + name + "`.";
              }
            }
            return "";
          }
          function getSourceInfoErrorAddendum(source) {
            if (source !== void 0) {
              var fileName = source.fileName.replace(/^.*[\\\/]/, "");
              var lineNumber = source.lineNumber;
              return (
                "\n\nCheck your code at " + fileName + ":" + lineNumber + "."
              );
            }
            return "";
          }
          function getSourceInfoErrorAddendumForProps(elementProps) {
            if (elementProps !== null && elementProps !== void 0) {
              return getSourceInfoErrorAddendum(elementProps.__source);
            }
            return "";
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            var info = getDeclarationErrorAddendum();
            if (!info) {
              var parentName =
                typeof parentType === "string"
                  ? parentType
                  : parentType.displayName || parentType.name;
              if (parentName) {
                info =
                  "\n\nCheck the top-level render call using <" +
                  parentName +
                  ">.";
              }
            }
            return info;
          }
          function validateExplicitKey(element, parentType) {
            if (
              !element._store ||
              element._store.validated ||
              element.key != null
            ) {
              return;
            }
            element._store.validated = true;
            var currentComponentErrorInfo =
              getCurrentComponentErrorInfo(parentType);
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            var childOwner = "";
            if (
              element &&
              element._owner &&
              element._owner !== ReactCurrentOwner.current
            ) {
              childOwner =
                " It was passed a child from " +
                getComponentNameFromType(element._owner.type) +
                ".";
            }
            {
              setCurrentlyValidatingElement$1(element);
              error(
                'Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.',
                currentComponentErrorInfo,
                childOwner
              );
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node, parentType) {
            if (typeof node !== "object") {
              return;
            }
            if (isArray(node)) {
              for (var i = 0; i < node.length; i++) {
                var child = node[i];
                if (isValidElement(child)) {
                  validateExplicitKey(child, parentType);
                }
              }
            } else if (isValidElement(node)) {
              if (node._store) {
                node._store.validated = true;
              }
            } else if (node) {
              var iteratorFn = getIteratorFn(node);
              if (typeof iteratorFn === "function") {
                if (iteratorFn !== node.entries) {
                  var iterator = iteratorFn.call(node);
                  var step;
                  while (!(step = iterator.next()).done) {
                    if (isValidElement(step.value)) {
                      validateExplicitKey(step.value, parentType);
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element) {
            {
              var type = element.type;
              if (
                type === null ||
                type === void 0 ||
                typeof type === "string"
              ) {
                return;
              }
              var propTypes;
              if (typeof type === "function") {
                propTypes = type.propTypes;
              } else if (
                typeof type === "object" &&
                (type.$$typeof === REACT_FORWARD_REF_TYPE ||
                  type.$$typeof === REACT_MEMO_TYPE)
              ) {
                propTypes = type.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name = getComponentNameFromType(type);
                checkPropTypes(propTypes, element.props, "prop", name, element);
              } else if (
                type.PropTypes !== void 0 &&
                !propTypesMisspellWarningShown
              ) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentNameFromType(type);
                error(
                  "Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?",
                  _name || "Unknown"
                );
              }
              if (
                typeof type.getDefaultProps === "function" &&
                !type.getDefaultProps.isReactClassApproved
              ) {
                error(
                  "getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead."
                );
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys = Object.keys(fragment.props);
              for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error(
                    "Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.",
                    key
                  );
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function createElementWithValidation(type, props, children) {
            var validType = isValidElementType(type);
            if (!validType) {
              var info = "";
              if (
                type === void 0 ||
                (typeof type === "object" &&
                  type !== null &&
                  Object.keys(type).length === 0)
              ) {
                info +=
                  " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
              var sourceInfo = getSourceInfoErrorAddendumForProps(props);
              if (sourceInfo) {
                info += sourceInfo;
              } else {
                info += getDeclarationErrorAddendum();
              }
              var typeString;
              if (type === null) {
                typeString = "null";
              } else if (isArray(type)) {
                typeString = "array";
              } else if (
                type !== void 0 &&
                type.$$typeof === REACT_ELEMENT_TYPE
              ) {
                typeString =
                  "<" +
                  (getComponentNameFromType(type.type) || "Unknown") +
                  " />";
                info =
                  " Did you accidentally export a JSX literal instead of a component?";
              } else {
                typeString = typeof type;
              }
              {
                error(
                  "React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s",
                  typeString,
                  info
                );
              }
            }
            var element = createElement.apply(this, arguments);
            if (element == null) {
              return element;
            }
            if (validType) {
              for (var i = 2; i < arguments.length; i++) {
                validateChildKeys(arguments[i], type);
              }
            }
            if (type === REACT_FRAGMENT_TYPE) {
              validateFragmentProps(element);
            } else {
              validatePropTypes(element);
            }
            return element;
          }
          var didWarnAboutDeprecatedCreateFactory = false;
          function createFactoryWithValidation(type) {
            var validatedFactory = createElementWithValidation.bind(null, type);
            validatedFactory.type = type;
            {
              if (!didWarnAboutDeprecatedCreateFactory) {
                didWarnAboutDeprecatedCreateFactory = true;
                warn(
                  "React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead."
                );
              }
              Object.defineProperty(validatedFactory, "type", {
                enumerable: false,
                get: function () {
                  warn(
                    "Factory.type is deprecated. Access the class directly before passing it to createFactory."
                  );
                  Object.defineProperty(this, "type", {
                    value: type,
                  });
                  return type;
                },
              });
            }
            return validatedFactory;
          }
          function cloneElementWithValidation(element, props, children) {
            var newElement = cloneElement.apply(this, arguments);
            for (var i = 2; i < arguments.length; i++) {
              validateChildKeys(arguments[i], newElement.type);
            }
            validatePropTypes(newElement);
            return newElement;
          }
          function startTransition(scope, options) {
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = {};
            var currentTransition = ReactCurrentBatchConfig.transition;
            {
              ReactCurrentBatchConfig.transition._updatedFibers =
                /* @__PURE__ */ new Set();
            }
            try {
              scope();
            } finally {
              ReactCurrentBatchConfig.transition = prevTransition;
              {
                if (
                  prevTransition === null &&
                  currentTransition._updatedFibers
                ) {
                  var updatedFibersCount =
                    currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn(
                      "Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table."
                    );
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          var didWarnAboutMessageChannel = false;
          var enqueueTaskImpl = null;
          function enqueueTask(task) {
            if (enqueueTaskImpl === null) {
              try {
                var requireString = ("require" + Math.random()).slice(0, 7);
                var nodeRequire = module && module[requireString];
                enqueueTaskImpl = nodeRequire.call(
                  module,
                  "timers"
                ).setImmediate;
              } catch (_err) {
                enqueueTaskImpl = function (callback) {
                  {
                    if (didWarnAboutMessageChannel === false) {
                      didWarnAboutMessageChannel = true;
                      if (typeof MessageChannel === "undefined") {
                        error(
                          "This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning."
                        );
                      }
                    }
                  }
                  var channel = new MessageChannel();
                  channel.port1.onmessage = callback;
                  channel.port2.postMessage(void 0);
                };
              }
            }
            return enqueueTaskImpl(task);
          }
          var actScopeDepth = 0;
          var didWarnNoAwaitAct = false;
          function act(callback) {
            {
              var prevActScopeDepth = actScopeDepth;
              actScopeDepth++;
              if (ReactCurrentActQueue.current === null) {
                ReactCurrentActQueue.current = [];
              }
              var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
              var result;
              try {
                ReactCurrentActQueue.isBatchingLegacy = true;
                result = callback();
                if (
                  !prevIsBatchingLegacy &&
                  ReactCurrentActQueue.didScheduleLegacyUpdate
                ) {
                  var queue = ReactCurrentActQueue.current;
                  if (queue !== null) {
                    ReactCurrentActQueue.didScheduleLegacyUpdate = false;
                    flushActQueue(queue);
                  }
                }
              } catch (error2) {
                popActScope(prevActScopeDepth);
                throw error2;
              } finally {
                ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
              }
              if (
                result !== null &&
                typeof result === "object" &&
                typeof result.then === "function"
              ) {
                var thenableResult = result;
                var wasAwaited = false;
                var thenable = {
                  then: function (resolve, reject) {
                    wasAwaited = true;
                    thenableResult.then(
                      function (returnValue2) {
                        popActScope(prevActScopeDepth);
                        if (actScopeDepth === 0) {
                          recursivelyFlushAsyncActWork(
                            returnValue2,
                            resolve,
                            reject
                          );
                        } else {
                          resolve(returnValue2);
                        }
                      },
                      function (error2) {
                        popActScope(prevActScopeDepth);
                        reject(error2);
                      }
                    );
                  },
                };
                {
                  if (!didWarnNoAwaitAct && typeof Promise !== "undefined") {
                    Promise.resolve()
                      .then(function () {})
                      .then(function () {
                        if (!wasAwaited) {
                          didWarnNoAwaitAct = true;
                          error(
                            "You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);"
                          );
                        }
                      });
                  }
                }
                return thenable;
              } else {
                var returnValue = result;
                popActScope(prevActScopeDepth);
                if (actScopeDepth === 0) {
                  var _queue = ReactCurrentActQueue.current;
                  if (_queue !== null) {
                    flushActQueue(_queue);
                    ReactCurrentActQueue.current = null;
                  }
                  var _thenable = {
                    then: function (resolve, reject) {
                      if (ReactCurrentActQueue.current === null) {
                        ReactCurrentActQueue.current = [];
                        recursivelyFlushAsyncActWork(
                          returnValue,
                          resolve,
                          reject
                        );
                      } else {
                        resolve(returnValue);
                      }
                    },
                  };
                  return _thenable;
                } else {
                  var _thenable2 = {
                    then: function (resolve, reject) {
                      resolve(returnValue);
                    },
                  };
                  return _thenable2;
                }
              }
            }
          }
          function popActScope(prevActScopeDepth) {
            {
              if (prevActScopeDepth !== actScopeDepth - 1) {
                error(
                  "You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. "
                );
              }
              actScopeDepth = prevActScopeDepth;
            }
          }
          function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
            {
              var queue = ReactCurrentActQueue.current;
              if (queue !== null) {
                try {
                  flushActQueue(queue);
                  enqueueTask(function () {
                    if (queue.length === 0) {
                      ReactCurrentActQueue.current = null;
                      resolve(returnValue);
                    } else {
                      recursivelyFlushAsyncActWork(
                        returnValue,
                        resolve,
                        reject
                      );
                    }
                  });
                } catch (error2) {
                  reject(error2);
                }
              } else {
                resolve(returnValue);
              }
            }
          }
          var isFlushing = false;
          function flushActQueue(queue) {
            {
              if (!isFlushing) {
                isFlushing = true;
                var i = 0;
                try {
                  for (; i < queue.length; i++) {
                    var callback = queue[i];
                    do {
                      callback = callback(true);
                    } while (callback !== null);
                  }
                  queue.length = 0;
                } catch (error2) {
                  queue = queue.slice(i + 1);
                  throw error2;
                } finally {
                  isFlushing = false;
                }
              }
            }
          }
          var createElement$1 = createElementWithValidation;
          var cloneElement$1 = cloneElementWithValidation;
          var createFactory = createFactoryWithValidation;
          var Children = {
            map: mapChildren,
            forEach: forEachChildren,
            count: countChildren,
            toArray,
            only: onlyChild,
          };
          exports.Children = Children;
          exports.Component = Component;
          exports.Fragment = REACT_FRAGMENT_TYPE;
          exports.Profiler = REACT_PROFILER_TYPE;
          exports.PureComponent = PureComponent;
          exports.StrictMode = REACT_STRICT_MODE_TYPE;
          exports.Suspense = REACT_SUSPENSE_TYPE;
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED =
            ReactSharedInternals;
          exports.cloneElement = cloneElement$1;
          exports.createContext = createContext;
          exports.createElement = createElement$1;
          exports.createFactory = createFactory;
          exports.createRef = createRef;
          exports.forwardRef = forwardRef;
          exports.isValidElement = isValidElement;
          exports.lazy = lazy;
          exports.memo = memo;
          exports.startTransition = startTransition;
          exports.unstable_act = act;
          exports.useCallback = useCallback;
          exports.useContext = useContext;
          exports.useDebugValue = useDebugValue;
          exports.useDeferredValue = useDeferredValue;
          exports.useEffect = useEffect;
          exports.useId = useId;
          exports.useImperativeHandle = useImperativeHandle;
          exports.useInsertionEffect = useInsertionEffect;
          exports.useLayoutEffect = useLayoutEffect;
          exports.useMemo = useMemo;
          exports.useReducer = useReducer;
          exports.useRef = useRef;
          exports.useState = useState;
          exports.useSyncExternalStore = useSyncExternalStore;
          exports.useTransition = useTransition;
          exports.version = ReactVersion;
          if (
            typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" &&
            typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop ===
              "function"
          ) {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(
              new Error()
            );
          }
        })();
      }
    },
  });

  // node_modules/react/index.js
  var require_react = __commonJS({
    "node_modules/react/index.js"(exports, module) {
      "use strict";
      init_process_shim();
      if (process.env.NODE_ENV === "production") {
        module.exports = require_react_production_min();
      } else {
        module.exports = require_react_development();
      }
    },
  });

  // node_modules/readable-stream/lib/ours/primordials.js
  var require_primordials = __commonJS({
    "node_modules/readable-stream/lib/ours/primordials.js"(exports, module) {
      "use strict";
      init_process_shim();
      module.exports = {
        ArrayIsArray(self2) {
          return Array.isArray(self2);
        },
        ArrayPrototypeIncludes(self2, el) {
          return self2.includes(el);
        },
        ArrayPrototypeIndexOf(self2, el) {
          return self2.indexOf(el);
        },
        ArrayPrototypeJoin(self2, sep) {
          return self2.join(sep);
        },
        ArrayPrototypeMap(self2, fn) {
          return self2.map(fn);
        },
        ArrayPrototypePop(self2, el) {
          return self2.pop(el);
        },
        ArrayPrototypePush(self2, el) {
          return self2.push(el);
        },
        ArrayPrototypeSlice(self2, start, end) {
          return self2.slice(start, end);
        },
        Error,
        FunctionPrototypeCall(fn, thisArgs, ...args) {
          return fn.call(thisArgs, ...args);
        },
        FunctionPrototypeSymbolHasInstance(self2, instance) {
          return Function.prototype[Symbol.hasInstance].call(self2, instance);
        },
        MathFloor: Math.floor,
        Number,
        NumberIsInteger: Number.isInteger,
        NumberIsNaN: Number.isNaN,
        NumberMAX_SAFE_INTEGER: Number.MAX_SAFE_INTEGER,
        NumberMIN_SAFE_INTEGER: Number.MIN_SAFE_INTEGER,
        NumberParseInt: Number.parseInt,
        ObjectDefineProperties(self2, props) {
          return Object.defineProperties(self2, props);
        },
        ObjectDefineProperty(self2, name, prop) {
          return Object.defineProperty(self2, name, prop);
        },
        ObjectGetOwnPropertyDescriptor(self2, name) {
          return Object.getOwnPropertyDescriptor(self2, name);
        },
        ObjectKeys(obj) {
          return Object.keys(obj);
        },
        ObjectSetPrototypeOf(target, proto) {
          return Object.setPrototypeOf(target, proto);
        },
        Promise,
        PromisePrototypeCatch(self2, fn) {
          return self2.catch(fn);
        },
        PromisePrototypeThen(self2, thenFn, catchFn) {
          return self2.then(thenFn, catchFn);
        },
        PromiseReject(err) {
          return Promise.reject(err);
        },
        ReflectApply: Reflect.apply,
        RegExpPrototypeTest(self2, value) {
          return self2.test(value);
        },
        SafeSet: Set,
        String,
        StringPrototypeSlice(self2, start, end) {
          return self2.slice(start, end);
        },
        StringPrototypeToLowerCase(self2) {
          return self2.toLowerCase();
        },
        StringPrototypeToUpperCase(self2) {
          return self2.toUpperCase();
        },
        StringPrototypeTrim(self2) {
          return self2.trim();
        },
        Symbol,
        SymbolAsyncIterator: Symbol.asyncIterator,
        SymbolHasInstance: Symbol.hasInstance,
        SymbolIterator: Symbol.iterator,
        TypedArrayPrototypeSet(self2, buf, len) {
          return self2.set(buf, len);
        },
        Uint8Array,
      };
    },
  });

  // node_modules/base64-js/index.js
  var require_base64_js = __commonJS({
    "node_modules/base64-js/index.js"(exports) {
      "use strict";
      init_process_shim();
      exports.byteLength = byteLength;
      exports.toByteArray = toByteArray;
      exports.fromByteArray = fromByteArray;
      var lookup = [];
      var revLookup = [];
      var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
      var code =
        "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
      for (i = 0, len = code.length; i < len; ++i) {
        lookup[i] = code[i];
        revLookup[code.charCodeAt(i)] = i;
      }
      var i;
      var len;
      revLookup["-".charCodeAt(0)] = 62;
      revLookup["_".charCodeAt(0)] = 63;
      function getLens(b64) {
        var len2 = b64.length;
        if (len2 % 4 > 0) {
          throw new Error("Invalid string. Length must be a multiple of 4");
        }
        var validLen = b64.indexOf("=");
        if (validLen === -1) validLen = len2;
        var placeHoldersLen = validLen === len2 ? 0 : 4 - (validLen % 4);
        return [validLen, placeHoldersLen];
      }
      function byteLength(b64) {
        var lens = getLens(b64);
        var validLen = lens[0];
        var placeHoldersLen = lens[1];
        return ((validLen + placeHoldersLen) * 3) / 4 - placeHoldersLen;
      }
      function _byteLength(b64, validLen, placeHoldersLen) {
        return ((validLen + placeHoldersLen) * 3) / 4 - placeHoldersLen;
      }
      function toByteArray(b64) {
        var tmp;
        var lens = getLens(b64);
        var validLen = lens[0];
        var placeHoldersLen = lens[1];
        var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
        var curByte = 0;
        var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;
        var i2;
        for (i2 = 0; i2 < len2; i2 += 4) {
          tmp =
            (revLookup[b64.charCodeAt(i2)] << 18) |
            (revLookup[b64.charCodeAt(i2 + 1)] << 12) |
            (revLookup[b64.charCodeAt(i2 + 2)] << 6) |
            revLookup[b64.charCodeAt(i2 + 3)];
          arr[curByte++] = (tmp >> 16) & 255;
          arr[curByte++] = (tmp >> 8) & 255;
          arr[curByte++] = tmp & 255;
        }
        if (placeHoldersLen === 2) {
          tmp =
            (revLookup[b64.charCodeAt(i2)] << 2) |
            (revLookup[b64.charCodeAt(i2 + 1)] >> 4);
          arr[curByte++] = tmp & 255;
        }
        if (placeHoldersLen === 1) {
          tmp =
            (revLookup[b64.charCodeAt(i2)] << 10) |
            (revLookup[b64.charCodeAt(i2 + 1)] << 4) |
            (revLookup[b64.charCodeAt(i2 + 2)] >> 2);
          arr[curByte++] = (tmp >> 8) & 255;
          arr[curByte++] = tmp & 255;
        }
        return arr;
      }
      function tripletToBase64(num) {
        return (
          lookup[(num >> 18) & 63] +
          lookup[(num >> 12) & 63] +
          lookup[(num >> 6) & 63] +
          lookup[num & 63]
        );
      }
      function encodeChunk(uint8, start, end) {
        var tmp;
        var output = [];
        for (var i2 = start; i2 < end; i2 += 3) {
          tmp =
            ((uint8[i2] << 16) & 16711680) +
            ((uint8[i2 + 1] << 8) & 65280) +
            (uint8[i2 + 2] & 255);
          output.push(tripletToBase64(tmp));
        }
        return output.join("");
      }
      function fromByteArray(uint8) {
        var tmp;
        var len2 = uint8.length;
        var extraBytes = len2 % 3;
        var parts = [];
        var maxChunkLength = 16383;
        for (
          var i2 = 0, len22 = len2 - extraBytes;
          i2 < len22;
          i2 += maxChunkLength
        ) {
          parts.push(
            encodeChunk(
              uint8,
              i2,
              i2 + maxChunkLength > len22 ? len22 : i2 + maxChunkLength
            )
          );
        }
        if (extraBytes === 1) {
          tmp = uint8[len2 - 1];
          parts.push(lookup[tmp >> 2] + lookup[(tmp << 4) & 63] + "==");
        } else if (extraBytes === 2) {
          tmp = (uint8[len2 - 2] << 8) + uint8[len2 - 1];
          parts.push(
            lookup[tmp >> 10] +
              lookup[(tmp >> 4) & 63] +
              lookup[(tmp << 2) & 63] +
              "="
          );
        }
        return parts.join("");
      }
    },
  });

  // node_modules/ieee754/index.js
  var require_ieee754 = __commonJS({
    "node_modules/ieee754/index.js"(exports) {
      init_process_shim();
      exports.read = function (buffer, offset, isLE, mLen, nBytes) {
        var e, m;
        var eLen = nBytes * 8 - mLen - 1;
        var eMax = (1 << eLen) - 1;
        var eBias = eMax >> 1;
        var nBits = -7;
        var i = isLE ? nBytes - 1 : 0;
        var d = isLE ? -1 : 1;
        var s = buffer[offset + i];
        i += d;
        e = s & ((1 << -nBits) - 1);
        s >>= -nBits;
        nBits += eLen;
        for (
          ;
          nBits > 0;
          e = e * 256 + buffer[offset + i], i += d, nBits -= 8
        ) {}
        m = e & ((1 << -nBits) - 1);
        e >>= -nBits;
        nBits += mLen;
        for (
          ;
          nBits > 0;
          m = m * 256 + buffer[offset + i], i += d, nBits -= 8
        ) {}
        if (e === 0) {
          e = 1 - eBias;
        } else if (e === eMax) {
          return m ? NaN : (s ? -1 : 1) * Infinity;
        } else {
          m = m + Math.pow(2, mLen);
          e = e - eBias;
        }
        return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
      };
      exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
        var e, m, c;
        var eLen = nBytes * 8 - mLen - 1;
        var eMax = (1 << eLen) - 1;
        var eBias = eMax >> 1;
        var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
        var i = isLE ? 0 : nBytes - 1;
        var d = isLE ? 1 : -1;
        var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;
        value = Math.abs(value);
        if (isNaN(value) || value === Infinity) {
          m = isNaN(value) ? 1 : 0;
          e = eMax;
        } else {
          e = Math.floor(Math.log(value) / Math.LN2);
          if (value * (c = Math.pow(2, -e)) < 1) {
            e--;
            c *= 2;
          }
          if (e + eBias >= 1) {
            value += rt / c;
          } else {
            value += rt * Math.pow(2, 1 - eBias);
          }
          if (value * c >= 2) {
            e++;
            c /= 2;
          }
          if (e + eBias >= eMax) {
            m = 0;
            e = eMax;
          } else if (e + eBias >= 1) {
            m = (value * c - 1) * Math.pow(2, mLen);
            e = e + eBias;
          } else {
            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
            e = 0;
          }
        }
        for (
          ;
          mLen >= 8;
          buffer[offset + i] = m & 255, i += d, m /= 256, mLen -= 8
        ) {}
        e = (e << mLen) | m;
        eLen += mLen;
        for (
          ;
          eLen > 0;
          buffer[offset + i] = e & 255, i += d, e /= 256, eLen -= 8
        ) {}
        buffer[offset + i - d] |= s * 128;
      };
    },
  });

  // node_modules/buffer/index.js
  var require_buffer = __commonJS({
    "node_modules/buffer/index.js"(exports) {
      "use strict";
      init_process_shim();
      var base64 = require_base64_js();
      var ieee754 = require_ieee754();
      var customInspectSymbol =
        typeof Symbol === "function" && typeof Symbol["for"] === "function"
          ? Symbol["for"]("nodejs.util.inspect.custom")
          : null;
      exports.Buffer = Buffer2;
      exports.SlowBuffer = SlowBuffer;
      exports.INSPECT_MAX_BYTES = 50;
      var K_MAX_LENGTH = 2147483647;
      exports.kMaxLength = K_MAX_LENGTH;
      Buffer2.TYPED_ARRAY_SUPPORT = typedArraySupport();
      if (
        !Buffer2.TYPED_ARRAY_SUPPORT &&
        typeof console !== "undefined" &&
        typeof console.error === "function"
      ) {
        console.error(
          "This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."
        );
      }
      function typedArraySupport() {
        try {
          const arr = new Uint8Array(1);
          const proto = {
            foo: function () {
              return 42;
            },
          };
          Object.setPrototypeOf(proto, Uint8Array.prototype);
          Object.setPrototypeOf(arr, proto);
          return arr.foo() === 42;
        } catch (e) {
          return false;
        }
      }
      Object.defineProperty(Buffer2.prototype, "parent", {
        enumerable: true,
        get: function () {
          if (!Buffer2.isBuffer(this)) return void 0;
          return this.buffer;
        },
      });
      Object.defineProperty(Buffer2.prototype, "offset", {
        enumerable: true,
        get: function () {
          if (!Buffer2.isBuffer(this)) return void 0;
          return this.byteOffset;
        },
      });
      function createBuffer(length) {
        if (length > K_MAX_LENGTH) {
          throw new RangeError(
            'The value "' + length + '" is invalid for option "size"'
          );
        }
        const buf = new Uint8Array(length);
        Object.setPrototypeOf(buf, Buffer2.prototype);
        return buf;
      }
      function Buffer2(arg, encodingOrOffset, length) {
        if (typeof arg === "number") {
          if (typeof encodingOrOffset === "string") {
            throw new TypeError(
              'The "string" argument must be of type string. Received type number'
            );
          }
          return allocUnsafe(arg);
        }
        return from(arg, encodingOrOffset, length);
      }
      Buffer2.poolSize = 8192;
      function from(value, encodingOrOffset, length) {
        if (typeof value === "string") {
          return fromString(value, encodingOrOffset);
        }
        if (ArrayBuffer.isView(value)) {
          return fromArrayView(value);
        }
        if (value == null) {
          throw new TypeError(
            "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " +
              typeof value
          );
        }
        if (
          isInstance(value, ArrayBuffer) ||
          (value && isInstance(value.buffer, ArrayBuffer))
        ) {
          return fromArrayBuffer(value, encodingOrOffset, length);
        }
        if (
          typeof SharedArrayBuffer !== "undefined" &&
          (isInstance(value, SharedArrayBuffer) ||
            (value && isInstance(value.buffer, SharedArrayBuffer)))
        ) {
          return fromArrayBuffer(value, encodingOrOffset, length);
        }
        if (typeof value === "number") {
          throw new TypeError(
            'The "value" argument must not be of type number. Received type number'
          );
        }
        const valueOf = value.valueOf && value.valueOf();
        if (valueOf != null && valueOf !== value) {
          return Buffer2.from(valueOf, encodingOrOffset, length);
        }
        const b = fromObject(value);
        if (b) return b;
        if (
          typeof Symbol !== "undefined" &&
          Symbol.toPrimitive != null &&
          typeof value[Symbol.toPrimitive] === "function"
        ) {
          return Buffer2.from(
            value[Symbol.toPrimitive]("string"),
            encodingOrOffset,
            length
          );
        }
        throw new TypeError(
          "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " +
            typeof value
        );
      }
      Buffer2.from = function (value, encodingOrOffset, length) {
        return from(value, encodingOrOffset, length);
      };
      Object.setPrototypeOf(Buffer2.prototype, Uint8Array.prototype);
      Object.setPrototypeOf(Buffer2, Uint8Array);
      function assertSize(size) {
        if (typeof size !== "number") {
          throw new TypeError('"size" argument must be of type number');
        } else if (size < 0) {
          throw new RangeError(
            'The value "' + size + '" is invalid for option "size"'
          );
        }
      }
      function alloc(size, fill, encoding) {
        assertSize(size);
        if (size <= 0) {
          return createBuffer(size);
        }
        if (fill !== void 0) {
          return typeof encoding === "string"
            ? createBuffer(size).fill(fill, encoding)
            : createBuffer(size).fill(fill);
        }
        return createBuffer(size);
      }
      Buffer2.alloc = function (size, fill, encoding) {
        return alloc(size, fill, encoding);
      };
      function allocUnsafe(size) {
        assertSize(size);
        return createBuffer(size < 0 ? 0 : checked(size) | 0);
      }
      Buffer2.allocUnsafe = function (size) {
        return allocUnsafe(size);
      };
      Buffer2.allocUnsafeSlow = function (size) {
        return allocUnsafe(size);
      };
      function fromString(string, encoding) {
        if (typeof encoding !== "string" || encoding === "") {
          encoding = "utf8";
        }
        if (!Buffer2.isEncoding(encoding)) {
          throw new TypeError("Unknown encoding: " + encoding);
        }
        const length = byteLength(string, encoding) | 0;
        let buf = createBuffer(length);
        const actual = buf.write(string, encoding);
        if (actual !== length) {
          buf = buf.slice(0, actual);
        }
        return buf;
      }
      function fromArrayLike(array) {
        const length = array.length < 0 ? 0 : checked(array.length) | 0;
        const buf = createBuffer(length);
        for (let i = 0; i < length; i += 1) {
          buf[i] = array[i] & 255;
        }
        return buf;
      }
      function fromArrayView(arrayView) {
        if (isInstance(arrayView, Uint8Array)) {
          const copy = new Uint8Array(arrayView);
          return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
        }
        return fromArrayLike(arrayView);
      }
      function fromArrayBuffer(array, byteOffset, length) {
        if (byteOffset < 0 || array.byteLength < byteOffset) {
          throw new RangeError('"offset" is outside of buffer bounds');
        }
        if (array.byteLength < byteOffset + (length || 0)) {
          throw new RangeError('"length" is outside of buffer bounds');
        }
        let buf;
        if (byteOffset === void 0 && length === void 0) {
          buf = new Uint8Array(array);
        } else if (length === void 0) {
          buf = new Uint8Array(array, byteOffset);
        } else {
          buf = new Uint8Array(array, byteOffset, length);
        }
        Object.setPrototypeOf(buf, Buffer2.prototype);
        return buf;
      }
      function fromObject(obj) {
        if (Buffer2.isBuffer(obj)) {
          const len = checked(obj.length) | 0;
          const buf = createBuffer(len);
          if (buf.length === 0) {
            return buf;
          }
          obj.copy(buf, 0, 0, len);
          return buf;
        }
        if (obj.length !== void 0) {
          if (typeof obj.length !== "number" || numberIsNaN(obj.length)) {
            return createBuffer(0);
          }
          return fromArrayLike(obj);
        }
        if (obj.type === "Buffer" && Array.isArray(obj.data)) {
          return fromArrayLike(obj.data);
        }
      }
      function checked(length) {
        if (length >= K_MAX_LENGTH) {
          throw new RangeError(
            "Attempt to allocate Buffer larger than maximum size: 0x" +
              K_MAX_LENGTH.toString(16) +
              " bytes"
          );
        }
        return length | 0;
      }
      function SlowBuffer(length) {
        if (+length != length) {
          length = 0;
        }
        return Buffer2.alloc(+length);
      }
      Buffer2.isBuffer = function isBuffer(b) {
        return b != null && b._isBuffer === true && b !== Buffer2.prototype;
      };
      Buffer2.compare = function compare(a, b) {
        if (isInstance(a, Uint8Array))
          a = Buffer2.from(a, a.offset, a.byteLength);
        if (isInstance(b, Uint8Array))
          b = Buffer2.from(b, b.offset, b.byteLength);
        if (!Buffer2.isBuffer(a) || !Buffer2.isBuffer(b)) {
          throw new TypeError(
            'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
          );
        }
        if (a === b) return 0;
        let x = a.length;
        let y = b.length;
        for (let i = 0, len = Math.min(x, y); i < len; ++i) {
          if (a[i] !== b[i]) {
            x = a[i];
            y = b[i];
            break;
          }
        }
        if (x < y) return -1;
        if (y < x) return 1;
        return 0;
      };
      Buffer2.isEncoding = function isEncoding(encoding) {
        switch (String(encoding).toLowerCase()) {
          case "hex":
          case "utf8":
          case "utf-8":
          case "ascii":
          case "latin1":
          case "binary":
          case "base64":
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return true;
          default:
            return false;
        }
      };
      Buffer2.concat = function concat(list, length) {
        if (!Array.isArray(list)) {
          throw new TypeError('"list" argument must be an Array of Buffers');
        }
        if (list.length === 0) {
          return Buffer2.alloc(0);
        }
        let i;
        if (length === void 0) {
          length = 0;
          for (i = 0; i < list.length; ++i) {
            length += list[i].length;
          }
        }
        const buffer = Buffer2.allocUnsafe(length);
        let pos = 0;
        for (i = 0; i < list.length; ++i) {
          let buf = list[i];
          if (isInstance(buf, Uint8Array)) {
            if (pos + buf.length > buffer.length) {
              if (!Buffer2.isBuffer(buf)) buf = Buffer2.from(buf);
              buf.copy(buffer, pos);
            } else {
              Uint8Array.prototype.set.call(buffer, buf, pos);
            }
          } else if (!Buffer2.isBuffer(buf)) {
            throw new TypeError('"list" argument must be an Array of Buffers');
          } else {
            buf.copy(buffer, pos);
          }
          pos += buf.length;
        }
        return buffer;
      };
      function byteLength(string, encoding) {
        if (Buffer2.isBuffer(string)) {
          return string.length;
        }
        if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
          return string.byteLength;
        }
        if (typeof string !== "string") {
          throw new TypeError(
            'The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' +
              typeof string
          );
        }
        const len = string.length;
        const mustMatch = arguments.length > 2 && arguments[2] === true;
        if (!mustMatch && len === 0) return 0;
        let loweredCase = false;
        for (;;) {
          switch (encoding) {
            case "ascii":
            case "latin1":
            case "binary":
              return len;
            case "utf8":
            case "utf-8":
              return utf8ToBytes(string).length;
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return len * 2;
            case "hex":
              return len >>> 1;
            case "base64":
              return base64ToBytes(string).length;
            default:
              if (loweredCase) {
                return mustMatch ? -1 : utf8ToBytes(string).length;
              }
              encoding = ("" + encoding).toLowerCase();
              loweredCase = true;
          }
        }
      }
      Buffer2.byteLength = byteLength;
      function slowToString(encoding, start, end) {
        let loweredCase = false;
        if (start === void 0 || start < 0) {
          start = 0;
        }
        if (start > this.length) {
          return "";
        }
        if (end === void 0 || end > this.length) {
          end = this.length;
        }
        if (end <= 0) {
          return "";
        }
        end >>>= 0;
        start >>>= 0;
        if (end <= start) {
          return "";
        }
        if (!encoding) encoding = "utf8";
        while (true) {
          switch (encoding) {
            case "hex":
              return hexSlice(this, start, end);
            case "utf8":
            case "utf-8":
              return utf8Slice(this, start, end);
            case "ascii":
              return asciiSlice(this, start, end);
            case "latin1":
            case "binary":
              return latin1Slice(this, start, end);
            case "base64":
              return base64Slice(this, start, end);
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return utf16leSlice(this, start, end);
            default:
              if (loweredCase)
                throw new TypeError("Unknown encoding: " + encoding);
              encoding = (encoding + "").toLowerCase();
              loweredCase = true;
          }
        }
      }
      Buffer2.prototype._isBuffer = true;
      function swap(b, n, m) {
        const i = b[n];
        b[n] = b[m];
        b[m] = i;
      }
      Buffer2.prototype.swap16 = function swap16() {
        const len = this.length;
        if (len % 2 !== 0) {
          throw new RangeError("Buffer size must be a multiple of 16-bits");
        }
        for (let i = 0; i < len; i += 2) {
          swap(this, i, i + 1);
        }
        return this;
      };
      Buffer2.prototype.swap32 = function swap32() {
        const len = this.length;
        if (len % 4 !== 0) {
          throw new RangeError("Buffer size must be a multiple of 32-bits");
        }
        for (let i = 0; i < len; i += 4) {
          swap(this, i, i + 3);
          swap(this, i + 1, i + 2);
        }
        return this;
      };
      Buffer2.prototype.swap64 = function swap64() {
        const len = this.length;
        if (len % 8 !== 0) {
          throw new RangeError("Buffer size must be a multiple of 64-bits");
        }
        for (let i = 0; i < len; i += 8) {
          swap(this, i, i + 7);
          swap(this, i + 1, i + 6);
          swap(this, i + 2, i + 5);
          swap(this, i + 3, i + 4);
        }
        return this;
      };
      Buffer2.prototype.toString = function toString() {
        const length = this.length;
        if (length === 0) return "";
        if (arguments.length === 0) return utf8Slice(this, 0, length);
        return slowToString.apply(this, arguments);
      };
      Buffer2.prototype.toLocaleString = Buffer2.prototype.toString;
      Buffer2.prototype.equals = function equals(b) {
        if (!Buffer2.isBuffer(b))
          throw new TypeError("Argument must be a Buffer");
        if (this === b) return true;
        return Buffer2.compare(this, b) === 0;
      };
      Buffer2.prototype.inspect = function inspect() {
        let str = "";
        const max = exports.INSPECT_MAX_BYTES;
        str = this.toString("hex", 0, max)
          .replace(/(.{2})/g, "$1 ")
          .trim();
        if (this.length > max) str += " ... ";
        return "<Buffer " + str + ">";
      };
      if (customInspectSymbol) {
        Buffer2.prototype[customInspectSymbol] = Buffer2.prototype.inspect;
      }
      Buffer2.prototype.compare = function compare(
        target,
        start,
        end,
        thisStart,
        thisEnd
      ) {
        if (isInstance(target, Uint8Array)) {
          target = Buffer2.from(target, target.offset, target.byteLength);
        }
        if (!Buffer2.isBuffer(target)) {
          throw new TypeError(
            'The "target" argument must be one of type Buffer or Uint8Array. Received type ' +
              typeof target
          );
        }
        if (start === void 0) {
          start = 0;
        }
        if (end === void 0) {
          end = target ? target.length : 0;
        }
        if (thisStart === void 0) {
          thisStart = 0;
        }
        if (thisEnd === void 0) {
          thisEnd = this.length;
        }
        if (
          start < 0 ||
          end > target.length ||
          thisStart < 0 ||
          thisEnd > this.length
        ) {
          throw new RangeError("out of range index");
        }
        if (thisStart >= thisEnd && start >= end) {
          return 0;
        }
        if (thisStart >= thisEnd) {
          return -1;
        }
        if (start >= end) {
          return 1;
        }
        start >>>= 0;
        end >>>= 0;
        thisStart >>>= 0;
        thisEnd >>>= 0;
        if (this === target) return 0;
        let x = thisEnd - thisStart;
        let y = end - start;
        const len = Math.min(x, y);
        const thisCopy = this.slice(thisStart, thisEnd);
        const targetCopy = target.slice(start, end);
        for (let i = 0; i < len; ++i) {
          if (thisCopy[i] !== targetCopy[i]) {
            x = thisCopy[i];
            y = targetCopy[i];
            break;
          }
        }
        if (x < y) return -1;
        if (y < x) return 1;
        return 0;
      };
      function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
        if (buffer.length === 0) return -1;
        if (typeof byteOffset === "string") {
          encoding = byteOffset;
          byteOffset = 0;
        } else if (byteOffset > 2147483647) {
          byteOffset = 2147483647;
        } else if (byteOffset < -2147483648) {
          byteOffset = -2147483648;
        }
        byteOffset = +byteOffset;
        if (numberIsNaN(byteOffset)) {
          byteOffset = dir ? 0 : buffer.length - 1;
        }
        if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
        if (byteOffset >= buffer.length) {
          if (dir) return -1;
          else byteOffset = buffer.length - 1;
        } else if (byteOffset < 0) {
          if (dir) byteOffset = 0;
          else return -1;
        }
        if (typeof val === "string") {
          val = Buffer2.from(val, encoding);
        }
        if (Buffer2.isBuffer(val)) {
          if (val.length === 0) {
            return -1;
          }
          return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
        } else if (typeof val === "number") {
          val = val & 255;
          if (typeof Uint8Array.prototype.indexOf === "function") {
            if (dir) {
              return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
            } else {
              return Uint8Array.prototype.lastIndexOf.call(
                buffer,
                val,
                byteOffset
              );
            }
          }
          return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
        }
        throw new TypeError("val must be string, number or Buffer");
      }
      function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
        let indexSize = 1;
        let arrLength = arr.length;
        let valLength = val.length;
        if (encoding !== void 0) {
          encoding = String(encoding).toLowerCase();
          if (
            encoding === "ucs2" ||
            encoding === "ucs-2" ||
            encoding === "utf16le" ||
            encoding === "utf-16le"
          ) {
            if (arr.length < 2 || val.length < 2) {
              return -1;
            }
            indexSize = 2;
            arrLength /= 2;
            valLength /= 2;
            byteOffset /= 2;
          }
        }
        function read(buf, i2) {
          if (indexSize === 1) {
            return buf[i2];
          } else {
            return buf.readUInt16BE(i2 * indexSize);
          }
        }
        let i;
        if (dir) {
          let foundIndex = -1;
          for (i = byteOffset; i < arrLength; i++) {
            if (
              read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)
            ) {
              if (foundIndex === -1) foundIndex = i;
              if (i - foundIndex + 1 === valLength)
                return foundIndex * indexSize;
            } else {
              if (foundIndex !== -1) i -= i - foundIndex;
              foundIndex = -1;
            }
          }
        } else {
          if (byteOffset + valLength > arrLength)
            byteOffset = arrLength - valLength;
          for (i = byteOffset; i >= 0; i--) {
            let found = true;
            for (let j = 0; j < valLength; j++) {
              if (read(arr, i + j) !== read(val, j)) {
                found = false;
                break;
              }
            }
            if (found) return i;
          }
        }
        return -1;
      }
      Buffer2.prototype.includes = function includes(
        val,
        byteOffset,
        encoding
      ) {
        return this.indexOf(val, byteOffset, encoding) !== -1;
      };
      Buffer2.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
        return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
      };
      Buffer2.prototype.lastIndexOf = function lastIndexOf(
        val,
        byteOffset,
        encoding
      ) {
        return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
      };
      function hexWrite(buf, string, offset, length) {
        offset = Number(offset) || 0;
        const remaining = buf.length - offset;
        if (!length) {
          length = remaining;
        } else {
          length = Number(length);
          if (length > remaining) {
            length = remaining;
          }
        }
        const strLen = string.length;
        if (length > strLen / 2) {
          length = strLen / 2;
        }
        let i;
        for (i = 0; i < length; ++i) {
          const parsed = parseInt(string.substr(i * 2, 2), 16);
          if (numberIsNaN(parsed)) return i;
          buf[offset + i] = parsed;
        }
        return i;
      }
      function utf8Write(buf, string, offset, length) {
        return blitBuffer(
          utf8ToBytes(string, buf.length - offset),
          buf,
          offset,
          length
        );
      }
      function asciiWrite(buf, string, offset, length) {
        return blitBuffer(asciiToBytes(string), buf, offset, length);
      }
      function base64Write(buf, string, offset, length) {
        return blitBuffer(base64ToBytes(string), buf, offset, length);
      }
      function ucs2Write(buf, string, offset, length) {
        return blitBuffer(
          utf16leToBytes(string, buf.length - offset),
          buf,
          offset,
          length
        );
      }
      Buffer2.prototype.write = function write(
        string,
        offset,
        length,
        encoding
      ) {
        if (offset === void 0) {
          encoding = "utf8";
          length = this.length;
          offset = 0;
        } else if (length === void 0 && typeof offset === "string") {
          encoding = offset;
          length = this.length;
          offset = 0;
        } else if (isFinite(offset)) {
          offset = offset >>> 0;
          if (isFinite(length)) {
            length = length >>> 0;
            if (encoding === void 0) encoding = "utf8";
          } else {
            encoding = length;
            length = void 0;
          }
        } else {
          throw new Error(
            "Buffer.write(string, encoding, offset[, length]) is no longer supported"
          );
        }
        const remaining = this.length - offset;
        if (length === void 0 || length > remaining) length = remaining;
        if (
          (string.length > 0 && (length < 0 || offset < 0)) ||
          offset > this.length
        ) {
          throw new RangeError("Attempt to write outside buffer bounds");
        }
        if (!encoding) encoding = "utf8";
        let loweredCase = false;
        for (;;) {
          switch (encoding) {
            case "hex":
              return hexWrite(this, string, offset, length);
            case "utf8":
            case "utf-8":
              return utf8Write(this, string, offset, length);
            case "ascii":
            case "latin1":
            case "binary":
              return asciiWrite(this, string, offset, length);
            case "base64":
              return base64Write(this, string, offset, length);
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return ucs2Write(this, string, offset, length);
            default:
              if (loweredCase)
                throw new TypeError("Unknown encoding: " + encoding);
              encoding = ("" + encoding).toLowerCase();
              loweredCase = true;
          }
        }
      };
      Buffer2.prototype.toJSON = function toJSON() {
        return {
          type: "Buffer",
          data: Array.prototype.slice.call(this._arr || this, 0),
        };
      };
      function base64Slice(buf, start, end) {
        if (start === 0 && end === buf.length) {
          return base64.fromByteArray(buf);
        } else {
          return base64.fromByteArray(buf.slice(start, end));
        }
      }
      function utf8Slice(buf, start, end) {
        end = Math.min(buf.length, end);
        const res = [];
        let i = start;
        while (i < end) {
          const firstByte = buf[i];
          let codePoint = null;
          let bytesPerSequence =
            firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
          if (i + bytesPerSequence <= end) {
            let secondByte, thirdByte, fourthByte, tempCodePoint;
            switch (bytesPerSequence) {
              case 1:
                if (firstByte < 128) {
                  codePoint = firstByte;
                }
                break;
              case 2:
                secondByte = buf[i + 1];
                if ((secondByte & 192) === 128) {
                  tempCodePoint = ((firstByte & 31) << 6) | (secondByte & 63);
                  if (tempCodePoint > 127) {
                    codePoint = tempCodePoint;
                  }
                }
                break;
              case 3:
                secondByte = buf[i + 1];
                thirdByte = buf[i + 2];
                if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
                  tempCodePoint =
                    ((firstByte & 15) << 12) |
                    ((secondByte & 63) << 6) |
                    (thirdByte & 63);
                  if (
                    tempCodePoint > 2047 &&
                    (tempCodePoint < 55296 || tempCodePoint > 57343)
                  ) {
                    codePoint = tempCodePoint;
                  }
                }
                break;
              case 4:
                secondByte = buf[i + 1];
                thirdByte = buf[i + 2];
                fourthByte = buf[i + 3];
                if (
                  (secondByte & 192) === 128 &&
                  (thirdByte & 192) === 128 &&
                  (fourthByte & 192) === 128
                ) {
                  tempCodePoint =
                    ((firstByte & 15) << 18) |
                    ((secondByte & 63) << 12) |
                    ((thirdByte & 63) << 6) |
                    (fourthByte & 63);
                  if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
                    codePoint = tempCodePoint;
                  }
                }
            }
          }
          if (codePoint === null) {
            codePoint = 65533;
            bytesPerSequence = 1;
          } else if (codePoint > 65535) {
            codePoint -= 65536;
            res.push(((codePoint >>> 10) & 1023) | 55296);
            codePoint = 56320 | (codePoint & 1023);
          }
          res.push(codePoint);
          i += bytesPerSequence;
        }
        return decodeCodePointsArray(res);
      }
      var MAX_ARGUMENTS_LENGTH = 4096;
      function decodeCodePointsArray(codePoints) {
        const len = codePoints.length;
        if (len <= MAX_ARGUMENTS_LENGTH) {
          return String.fromCharCode.apply(String, codePoints);
        }
        let res = "";
        let i = 0;
        while (i < len) {
          res += String.fromCharCode.apply(
            String,
            codePoints.slice(i, (i += MAX_ARGUMENTS_LENGTH))
          );
        }
        return res;
      }
      function asciiSlice(buf, start, end) {
        let ret = "";
        end = Math.min(buf.length, end);
        for (let i = start; i < end; ++i) {
          ret += String.fromCharCode(buf[i] & 127);
        }
        return ret;
      }
      function latin1Slice(buf, start, end) {
        let ret = "";
        end = Math.min(buf.length, end);
        for (let i = start; i < end; ++i) {
          ret += String.fromCharCode(buf[i]);
        }
        return ret;
      }
      function hexSlice(buf, start, end) {
        const len = buf.length;
        if (!start || start < 0) start = 0;
        if (!end || end < 0 || end > len) end = len;
        let out = "";
        for (let i = start; i < end; ++i) {
          out += hexSliceLookupTable[buf[i]];
        }
        return out;
      }
      function utf16leSlice(buf, start, end) {
        const bytes = buf.slice(start, end);
        let res = "";
        for (let i = 0; i < bytes.length - 1; i += 2) {
          res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
        }
        return res;
      }
      Buffer2.prototype.slice = function slice(start, end) {
        const len = this.length;
        start = ~~start;
        end = end === void 0 ? len : ~~end;
        if (start < 0) {
          start += len;
          if (start < 0) start = 0;
        } else if (start > len) {
          start = len;
        }
        if (end < 0) {
          end += len;
          if (end < 0) end = 0;
        } else if (end > len) {
          end = len;
        }
        if (end < start) end = start;
        const newBuf = this.subarray(start, end);
        Object.setPrototypeOf(newBuf, Buffer2.prototype);
        return newBuf;
      };
      function checkOffset(offset, ext, length) {
        if (offset % 1 !== 0 || offset < 0)
          throw new RangeError("offset is not uint");
        if (offset + ext > length)
          throw new RangeError("Trying to access beyond buffer length");
      }
      Buffer2.prototype.readUintLE = Buffer2.prototype.readUIntLE =
        function readUIntLE(offset, byteLength2, noAssert) {
          offset = offset >>> 0;
          byteLength2 = byteLength2 >>> 0;
          if (!noAssert) checkOffset(offset, byteLength2, this.length);
          let val = this[offset];
          let mul = 1;
          let i = 0;
          while (++i < byteLength2 && (mul *= 256)) {
            val += this[offset + i] * mul;
          }
          return val;
        };
      Buffer2.prototype.readUintBE = Buffer2.prototype.readUIntBE =
        function readUIntBE(offset, byteLength2, noAssert) {
          offset = offset >>> 0;
          byteLength2 = byteLength2 >>> 0;
          if (!noAssert) {
            checkOffset(offset, byteLength2, this.length);
          }
          let val = this[offset + --byteLength2];
          let mul = 1;
          while (byteLength2 > 0 && (mul *= 256)) {
            val += this[offset + --byteLength2] * mul;
          }
          return val;
        };
      Buffer2.prototype.readUint8 = Buffer2.prototype.readUInt8 =
        function readUInt8(offset, noAssert) {
          offset = offset >>> 0;
          if (!noAssert) checkOffset(offset, 1, this.length);
          return this[offset];
        };
      Buffer2.prototype.readUint16LE = Buffer2.prototype.readUInt16LE =
        function readUInt16LE(offset, noAssert) {
          offset = offset >>> 0;
          if (!noAssert) checkOffset(offset, 2, this.length);
          return this[offset] | (this[offset + 1] << 8);
        };
      Buffer2.prototype.readUint16BE = Buffer2.prototype.readUInt16BE =
        function readUInt16BE(offset, noAssert) {
          offset = offset >>> 0;
          if (!noAssert) checkOffset(offset, 2, this.length);
          return (this[offset] << 8) | this[offset + 1];
        };
      Buffer2.prototype.readUint32LE = Buffer2.prototype.readUInt32LE =
        function readUInt32LE(offset, noAssert) {
          offset = offset >>> 0;
          if (!noAssert) checkOffset(offset, 4, this.length);
          return (
            (this[offset] |
              (this[offset + 1] << 8) |
              (this[offset + 2] << 16)) +
            this[offset + 3] * 16777216
          );
        };
      Buffer2.prototype.readUint32BE = Buffer2.prototype.readUInt32BE =
        function readUInt32BE(offset, noAssert) {
          offset = offset >>> 0;
          if (!noAssert) checkOffset(offset, 4, this.length);
          return (
            this[offset] * 16777216 +
            ((this[offset + 1] << 16) |
              (this[offset + 2] << 8) |
              this[offset + 3])
          );
        };
      Buffer2.prototype.readBigUInt64LE = defineBigIntMethod(
        function readBigUInt64LE(offset) {
          offset = offset >>> 0;
          validateNumber(offset, "offset");
          const first = this[offset];
          const last = this[offset + 7];
          if (first === void 0 || last === void 0) {
            boundsError(offset, this.length - 8);
          }
          const lo =
            first +
            this[++offset] * 2 ** 8 +
            this[++offset] * 2 ** 16 +
            this[++offset] * 2 ** 24;
          const hi =
            this[++offset] +
            this[++offset] * 2 ** 8 +
            this[++offset] * 2 ** 16 +
            last * 2 ** 24;
          return BigInt(lo) + (BigInt(hi) << BigInt(32));
        }
      );
      Buffer2.prototype.readBigUInt64BE = defineBigIntMethod(
        function readBigUInt64BE(offset) {
          offset = offset >>> 0;
          validateNumber(offset, "offset");
          const first = this[offset];
          const last = this[offset + 7];
          if (first === void 0 || last === void 0) {
            boundsError(offset, this.length - 8);
          }
          const hi =
            first * 2 ** 24 +
            this[++offset] * 2 ** 16 +
            this[++offset] * 2 ** 8 +
            this[++offset];
          const lo =
            this[++offset] * 2 ** 24 +
            this[++offset] * 2 ** 16 +
            this[++offset] * 2 ** 8 +
            last;
          return (BigInt(hi) << BigInt(32)) + BigInt(lo);
        }
      );
      Buffer2.prototype.readIntLE = function readIntLE(
        offset,
        byteLength2,
        noAssert
      ) {
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert) checkOffset(offset, byteLength2, this.length);
        let val = this[offset];
        let mul = 1;
        let i = 0;
        while (++i < byteLength2 && (mul *= 256)) {
          val += this[offset + i] * mul;
        }
        mul *= 128;
        if (val >= mul) val -= Math.pow(2, 8 * byteLength2);
        return val;
      };
      Buffer2.prototype.readIntBE = function readIntBE(
        offset,
        byteLength2,
        noAssert
      ) {
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert) checkOffset(offset, byteLength2, this.length);
        let i = byteLength2;
        let mul = 1;
        let val = this[offset + --i];
        while (i > 0 && (mul *= 256)) {
          val += this[offset + --i] * mul;
        }
        mul *= 128;
        if (val >= mul) val -= Math.pow(2, 8 * byteLength2);
        return val;
      };
      Buffer2.prototype.readInt8 = function readInt8(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert) checkOffset(offset, 1, this.length);
        if (!(this[offset] & 128)) return this[offset];
        return (255 - this[offset] + 1) * -1;
      };
      Buffer2.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert) checkOffset(offset, 2, this.length);
        const val = this[offset] | (this[offset + 1] << 8);
        return val & 32768 ? val | 4294901760 : val;
      };
      Buffer2.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert) checkOffset(offset, 2, this.length);
        const val = this[offset + 1] | (this[offset] << 8);
        return val & 32768 ? val | 4294901760 : val;
      };
      Buffer2.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert) checkOffset(offset, 4, this.length);
        return (
          this[offset] |
          (this[offset + 1] << 8) |
          (this[offset + 2] << 16) |
          (this[offset + 3] << 24)
        );
      };
      Buffer2.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert) checkOffset(offset, 4, this.length);
        return (
          (this[offset] << 24) |
          (this[offset + 1] << 16) |
          (this[offset + 2] << 8) |
          this[offset + 3]
        );
      };
      Buffer2.prototype.readBigInt64LE = defineBigIntMethod(
        function readBigInt64LE(offset) {
          offset = offset >>> 0;
          validateNumber(offset, "offset");
          const first = this[offset];
          const last = this[offset + 7];
          if (first === void 0 || last === void 0) {
            boundsError(offset, this.length - 8);
          }
          const val =
            this[offset + 4] +
            this[offset + 5] * 2 ** 8 +
            this[offset + 6] * 2 ** 16 +
            (last << 24);
          return (
            (BigInt(val) << BigInt(32)) +
            BigInt(
              first +
                this[++offset] * 2 ** 8 +
                this[++offset] * 2 ** 16 +
                this[++offset] * 2 ** 24
            )
          );
        }
      );
      Buffer2.prototype.readBigInt64BE = defineBigIntMethod(
        function readBigInt64BE(offset) {
          offset = offset >>> 0;
          validateNumber(offset, "offset");
          const first = this[offset];
          const last = this[offset + 7];
          if (first === void 0 || last === void 0) {
            boundsError(offset, this.length - 8);
          }
          const val =
            (first << 24) +
            this[++offset] * 2 ** 16 +
            this[++offset] * 2 ** 8 +
            this[++offset];
          return (
            (BigInt(val) << BigInt(32)) +
            BigInt(
              this[++offset] * 2 ** 24 +
                this[++offset] * 2 ** 16 +
                this[++offset] * 2 ** 8 +
                last
            )
          );
        }
      );
      Buffer2.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert) checkOffset(offset, 4, this.length);
        return ieee754.read(this, offset, true, 23, 4);
      };
      Buffer2.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert) checkOffset(offset, 4, this.length);
        return ieee754.read(this, offset, false, 23, 4);
      };
      Buffer2.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert) checkOffset(offset, 8, this.length);
        return ieee754.read(this, offset, true, 52, 8);
      };
      Buffer2.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert) checkOffset(offset, 8, this.length);
        return ieee754.read(this, offset, false, 52, 8);
      };
      function checkInt(buf, value, offset, ext, max, min) {
        if (!Buffer2.isBuffer(buf))
          throw new TypeError('"buffer" argument must be a Buffer instance');
        if (value > max || value < min)
          throw new RangeError('"value" argument is out of bounds');
        if (offset + ext > buf.length)
          throw new RangeError("Index out of range");
      }
      Buffer2.prototype.writeUintLE = Buffer2.prototype.writeUIntLE =
        function writeUIntLE(value, offset, byteLength2, noAssert) {
          value = +value;
          offset = offset >>> 0;
          byteLength2 = byteLength2 >>> 0;
          if (!noAssert) {
            const maxBytes = Math.pow(2, 8 * byteLength2) - 1;
            checkInt(this, value, offset, byteLength2, maxBytes, 0);
          }
          let mul = 1;
          let i = 0;
          this[offset] = value & 255;
          while (++i < byteLength2 && (mul *= 256)) {
            this[offset + i] = (value / mul) & 255;
          }
          return offset + byteLength2;
        };
      Buffer2.prototype.writeUintBE = Buffer2.prototype.writeUIntBE =
        function writeUIntBE(value, offset, byteLength2, noAssert) {
          value = +value;
          offset = offset >>> 0;
          byteLength2 = byteLength2 >>> 0;
          if (!noAssert) {
            const maxBytes = Math.pow(2, 8 * byteLength2) - 1;
            checkInt(this, value, offset, byteLength2, maxBytes, 0);
          }
          let i = byteLength2 - 1;
          let mul = 1;
          this[offset + i] = value & 255;
          while (--i >= 0 && (mul *= 256)) {
            this[offset + i] = (value / mul) & 255;
          }
          return offset + byteLength2;
        };
      Buffer2.prototype.writeUint8 = Buffer2.prototype.writeUInt8 =
        function writeUInt8(value, offset, noAssert) {
          value = +value;
          offset = offset >>> 0;
          if (!noAssert) checkInt(this, value, offset, 1, 255, 0);
          this[offset] = value & 255;
          return offset + 1;
        };
      Buffer2.prototype.writeUint16LE = Buffer2.prototype.writeUInt16LE =
        function writeUInt16LE(value, offset, noAssert) {
          value = +value;
          offset = offset >>> 0;
          if (!noAssert) checkInt(this, value, offset, 2, 65535, 0);
          this[offset] = value & 255;
          this[offset + 1] = value >>> 8;
          return offset + 2;
        };
      Buffer2.prototype.writeUint16BE = Buffer2.prototype.writeUInt16BE =
        function writeUInt16BE(value, offset, noAssert) {
          value = +value;
          offset = offset >>> 0;
          if (!noAssert) checkInt(this, value, offset, 2, 65535, 0);
          this[offset] = value >>> 8;
          this[offset + 1] = value & 255;
          return offset + 2;
        };
      Buffer2.prototype.writeUint32LE = Buffer2.prototype.writeUInt32LE =
        function writeUInt32LE(value, offset, noAssert) {
          value = +value;
          offset = offset >>> 0;
          if (!noAssert) checkInt(this, value, offset, 4, 4294967295, 0);
          this[offset + 3] = value >>> 24;
          this[offset + 2] = value >>> 16;
          this[offset + 1] = value >>> 8;
          this[offset] = value & 255;
          return offset + 4;
        };
      Buffer2.prototype.writeUint32BE = Buffer2.prototype.writeUInt32BE =
        function writeUInt32BE(value, offset, noAssert) {
          value = +value;
          offset = offset >>> 0;
          if (!noAssert) checkInt(this, value, offset, 4, 4294967295, 0);
          this[offset] = value >>> 24;
          this[offset + 1] = value >>> 16;
          this[offset + 2] = value >>> 8;
          this[offset + 3] = value & 255;
          return offset + 4;
        };
      function wrtBigUInt64LE(buf, value, offset, min, max) {
        checkIntBI(value, min, max, buf, offset, 7);
        let lo = Number(value & BigInt(4294967295));
        buf[offset++] = lo;
        lo = lo >> 8;
        buf[offset++] = lo;
        lo = lo >> 8;
        buf[offset++] = lo;
        lo = lo >> 8;
        buf[offset++] = lo;
        let hi = Number((value >> BigInt(32)) & BigInt(4294967295));
        buf[offset++] = hi;
        hi = hi >> 8;
        buf[offset++] = hi;
        hi = hi >> 8;
        buf[offset++] = hi;
        hi = hi >> 8;
        buf[offset++] = hi;
        return offset;
      }
      function wrtBigUInt64BE(buf, value, offset, min, max) {
        checkIntBI(value, min, max, buf, offset, 7);
        let lo = Number(value & BigInt(4294967295));
        buf[offset + 7] = lo;
        lo = lo >> 8;
        buf[offset + 6] = lo;
        lo = lo >> 8;
        buf[offset + 5] = lo;
        lo = lo >> 8;
        buf[offset + 4] = lo;
        let hi = Number((value >> BigInt(32)) & BigInt(4294967295));
        buf[offset + 3] = hi;
        hi = hi >> 8;
        buf[offset + 2] = hi;
        hi = hi >> 8;
        buf[offset + 1] = hi;
        hi = hi >> 8;
        buf[offset] = hi;
        return offset + 8;
      }
      Buffer2.prototype.writeBigUInt64LE = defineBigIntMethod(
        function writeBigUInt64LE(value, offset = 0) {
          return wrtBigUInt64LE(
            this,
            value,
            offset,
            BigInt(0),
            BigInt("0xffffffffffffffff")
          );
        }
      );
      Buffer2.prototype.writeBigUInt64BE = defineBigIntMethod(
        function writeBigUInt64BE(value, offset = 0) {
          return wrtBigUInt64BE(
            this,
            value,
            offset,
            BigInt(0),
            BigInt("0xffffffffffffffff")
          );
        }
      );
      Buffer2.prototype.writeIntLE = function writeIntLE(
        value,
        offset,
        byteLength2,
        noAssert
      ) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) {
          const limit = Math.pow(2, 8 * byteLength2 - 1);
          checkInt(this, value, offset, byteLength2, limit - 1, -limit);
        }
        let i = 0;
        let mul = 1;
        let sub = 0;
        this[offset] = value & 255;
        while (++i < byteLength2 && (mul *= 256)) {
          if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
            sub = 1;
          }
          this[offset + i] = (((value / mul) >> 0) - sub) & 255;
        }
        return offset + byteLength2;
      };
      Buffer2.prototype.writeIntBE = function writeIntBE(
        value,
        offset,
        byteLength2,
        noAssert
      ) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) {
          const limit = Math.pow(2, 8 * byteLength2 - 1);
          checkInt(this, value, offset, byteLength2, limit - 1, -limit);
        }
        let i = byteLength2 - 1;
        let mul = 1;
        let sub = 0;
        this[offset + i] = value & 255;
        while (--i >= 0 && (mul *= 256)) {
          if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
            sub = 1;
          }
          this[offset + i] = (((value / mul) >> 0) - sub) & 255;
        }
        return offset + byteLength2;
      };
      Buffer2.prototype.writeInt8 = function writeInt8(
        value,
        offset,
        noAssert
      ) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) checkInt(this, value, offset, 1, 127, -128);
        if (value < 0) value = 255 + value + 1;
        this[offset] = value & 255;
        return offset + 1;
      };
      Buffer2.prototype.writeInt16LE = function writeInt16LE(
        value,
        offset,
        noAssert
      ) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) checkInt(this, value, offset, 2, 32767, -32768);
        this[offset] = value & 255;
        this[offset + 1] = value >>> 8;
        return offset + 2;
      };
      Buffer2.prototype.writeInt16BE = function writeInt16BE(
        value,
        offset,
        noAssert
      ) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) checkInt(this, value, offset, 2, 32767, -32768);
        this[offset] = value >>> 8;
        this[offset + 1] = value & 255;
        return offset + 2;
      };
      Buffer2.prototype.writeInt32LE = function writeInt32LE(
        value,
        offset,
        noAssert
      ) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 4, 2147483647, -2147483648);
        this[offset] = value & 255;
        this[offset + 1] = value >>> 8;
        this[offset + 2] = value >>> 16;
        this[offset + 3] = value >>> 24;
        return offset + 4;
      };
      Buffer2.prototype.writeInt32BE = function writeInt32BE(
        value,
        offset,
        noAssert
      ) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 4, 2147483647, -2147483648);
        if (value < 0) value = 4294967295 + value + 1;
        this[offset] = value >>> 24;
        this[offset + 1] = value >>> 16;
        this[offset + 2] = value >>> 8;
        this[offset + 3] = value & 255;
        return offset + 4;
      };
      Buffer2.prototype.writeBigInt64LE = defineBigIntMethod(
        function writeBigInt64LE(value, offset = 0) {
          return wrtBigUInt64LE(
            this,
            value,
            offset,
            -BigInt("0x8000000000000000"),
            BigInt("0x7fffffffffffffff")
          );
        }
      );
      Buffer2.prototype.writeBigInt64BE = defineBigIntMethod(
        function writeBigInt64BE(value, offset = 0) {
          return wrtBigUInt64BE(
            this,
            value,
            offset,
            -BigInt("0x8000000000000000"),
            BigInt("0x7fffffffffffffff")
          );
        }
      );
      function checkIEEE754(buf, value, offset, ext, max, min) {
        if (offset + ext > buf.length)
          throw new RangeError("Index out of range");
        if (offset < 0) throw new RangeError("Index out of range");
      }
      function writeFloat(buf, value, offset, littleEndian, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) {
          checkIEEE754(
            buf,
            value,
            offset,
            4,
            34028234663852886e22,
            -34028234663852886e22
          );
        }
        ieee754.write(buf, value, offset, littleEndian, 23, 4);
        return offset + 4;
      }
      Buffer2.prototype.writeFloatLE = function writeFloatLE(
        value,
        offset,
        noAssert
      ) {
        return writeFloat(this, value, offset, true, noAssert);
      };
      Buffer2.prototype.writeFloatBE = function writeFloatBE(
        value,
        offset,
        noAssert
      ) {
        return writeFloat(this, value, offset, false, noAssert);
      };
      function writeDouble(buf, value, offset, littleEndian, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) {
          checkIEEE754(
            buf,
            value,
            offset,
            8,
            17976931348623157e292,
            -17976931348623157e292
          );
        }
        ieee754.write(buf, value, offset, littleEndian, 52, 8);
        return offset + 8;
      }
      Buffer2.prototype.writeDoubleLE = function writeDoubleLE(
        value,
        offset,
        noAssert
      ) {
        return writeDouble(this, value, offset, true, noAssert);
      };
      Buffer2.prototype.writeDoubleBE = function writeDoubleBE(
        value,
        offset,
        noAssert
      ) {
        return writeDouble(this, value, offset, false, noAssert);
      };
      Buffer2.prototype.copy = function copy(target, targetStart, start, end) {
        if (!Buffer2.isBuffer(target))
          throw new TypeError("argument should be a Buffer");
        if (!start) start = 0;
        if (!end && end !== 0) end = this.length;
        if (targetStart >= target.length) targetStart = target.length;
        if (!targetStart) targetStart = 0;
        if (end > 0 && end < start) end = start;
        if (end === start) return 0;
        if (target.length === 0 || this.length === 0) return 0;
        if (targetStart < 0) {
          throw new RangeError("targetStart out of bounds");
        }
        if (start < 0 || start >= this.length)
          throw new RangeError("Index out of range");
        if (end < 0) throw new RangeError("sourceEnd out of bounds");
        if (end > this.length) end = this.length;
        if (target.length - targetStart < end - start) {
          end = target.length - targetStart + start;
        }
        const len = end - start;
        if (
          this === target &&
          typeof Uint8Array.prototype.copyWithin === "function"
        ) {
          this.copyWithin(targetStart, start, end);
        } else {
          Uint8Array.prototype.set.call(
            target,
            this.subarray(start, end),
            targetStart
          );
        }
        return len;
      };
      Buffer2.prototype.fill = function fill(val, start, end, encoding) {
        if (typeof val === "string") {
          if (typeof start === "string") {
            encoding = start;
            start = 0;
            end = this.length;
          } else if (typeof end === "string") {
            encoding = end;
            end = this.length;
          }
          if (encoding !== void 0 && typeof encoding !== "string") {
            throw new TypeError("encoding must be a string");
          }
          if (typeof encoding === "string" && !Buffer2.isEncoding(encoding)) {
            throw new TypeError("Unknown encoding: " + encoding);
          }
          if (val.length === 1) {
            const code = val.charCodeAt(0);
            if ((encoding === "utf8" && code < 128) || encoding === "latin1") {
              val = code;
            }
          }
        } else if (typeof val === "number") {
          val = val & 255;
        } else if (typeof val === "boolean") {
          val = Number(val);
        }
        if (start < 0 || this.length < start || this.length < end) {
          throw new RangeError("Out of range index");
        }
        if (end <= start) {
          return this;
        }
        start = start >>> 0;
        end = end === void 0 ? this.length : end >>> 0;
        if (!val) val = 0;
        let i;
        if (typeof val === "number") {
          for (i = start; i < end; ++i) {
            this[i] = val;
          }
        } else {
          const bytes = Buffer2.isBuffer(val)
            ? val
            : Buffer2.from(val, encoding);
          const len = bytes.length;
          if (len === 0) {
            throw new TypeError(
              'The value "' + val + '" is invalid for argument "value"'
            );
          }
          for (i = 0; i < end - start; ++i) {
            this[i + start] = bytes[i % len];
          }
        }
        return this;
      };
      var errors = {};
      function E(sym, getMessage, Base) {
        errors[sym] = class NodeError extends Base {
          constructor() {
            super();
            Object.defineProperty(this, "message", {
              value: getMessage.apply(this, arguments),
              writable: true,
              configurable: true,
            });
            this.name = `${this.name} [${sym}]`;
            this.stack;
            delete this.name;
          }
          get code() {
            return sym;
          }
          set code(value) {
            Object.defineProperty(this, "code", {
              configurable: true,
              enumerable: true,
              value,
              writable: true,
            });
          }
          toString() {
            return `${this.name} [${sym}]: ${this.message}`;
          }
        };
      }
      E(
        "ERR_BUFFER_OUT_OF_BOUNDS",
        function (name) {
          if (name) {
            return `${name} is outside of buffer bounds`;
          }
          return "Attempt to access memory outside buffer bounds";
        },
        RangeError
      );
      E(
        "ERR_INVALID_ARG_TYPE",
        function (name, actual) {
          return `The "${name}" argument must be of type number. Received type ${typeof actual}`;
        },
        TypeError
      );
      E(
        "ERR_OUT_OF_RANGE",
        function (str, range, input) {
          let msg = `The value of "${str}" is out of range.`;
          let received = input;
          if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {
            received = addNumericalSeparator(String(input));
          } else if (typeof input === "bigint") {
            received = String(input);
            if (
              input > BigInt(2) ** BigInt(32) ||
              input < -(BigInt(2) ** BigInt(32))
            ) {
              received = addNumericalSeparator(received);
            }
            received += "n";
          }
          msg += ` It must be ${range}. Received ${received}`;
          return msg;
        },
        RangeError
      );
      function addNumericalSeparator(val) {
        let res = "";
        let i = val.length;
        const start = val[0] === "-" ? 1 : 0;
        for (; i >= start + 4; i -= 3) {
          res = `_${val.slice(i - 3, i)}${res}`;
        }
        return `${val.slice(0, i)}${res}`;
      }
      function checkBounds(buf, offset, byteLength2) {
        validateNumber(offset, "offset");
        if (buf[offset] === void 0 || buf[offset + byteLength2] === void 0) {
          boundsError(offset, buf.length - (byteLength2 + 1));
        }
      }
      function checkIntBI(value, min, max, buf, offset, byteLength2) {
        if (value > max || value < min) {
          const n = typeof min === "bigint" ? "n" : "";
          let range;
          if (byteLength2 > 3) {
            if (min === 0 || min === BigInt(0)) {
              range = `>= 0${n} and < 2${n} ** ${(byteLength2 + 1) * 8}${n}`;
            } else {
              range = `>= -(2${n} ** ${
                (byteLength2 + 1) * 8 - 1
              }${n}) and < 2 ** ${(byteLength2 + 1) * 8 - 1}${n}`;
            }
          } else {
            range = `>= ${min}${n} and <= ${max}${n}`;
          }
          throw new errors.ERR_OUT_OF_RANGE("value", range, value);
        }
        checkBounds(buf, offset, byteLength2);
      }
      function validateNumber(value, name) {
        if (typeof value !== "number") {
          throw new errors.ERR_INVALID_ARG_TYPE(name, "number", value);
        }
      }
      function boundsError(value, length, type) {
        if (Math.floor(value) !== value) {
          validateNumber(value, type);
          throw new errors.ERR_OUT_OF_RANGE(
            type || "offset",
            "an integer",
            value
          );
        }
        if (length < 0) {
          throw new errors.ERR_BUFFER_OUT_OF_BOUNDS();
        }
        throw new errors.ERR_OUT_OF_RANGE(
          type || "offset",
          `>= ${type ? 1 : 0} and <= ${length}`,
          value
        );
      }
      var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
      function base64clean(str) {
        str = str.split("=")[0];
        str = str.trim().replace(INVALID_BASE64_RE, "");
        if (str.length < 2) return "";
        while (str.length % 4 !== 0) {
          str = str + "=";
        }
        return str;
      }
      function utf8ToBytes(string, units) {
        units = units || Infinity;
        let codePoint;
        const length = string.length;
        let leadSurrogate = null;
        const bytes = [];
        for (let i = 0; i < length; ++i) {
          codePoint = string.charCodeAt(i);
          if (codePoint > 55295 && codePoint < 57344) {
            if (!leadSurrogate) {
              if (codePoint > 56319) {
                if ((units -= 3) > -1) bytes.push(239, 191, 189);
                continue;
              } else if (i + 1 === length) {
                if ((units -= 3) > -1) bytes.push(239, 191, 189);
                continue;
              }
              leadSurrogate = codePoint;
              continue;
            }
            if (codePoint < 56320) {
              if ((units -= 3) > -1) bytes.push(239, 191, 189);
              leadSurrogate = codePoint;
              continue;
            }
            codePoint =
              (((leadSurrogate - 55296) << 10) | (codePoint - 56320)) + 65536;
          } else if (leadSurrogate) {
            if ((units -= 3) > -1) bytes.push(239, 191, 189);
          }
          leadSurrogate = null;
          if (codePoint < 128) {
            if ((units -= 1) < 0) break;
            bytes.push(codePoint);
          } else if (codePoint < 2048) {
            if ((units -= 2) < 0) break;
            bytes.push((codePoint >> 6) | 192, (codePoint & 63) | 128);
          } else if (codePoint < 65536) {
            if ((units -= 3) < 0) break;
            bytes.push(
              (codePoint >> 12) | 224,
              ((codePoint >> 6) & 63) | 128,
              (codePoint & 63) | 128
            );
          } else if (codePoint < 1114112) {
            if ((units -= 4) < 0) break;
            bytes.push(
              (codePoint >> 18) | 240,
              ((codePoint >> 12) & 63) | 128,
              ((codePoint >> 6) & 63) | 128,
              (codePoint & 63) | 128
            );
          } else {
            throw new Error("Invalid code point");
          }
        }
        return bytes;
      }
      function asciiToBytes(str) {
        const byteArray = [];
        for (let i = 0; i < str.length; ++i) {
          byteArray.push(str.charCodeAt(i) & 255);
        }
        return byteArray;
      }
      function utf16leToBytes(str, units) {
        let c, hi, lo;
        const byteArray = [];
        for (let i = 0; i < str.length; ++i) {
          if ((units -= 2) < 0) break;
          c = str.charCodeAt(i);
          hi = c >> 8;
          lo = c % 256;
          byteArray.push(lo);
          byteArray.push(hi);
        }
        return byteArray;
      }
      function base64ToBytes(str) {
        return base64.toByteArray(base64clean(str));
      }
      function blitBuffer(src, dst, offset, length) {
        let i;
        for (i = 0; i < length; ++i) {
          if (i + offset >= dst.length || i >= src.length) break;
          dst[i + offset] = src[i];
        }
        return i;
      }
      function isInstance(obj, type) {
        return (
          obj instanceof type ||
          (obj != null &&
            obj.constructor != null &&
            obj.constructor.name != null &&
            obj.constructor.name === type.name)
        );
      }
      function numberIsNaN(obj) {
        return obj !== obj;
      }
      var hexSliceLookupTable = (function () {
        const alphabet = "0123456789abcdef";
        const table = new Array(256);
        for (let i = 0; i < 16; ++i) {
          const i16 = i * 16;
          for (let j = 0; j < 16; ++j) {
            table[i16 + j] = alphabet[i] + alphabet[j];
          }
        }
        return table;
      })();
      function defineBigIntMethod(fn) {
        return typeof BigInt === "undefined" ? BufferBigIntNotDefined : fn;
      }
      function BufferBigIntNotDefined() {
        throw new Error("BigInt not supported");
      }
    },
  });

  // node_modules/readable-stream/lib/ours/util.js
  var require_util = __commonJS({
    "node_modules/readable-stream/lib/ours/util.js"(exports, module) {
      "use strict";
      init_process_shim();
      var bufferModule = require_buffer();
      var AsyncFunction = Object.getPrototypeOf(
        async function () {}
      ).constructor;
      var Blob = globalThis.Blob || bufferModule.Blob;
      var isBlob =
        typeof Blob !== "undefined"
          ? function isBlob2(b) {
              return b instanceof Blob;
            }
          : function isBlob2(b) {
              return false;
            };
      var AggregateError = class extends Error {
        constructor(errors) {
          if (!Array.isArray(errors)) {
            throw new TypeError(
              `Expected input to be an Array, got ${typeof errors}`
            );
          }
          let message = "";
          for (let i = 0; i < errors.length; i++) {
            message += `    ${errors[i].stack}
`;
          }
          super(message);
          this.name = "AggregateError";
          this.errors = errors;
        }
      };
      module.exports = {
        AggregateError,
        once(callback) {
          let called = false;
          return function (...args) {
            if (called) {
              return;
            }
            called = true;
            callback.apply(this, args);
          };
        },
        createDeferredPromise: function () {
          let resolve;
          let reject;
          const promise = new Promise((res, rej) => {
            resolve = res;
            reject = rej;
          });
          return {
            promise,
            resolve,
            reject,
          };
        },
        promisify(fn) {
          return new Promise((resolve, reject) => {
            fn((err, ...args) => {
              if (err) {
                return reject(err);
              }
              return resolve(...args);
            });
          });
        },
        debuglog() {
          return function () {};
        },
        format(format, ...args) {
          return format.replace(/%([sdifj])/g, function (...[_unused, type]) {
            const replacement = args.shift();
            if (type === "f") {
              return replacement.toFixed(6);
            } else if (type === "j") {
              return JSON.stringify(replacement);
            } else if (type === "s" && typeof replacement === "object") {
              const ctor =
                replacement.constructor !== Object
                  ? replacement.constructor.name
                  : "";
              return `${ctor} {}`.trim();
            } else {
              return replacement.toString();
            }
          });
        },
        inspect(value) {
          switch (typeof value) {
            case "string":
              if (value.includes("'")) {
                if (!value.includes('"')) {
                  return `"${value}"`;
                } else if (!value.includes("`") && !value.includes("${")) {
                  return `\`${value}\``;
                }
              }
              return `'${value}'`;
            case "number":
              if (isNaN(value)) {
                return "NaN";
              } else if (Object.is(value, -0)) {
                return String(value);
              }
              return value;
            case "bigint":
              return `${String(value)}n`;
            case "boolean":
            case "undefined":
              return String(value);
            case "object":
              return "{}";
          }
        },
        types: {
          isAsyncFunction(fn) {
            return fn instanceof AsyncFunction;
          },
          isArrayBufferView(arr) {
            return ArrayBuffer.isView(arr);
          },
        },
        isBlob,
      };
      module.exports.promisify.custom = Symbol.for(
        "nodejs.util.promisify.custom"
      );
    },
  });

  // node_modules/event-target-shim/dist/event-target-shim.js
  var require_event_target_shim = __commonJS({
    "node_modules/event-target-shim/dist/event-target-shim.js"(
      exports,
      module
    ) {
      "use strict";
      init_process_shim();
      Object.defineProperty(exports, "__esModule", { value: true });
      var privateData = /* @__PURE__ */ new WeakMap();
      var wrappers = /* @__PURE__ */ new WeakMap();
      function pd(event) {
        const retv = privateData.get(event);
        console.assert(
          retv != null,
          "'this' is expected an Event object, but got",
          event
        );
        return retv;
      }
      function setCancelFlag(data) {
        if (data.passiveListener != null) {
          if (
            typeof console !== "undefined" &&
            typeof console.error === "function"
          ) {
            console.error(
              "Unable to preventDefault inside passive event listener invocation.",
              data.passiveListener
            );
          }
          return;
        }
        if (!data.event.cancelable) {
          return;
        }
        data.canceled = true;
        if (typeof data.event.preventDefault === "function") {
          data.event.preventDefault();
        }
      }
      function Event(eventTarget, event) {
        privateData.set(this, {
          eventTarget,
          event,
          eventPhase: 2,
          currentTarget: eventTarget,
          canceled: false,
          stopped: false,
          immediateStopped: false,
          passiveListener: null,
          timeStamp: event.timeStamp || Date.now(),
        });
        Object.defineProperty(this, "isTrusted", {
          value: false,
          enumerable: true,
        });
        const keys = Object.keys(event);
        for (let i = 0; i < keys.length; ++i) {
          const key = keys[i];
          if (!(key in this)) {
            Object.defineProperty(this, key, defineRedirectDescriptor(key));
          }
        }
      }
      Event.prototype = {
        get type() {
          return pd(this).event.type;
        },
        get target() {
          return pd(this).eventTarget;
        },
        get currentTarget() {
          return pd(this).currentTarget;
        },
        composedPath() {
          const currentTarget = pd(this).currentTarget;
          if (currentTarget == null) {
            return [];
          }
          return [currentTarget];
        },
        get NONE() {
          return 0;
        },
        get CAPTURING_PHASE() {
          return 1;
        },
        get AT_TARGET() {
          return 2;
        },
        get BUBBLING_PHASE() {
          return 3;
        },
        get eventPhase() {
          return pd(this).eventPhase;
        },
        stopPropagation() {
          const data = pd(this);
          data.stopped = true;
          if (typeof data.event.stopPropagation === "function") {
            data.event.stopPropagation();
          }
        },
        stopImmediatePropagation() {
          const data = pd(this);
          data.stopped = true;
          data.immediateStopped = true;
          if (typeof data.event.stopImmediatePropagation === "function") {
            data.event.stopImmediatePropagation();
          }
        },
        get bubbles() {
          return Boolean(pd(this).event.bubbles);
        },
        get cancelable() {
          return Boolean(pd(this).event.cancelable);
        },
        preventDefault() {
          setCancelFlag(pd(this));
        },
        get defaultPrevented() {
          return pd(this).canceled;
        },
        get composed() {
          return Boolean(pd(this).event.composed);
        },
        get timeStamp() {
          return pd(this).timeStamp;
        },
        get srcElement() {
          return pd(this).eventTarget;
        },
        get cancelBubble() {
          return pd(this).stopped;
        },
        set cancelBubble(value) {
          if (!value) {
            return;
          }
          const data = pd(this);
          data.stopped = true;
          if (typeof data.event.cancelBubble === "boolean") {
            data.event.cancelBubble = true;
          }
        },
        get returnValue() {
          return !pd(this).canceled;
        },
        set returnValue(value) {
          if (!value) {
            setCancelFlag(pd(this));
          }
        },
        initEvent() {},
      };
      Object.defineProperty(Event.prototype, "constructor", {
        value: Event,
        configurable: true,
        writable: true,
      });
      if (
        typeof window !== "undefined" &&
        typeof window.Event !== "undefined"
      ) {
        Object.setPrototypeOf(Event.prototype, window.Event.prototype);
        wrappers.set(window.Event.prototype, Event);
      }
      function defineRedirectDescriptor(key) {
        return {
          get() {
            return pd(this).event[key];
          },
          set(value) {
            pd(this).event[key] = value;
          },
          configurable: true,
          enumerable: true,
        };
      }
      function defineCallDescriptor(key) {
        return {
          value() {
            const event = pd(this).event;
            return event[key].apply(event, arguments);
          },
          configurable: true,
          enumerable: true,
        };
      }
      function defineWrapper(BaseEvent, proto) {
        const keys = Object.keys(proto);
        if (keys.length === 0) {
          return BaseEvent;
        }
        function CustomEvent(eventTarget, event) {
          BaseEvent.call(this, eventTarget, event);
        }
        CustomEvent.prototype = Object.create(BaseEvent.prototype, {
          constructor: {
            value: CustomEvent,
            configurable: true,
            writable: true,
          },
        });
        for (let i = 0; i < keys.length; ++i) {
          const key = keys[i];
          if (!(key in BaseEvent.prototype)) {
            const descriptor = Object.getOwnPropertyDescriptor(proto, key);
            const isFunc = typeof descriptor.value === "function";
            Object.defineProperty(
              CustomEvent.prototype,
              key,
              isFunc ? defineCallDescriptor(key) : defineRedirectDescriptor(key)
            );
          }
        }
        return CustomEvent;
      }
      function getWrapper(proto) {
        if (proto == null || proto === Object.prototype) {
          return Event;
        }
        let wrapper = wrappers.get(proto);
        if (wrapper == null) {
          wrapper = defineWrapper(
            getWrapper(Object.getPrototypeOf(proto)),
            proto
          );
          wrappers.set(proto, wrapper);
        }
        return wrapper;
      }
      function wrapEvent(eventTarget, event) {
        const Wrapper = getWrapper(Object.getPrototypeOf(event));
        return new Wrapper(eventTarget, event);
      }
      function isStopped(event) {
        return pd(event).immediateStopped;
      }
      function setEventPhase(event, eventPhase) {
        pd(event).eventPhase = eventPhase;
      }
      function setCurrentTarget(event, currentTarget) {
        pd(event).currentTarget = currentTarget;
      }
      function setPassiveListener(event, passiveListener) {
        pd(event).passiveListener = passiveListener;
      }
      var listenersMap = /* @__PURE__ */ new WeakMap();
      var CAPTURE = 1;
      var BUBBLE = 2;
      var ATTRIBUTE = 3;
      function isObject(x) {
        return x !== null && typeof x === "object";
      }
      function getListeners(eventTarget) {
        const listeners = listenersMap.get(eventTarget);
        if (listeners == null) {
          throw new TypeError(
            "'this' is expected an EventTarget object, but got another value."
          );
        }
        return listeners;
      }
      function defineEventAttributeDescriptor(eventName) {
        return {
          get() {
            const listeners = getListeners(this);
            let node = listeners.get(eventName);
            while (node != null) {
              if (node.listenerType === ATTRIBUTE) {
                return node.listener;
              }
              node = node.next;
            }
            return null;
          },
          set(listener) {
            if (typeof listener !== "function" && !isObject(listener)) {
              listener = null;
            }
            const listeners = getListeners(this);
            let prev = null;
            let node = listeners.get(eventName);
            while (node != null) {
              if (node.listenerType === ATTRIBUTE) {
                if (prev !== null) {
                  prev.next = node.next;
                } else if (node.next !== null) {
                  listeners.set(eventName, node.next);
                } else {
                  listeners.delete(eventName);
                }
              } else {
                prev = node;
              }
              node = node.next;
            }
            if (listener !== null) {
              const newNode = {
                listener,
                listenerType: ATTRIBUTE,
                passive: false,
                once: false,
                next: null,
              };
              if (prev === null) {
                listeners.set(eventName, newNode);
              } else {
                prev.next = newNode;
              }
            }
          },
          configurable: true,
          enumerable: true,
        };
      }
      function defineEventAttribute(eventTargetPrototype, eventName) {
        Object.defineProperty(
          eventTargetPrototype,
          `on${eventName}`,
          defineEventAttributeDescriptor(eventName)
        );
      }
      function defineCustomEventTarget(eventNames) {
        function CustomEventTarget() {
          EventTarget.call(this);
        }
        CustomEventTarget.prototype = Object.create(EventTarget.prototype, {
          constructor: {
            value: CustomEventTarget,
            configurable: true,
            writable: true,
          },
        });
        for (let i = 0; i < eventNames.length; ++i) {
          defineEventAttribute(CustomEventTarget.prototype, eventNames[i]);
        }
        return CustomEventTarget;
      }
      function EventTarget() {
        if (this instanceof EventTarget) {
          listenersMap.set(this, /* @__PURE__ */ new Map());
          return;
        }
        if (arguments.length === 1 && Array.isArray(arguments[0])) {
          return defineCustomEventTarget(arguments[0]);
        }
        if (arguments.length > 0) {
          const types = new Array(arguments.length);
          for (let i = 0; i < arguments.length; ++i) {
            types[i] = arguments[i];
          }
          return defineCustomEventTarget(types);
        }
        throw new TypeError("Cannot call a class as a function");
      }
      EventTarget.prototype = {
        addEventListener(eventName, listener, options) {
          if (listener == null) {
            return;
          }
          if (typeof listener !== "function" && !isObject(listener)) {
            throw new TypeError(
              "'listener' should be a function or an object."
            );
          }
          const listeners = getListeners(this);
          const optionsIsObj = isObject(options);
          const capture = optionsIsObj
            ? Boolean(options.capture)
            : Boolean(options);
          const listenerType = capture ? CAPTURE : BUBBLE;
          const newNode = {
            listener,
            listenerType,
            passive: optionsIsObj && Boolean(options.passive),
            once: optionsIsObj && Boolean(options.once),
            next: null,
          };
          let node = listeners.get(eventName);
          if (node === void 0) {
            listeners.set(eventName, newNode);
            return;
          }
          let prev = null;
          while (node != null) {
            if (
              node.listener === listener &&
              node.listenerType === listenerType
            ) {
              return;
            }
            prev = node;
            node = node.next;
          }
          prev.next = newNode;
        },
        removeEventListener(eventName, listener, options) {
          if (listener == null) {
            return;
          }
          const listeners = getListeners(this);
          const capture = isObject(options)
            ? Boolean(options.capture)
            : Boolean(options);
          const listenerType = capture ? CAPTURE : BUBBLE;
          let prev = null;
          let node = listeners.get(eventName);
          while (node != null) {
            if (
              node.listener === listener &&
              node.listenerType === listenerType
            ) {
              if (prev !== null) {
                prev.next = node.next;
              } else if (node.next !== null) {
                listeners.set(eventName, node.next);
              } else {
                listeners.delete(eventName);
              }
              return;
            }
            prev = node;
            node = node.next;
          }
        },
        dispatchEvent(event) {
          if (event == null || typeof event.type !== "string") {
            throw new TypeError('"event.type" should be a string.');
          }
          const listeners = getListeners(this);
          const eventName = event.type;
          let node = listeners.get(eventName);
          if (node == null) {
            return true;
          }
          const wrappedEvent = wrapEvent(this, event);
          let prev = null;
          while (node != null) {
            if (node.once) {
              if (prev !== null) {
                prev.next = node.next;
              } else if (node.next !== null) {
                listeners.set(eventName, node.next);
              } else {
                listeners.delete(eventName);
              }
            } else {
              prev = node;
            }
            setPassiveListener(
              wrappedEvent,
              node.passive ? node.listener : null
            );
            if (typeof node.listener === "function") {
              try {
                node.listener.call(this, wrappedEvent);
              } catch (err) {
                if (
                  typeof console !== "undefined" &&
                  typeof console.error === "function"
                ) {
                  console.error(err);
                }
              }
            } else if (
              node.listenerType !== ATTRIBUTE &&
              typeof node.listener.handleEvent === "function"
            ) {
              node.listener.handleEvent(wrappedEvent);
            }
            if (isStopped(wrappedEvent)) {
              break;
            }
            node = node.next;
          }
          setPassiveListener(wrappedEvent, null);
          setEventPhase(wrappedEvent, 0);
          setCurrentTarget(wrappedEvent, null);
          return !wrappedEvent.defaultPrevented;
        },
      };
      Object.defineProperty(EventTarget.prototype, "constructor", {
        value: EventTarget,
        configurable: true,
        writable: true,
      });
      if (
        typeof window !== "undefined" &&
        typeof window.EventTarget !== "undefined"
      ) {
        Object.setPrototypeOf(
          EventTarget.prototype,
          window.EventTarget.prototype
        );
      }
      exports.defineEventAttribute = defineEventAttribute;
      exports.EventTarget = EventTarget;
      exports.default = EventTarget;
      module.exports = EventTarget;
      module.exports.EventTarget = module.exports["default"] = EventTarget;
      module.exports.defineEventAttribute = defineEventAttribute;
    },
  });

  // node_modules/abort-controller/dist/abort-controller.js
  var require_abort_controller = __commonJS({
    "node_modules/abort-controller/dist/abort-controller.js"(exports, module) {
      "use strict";
      init_process_shim();
      Object.defineProperty(exports, "__esModule", { value: true });
      var eventTargetShim = require_event_target_shim();
      var AbortSignal = class extends eventTargetShim.EventTarget {
        constructor() {
          super();
          throw new TypeError("AbortSignal cannot be constructed directly");
        }
        get aborted() {
          const aborted = abortedFlags.get(this);
          if (typeof aborted !== "boolean") {
            throw new TypeError(
              `Expected 'this' to be an 'AbortSignal' object, but got ${
                this === null ? "null" : typeof this
              }`
            );
          }
          return aborted;
        }
      };
      eventTargetShim.defineEventAttribute(AbortSignal.prototype, "abort");
      function createAbortSignal() {
        const signal = Object.create(AbortSignal.prototype);
        eventTargetShim.EventTarget.call(signal);
        abortedFlags.set(signal, false);
        return signal;
      }
      function abortSignal(signal) {
        if (abortedFlags.get(signal) !== false) {
          return;
        }
        abortedFlags.set(signal, true);
        signal.dispatchEvent({ type: "abort" });
      }
      var abortedFlags = /* @__PURE__ */ new WeakMap();
      Object.defineProperties(AbortSignal.prototype, {
        aborted: { enumerable: true },
      });
      if (
        typeof Symbol === "function" &&
        typeof Symbol.toStringTag === "symbol"
      ) {
        Object.defineProperty(AbortSignal.prototype, Symbol.toStringTag, {
          configurable: true,
          value: "AbortSignal",
        });
      }
      var AbortController = class {
        constructor() {
          signals.set(this, createAbortSignal());
        }
        get signal() {
          return getSignal(this);
        }
        abort() {
          abortSignal(getSignal(this));
        }
      };
      var signals = /* @__PURE__ */ new WeakMap();
      function getSignal(controller) {
        const signal = signals.get(controller);
        if (signal == null) {
          throw new TypeError(
            `Expected 'this' to be an 'AbortController' object, but got ${
              controller === null ? "null" : typeof controller
            }`
          );
        }
        return signal;
      }
      Object.defineProperties(AbortController.prototype, {
        signal: { enumerable: true },
        abort: { enumerable: true },
      });
      if (
        typeof Symbol === "function" &&
        typeof Symbol.toStringTag === "symbol"
      ) {
        Object.defineProperty(AbortController.prototype, Symbol.toStringTag, {
          configurable: true,
          value: "AbortController",
        });
      }
      exports.AbortController = AbortController;
      exports.AbortSignal = AbortSignal;
      exports.default = AbortController;
      module.exports = AbortController;
      module.exports.AbortController = module.exports["default"] =
        AbortController;
      module.exports.AbortSignal = AbortSignal;
    },
  });

  // node_modules/readable-stream/lib/ours/errors.js
  var require_errors = __commonJS({
    "node_modules/readable-stream/lib/ours/errors.js"(exports, module) {
      "use strict";
      init_process_shim();
      var {
        format,
        inspect,
        AggregateError: CustomAggregateError,
      } = require_util();
      var AggregateError = globalThis.AggregateError || CustomAggregateError;
      var kIsNodeError = Symbol("kIsNodeError");
      var kTypes = [
        "string",
        "function",
        "number",
        "object",
        "Function",
        "Object",
        "boolean",
        "bigint",
        "symbol",
      ];
      var classRegExp = /^([A-Z][a-z0-9]*)+$/;
      var nodeInternalPrefix = "__node_internal_";
      var codes = {};
      function assert(value, message) {
        if (!value) {
          throw new codes.ERR_INTERNAL_ASSERTION(message);
        }
      }
      function addNumericalSeparator(val) {
        let res = "";
        let i = val.length;
        const start = val[0] === "-" ? 1 : 0;
        for (; i >= start + 4; i -= 3) {
          res = `_${val.slice(i - 3, i)}${res}`;
        }
        return `${val.slice(0, i)}${res}`;
      }
      function getMessage(key, msg, args) {
        if (typeof msg === "function") {
          assert(
            msg.length <= args.length,
            `Code: ${key}; The provided arguments length (${args.length}) does not match the required ones (${msg.length}).`
          );
          return msg(...args);
        }
        const expectedLength = (msg.match(/%[dfijoOs]/g) || []).length;
        assert(
          expectedLength === args.length,
          `Code: ${key}; The provided arguments length (${args.length}) does not match the required ones (${expectedLength}).`
        );
        if (args.length === 0) {
          return msg;
        }
        return format(msg, ...args);
      }
      function E(code, message, Base) {
        if (!Base) {
          Base = Error;
        }
        class NodeError extends Base {
          constructor(...args) {
            super(getMessage(code, message, args));
          }
          toString() {
            return `${this.name} [${code}]: ${this.message}`;
          }
        }
        NodeError.prototype.name = Base.name;
        NodeError.prototype.code = code;
        NodeError.prototype[kIsNodeError] = true;
        NodeError.prototype.toString = function () {
          return `${this.name} [${code}]: ${this.message}`;
        };
        codes[code] = NodeError;
      }
      function hideStackFrames(fn) {
        const hidden = nodeInternalPrefix + fn.name;
        Object.defineProperty(fn, "name", {
          value: hidden,
        });
        return fn;
      }
      function aggregateTwoErrors(innerError, outerError) {
        if (innerError && outerError && innerError !== outerError) {
          if (Array.isArray(outerError.errors)) {
            outerError.errors.push(innerError);
            return outerError;
          }
          const err = new AggregateError(
            [outerError, innerError],
            outerError.message
          );
          err.code = outerError.code;
          return err;
        }
        return innerError || outerError;
      }
      var AbortError = class extends Error {
        constructor(message = "The operation was aborted", options = void 0) {
          if (options !== void 0 && typeof options !== "object") {
            throw new codes.ERR_INVALID_ARG_TYPE("options", "Object", options);
          }
          super(message, options);
          this.code = "ABORT_ERR";
          this.name = "AbortError";
        }
      };
      E("ERR_ASSERTION", "%s", Error);
      E(
        "ERR_INVALID_ARG_TYPE",
        (name, expected, actual) => {
          assert(typeof name === "string", "'name' must be a string");
          if (!Array.isArray(expected)) {
            expected = [expected];
          }
          let msg = "The ";
          if (name.endsWith(" argument")) {
            msg += `${name} `;
          } else {
            msg += `"${name}" ${name.includes(".") ? "property" : "argument"} `;
          }
          msg += "must be ";
          const types = [];
          const instances = [];
          const other = [];
          for (const value of expected) {
            assert(
              typeof value === "string",
              "All expected entries have to be of type string"
            );
            if (kTypes.includes(value)) {
              types.push(value.toLowerCase());
            } else if (classRegExp.test(value)) {
              instances.push(value);
            } else {
              assert(
                value !== "object",
                'The value "object" should be written as "Object"'
              );
              other.push(value);
            }
          }
          if (instances.length > 0) {
            const pos = types.indexOf("object");
            if (pos !== -1) {
              types.splice(types, pos, 1);
              instances.push("Object");
            }
          }
          if (types.length > 0) {
            switch (types.length) {
              case 1:
                msg += `of type ${types[0]}`;
                break;
              case 2:
                msg += `one of type ${types[0]} or ${types[1]}`;
                break;
              default: {
                const last = types.pop();
                msg += `one of type ${types.join(", ")}, or ${last}`;
              }
            }
            if (instances.length > 0 || other.length > 0) {
              msg += " or ";
            }
          }
          if (instances.length > 0) {
            switch (instances.length) {
              case 1:
                msg += `an instance of ${instances[0]}`;
                break;
              case 2:
                msg += `an instance of ${instances[0]} or ${instances[1]}`;
                break;
              default: {
                const last = instances.pop();
                msg += `an instance of ${instances.join(", ")}, or ${last}`;
              }
            }
            if (other.length > 0) {
              msg += " or ";
            }
          }
          switch (other.length) {
            case 0:
              break;
            case 1:
              if (other[0].toLowerCase() !== other[0]) {
                msg += "an ";
              }
              msg += `${other[0]}`;
              break;
            case 2:
              msg += `one of ${other[0]} or ${other[1]}`;
              break;
            default: {
              const last = other.pop();
              msg += `one of ${other.join(", ")}, or ${last}`;
            }
          }
          if (actual == null) {
            msg += `. Received ${actual}`;
          } else if (typeof actual === "function" && actual.name) {
            msg += `. Received function ${actual.name}`;
          } else if (typeof actual === "object") {
            var _actual$constructor;
            if (
              (_actual$constructor = actual.constructor) !== null &&
              _actual$constructor !== void 0 &&
              _actual$constructor.name
            ) {
              msg += `. Received an instance of ${actual.constructor.name}`;
            } else {
              const inspected = inspect(actual, {
                depth: -1,
              });
              msg += `. Received ${inspected}`;
            }
          } else {
            let inspected = inspect(actual, {
              colors: false,
            });
            if (inspected.length > 25) {
              inspected = `${inspected.slice(0, 25)}...`;
            }
            msg += `. Received type ${typeof actual} (${inspected})`;
          }
          return msg;
        },
        TypeError
      );
      E(
        "ERR_INVALID_ARG_VALUE",
        (name, value, reason = "is invalid") => {
          let inspected = inspect(value);
          if (inspected.length > 128) {
            inspected = inspected.slice(0, 128) + "...";
          }
          const type = name.includes(".") ? "property" : "argument";
          return `The ${type} '${name}' ${reason}. Received ${inspected}`;
        },
        TypeError
      );
      E(
        "ERR_INVALID_RETURN_VALUE",
        (input, name, value) => {
          var _value$constructor;
          const type =
            value !== null &&
            value !== void 0 &&
            (_value$constructor = value.constructor) !== null &&
            _value$constructor !== void 0 &&
            _value$constructor.name
              ? `instance of ${value.constructor.name}`
              : `type ${typeof value}`;
          return `Expected ${input} to be returned from the "${name}" function but got ${type}.`;
        },
        TypeError
      );
      E(
        "ERR_MISSING_ARGS",
        (...args) => {
          assert(args.length > 0, "At least one arg needs to be specified");
          let msg;
          const len = args.length;
          args = (Array.isArray(args) ? args : [args])
            .map((a) => `"${a}"`)
            .join(" or ");
          switch (len) {
            case 1:
              msg += `The ${args[0]} argument`;
              break;
            case 2:
              msg += `The ${args[0]} and ${args[1]} arguments`;
              break;
            default:
              {
                const last = args.pop();
                msg += `The ${args.join(", ")}, and ${last} arguments`;
              }
              break;
          }
          return `${msg} must be specified`;
        },
        TypeError
      );
      E(
        "ERR_OUT_OF_RANGE",
        (str, range, input) => {
          assert(range, 'Missing "range" argument');
          let received;
          if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {
            received = addNumericalSeparator(String(input));
          } else if (typeof input === "bigint") {
            received = String(input);
            if (input > 2n ** 32n || input < -(2n ** 32n)) {
              received = addNumericalSeparator(received);
            }
            received += "n";
          } else {
            received = inspect(input);
          }
          return `The value of "${str}" is out of range. It must be ${range}. Received ${received}`;
        },
        RangeError
      );
      E("ERR_MULTIPLE_CALLBACK", "Callback called multiple times", Error);
      E(
        "ERR_METHOD_NOT_IMPLEMENTED",
        "The %s method is not implemented",
        Error
      );
      E(
        "ERR_STREAM_ALREADY_FINISHED",
        "Cannot call %s after a stream was finished",
        Error
      );
      E("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable", Error);
      E(
        "ERR_STREAM_DESTROYED",
        "Cannot call %s after a stream was destroyed",
        Error
      );
      E(
        "ERR_STREAM_NULL_VALUES",
        "May not write null values to stream",
        TypeError
      );
      E("ERR_STREAM_PREMATURE_CLOSE", "Premature close", Error);
      E("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF", Error);
      E(
        "ERR_STREAM_UNSHIFT_AFTER_END_EVENT",
        "stream.unshift() after end event",
        Error
      );
      E("ERR_STREAM_WRITE_AFTER_END", "write after end", Error);
      E("ERR_UNKNOWN_ENCODING", "Unknown encoding: %s", TypeError);
      module.exports = {
        AbortError,
        aggregateTwoErrors: hideStackFrames(aggregateTwoErrors),
        hideStackFrames,
        codes,
      };
    },
  });

  // node_modules/readable-stream/lib/internal/validators.js
  var require_validators = __commonJS({
    "node_modules/readable-stream/lib/internal/validators.js"(exports, module) {
      "use strict";
      init_process_shim();
      var {
        ArrayIsArray,
        ArrayPrototypeIncludes,
        ArrayPrototypeJoin,
        ArrayPrototypeMap,
        NumberIsInteger,
        NumberMAX_SAFE_INTEGER,
        NumberMIN_SAFE_INTEGER,
        NumberParseInt,
        RegExpPrototypeTest,
        String: String2,
        StringPrototypeToUpperCase,
        StringPrototypeTrim,
      } = require_primordials();
      var {
        hideStackFrames,
        codes: {
          ERR_SOCKET_BAD_PORT,
          ERR_INVALID_ARG_TYPE,
          ERR_INVALID_ARG_VALUE,
          ERR_OUT_OF_RANGE,
          ERR_UNKNOWN_SIGNAL,
        },
      } = require_errors();
      var { normalizeEncoding } = require_util();
      var { isAsyncFunction, isArrayBufferView } = require_util().types;
      var signals = {};
      function isInt32(value) {
        return value === (value | 0);
      }
      function isUint32(value) {
        return value === value >>> 0;
      }
      var octalReg = /^[0-7]+$/;
      var modeDesc = "must be a 32-bit unsigned integer or an octal string";
      function parseFileMode(value, name, def) {
        if (typeof value === "undefined") {
          value = def;
        }
        if (typeof value === "string") {
          if (!RegExpPrototypeTest(octalReg, value)) {
            throw new ERR_INVALID_ARG_VALUE(name, value, modeDesc);
          }
          value = NumberParseInt(value, 8);
        }
        validateInt32(value, name, 0, 2 ** 32 - 1);
        return value;
      }
      var validateInteger = hideStackFrames(
        (
          value,
          name,
          min = NumberMIN_SAFE_INTEGER,
          max = NumberMAX_SAFE_INTEGER
        ) => {
          if (typeof value !== "number")
            throw new ERR_INVALID_ARG_TYPE(name, "number", value);
          if (!NumberIsInteger(value))
            throw new ERR_OUT_OF_RANGE(name, "an integer", value);
          if (value < min || value > max)
            throw new ERR_OUT_OF_RANGE(name, `>= ${min} && <= ${max}`, value);
        }
      );
      var validateInt32 = hideStackFrames(
        (value, name, min = -2147483648, max = 2147483647) => {
          if (typeof value !== "number") {
            throw new ERR_INVALID_ARG_TYPE(name, "number", value);
          }
          if (!isInt32(value)) {
            if (!NumberIsInteger(value)) {
              throw new ERR_OUT_OF_RANGE(name, "an integer", value);
            }
            throw new ERR_OUT_OF_RANGE(name, `>= ${min} && <= ${max}`, value);
          }
          if (value < min || value > max) {
            throw new ERR_OUT_OF_RANGE(name, `>= ${min} && <= ${max}`, value);
          }
        }
      );
      var validateUint32 = hideStackFrames((value, name, positive) => {
        if (typeof value !== "number") {
          throw new ERR_INVALID_ARG_TYPE(name, "number", value);
        }
        if (!isUint32(value)) {
          if (!NumberIsInteger(value)) {
            throw new ERR_OUT_OF_RANGE(name, "an integer", value);
          }
          const min = positive ? 1 : 0;
          throw new ERR_OUT_OF_RANGE(name, `>= ${min} && < 4294967296`, value);
        }
        if (positive && value === 0) {
          throw new ERR_OUT_OF_RANGE(name, ">= 1 && < 4294967296", value);
        }
      });
      function validateString(value, name) {
        if (typeof value !== "string")
          throw new ERR_INVALID_ARG_TYPE(name, "string", value);
      }
      function validateNumber(value, name) {
        if (typeof value !== "number")
          throw new ERR_INVALID_ARG_TYPE(name, "number", value);
      }
      var validateOneOf = hideStackFrames((value, name, oneOf) => {
        if (!ArrayPrototypeIncludes(oneOf, value)) {
          const allowed = ArrayPrototypeJoin(
            ArrayPrototypeMap(oneOf, (v) =>
              typeof v === "string" ? `'${v}'` : String2(v)
            ),
            ", "
          );
          const reason = "must be one of: " + allowed;
          throw new ERR_INVALID_ARG_VALUE(name, value, reason);
        }
      });
      function validateBoolean(value, name) {
        if (typeof value !== "boolean")
          throw new ERR_INVALID_ARG_TYPE(name, "boolean", value);
      }
      var validateObject = hideStackFrames((value, name, options) => {
        const useDefaultOptions = options == null;
        const allowArray = useDefaultOptions ? false : options.allowArray;
        const allowFunction = useDefaultOptions ? false : options.allowFunction;
        const nullable = useDefaultOptions ? false : options.nullable;
        if (
          (!nullable && value === null) ||
          (!allowArray && ArrayIsArray(value)) ||
          (typeof value !== "object" &&
            (!allowFunction || typeof value !== "function"))
        ) {
          throw new ERR_INVALID_ARG_TYPE(name, "Object", value);
        }
      });
      var validateArray = hideStackFrames((value, name, minLength = 0) => {
        if (!ArrayIsArray(value)) {
          throw new ERR_INVALID_ARG_TYPE(name, "Array", value);
        }
        if (value.length < minLength) {
          const reason = `must be longer than ${minLength}`;
          throw new ERR_INVALID_ARG_VALUE(name, value, reason);
        }
      });
      function validateSignalName(signal, name = "signal") {
        validateString(signal, name);
        if (signals[signal] === void 0) {
          if (signals[StringPrototypeToUpperCase(signal)] !== void 0) {
            throw new ERR_UNKNOWN_SIGNAL(
              signal + " (signals must use all capital letters)"
            );
          }
          throw new ERR_UNKNOWN_SIGNAL(signal);
        }
      }
      var validateBuffer = hideStackFrames((buffer, name = "buffer") => {
        if (!isArrayBufferView(buffer)) {
          throw new ERR_INVALID_ARG_TYPE(
            name,
            ["Buffer", "TypedArray", "DataView"],
            buffer
          );
        }
      });
      function validateEncoding(data, encoding) {
        const normalizedEncoding = normalizeEncoding(encoding);
        const length = data.length;
        if (normalizedEncoding === "hex" && length % 2 !== 0) {
          throw new ERR_INVALID_ARG_VALUE(
            "encoding",
            encoding,
            `is invalid for data of length ${length}`
          );
        }
      }
      function validatePort(port, name = "Port", allowZero = true) {
        if (
          (typeof port !== "number" && typeof port !== "string") ||
          (typeof port === "string" &&
            StringPrototypeTrim(port).length === 0) ||
          +port !== +port >>> 0 ||
          port > 65535 ||
          (port === 0 && !allowZero)
        ) {
          throw new ERR_SOCKET_BAD_PORT(name, port, allowZero);
        }
        return port | 0;
      }
      var validateAbortSignal = hideStackFrames((signal, name) => {
        if (
          signal !== void 0 &&
          (signal === null ||
            typeof signal !== "object" ||
            !("aborted" in signal))
        ) {
          throw new ERR_INVALID_ARG_TYPE(name, "AbortSignal", signal);
        }
      });
      var validateFunction = hideStackFrames((value, name) => {
        if (typeof value !== "function")
          throw new ERR_INVALID_ARG_TYPE(name, "Function", value);
      });
      var validatePlainFunction = hideStackFrames((value, name) => {
        if (typeof value !== "function" || isAsyncFunction(value))
          throw new ERR_INVALID_ARG_TYPE(name, "Function", value);
      });
      var validateUndefined = hideStackFrames((value, name) => {
        if (value !== void 0)
          throw new ERR_INVALID_ARG_TYPE(name, "undefined", value);
      });
      module.exports = {
        isInt32,
        isUint32,
        parseFileMode,
        validateArray,
        validateBoolean,
        validateBuffer,
        validateEncoding,
        validateFunction,
        validateInt32,
        validateInteger,
        validateNumber,
        validateObject,
        validateOneOf,
        validatePlainFunction,
        validatePort,
        validateSignalName,
        validateString,
        validateUint32,
        validateUndefined,
        validateAbortSignal,
      };
    },
  });

  // node_modules/readable-stream/lib/internal/streams/utils.js
  var require_utils = __commonJS({
    "node_modules/readable-stream/lib/internal/streams/utils.js"(
      exports,
      module
    ) {
      "use strict";
      init_process_shim();
      var {
        Symbol: Symbol2,
        SymbolAsyncIterator,
        SymbolIterator,
      } = require_primordials();
      var kDestroyed = Symbol2("kDestroyed");
      var kIsErrored = Symbol2("kIsErrored");
      var kIsReadable = Symbol2("kIsReadable");
      var kIsDisturbed = Symbol2("kIsDisturbed");
      function isReadableNodeStream(obj, strict = false) {
        var _obj$_readableState;
        return !!(
          obj &&
          typeof obj.pipe === "function" &&
          typeof obj.on === "function" &&
          (!strict ||
            (typeof obj.pause === "function" &&
              typeof obj.resume === "function")) &&
          (!obj._writableState ||
            ((_obj$_readableState = obj._readableState) === null ||
            _obj$_readableState === void 0
              ? void 0
              : _obj$_readableState.readable) !== false) &&
          (!obj._writableState || obj._readableState)
        );
      }
      function isWritableNodeStream(obj) {
        var _obj$_writableState;
        return !!(
          obj &&
          typeof obj.write === "function" &&
          typeof obj.on === "function" &&
          (!obj._readableState ||
            ((_obj$_writableState = obj._writableState) === null ||
            _obj$_writableState === void 0
              ? void 0
              : _obj$_writableState.writable) !== false)
        );
      }
      function isDuplexNodeStream(obj) {
        return !!(
          obj &&
          typeof obj.pipe === "function" &&
          obj._readableState &&
          typeof obj.on === "function" &&
          typeof obj.write === "function"
        );
      }
      function isNodeStream(obj) {
        return (
          obj &&
          (obj._readableState ||
            obj._writableState ||
            (typeof obj.write === "function" && typeof obj.on === "function") ||
            (typeof obj.pipe === "function" && typeof obj.on === "function"))
        );
      }
      function isIterable(obj, isAsync) {
        if (obj == null) return false;
        if (isAsync === true)
          return typeof obj[SymbolAsyncIterator] === "function";
        if (isAsync === false) return typeof obj[SymbolIterator] === "function";
        return (
          typeof obj[SymbolAsyncIterator] === "function" ||
          typeof obj[SymbolIterator] === "function"
        );
      }
      function isDestroyed(stream) {
        if (!isNodeStream(stream)) return null;
        const wState = stream._writableState;
        const rState = stream._readableState;
        const state = wState || rState;
        return !!(
          stream.destroyed ||
          stream[kDestroyed] ||
          (state !== null && state !== void 0 && state.destroyed)
        );
      }
      function isWritableEnded(stream) {
        if (!isWritableNodeStream(stream)) return null;
        if (stream.writableEnded === true) return true;
        const wState = stream._writableState;
        if (wState !== null && wState !== void 0 && wState.errored)
          return false;
        if (
          typeof (wState === null || wState === void 0
            ? void 0
            : wState.ended) !== "boolean"
        )
          return null;
        return wState.ended;
      }
      function isWritableFinished(stream, strict) {
        if (!isWritableNodeStream(stream)) return null;
        if (stream.writableFinished === true) return true;
        const wState = stream._writableState;
        if (wState !== null && wState !== void 0 && wState.errored)
          return false;
        if (
          typeof (wState === null || wState === void 0
            ? void 0
            : wState.finished) !== "boolean"
        )
          return null;
        return !!(
          wState.finished ||
          (strict === false && wState.ended === true && wState.length === 0)
        );
      }
      function isReadableEnded(stream) {
        if (!isReadableNodeStream(stream)) return null;
        if (stream.readableEnded === true) return true;
        const rState = stream._readableState;
        if (!rState || rState.errored) return false;
        if (
          typeof (rState === null || rState === void 0
            ? void 0
            : rState.ended) !== "boolean"
        )
          return null;
        return rState.ended;
      }
      function isReadableFinished(stream, strict) {
        if (!isReadableNodeStream(stream)) return null;
        const rState = stream._readableState;
        if (rState !== null && rState !== void 0 && rState.errored)
          return false;
        if (
          typeof (rState === null || rState === void 0
            ? void 0
            : rState.endEmitted) !== "boolean"
        )
          return null;
        return !!(
          rState.endEmitted ||
          (strict === false && rState.ended === true && rState.length === 0)
        );
      }
      function isReadable(stream) {
        if (stream && stream[kIsReadable] != null) return stream[kIsReadable];
        if (
          typeof (stream === null || stream === void 0
            ? void 0
            : stream.readable) !== "boolean"
        )
          return null;
        if (isDestroyed(stream)) return false;
        return (
          isReadableNodeStream(stream) &&
          stream.readable &&
          !isReadableFinished(stream)
        );
      }
      function isWritable(stream) {
        if (
          typeof (stream === null || stream === void 0
            ? void 0
            : stream.writable) !== "boolean"
        )
          return null;
        if (isDestroyed(stream)) return false;
        return (
          isWritableNodeStream(stream) &&
          stream.writable &&
          !isWritableEnded(stream)
        );
      }
      function isFinished(stream, opts) {
        if (!isNodeStream(stream)) {
          return null;
        }
        if (isDestroyed(stream)) {
          return true;
        }
        if (
          (opts === null || opts === void 0 ? void 0 : opts.readable) !==
            false &&
          isReadable(stream)
        ) {
          return false;
        }
        if (
          (opts === null || opts === void 0 ? void 0 : opts.writable) !==
            false &&
          isWritable(stream)
        ) {
          return false;
        }
        return true;
      }
      function isWritableErrored(stream) {
        var _stream$_writableStat, _stream$_writableStat2;
        if (!isNodeStream(stream)) {
          return null;
        }
        if (stream.writableErrored) {
          return stream.writableErrored;
        }
        return (_stream$_writableStat =
          (_stream$_writableStat2 = stream._writableState) === null ||
          _stream$_writableStat2 === void 0
            ? void 0
            : _stream$_writableStat2.errored) !== null &&
          _stream$_writableStat !== void 0
          ? _stream$_writableStat
          : null;
      }
      function isReadableErrored(stream) {
        var _stream$_readableStat, _stream$_readableStat2;
        if (!isNodeStream(stream)) {
          return null;
        }
        if (stream.readableErrored) {
          return stream.readableErrored;
        }
        return (_stream$_readableStat =
          (_stream$_readableStat2 = stream._readableState) === null ||
          _stream$_readableStat2 === void 0
            ? void 0
            : _stream$_readableStat2.errored) !== null &&
          _stream$_readableStat !== void 0
          ? _stream$_readableStat
          : null;
      }
      function isClosed(stream) {
        if (!isNodeStream(stream)) {
          return null;
        }
        if (typeof stream.closed === "boolean") {
          return stream.closed;
        }
        const wState = stream._writableState;
        const rState = stream._readableState;
        if (
          typeof (wState === null || wState === void 0
            ? void 0
            : wState.closed) === "boolean" ||
          typeof (rState === null || rState === void 0
            ? void 0
            : rState.closed) === "boolean"
        ) {
          return (
            (wState === null || wState === void 0 ? void 0 : wState.closed) ||
            (rState === null || rState === void 0 ? void 0 : rState.closed)
          );
        }
        if (typeof stream._closed === "boolean" && isOutgoingMessage(stream)) {
          return stream._closed;
        }
        return null;
      }
      function isOutgoingMessage(stream) {
        return (
          typeof stream._closed === "boolean" &&
          typeof stream._defaultKeepAlive === "boolean" &&
          typeof stream._removedConnection === "boolean" &&
          typeof stream._removedContLen === "boolean"
        );
      }
      function isServerResponse(stream) {
        return (
          typeof stream._sent100 === "boolean" && isOutgoingMessage(stream)
        );
      }
      function isServerRequest(stream) {
        var _stream$req;
        return (
          typeof stream._consuming === "boolean" &&
          typeof stream._dumped === "boolean" &&
          ((_stream$req = stream.req) === null || _stream$req === void 0
            ? void 0
            : _stream$req.upgradeOrConnect) === void 0
        );
      }
      function willEmitClose(stream) {
        if (!isNodeStream(stream)) return null;
        const wState = stream._writableState;
        const rState = stream._readableState;
        const state = wState || rState;
        return (
          (!state && isServerResponse(stream)) ||
          !!(
            state &&
            state.autoDestroy &&
            state.emitClose &&
            state.closed === false
          )
        );
      }
      function isDisturbed(stream) {
        var _stream$kIsDisturbed;
        return !!(
          stream &&
          ((_stream$kIsDisturbed = stream[kIsDisturbed]) !== null &&
          _stream$kIsDisturbed !== void 0
            ? _stream$kIsDisturbed
            : stream.readableDidRead || stream.readableAborted)
        );
      }
      function isErrored(stream) {
        var _ref,
          _ref2,
          _ref3,
          _ref4,
          _ref5,
          _stream$kIsErrored,
          _stream$_readableStat3,
          _stream$_writableStat3,
          _stream$_readableStat4,
          _stream$_writableStat4;
        return !!(
          stream &&
          ((_ref =
            (_ref2 =
              (_ref3 =
                (_ref4 =
                  (_ref5 =
                    (_stream$kIsErrored = stream[kIsErrored]) !== null &&
                    _stream$kIsErrored !== void 0
                      ? _stream$kIsErrored
                      : stream.readableErrored) !== null && _ref5 !== void 0
                    ? _ref5
                    : stream.writableErrored) !== null && _ref4 !== void 0
                  ? _ref4
                  : (_stream$_readableStat3 = stream._readableState) === null ||
                    _stream$_readableStat3 === void 0
                  ? void 0
                  : _stream$_readableStat3.errorEmitted) !== null &&
              _ref3 !== void 0
                ? _ref3
                : (_stream$_writableStat3 = stream._writableState) === null ||
                  _stream$_writableStat3 === void 0
                ? void 0
                : _stream$_writableStat3.errorEmitted) !== null &&
            _ref2 !== void 0
              ? _ref2
              : (_stream$_readableStat4 = stream._readableState) === null ||
                _stream$_readableStat4 === void 0
              ? void 0
              : _stream$_readableStat4.errored) !== null && _ref !== void 0
            ? _ref
            : (_stream$_writableStat4 = stream._writableState) === null ||
              _stream$_writableStat4 === void 0
            ? void 0
            : _stream$_writableStat4.errored)
        );
      }
      module.exports = {
        kDestroyed,
        isDisturbed,
        kIsDisturbed,
        isErrored,
        kIsErrored,
        isReadable,
        kIsReadable,
        isClosed,
        isDestroyed,
        isDuplexNodeStream,
        isFinished,
        isIterable,
        isReadableNodeStream,
        isReadableEnded,
        isReadableFinished,
        isReadableErrored,
        isNodeStream,
        isWritable,
        isWritableNodeStream,
        isWritableEnded,
        isWritableFinished,
        isWritableErrored,
        isServerRequest,
        isServerResponse,
        willEmitClose,
      };
    },
  });

  // node_modules/readable-stream/lib/internal/streams/end-of-stream.js
  var require_end_of_stream = __commonJS({
    "node_modules/readable-stream/lib/internal/streams/end-of-stream.js"(
      exports,
      module
    ) {
      "use strict";
      init_process_shim();
      var { AbortError, codes } = require_errors();
      var { ERR_INVALID_ARG_TYPE, ERR_STREAM_PREMATURE_CLOSE } = codes;
      var { once } = require_util();
      var { validateAbortSignal, validateFunction, validateObject } =
        require_validators();
      var { Promise: Promise2 } = require_primordials();
      var {
        isClosed,
        isReadable,
        isReadableNodeStream,
        isReadableFinished,
        isReadableErrored,
        isWritable,
        isWritableNodeStream,
        isWritableFinished,
        isWritableErrored,
        isNodeStream,
        willEmitClose: _willEmitClose,
      } = require_utils();
      function isRequest(stream) {
        return stream.setHeader && typeof stream.abort === "function";
      }
      var nop = () => {};
      function eos(stream, options, callback) {
        var _options$readable, _options$writable;
        if (arguments.length === 2) {
          callback = options;
          options = {};
        } else if (options == null) {
          options = {};
        } else {
          validateObject(options, "options");
        }
        validateFunction(callback, "callback");
        validateAbortSignal(options.signal, "options.signal");
        callback = once(callback);
        const readable =
          (_options$readable = options.readable) !== null &&
          _options$readable !== void 0
            ? _options$readable
            : isReadableNodeStream(stream);
        const writable =
          (_options$writable = options.writable) !== null &&
          _options$writable !== void 0
            ? _options$writable
            : isWritableNodeStream(stream);
        if (!isNodeStream(stream)) {
          throw new ERR_INVALID_ARG_TYPE("stream", "Stream", stream);
        }
        const wState = stream._writableState;
        const rState = stream._readableState;
        const onlegacyfinish = () => {
          if (!stream.writable) {
            onfinish();
          }
        };
        let willEmitClose =
          _willEmitClose(stream) &&
          isReadableNodeStream(stream) === readable &&
          isWritableNodeStream(stream) === writable;
        let writableFinished = isWritableFinished(stream, false);
        const onfinish = () => {
          writableFinished = true;
          if (stream.destroyed) {
            willEmitClose = false;
          }
          if (willEmitClose && (!stream.readable || readable)) {
            return;
          }
          if (!readable || readableFinished) {
            callback.call(stream);
          }
        };
        let readableFinished = isReadableFinished(stream, false);
        const onend = () => {
          readableFinished = true;
          if (stream.destroyed) {
            willEmitClose = false;
          }
          if (willEmitClose && (!stream.writable || writable)) {
            return;
          }
          if (!writable || writableFinished) {
            callback.call(stream);
          }
        };
        const onerror = (err) => {
          callback.call(stream, err);
        };
        let closed = isClosed(stream);
        const onclose = () => {
          closed = true;
          const errored =
            isWritableErrored(stream) || isReadableErrored(stream);
          if (errored && typeof errored !== "boolean") {
            return callback.call(stream, errored);
          }
          if (
            readable &&
            !readableFinished &&
            isReadableNodeStream(stream, true)
          ) {
            if (!isReadableFinished(stream, false))
              return callback.call(stream, new ERR_STREAM_PREMATURE_CLOSE());
          }
          if (writable && !writableFinished) {
            if (!isWritableFinished(stream, false))
              return callback.call(stream, new ERR_STREAM_PREMATURE_CLOSE());
          }
          callback.call(stream);
        };
        const onrequest = () => {
          stream.req.on("finish", onfinish);
        };
        if (isRequest(stream)) {
          stream.on("complete", onfinish);
          if (!willEmitClose) {
            stream.on("abort", onclose);
          }
          if (stream.req) {
            onrequest();
          } else {
            stream.on("request", onrequest);
          }
        } else if (writable && !wState) {
          stream.on("end", onlegacyfinish);
          stream.on("close", onlegacyfinish);
        }
        if (!willEmitClose && typeof stream.aborted === "boolean") {
          stream.on("aborted", onclose);
        }
        stream.on("end", onend);
        stream.on("finish", onfinish);
        if (options.error !== false) {
          stream.on("error", onerror);
        }
        stream.on("close", onclose);
        if (closed) {
          process.nextTick(onclose);
        } else if (
          (wState !== null && wState !== void 0 && wState.errorEmitted) ||
          (rState !== null && rState !== void 0 && rState.errorEmitted)
        ) {
          if (!willEmitClose) {
            process.nextTick(onclose);
          }
        } else if (
          !readable &&
          (!willEmitClose || isReadable(stream)) &&
          (writableFinished || isWritable(stream) === false)
        ) {
          process.nextTick(onclose);
        } else if (
          !writable &&
          (!willEmitClose || isWritable(stream)) &&
          (readableFinished || isReadable(stream) === false)
        ) {
          process.nextTick(onclose);
        } else if (rState && stream.req && stream.aborted) {
          process.nextTick(onclose);
        }
        const cleanup = () => {
          callback = nop;
          stream.removeListener("aborted", onclose);
          stream.removeListener("complete", onfinish);
          stream.removeListener("abort", onclose);
          stream.removeListener("request", onrequest);
          if (stream.req) stream.req.removeListener("finish", onfinish);
          stream.removeListener("end", onlegacyfinish);
          stream.removeListener("close", onlegacyfinish);
          stream.removeListener("finish", onfinish);
          stream.removeListener("end", onend);
          stream.removeListener("error", onerror);
          stream.removeListener("close", onclose);
        };
        if (options.signal && !closed) {
          const abort = () => {
            const endCallback = callback;
            cleanup();
            endCallback.call(
              stream,
              new AbortError(void 0, {
                cause: options.signal.reason,
              })
            );
          };
          if (options.signal.aborted) {
            process.nextTick(abort);
          } else {
            const originalCallback = callback;
            callback = once((...args) => {
              options.signal.removeEventListener("abort", abort);
              originalCallback.apply(stream, args);
            });
            options.signal.addEventListener("abort", abort);
          }
        }
        return cleanup;
      }
      function finished(stream, opts) {
        return new Promise2((resolve, reject) => {
          eos(stream, opts, (err) => {
            if (err) {
              reject(err);
            } else {
              resolve();
            }
          });
        });
      }
      module.exports = eos;
      module.exports.finished = finished;
    },
  });

  // node_modules/readable-stream/lib/internal/streams/operators.js
  var require_operators = __commonJS({
    "node_modules/readable-stream/lib/internal/streams/operators.js"(
      exports,
      module
    ) {
      "use strict";
      init_process_shim();
      var abortControllerModule = require_abort_controller();
      var AbortController =
        globalThis.AbortController || abortControllerModule.AbortController;
      var {
        codes: { ERR_INVALID_ARG_TYPE, ERR_MISSING_ARGS, ERR_OUT_OF_RANGE },
        AbortError,
      } = require_errors();
      var { validateAbortSignal, validateInteger, validateObject } =
        require_validators();
      var kWeakHandler = require_primordials().Symbol("kWeak");
      var { finished } = require_end_of_stream();
      var {
        ArrayPrototypePush,
        MathFloor,
        Number: Number2,
        NumberIsNaN,
        Promise: Promise2,
        PromiseReject,
        PromisePrototypeCatch,
        Symbol: Symbol2,
      } = require_primordials();
      var kEmpty = Symbol2("kEmpty");
      var kEof = Symbol2("kEof");
      function map(fn, options) {
        if (typeof fn !== "function") {
          throw new ERR_INVALID_ARG_TYPE(
            "fn",
            ["Function", "AsyncFunction"],
            fn
          );
        }
        if (options != null) {
          validateObject(options, "options");
        }
        if (
          (options === null || options === void 0 ? void 0 : options.signal) !=
          null
        ) {
          validateAbortSignal(options.signal, "options.signal");
        }
        let concurrency = 1;
        if (
          (options === null || options === void 0
            ? void 0
            : options.concurrency) != null
        ) {
          concurrency = MathFloor(options.concurrency);
        }
        validateInteger(concurrency, "concurrency", 1);
        return async function* map2() {
          var _options$signal, _options$signal2;
          const ac = new AbortController();
          const stream = this;
          const queue = [];
          const signal = ac.signal;
          const signalOpt = {
            signal,
          };
          const abort = () => ac.abort();
          if (
            options !== null &&
            options !== void 0 &&
            (_options$signal = options.signal) !== null &&
            _options$signal !== void 0 &&
            _options$signal.aborted
          ) {
            abort();
          }
          options === null || options === void 0
            ? void 0
            : (_options$signal2 = options.signal) === null ||
              _options$signal2 === void 0
            ? void 0
            : _options$signal2.addEventListener("abort", abort);
          let next;
          let resume;
          let done = false;
          function onDone() {
            done = true;
          }
          async function pump() {
            try {
              for await (let val of stream) {
                var _val;
                if (done) {
                  return;
                }
                if (signal.aborted) {
                  throw new AbortError();
                }
                try {
                  val = fn(val, signalOpt);
                } catch (err) {
                  val = PromiseReject(err);
                }
                if (val === kEmpty) {
                  continue;
                }
                if (
                  typeof ((_val = val) === null || _val === void 0
                    ? void 0
                    : _val.catch) === "function"
                ) {
                  val.catch(onDone);
                }
                queue.push(val);
                if (next) {
                  next();
                  next = null;
                }
                if (!done && queue.length && queue.length >= concurrency) {
                  await new Promise2((resolve) => {
                    resume = resolve;
                  });
                }
              }
              queue.push(kEof);
            } catch (err) {
              const val = PromiseReject(err);
              PromisePrototypeCatch(val, onDone);
              queue.push(val);
            } finally {
              var _options$signal3;
              done = true;
              if (next) {
                next();
                next = null;
              }
              options === null || options === void 0
                ? void 0
                : (_options$signal3 = options.signal) === null ||
                  _options$signal3 === void 0
                ? void 0
                : _options$signal3.removeEventListener("abort", abort);
            }
          }
          pump();
          try {
            while (true) {
              while (queue.length > 0) {
                const val = await queue[0];
                if (val === kEof) {
                  return;
                }
                if (signal.aborted) {
                  throw new AbortError();
                }
                if (val !== kEmpty) {
                  yield val;
                }
                queue.shift();
                if (resume) {
                  resume();
                  resume = null;
                }
              }
              await new Promise2((resolve) => {
                next = resolve;
              });
            }
          } finally {
            ac.abort();
            done = true;
            if (resume) {
              resume();
              resume = null;
            }
          }
        }.call(this);
      }
      function asIndexedPairs(options = void 0) {
        if (options != null) {
          validateObject(options, "options");
        }
        if (
          (options === null || options === void 0 ? void 0 : options.signal) !=
          null
        ) {
          validateAbortSignal(options.signal, "options.signal");
        }
        return async function* asIndexedPairs2() {
          let index = 0;
          for await (const val of this) {
            var _options$signal4;
            if (
              options !== null &&
              options !== void 0 &&
              (_options$signal4 = options.signal) !== null &&
              _options$signal4 !== void 0 &&
              _options$signal4.aborted
            ) {
              throw new AbortError({
                cause: options.signal.reason,
              });
            }
            yield [index++, val];
          }
        }.call(this);
      }
      async function some(fn, options = void 0) {
        for await (const unused of filter.call(this, fn, options)) {
          return true;
        }
        return false;
      }
      async function every(fn, options = void 0) {
        if (typeof fn !== "function") {
          throw new ERR_INVALID_ARG_TYPE(
            "fn",
            ["Function", "AsyncFunction"],
            fn
          );
        }
        return !(await some.call(
          this,
          async (...args) => {
            return !(await fn(...args));
          },
          options
        ));
      }
      async function find(fn, options) {
        for await (const result of filter.call(this, fn, options)) {
          return result;
        }
        return void 0;
      }
      async function forEach(fn, options) {
        if (typeof fn !== "function") {
          throw new ERR_INVALID_ARG_TYPE(
            "fn",
            ["Function", "AsyncFunction"],
            fn
          );
        }
        async function forEachFn(value, options2) {
          await fn(value, options2);
          return kEmpty;
        }
        for await (const unused of map.call(this, forEachFn, options));
      }
      function filter(fn, options) {
        if (typeof fn !== "function") {
          throw new ERR_INVALID_ARG_TYPE(
            "fn",
            ["Function", "AsyncFunction"],
            fn
          );
        }
        async function filterFn(value, options2) {
          if (await fn(value, options2)) {
            return value;
          }
          return kEmpty;
        }
        return map.call(this, filterFn, options);
      }
      var ReduceAwareErrMissingArgs = class extends ERR_MISSING_ARGS {
        constructor() {
          super("reduce");
          this.message = "Reduce of an empty stream requires an initial value";
        }
      };
      async function reduce(reducer, initialValue, options) {
        var _options$signal5;
        if (typeof reducer !== "function") {
          throw new ERR_INVALID_ARG_TYPE(
            "reducer",
            ["Function", "AsyncFunction"],
            reducer
          );
        }
        if (options != null) {
          validateObject(options, "options");
        }
        if (
          (options === null || options === void 0 ? void 0 : options.signal) !=
          null
        ) {
          validateAbortSignal(options.signal, "options.signal");
        }
        let hasInitialValue = arguments.length > 1;
        if (
          options !== null &&
          options !== void 0 &&
          (_options$signal5 = options.signal) !== null &&
          _options$signal5 !== void 0 &&
          _options$signal5.aborted
        ) {
          const err = new AbortError(void 0, {
            cause: options.signal.reason,
          });
          this.once("error", () => {});
          await finished(this.destroy(err));
          throw err;
        }
        const ac = new AbortController();
        const signal = ac.signal;
        if (options !== null && options !== void 0 && options.signal) {
          const opts = {
            once: true,
            [kWeakHandler]: this,
          };
          options.signal.addEventListener("abort", () => ac.abort(), opts);
        }
        let gotAnyItemFromStream = false;
        try {
          for await (const value of this) {
            var _options$signal6;
            gotAnyItemFromStream = true;
            if (
              options !== null &&
              options !== void 0 &&
              (_options$signal6 = options.signal) !== null &&
              _options$signal6 !== void 0 &&
              _options$signal6.aborted
            ) {
              throw new AbortError();
            }
            if (!hasInitialValue) {
              initialValue = value;
              hasInitialValue = true;
            } else {
              initialValue = await reducer(initialValue, value, {
                signal,
              });
            }
          }
          if (!gotAnyItemFromStream && !hasInitialValue) {
            throw new ReduceAwareErrMissingArgs();
          }
        } finally {
          ac.abort();
        }
        return initialValue;
      }
      async function toArray(options) {
        if (options != null) {
          validateObject(options, "options");
        }
        if (
          (options === null || options === void 0 ? void 0 : options.signal) !=
          null
        ) {
          validateAbortSignal(options.signal, "options.signal");
        }
        const result = [];
        for await (const val of this) {
          var _options$signal7;
          if (
            options !== null &&
            options !== void 0 &&
            (_options$signal7 = options.signal) !== null &&
            _options$signal7 !== void 0 &&
            _options$signal7.aborted
          ) {
            throw new AbortError(void 0, {
              cause: options.signal.reason,
            });
          }
          ArrayPrototypePush(result, val);
        }
        return result;
      }
      function flatMap(fn, options) {
        const values = map.call(this, fn, options);
        return async function* flatMap2() {
          for await (const val of values) {
            yield* val;
          }
        }.call(this);
      }
      function toIntegerOrInfinity(number) {
        number = Number2(number);
        if (NumberIsNaN(number)) {
          return 0;
        }
        if (number < 0) {
          throw new ERR_OUT_OF_RANGE("number", ">= 0", number);
        }
        return number;
      }
      function drop(number, options = void 0) {
        if (options != null) {
          validateObject(options, "options");
        }
        if (
          (options === null || options === void 0 ? void 0 : options.signal) !=
          null
        ) {
          validateAbortSignal(options.signal, "options.signal");
        }
        number = toIntegerOrInfinity(number);
        return async function* drop2() {
          var _options$signal8;
          if (
            options !== null &&
            options !== void 0 &&
            (_options$signal8 = options.signal) !== null &&
            _options$signal8 !== void 0 &&
            _options$signal8.aborted
          ) {
            throw new AbortError();
          }
          for await (const val of this) {
            var _options$signal9;
            if (
              options !== null &&
              options !== void 0 &&
              (_options$signal9 = options.signal) !== null &&
              _options$signal9 !== void 0 &&
              _options$signal9.aborted
            ) {
              throw new AbortError();
            }
            if (number-- <= 0) {
              yield val;
            }
          }
        }.call(this);
      }
      function take(number, options = void 0) {
        if (options != null) {
          validateObject(options, "options");
        }
        if (
          (options === null || options === void 0 ? void 0 : options.signal) !=
          null
        ) {
          validateAbortSignal(options.signal, "options.signal");
        }
        number = toIntegerOrInfinity(number);
        return async function* take2() {
          var _options$signal10;
          if (
            options !== null &&
            options !== void 0 &&
            (_options$signal10 = options.signal) !== null &&
            _options$signal10 !== void 0 &&
            _options$signal10.aborted
          ) {
            throw new AbortError();
          }
          for await (const val of this) {
            var _options$signal11;
            if (
              options !== null &&
              options !== void 0 &&
              (_options$signal11 = options.signal) !== null &&
              _options$signal11 !== void 0 &&
              _options$signal11.aborted
            ) {
              throw new AbortError();
            }
            if (number-- > 0) {
              yield val;
            } else {
              return;
            }
          }
        }.call(this);
      }
      module.exports.streamReturningOperators = {
        asIndexedPairs,
        drop,
        filter,
        flatMap,
        map,
        take,
      };
      module.exports.promiseReturningOperators = {
        every,
        forEach,
        reduce,
        toArray,
        some,
        find,
      };
    },
  });

  // node_modules/readable-stream/lib/internal/streams/destroy.js
  var require_destroy = __commonJS({
    "node_modules/readable-stream/lib/internal/streams/destroy.js"(
      exports,
      module
    ) {
      "use strict";
      init_process_shim();
      var {
        aggregateTwoErrors,
        codes: { ERR_MULTIPLE_CALLBACK },
        AbortError,
      } = require_errors();
      var { Symbol: Symbol2 } = require_primordials();
      var { kDestroyed, isDestroyed, isFinished, isServerRequest } =
        require_utils();
      var kDestroy = Symbol2("kDestroy");
      var kConstruct = Symbol2("kConstruct");
      function checkError(err, w, r) {
        if (err) {
          err.stack;
          if (w && !w.errored) {
            w.errored = err;
          }
          if (r && !r.errored) {
            r.errored = err;
          }
        }
      }
      function destroy(err, cb) {
        const r = this._readableState;
        const w = this._writableState;
        const s = w || r;
        if ((w && w.destroyed) || (r && r.destroyed)) {
          if (typeof cb === "function") {
            cb();
          }
          return this;
        }
        checkError(err, w, r);
        if (w) {
          w.destroyed = true;
        }
        if (r) {
          r.destroyed = true;
        }
        if (!s.constructed) {
          this.once(kDestroy, function (er) {
            _destroy(this, aggregateTwoErrors(er, err), cb);
          });
        } else {
          _destroy(this, err, cb);
        }
        return this;
      }
      function _destroy(self2, err, cb) {
        let called = false;
        function onDestroy(err2) {
          if (called) {
            return;
          }
          called = true;
          const r = self2._readableState;
          const w = self2._writableState;
          checkError(err2, w, r);
          if (w) {
            w.closed = true;
          }
          if (r) {
            r.closed = true;
          }
          if (typeof cb === "function") {
            cb(err2);
          }
          if (err2) {
            process.nextTick(emitErrorCloseNT, self2, err2);
          } else {
            process.nextTick(emitCloseNT, self2);
          }
        }
        try {
          self2._destroy(err || null, onDestroy);
        } catch (err2) {
          onDestroy(err2);
        }
      }
      function emitErrorCloseNT(self2, err) {
        emitErrorNT(self2, err);
        emitCloseNT(self2);
      }
      function emitCloseNT(self2) {
        const r = self2._readableState;
        const w = self2._writableState;
        if (w) {
          w.closeEmitted = true;
        }
        if (r) {
          r.closeEmitted = true;
        }
        if ((w && w.emitClose) || (r && r.emitClose)) {
          self2.emit("close");
        }
      }
      function emitErrorNT(self2, err) {
        const r = self2._readableState;
        const w = self2._writableState;
        if ((w && w.errorEmitted) || (r && r.errorEmitted)) {
          return;
        }
        if (w) {
          w.errorEmitted = true;
        }
        if (r) {
          r.errorEmitted = true;
        }
        self2.emit("error", err);
      }
      function undestroy() {
        const r = this._readableState;
        const w = this._writableState;
        if (r) {
          r.constructed = true;
          r.closed = false;
          r.closeEmitted = false;
          r.destroyed = false;
          r.errored = null;
          r.errorEmitted = false;
          r.reading = false;
          r.ended = r.readable === false;
          r.endEmitted = r.readable === false;
        }
        if (w) {
          w.constructed = true;
          w.destroyed = false;
          w.closed = false;
          w.closeEmitted = false;
          w.errored = null;
          w.errorEmitted = false;
          w.finalCalled = false;
          w.prefinished = false;
          w.ended = w.writable === false;
          w.ending = w.writable === false;
          w.finished = w.writable === false;
        }
      }
      function errorOrDestroy(stream, err, sync) {
        const r = stream._readableState;
        const w = stream._writableState;
        if ((w && w.destroyed) || (r && r.destroyed)) {
          return this;
        }
        if ((r && r.autoDestroy) || (w && w.autoDestroy)) stream.destroy(err);
        else if (err) {
          err.stack;
          if (w && !w.errored) {
            w.errored = err;
          }
          if (r && !r.errored) {
            r.errored = err;
          }
          if (sync) {
            process.nextTick(emitErrorNT, stream, err);
          } else {
            emitErrorNT(stream, err);
          }
        }
      }
      function construct(stream, cb) {
        if (typeof stream._construct !== "function") {
          return;
        }
        const r = stream._readableState;
        const w = stream._writableState;
        if (r) {
          r.constructed = false;
        }
        if (w) {
          w.constructed = false;
        }
        stream.once(kConstruct, cb);
        if (stream.listenerCount(kConstruct) > 1) {
          return;
        }
        process.nextTick(constructNT, stream);
      }
      function constructNT(stream) {
        let called = false;
        function onConstruct(err) {
          if (called) {
            errorOrDestroy(
              stream,
              err !== null && err !== void 0 ? err : new ERR_MULTIPLE_CALLBACK()
            );
            return;
          }
          called = true;
          const r = stream._readableState;
          const w = stream._writableState;
          const s = w || r;
          if (r) {
            r.constructed = true;
          }
          if (w) {
            w.constructed = true;
          }
          if (s.destroyed) {
            stream.emit(kDestroy, err);
          } else if (err) {
            errorOrDestroy(stream, err, true);
          } else {
            process.nextTick(emitConstructNT, stream);
          }
        }
        try {
          stream._construct(onConstruct);
        } catch (err) {
          onConstruct(err);
        }
      }
      function emitConstructNT(stream) {
        stream.emit(kConstruct);
      }
      function isRequest(stream) {
        return stream && stream.setHeader && typeof stream.abort === "function";
      }
      function emitCloseLegacy(stream) {
        stream.emit("close");
      }
      function emitErrorCloseLegacy(stream, err) {
        stream.emit("error", err);
        process.nextTick(emitCloseLegacy, stream);
      }
      function destroyer(stream, err) {
        if (!stream || isDestroyed(stream)) {
          return;
        }
        if (!err && !isFinished(stream)) {
          err = new AbortError();
        }
        if (isServerRequest(stream)) {
          stream.socket = null;
          stream.destroy(err);
        } else if (isRequest(stream)) {
          stream.abort();
        } else if (isRequest(stream.req)) {
          stream.req.abort();
        } else if (typeof stream.destroy === "function") {
          stream.destroy(err);
        } else if (typeof stream.close === "function") {
          stream.close();
        } else if (err) {
          process.nextTick(emitErrorCloseLegacy, stream);
        } else {
          process.nextTick(emitCloseLegacy, stream);
        }
        if (!stream.destroyed) {
          stream[kDestroyed] = true;
        }
      }
      module.exports = {
        construct,
        destroyer,
        destroy,
        undestroy,
        errorOrDestroy,
      };
    },
  });

  // node_modules/events/events.js
  var require_events = __commonJS({
    "node_modules/events/events.js"(exports, module) {
      "use strict";
      init_process_shim();
      var R = typeof Reflect === "object" ? Reflect : null;
      var ReflectApply =
        R && typeof R.apply === "function"
          ? R.apply
          : function ReflectApply2(target, receiver, args) {
              return Function.prototype.apply.call(target, receiver, args);
            };
      var ReflectOwnKeys;
      if (R && typeof R.ownKeys === "function") {
        ReflectOwnKeys = R.ownKeys;
      } else if (Object.getOwnPropertySymbols) {
        ReflectOwnKeys = function ReflectOwnKeys2(target) {
          return Object.getOwnPropertyNames(target).concat(
            Object.getOwnPropertySymbols(target)
          );
        };
      } else {
        ReflectOwnKeys = function ReflectOwnKeys2(target) {
          return Object.getOwnPropertyNames(target);
        };
      }
      function ProcessEmitWarning(warning) {
        if (console && console.warn) console.warn(warning);
      }
      var NumberIsNaN =
        Number.isNaN ||
        function NumberIsNaN2(value) {
          return value !== value;
        };
      function EventEmitter() {
        EventEmitter.init.call(this);
      }
      module.exports = EventEmitter;
      module.exports.once = once;
      EventEmitter.EventEmitter = EventEmitter;
      EventEmitter.prototype._events = void 0;
      EventEmitter.prototype._eventsCount = 0;
      EventEmitter.prototype._maxListeners = void 0;
      var defaultMaxListeners = 10;
      function checkListener(listener) {
        if (typeof listener !== "function") {
          throw new TypeError(
            'The "listener" argument must be of type Function. Received type ' +
              typeof listener
          );
        }
      }
      Object.defineProperty(EventEmitter, "defaultMaxListeners", {
        enumerable: true,
        get: function () {
          return defaultMaxListeners;
        },
        set: function (arg) {
          if (typeof arg !== "number" || arg < 0 || NumberIsNaN(arg)) {
            throw new RangeError(
              'The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' +
                arg +
                "."
            );
          }
          defaultMaxListeners = arg;
        },
      });
      EventEmitter.init = function () {
        if (
          this._events === void 0 ||
          this._events === Object.getPrototypeOf(this)._events
        ) {
          this._events = /* @__PURE__ */ Object.create(null);
          this._eventsCount = 0;
        }
        this._maxListeners = this._maxListeners || void 0;
      };
      EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
        if (typeof n !== "number" || n < 0 || NumberIsNaN(n)) {
          throw new RangeError(
            'The value of "n" is out of range. It must be a non-negative number. Received ' +
              n +
              "."
          );
        }
        this._maxListeners = n;
        return this;
      };
      function _getMaxListeners(that) {
        if (that._maxListeners === void 0)
          return EventEmitter.defaultMaxListeners;
        return that._maxListeners;
      }
      EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
        return _getMaxListeners(this);
      };
      EventEmitter.prototype.emit = function emit(type) {
        var args = [];
        for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
        var doError = type === "error";
        var events = this._events;
        if (events !== void 0) doError = doError && events.error === void 0;
        else if (!doError) return false;
        if (doError) {
          var er;
          if (args.length > 0) er = args[0];
          if (er instanceof Error) {
            throw er;
          }
          var err = new Error(
            "Unhandled error." + (er ? " (" + er.message + ")" : "")
          );
          err.context = er;
          throw err;
        }
        var handler = events[type];
        if (handler === void 0) return false;
        if (typeof handler === "function") {
          ReflectApply(handler, this, args);
        } else {
          var len = handler.length;
          var listeners = arrayClone(handler, len);
          for (var i = 0; i < len; ++i) ReflectApply(listeners[i], this, args);
        }
        return true;
      };
      function _addListener(target, type, listener, prepend) {
        var m;
        var events;
        var existing;
        checkListener(listener);
        events = target._events;
        if (events === void 0) {
          events = target._events = /* @__PURE__ */ Object.create(null);
          target._eventsCount = 0;
        } else {
          if (events.newListener !== void 0) {
            target.emit(
              "newListener",
              type,
              listener.listener ? listener.listener : listener
            );
            events = target._events;
          }
          existing = events[type];
        }
        if (existing === void 0) {
          existing = events[type] = listener;
          ++target._eventsCount;
        } else {
          if (typeof existing === "function") {
            existing = events[type] = prepend
              ? [listener, existing]
              : [existing, listener];
          } else if (prepend) {
            existing.unshift(listener);
          } else {
            existing.push(listener);
          }
          m = _getMaxListeners(target);
          if (m > 0 && existing.length > m && !existing.warned) {
            existing.warned = true;
            var w = new Error(
              "Possible EventEmitter memory leak detected. " +
                existing.length +
                " " +
                String(type) +
                " listeners added. Use emitter.setMaxListeners() to increase limit"
            );
            w.name = "MaxListenersExceededWarning";
            w.emitter = target;
            w.type = type;
            w.count = existing.length;
            ProcessEmitWarning(w);
          }
        }
        return target;
      }
      EventEmitter.prototype.addListener = function addListener(
        type,
        listener
      ) {
        return _addListener(this, type, listener, false);
      };
      EventEmitter.prototype.on = EventEmitter.prototype.addListener;
      EventEmitter.prototype.prependListener = function prependListener(
        type,
        listener
      ) {
        return _addListener(this, type, listener, true);
      };
      function onceWrapper() {
        if (!this.fired) {
          this.target.removeListener(this.type, this.wrapFn);
          this.fired = true;
          if (arguments.length === 0) return this.listener.call(this.target);
          return this.listener.apply(this.target, arguments);
        }
      }
      function _onceWrap(target, type, listener) {
        var state = { fired: false, wrapFn: void 0, target, type, listener };
        var wrapped = onceWrapper.bind(state);
        wrapped.listener = listener;
        state.wrapFn = wrapped;
        return wrapped;
      }
      EventEmitter.prototype.once = function once2(type, listener) {
        checkListener(listener);
        this.on(type, _onceWrap(this, type, listener));
        return this;
      };
      EventEmitter.prototype.prependOnceListener = function prependOnceListener(
        type,
        listener
      ) {
        checkListener(listener);
        this.prependListener(type, _onceWrap(this, type, listener));
        return this;
      };
      EventEmitter.prototype.removeListener = function removeListener(
        type,
        listener
      ) {
        var list, events, position, i, originalListener;
        checkListener(listener);
        events = this._events;
        if (events === void 0) return this;
        list = events[type];
        if (list === void 0) return this;
        if (list === listener || list.listener === listener) {
          if (--this._eventsCount === 0)
            this._events = /* @__PURE__ */ Object.create(null);
          else {
            delete events[type];
            if (events.removeListener)
              this.emit("removeListener", type, list.listener || listener);
          }
        } else if (typeof list !== "function") {
          position = -1;
          for (i = list.length - 1; i >= 0; i--) {
            if (list[i] === listener || list[i].listener === listener) {
              originalListener = list[i].listener;
              position = i;
              break;
            }
          }
          if (position < 0) return this;
          if (position === 0) list.shift();
          else {
            spliceOne(list, position);
          }
          if (list.length === 1) events[type] = list[0];
          if (events.removeListener !== void 0)
            this.emit("removeListener", type, originalListener || listener);
        }
        return this;
      };
      EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
      EventEmitter.prototype.removeAllListeners = function removeAllListeners(
        type
      ) {
        var listeners, events, i;
        events = this._events;
        if (events === void 0) return this;
        if (events.removeListener === void 0) {
          if (arguments.length === 0) {
            this._events = /* @__PURE__ */ Object.create(null);
            this._eventsCount = 0;
          } else if (events[type] !== void 0) {
            if (--this._eventsCount === 0)
              this._events = /* @__PURE__ */ Object.create(null);
            else delete events[type];
          }
          return this;
        }
        if (arguments.length === 0) {
          var keys = Object.keys(events);
          var key;
          for (i = 0; i < keys.length; ++i) {
            key = keys[i];
            if (key === "removeListener") continue;
            this.removeAllListeners(key);
          }
          this.removeAllListeners("removeListener");
          this._events = /* @__PURE__ */ Object.create(null);
          this._eventsCount = 0;
          return this;
        }
        listeners = events[type];
        if (typeof listeners === "function") {
          this.removeListener(type, listeners);
        } else if (listeners !== void 0) {
          for (i = listeners.length - 1; i >= 0; i--) {
            this.removeListener(type, listeners[i]);
          }
        }
        return this;
      };
      function _listeners(target, type, unwrap) {
        var events = target._events;
        if (events === void 0) return [];
        var evlistener = events[type];
        if (evlistener === void 0) return [];
        if (typeof evlistener === "function")
          return unwrap ? [evlistener.listener || evlistener] : [evlistener];
        return unwrap
          ? unwrapListeners(evlistener)
          : arrayClone(evlistener, evlistener.length);
      }
      EventEmitter.prototype.listeners = function listeners(type) {
        return _listeners(this, type, true);
      };
      EventEmitter.prototype.rawListeners = function rawListeners(type) {
        return _listeners(this, type, false);
      };
      EventEmitter.listenerCount = function (emitter, type) {
        if (typeof emitter.listenerCount === "function") {
          return emitter.listenerCount(type);
        } else {
          return listenerCount.call(emitter, type);
        }
      };
      EventEmitter.prototype.listenerCount = listenerCount;
      function listenerCount(type) {
        var events = this._events;
        if (events !== void 0) {
          var evlistener = events[type];
          if (typeof evlistener === "function") {
            return 1;
          } else if (evlistener !== void 0) {
            return evlistener.length;
          }
        }
        return 0;
      }
      EventEmitter.prototype.eventNames = function eventNames() {
        return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
      };
      function arrayClone(arr, n) {
        var copy = new Array(n);
        for (var i = 0; i < n; ++i) copy[i] = arr[i];
        return copy;
      }
      function spliceOne(list, index) {
        for (; index + 1 < list.length; index++) list[index] = list[index + 1];
        list.pop();
      }
      function unwrapListeners(arr) {
        var ret = new Array(arr.length);
        for (var i = 0; i < ret.length; ++i) {
          ret[i] = arr[i].listener || arr[i];
        }
        return ret;
      }
      function once(emitter, name) {
        return new Promise(function (resolve, reject) {
          function errorListener(err) {
            emitter.removeListener(name, resolver);
            reject(err);
          }
          function resolver() {
            if (typeof emitter.removeListener === "function") {
              emitter.removeListener("error", errorListener);
            }
            resolve([].slice.call(arguments));
          }
          eventTargetAgnosticAddListener(emitter, name, resolver, {
            once: true,
          });
          if (name !== "error") {
            addErrorHandlerIfEventEmitter(emitter, errorListener, {
              once: true,
            });
          }
        });
      }
      function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
        if (typeof emitter.on === "function") {
          eventTargetAgnosticAddListener(emitter, "error", handler, flags);
        }
      }
      function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
        if (typeof emitter.on === "function") {
          if (flags.once) {
            emitter.once(name, listener);
          } else {
            emitter.on(name, listener);
          }
        } else if (typeof emitter.addEventListener === "function") {
          emitter.addEventListener(name, function wrapListener(arg) {
            if (flags.once) {
              emitter.removeEventListener(name, wrapListener);
            }
            listener(arg);
          });
        } else {
          throw new TypeError(
            'The "emitter" argument must be of type EventEmitter. Received type ' +
              typeof emitter
          );
        }
      }
    },
  });

  // node_modules/readable-stream/lib/internal/streams/legacy.js
  var require_legacy = __commonJS({
    "node_modules/readable-stream/lib/internal/streams/legacy.js"(
      exports,
      module
    ) {
      "use strict";
      init_process_shim();
      var { ArrayIsArray, ObjectSetPrototypeOf } = require_primordials();
      var { EventEmitter: EE } = require_events();
      function Stream(opts) {
        EE.call(this, opts);
      }
      ObjectSetPrototypeOf(Stream.prototype, EE.prototype);
      ObjectSetPrototypeOf(Stream, EE);
      Stream.prototype.pipe = function (dest, options) {
        const source = this;
        function ondata(chunk) {
          if (dest.writable && dest.write(chunk) === false && source.pause) {
            source.pause();
          }
        }
        source.on("data", ondata);
        function ondrain() {
          if (source.readable && source.resume) {
            source.resume();
          }
        }
        dest.on("drain", ondrain);
        if (!dest._isStdio && (!options || options.end !== false)) {
          source.on("end", onend);
          source.on("close", onclose);
        }
        let didOnEnd = false;
        function onend() {
          if (didOnEnd) return;
          didOnEnd = true;
          dest.end();
        }
        function onclose() {
          if (didOnEnd) return;
          didOnEnd = true;
          if (typeof dest.destroy === "function") dest.destroy();
        }
        function onerror(er) {
          cleanup();
          if (EE.listenerCount(this, "error") === 0) {
            this.emit("error", er);
          }
        }
        prependListener(source, "error", onerror);
        prependListener(dest, "error", onerror);
        function cleanup() {
          source.removeListener("data", ondata);
          dest.removeListener("drain", ondrain);
          source.removeListener("end", onend);
          source.removeListener("close", onclose);
          source.removeListener("error", onerror);
          dest.removeListener("error", onerror);
          source.removeListener("end", cleanup);
          source.removeListener("close", cleanup);
          dest.removeListener("close", cleanup);
        }
        source.on("end", cleanup);
        source.on("close", cleanup);
        dest.on("close", cleanup);
        dest.emit("pipe", source);
        return dest;
      };
      function prependListener(emitter, event, fn) {
        if (typeof emitter.prependListener === "function")
          return emitter.prependListener(event, fn);
        if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);
        else if (ArrayIsArray(emitter._events[event]))
          emitter._events[event].unshift(fn);
        else emitter._events[event] = [fn, emitter._events[event]];
      }
      module.exports = {
        Stream,
        prependListener,
      };
    },
  });

  // node_modules/readable-stream/lib/internal/streams/add-abort-signal.js
  var require_add_abort_signal = __commonJS({
    "node_modules/readable-stream/lib/internal/streams/add-abort-signal.js"(
      exports,
      module
    ) {
      "use strict";
      init_process_shim();
      var { AbortError, codes } = require_errors();
      var eos = require_end_of_stream();
      var { ERR_INVALID_ARG_TYPE } = codes;
      var validateAbortSignal = (signal, name) => {
        if (typeof signal !== "object" || !("aborted" in signal)) {
          throw new ERR_INVALID_ARG_TYPE(name, "AbortSignal", signal);
        }
      };
      function isNodeStream(obj) {
        return !!(obj && typeof obj.pipe === "function");
      }
      module.exports.addAbortSignal = function addAbortSignal(signal, stream) {
        validateAbortSignal(signal, "signal");
        if (!isNodeStream(stream)) {
          throw new ERR_INVALID_ARG_TYPE("stream", "stream.Stream", stream);
        }
        return module.exports.addAbortSignalNoValidate(signal, stream);
      };
      module.exports.addAbortSignalNoValidate = function (signal, stream) {
        if (typeof signal !== "object" || !("aborted" in signal)) {
          return stream;
        }
        const onAbort = () => {
          stream.destroy(
            new AbortError(void 0, {
              cause: signal.reason,
            })
          );
        };
        if (signal.aborted) {
          onAbort();
        } else {
          signal.addEventListener("abort", onAbort);
          eos(stream, () => signal.removeEventListener("abort", onAbort));
        }
        return stream;
      };
    },
  });

  // node_modules/readable-stream/lib/internal/streams/buffer_list.js
  var require_buffer_list = __commonJS({
    "node_modules/readable-stream/lib/internal/streams/buffer_list.js"(
      exports,
      module
    ) {
      "use strict";
      init_process_shim();
      var {
        StringPrototypeSlice,
        SymbolIterator,
        TypedArrayPrototypeSet,
        Uint8Array: Uint8Array2,
      } = require_primordials();
      var { inspect } = require_util();
      module.exports = class BufferList {
        constructor() {
          this.head = null;
          this.tail = null;
          this.length = 0;
        }
        push(v) {
          const entry = {
            data: v,
            next: null,
          };
          if (this.length > 0) this.tail.next = entry;
          else this.head = entry;
          this.tail = entry;
          ++this.length;
        }
        unshift(v) {
          const entry = {
            data: v,
            next: this.head,
          };
          if (this.length === 0) this.tail = entry;
          this.head = entry;
          ++this.length;
        }
        shift() {
          if (this.length === 0) return;
          const ret = this.head.data;
          if (this.length === 1) this.head = this.tail = null;
          else this.head = this.head.next;
          --this.length;
          return ret;
        }
        clear() {
          this.head = this.tail = null;
          this.length = 0;
        }
        join(s) {
          if (this.length === 0) return "";
          let p = this.head;
          let ret = "" + p.data;
          while ((p = p.next) !== null) ret += s + p.data;
          return ret;
        }
        concat(n) {
          if (this.length === 0) return Buffer.alloc(0);
          const ret = Buffer.allocUnsafe(n >>> 0);
          let p = this.head;
          let i = 0;
          while (p) {
            TypedArrayPrototypeSet(ret, p.data, i);
            i += p.data.length;
            p = p.next;
          }
          return ret;
        }
        consume(n, hasStrings) {
          const data = this.head.data;
          if (n < data.length) {
            const slice = data.slice(0, n);
            this.head.data = data.slice(n);
            return slice;
          }
          if (n === data.length) {
            return this.shift();
          }
          return hasStrings ? this._getString(n) : this._getBuffer(n);
        }
        first() {
          return this.head.data;
        }
        *[SymbolIterator]() {
          for (let p = this.head; p; p = p.next) {
            yield p.data;
          }
        }
        _getString(n) {
          let ret = "";
          let p = this.head;
          let c = 0;
          do {
            const str = p.data;
            if (n > str.length) {
              ret += str;
              n -= str.length;
            } else {
              if (n === str.length) {
                ret += str;
                ++c;
                if (p.next) this.head = p.next;
                else this.head = this.tail = null;
              } else {
                ret += StringPrototypeSlice(str, 0, n);
                this.head = p;
                p.data = StringPrototypeSlice(str, n);
              }
              break;
            }
            ++c;
          } while ((p = p.next) !== null);
          this.length -= c;
          return ret;
        }
        _getBuffer(n) {
          const ret = Buffer.allocUnsafe(n);
          const retLen = n;
          let p = this.head;
          let c = 0;
          do {
            const buf = p.data;
            if (n > buf.length) {
              TypedArrayPrototypeSet(ret, buf, retLen - n);
              n -= buf.length;
            } else {
              if (n === buf.length) {
                TypedArrayPrototypeSet(ret, buf, retLen - n);
                ++c;
                if (p.next) this.head = p.next;
                else this.head = this.tail = null;
              } else {
                TypedArrayPrototypeSet(
                  ret,
                  new Uint8Array2(buf.buffer, buf.byteOffset, n),
                  retLen - n
                );
                this.head = p;
                p.data = buf.slice(n);
              }
              break;
            }
            ++c;
          } while ((p = p.next) !== null);
          this.length -= c;
          return ret;
        }
        [Symbol.for("nodejs.util.inspect.custom")](_, options) {
          return inspect(this, {
            ...options,
            depth: 0,
            customInspect: false,
          });
        }
      };
    },
  });

  // node_modules/readable-stream/lib/internal/streams/state.js
  var require_state = __commonJS({
    "node_modules/readable-stream/lib/internal/streams/state.js"(
      exports,
      module
    ) {
      "use strict";
      init_process_shim();
      var { MathFloor, NumberIsInteger } = require_primordials();
      var { ERR_INVALID_ARG_VALUE } = require_errors().codes;
      function highWaterMarkFrom(options, isDuplex, duplexKey) {
        return options.highWaterMark != null
          ? options.highWaterMark
          : isDuplex
          ? options[duplexKey]
          : null;
      }
      function getDefaultHighWaterMark(objectMode) {
        return objectMode ? 16 : 16 * 1024;
      }
      function getHighWaterMark(state, options, duplexKey, isDuplex) {
        const hwm = highWaterMarkFrom(options, isDuplex, duplexKey);
        if (hwm != null) {
          if (!NumberIsInteger(hwm) || hwm < 0) {
            const name = isDuplex
              ? `options.${duplexKey}`
              : "options.highWaterMark";
            throw new ERR_INVALID_ARG_VALUE(name, hwm);
          }
          return MathFloor(hwm);
        }
        return getDefaultHighWaterMark(state.objectMode);
      }
      module.exports = {
        getHighWaterMark,
        getDefaultHighWaterMark,
      };
    },
  });

  // node_modules/safe-buffer/index.js
  var require_safe_buffer = __commonJS({
    "node_modules/safe-buffer/index.js"(exports, module) {
      init_process_shim();
      var buffer = require_buffer();
      var Buffer2 = buffer.Buffer;
      function copyProps(src, dst) {
        for (var key in src) {
          dst[key] = src[key];
        }
      }
      if (
        Buffer2.from &&
        Buffer2.alloc &&
        Buffer2.allocUnsafe &&
        Buffer2.allocUnsafeSlow
      ) {
        module.exports = buffer;
      } else {
        copyProps(buffer, exports);
        exports.Buffer = SafeBuffer;
      }
      function SafeBuffer(arg, encodingOrOffset, length) {
        return Buffer2(arg, encodingOrOffset, length);
      }
      SafeBuffer.prototype = Object.create(Buffer2.prototype);
      copyProps(Buffer2, SafeBuffer);
      SafeBuffer.from = function (arg, encodingOrOffset, length) {
        if (typeof arg === "number") {
          throw new TypeError("Argument must not be a number");
        }
        return Buffer2(arg, encodingOrOffset, length);
      };
      SafeBuffer.alloc = function (size, fill, encoding) {
        if (typeof size !== "number") {
          throw new TypeError("Argument must be a number");
        }
        var buf = Buffer2(size);
        if (fill !== void 0) {
          if (typeof encoding === "string") {
            buf.fill(fill, encoding);
          } else {
            buf.fill(fill);
          }
        } else {
          buf.fill(0);
        }
        return buf;
      };
      SafeBuffer.allocUnsafe = function (size) {
        if (typeof size !== "number") {
          throw new TypeError("Argument must be a number");
        }
        return Buffer2(size);
      };
      SafeBuffer.allocUnsafeSlow = function (size) {
        if (typeof size !== "number") {
          throw new TypeError("Argument must be a number");
        }
        return buffer.SlowBuffer(size);
      };
    },
  });

  // node_modules/string_decoder/lib/string_decoder.js
  var require_string_decoder = __commonJS({
    "node_modules/string_decoder/lib/string_decoder.js"(exports) {
      "use strict";
      init_process_shim();
      var Buffer2 = require_safe_buffer().Buffer;
      var isEncoding =
        Buffer2.isEncoding ||
        function (encoding) {
          encoding = "" + encoding;
          switch (encoding && encoding.toLowerCase()) {
            case "hex":
            case "utf8":
            case "utf-8":
            case "ascii":
            case "binary":
            case "base64":
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
            case "raw":
              return true;
            default:
              return false;
          }
        };
      function _normalizeEncoding(enc) {
        if (!enc) return "utf8";
        var retried;
        while (true) {
          switch (enc) {
            case "utf8":
            case "utf-8":
              return "utf8";
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return "utf16le";
            case "latin1":
            case "binary":
              return "latin1";
            case "base64":
            case "ascii":
            case "hex":
              return enc;
            default:
              if (retried) return;
              enc = ("" + enc).toLowerCase();
              retried = true;
          }
        }
      }
      function normalizeEncoding(enc) {
        var nenc = _normalizeEncoding(enc);
        if (
          typeof nenc !== "string" &&
          (Buffer2.isEncoding === isEncoding || !isEncoding(enc))
        )
          throw new Error("Unknown encoding: " + enc);
        return nenc || enc;
      }
      exports.StringDecoder = StringDecoder;
      function StringDecoder(encoding) {
        this.encoding = normalizeEncoding(encoding);
        var nb;
        switch (this.encoding) {
          case "utf16le":
            this.text = utf16Text;
            this.end = utf16End;
            nb = 4;
            break;
          case "utf8":
            this.fillLast = utf8FillLast;
            nb = 4;
            break;
          case "base64":
            this.text = base64Text;
            this.end = base64End;
            nb = 3;
            break;
          default:
            this.write = simpleWrite;
            this.end = simpleEnd;
            return;
        }
        this.lastNeed = 0;
        this.lastTotal = 0;
        this.lastChar = Buffer2.allocUnsafe(nb);
      }
      StringDecoder.prototype.write = function (buf) {
        if (buf.length === 0) return "";
        var r;
        var i;
        if (this.lastNeed) {
          r = this.fillLast(buf);
          if (r === void 0) return "";
          i = this.lastNeed;
          this.lastNeed = 0;
        } else {
          i = 0;
        }
        if (i < buf.length)
          return r ? r + this.text(buf, i) : this.text(buf, i);
        return r || "";
      };
      StringDecoder.prototype.end = utf8End;
      StringDecoder.prototype.text = utf8Text;
      StringDecoder.prototype.fillLast = function (buf) {
        if (this.lastNeed <= buf.length) {
          buf.copy(
            this.lastChar,
            this.lastTotal - this.lastNeed,
            0,
            this.lastNeed
          );
          return this.lastChar.toString(this.encoding, 0, this.lastTotal);
        }
        buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
        this.lastNeed -= buf.length;
      };
      function utf8CheckByte(byte) {
        if (byte <= 127) return 0;
        else if (byte >> 5 === 6) return 2;
        else if (byte >> 4 === 14) return 3;
        else if (byte >> 3 === 30) return 4;
        return byte >> 6 === 2 ? -1 : -2;
      }
      function utf8CheckIncomplete(self2, buf, i) {
        var j = buf.length - 1;
        if (j < i) return 0;
        var nb = utf8CheckByte(buf[j]);
        if (nb >= 0) {
          if (nb > 0) self2.lastNeed = nb - 1;
          return nb;
        }
        if (--j < i || nb === -2) return 0;
        nb = utf8CheckByte(buf[j]);
        if (nb >= 0) {
          if (nb > 0) self2.lastNeed = nb - 2;
          return nb;
        }
        if (--j < i || nb === -2) return 0;
        nb = utf8CheckByte(buf[j]);
        if (nb >= 0) {
          if (nb > 0) {
            if (nb === 2) nb = 0;
            else self2.lastNeed = nb - 3;
          }
          return nb;
        }
        return 0;
      }
      function utf8CheckExtraBytes(self2, buf, p) {
        if ((buf[0] & 192) !== 128) {
          self2.lastNeed = 0;
          return "\uFFFD";
        }
        if (self2.lastNeed > 1 && buf.length > 1) {
          if ((buf[1] & 192) !== 128) {
            self2.lastNeed = 1;
            return "\uFFFD";
          }
          if (self2.lastNeed > 2 && buf.length > 2) {
            if ((buf[2] & 192) !== 128) {
              self2.lastNeed = 2;
              return "\uFFFD";
            }
          }
        }
      }
      function utf8FillLast(buf) {
        var p = this.lastTotal - this.lastNeed;
        var r = utf8CheckExtraBytes(this, buf, p);
        if (r !== void 0) return r;
        if (this.lastNeed <= buf.length) {
          buf.copy(this.lastChar, p, 0, this.lastNeed);
          return this.lastChar.toString(this.encoding, 0, this.lastTotal);
        }
        buf.copy(this.lastChar, p, 0, buf.length);
        this.lastNeed -= buf.length;
      }
      function utf8Text(buf, i) {
        var total = utf8CheckIncomplete(this, buf, i);
        if (!this.lastNeed) return buf.toString("utf8", i);
        this.lastTotal = total;
        var end = buf.length - (total - this.lastNeed);
        buf.copy(this.lastChar, 0, end);
        return buf.toString("utf8", i, end);
      }
      function utf8End(buf) {
        var r = buf && buf.length ? this.write(buf) : "";
        if (this.lastNeed) return r + "\uFFFD";
        return r;
      }
      function utf16Text(buf, i) {
        if ((buf.length - i) % 2 === 0) {
          var r = buf.toString("utf16le", i);
          if (r) {
            var c = r.charCodeAt(r.length - 1);
            if (c >= 55296 && c <= 56319) {
              this.lastNeed = 2;
              this.lastTotal = 4;
              this.lastChar[0] = buf[buf.length - 2];
              this.lastChar[1] = buf[buf.length - 1];
              return r.slice(0, -1);
            }
          }
          return r;
        }
        this.lastNeed = 1;
        this.lastTotal = 2;
        this.lastChar[0] = buf[buf.length - 1];
        return buf.toString("utf16le", i, buf.length - 1);
      }
      function utf16End(buf) {
        var r = buf && buf.length ? this.write(buf) : "";
        if (this.lastNeed) {
          var end = this.lastTotal - this.lastNeed;
          return r + this.lastChar.toString("utf16le", 0, end);
        }
        return r;
      }
      function base64Text(buf, i) {
        var n = (buf.length - i) % 3;
        if (n === 0) return buf.toString("base64", i);
        this.lastNeed = 3 - n;
        this.lastTotal = 3;
        if (n === 1) {
          this.lastChar[0] = buf[buf.length - 1];
        } else {
          this.lastChar[0] = buf[buf.length - 2];
          this.lastChar[1] = buf[buf.length - 1];
        }
        return buf.toString("base64", i, buf.length - n);
      }
      function base64End(buf) {
        var r = buf && buf.length ? this.write(buf) : "";
        if (this.lastNeed)
          return r + this.lastChar.toString("base64", 0, 3 - this.lastNeed);
        return r;
      }
      function simpleWrite(buf) {
        return buf.toString(this.encoding);
      }
      function simpleEnd(buf) {
        return buf && buf.length ? this.write(buf) : "";
      }
    },
  });

  // node_modules/readable-stream/lib/internal/streams/from.js
  var require_from = __commonJS({
    "node_modules/readable-stream/lib/internal/streams/from.js"(
      exports,
      module
    ) {
      "use strict";
      init_process_shim();
      var { PromisePrototypeThen, SymbolAsyncIterator, SymbolIterator } =
        require_primordials();
      var { ERR_INVALID_ARG_TYPE, ERR_STREAM_NULL_VALUES } =
        require_errors().codes;
      function from(Readable, iterable, opts) {
        let iterator;
        if (typeof iterable === "string" || iterable instanceof Buffer) {
          return new Readable({
            objectMode: true,
            ...opts,
            read() {
              this.push(iterable);
              this.push(null);
            },
          });
        }
        let isAsync;
        if (iterable && iterable[SymbolAsyncIterator]) {
          isAsync = true;
          iterator = iterable[SymbolAsyncIterator]();
        } else if (iterable && iterable[SymbolIterator]) {
          isAsync = false;
          iterator = iterable[SymbolIterator]();
        } else {
          throw new ERR_INVALID_ARG_TYPE("iterable", ["Iterable"], iterable);
        }
        const readable = new Readable({
          objectMode: true,
          highWaterMark: 1,
          ...opts,
        });
        let reading = false;
        readable._read = function () {
          if (!reading) {
            reading = true;
            next();
          }
        };
        readable._destroy = function (error, cb) {
          PromisePrototypeThen(
            close(error),
            () => process.nextTick(cb, error),
            (e) => process.nextTick(cb, e || error)
          );
        };
        async function close(error) {
          const hadError = error !== void 0 && error !== null;
          const hasThrow = typeof iterator.throw === "function";
          if (hadError && hasThrow) {
            const { value, done } = await iterator.throw(error);
            await value;
            if (done) {
              return;
            }
          }
          if (typeof iterator.return === "function") {
            const { value } = await iterator.return();
            await value;
          }
        }
        async function next() {
          for (;;) {
            try {
              const { value, done } = isAsync
                ? await iterator.next()
                : iterator.next();
              if (done) {
                readable.push(null);
              } else {
                const res =
                  value && typeof value.then === "function"
                    ? await value
                    : value;
                if (res === null) {
                  reading = false;
                  throw new ERR_STREAM_NULL_VALUES();
                } else if (readable.push(res)) {
                  continue;
                } else {
                  reading = false;
                }
              }
            } catch (err) {
              readable.destroy(err);
            }
            break;
          }
        }
        return readable;
      }
      module.exports = from;
    },
  });

  // node_modules/readable-stream/lib/internal/streams/readable.js
  var require_readable = __commonJS({
    "node_modules/readable-stream/lib/internal/streams/readable.js"(
      exports,
      module
    ) {
      "use strict";
      init_process_shim();
      var {
        ArrayPrototypeIndexOf,
        NumberIsInteger,
        NumberIsNaN,
        NumberParseInt,
        ObjectDefineProperties,
        ObjectKeys,
        ObjectSetPrototypeOf,
        Promise: Promise2,
        SafeSet,
        SymbolAsyncIterator,
        Symbol: Symbol2,
      } = require_primordials();
      module.exports = Readable;
      Readable.ReadableState = ReadableState;
      var { EventEmitter: EE } = require_events();
      var { Stream, prependListener } = require_legacy();
      var { addAbortSignal } = require_add_abort_signal();
      var eos = require_end_of_stream();
      var debug = require_util().debuglog("stream", (fn) => {
        debug = fn;
      });
      var BufferList = require_buffer_list();
      var destroyImpl = require_destroy();
      var { getHighWaterMark, getDefaultHighWaterMark } = require_state();
      var {
        aggregateTwoErrors,
        codes: {
          ERR_INVALID_ARG_TYPE,
          ERR_METHOD_NOT_IMPLEMENTED,
          ERR_OUT_OF_RANGE,
          ERR_STREAM_PUSH_AFTER_EOF,
          ERR_STREAM_UNSHIFT_AFTER_END_EVENT,
        },
      } = require_errors();
      var { validateObject } = require_validators();
      var kPaused = Symbol2("kPaused");
      var { StringDecoder } = require_string_decoder();
      var from = require_from();
      ObjectSetPrototypeOf(Readable.prototype, Stream.prototype);
      ObjectSetPrototypeOf(Readable, Stream);
      var nop = () => {};
      var { errorOrDestroy } = destroyImpl;
      function ReadableState(options, stream, isDuplex) {
        if (typeof isDuplex !== "boolean")
          isDuplex = stream instanceof require_duplex();
        this.objectMode = !!(options && options.objectMode);
        if (isDuplex)
          this.objectMode =
            this.objectMode || !!(options && options.readableObjectMode);
        this.highWaterMark = options
          ? getHighWaterMark(this, options, "readableHighWaterMark", isDuplex)
          : getDefaultHighWaterMark(false);
        this.buffer = new BufferList();
        this.length = 0;
        this.pipes = [];
        this.flowing = null;
        this.ended = false;
        this.endEmitted = false;
        this.reading = false;
        this.constructed = true;
        this.sync = true;
        this.needReadable = false;
        this.emittedReadable = false;
        this.readableListening = false;
        this.resumeScheduled = false;
        this[kPaused] = null;
        this.errorEmitted = false;
        this.emitClose = !options || options.emitClose !== false;
        this.autoDestroy = !options || options.autoDestroy !== false;
        this.destroyed = false;
        this.errored = null;
        this.closed = false;
        this.closeEmitted = false;
        this.defaultEncoding = (options && options.defaultEncoding) || "utf8";
        this.awaitDrainWriters = null;
        this.multiAwaitDrain = false;
        this.readingMore = false;
        this.dataEmitted = false;
        this.decoder = null;
        this.encoding = null;
        if (options && options.encoding) {
          this.decoder = new StringDecoder(options.encoding);
          this.encoding = options.encoding;
        }
      }
      function Readable(options) {
        if (!(this instanceof Readable)) return new Readable(options);
        const isDuplex = this instanceof require_duplex();
        this._readableState = new ReadableState(options, this, isDuplex);
        if (options) {
          if (typeof options.read === "function") this._read = options.read;
          if (typeof options.destroy === "function")
            this._destroy = options.destroy;
          if (typeof options.construct === "function")
            this._construct = options.construct;
          if (options.signal && !isDuplex) addAbortSignal(options.signal, this);
        }
        Stream.call(this, options);
        destroyImpl.construct(this, () => {
          if (this._readableState.needReadable) {
            maybeReadMore(this, this._readableState);
          }
        });
      }
      Readable.prototype.destroy = destroyImpl.destroy;
      Readable.prototype._undestroy = destroyImpl.undestroy;
      Readable.prototype._destroy = function (err, cb) {
        cb(err);
      };
      Readable.prototype[EE.captureRejectionSymbol] = function (err) {
        this.destroy(err);
      };
      Readable.prototype.push = function (chunk, encoding) {
        return readableAddChunk(this, chunk, encoding, false);
      };
      Readable.prototype.unshift = function (chunk, encoding) {
        return readableAddChunk(this, chunk, encoding, true);
      };
      function readableAddChunk(stream, chunk, encoding, addToFront) {
        debug("readableAddChunk", chunk);
        const state = stream._readableState;
        let err;
        if (!state.objectMode) {
          if (typeof chunk === "string") {
            encoding = encoding || state.defaultEncoding;
            if (state.encoding !== encoding) {
              if (addToFront && state.encoding) {
                chunk = Buffer.from(chunk, encoding).toString(state.encoding);
              } else {
                chunk = Buffer.from(chunk, encoding);
                encoding = "";
              }
            }
          } else if (chunk instanceof Buffer) {
            encoding = "";
          } else if (Stream._isUint8Array(chunk)) {
            chunk = Stream._uint8ArrayToBuffer(chunk);
            encoding = "";
          } else if (chunk != null) {
            err = new ERR_INVALID_ARG_TYPE(
              "chunk",
              ["string", "Buffer", "Uint8Array"],
              chunk
            );
          }
        }
        if (err) {
          errorOrDestroy(stream, err);
        } else if (chunk === null) {
          state.reading = false;
          onEofChunk(stream, state);
        } else if (state.objectMode || (chunk && chunk.length > 0)) {
          if (addToFront) {
            if (state.endEmitted)
              errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());
            else if (state.destroyed || state.errored) return false;
            else addChunk(stream, state, chunk, true);
          } else if (state.ended) {
            errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
          } else if (state.destroyed || state.errored) {
            return false;
          } else {
            state.reading = false;
            if (state.decoder && !encoding) {
              chunk = state.decoder.write(chunk);
              if (state.objectMode || chunk.length !== 0)
                addChunk(stream, state, chunk, false);
              else maybeReadMore(stream, state);
            } else {
              addChunk(stream, state, chunk, false);
            }
          }
        } else if (!addToFront) {
          state.reading = false;
          maybeReadMore(stream, state);
        }
        return (
          !state.ended &&
          (state.length < state.highWaterMark || state.length === 0)
        );
      }
      function addChunk(stream, state, chunk, addToFront) {
        if (
          state.flowing &&
          state.length === 0 &&
          !state.sync &&
          stream.listenerCount("data") > 0
        ) {
          if (state.multiAwaitDrain) {
            state.awaitDrainWriters.clear();
          } else {
            state.awaitDrainWriters = null;
          }
          state.dataEmitted = true;
          stream.emit("data", chunk);
        } else {
          state.length += state.objectMode ? 1 : chunk.length;
          if (addToFront) state.buffer.unshift(chunk);
          else state.buffer.push(chunk);
          if (state.needReadable) emitReadable(stream);
        }
        maybeReadMore(stream, state);
      }
      Readable.prototype.isPaused = function () {
        const state = this._readableState;
        return state[kPaused] === true || state.flowing === false;
      };
      Readable.prototype.setEncoding = function (enc) {
        const decoder = new StringDecoder(enc);
        this._readableState.decoder = decoder;
        this._readableState.encoding = this._readableState.decoder.encoding;
        const buffer = this._readableState.buffer;
        let content = "";
        for (const data of buffer) {
          content += decoder.write(data);
        }
        buffer.clear();
        if (content !== "") buffer.push(content);
        this._readableState.length = content.length;
        return this;
      };
      var MAX_HWM = 1073741824;
      function computeNewHighWaterMark(n) {
        if (n > MAX_HWM) {
          throw new ERR_OUT_OF_RANGE("size", "<= 1GiB", n);
        } else {
          n--;
          n |= n >>> 1;
          n |= n >>> 2;
          n |= n >>> 4;
          n |= n >>> 8;
          n |= n >>> 16;
          n++;
        }
        return n;
      }
      function howMuchToRead(n, state) {
        if (n <= 0 || (state.length === 0 && state.ended)) return 0;
        if (state.objectMode) return 1;
        if (NumberIsNaN(n)) {
          if (state.flowing && state.length) return state.buffer.first().length;
          return state.length;
        }
        if (n <= state.length) return n;
        return state.ended ? state.length : 0;
      }
      Readable.prototype.read = function (n) {
        debug("read", n);
        if (n === void 0) {
          n = NaN;
        } else if (!NumberIsInteger(n)) {
          n = NumberParseInt(n, 10);
        }
        const state = this._readableState;
        const nOrig = n;
        if (n > state.highWaterMark)
          state.highWaterMark = computeNewHighWaterMark(n);
        if (n !== 0) state.emittedReadable = false;
        if (
          n === 0 &&
          state.needReadable &&
          ((state.highWaterMark !== 0
            ? state.length >= state.highWaterMark
            : state.length > 0) ||
            state.ended)
        ) {
          debug("read: emitReadable", state.length, state.ended);
          if (state.length === 0 && state.ended) endReadable(this);
          else emitReadable(this);
          return null;
        }
        n = howMuchToRead(n, state);
        if (n === 0 && state.ended) {
          if (state.length === 0) endReadable(this);
          return null;
        }
        let doRead = state.needReadable;
        debug("need readable", doRead);
        if (state.length === 0 || state.length - n < state.highWaterMark) {
          doRead = true;
          debug("length less than watermark", doRead);
        }
        if (
          state.ended ||
          state.reading ||
          state.destroyed ||
          state.errored ||
          !state.constructed
        ) {
          doRead = false;
          debug("reading, ended or constructing", doRead);
        } else if (doRead) {
          debug("do read");
          state.reading = true;
          state.sync = true;
          if (state.length === 0) state.needReadable = true;
          try {
            this._read(state.highWaterMark);
          } catch (err) {
            errorOrDestroy(this, err);
          }
          state.sync = false;
          if (!state.reading) n = howMuchToRead(nOrig, state);
        }
        let ret;
        if (n > 0) ret = fromList(n, state);
        else ret = null;
        if (ret === null) {
          state.needReadable = state.length <= state.highWaterMark;
          n = 0;
        } else {
          state.length -= n;
          if (state.multiAwaitDrain) {
            state.awaitDrainWriters.clear();
          } else {
            state.awaitDrainWriters = null;
          }
        }
        if (state.length === 0) {
          if (!state.ended) state.needReadable = true;
          if (nOrig !== n && state.ended) endReadable(this);
        }
        if (ret !== null && !state.errorEmitted && !state.closeEmitted) {
          state.dataEmitted = true;
          this.emit("data", ret);
        }
        return ret;
      };
      function onEofChunk(stream, state) {
        debug("onEofChunk");
        if (state.ended) return;
        if (state.decoder) {
          const chunk = state.decoder.end();
          if (chunk && chunk.length) {
            state.buffer.push(chunk);
            state.length += state.objectMode ? 1 : chunk.length;
          }
        }
        state.ended = true;
        if (state.sync) {
          emitReadable(stream);
        } else {
          state.needReadable = false;
          state.emittedReadable = true;
          emitReadable_(stream);
        }
      }
      function emitReadable(stream) {
        const state = stream._readableState;
        debug("emitReadable", state.needReadable, state.emittedReadable);
        state.needReadable = false;
        if (!state.emittedReadable) {
          debug("emitReadable", state.flowing);
          state.emittedReadable = true;
          process.nextTick(emitReadable_, stream);
        }
      }
      function emitReadable_(stream) {
        const state = stream._readableState;
        debug("emitReadable_", state.destroyed, state.length, state.ended);
        if (
          !state.destroyed &&
          !state.errored &&
          (state.length || state.ended)
        ) {
          stream.emit("readable");
          state.emittedReadable = false;
        }
        state.needReadable =
          !state.flowing && !state.ended && state.length <= state.highWaterMark;
        flow(stream);
      }
      function maybeReadMore(stream, state) {
        if (!state.readingMore && state.constructed) {
          state.readingMore = true;
          process.nextTick(maybeReadMore_, stream, state);
        }
      }
      function maybeReadMore_(stream, state) {
        while (
          !state.reading &&
          !state.ended &&
          (state.length < state.highWaterMark ||
            (state.flowing && state.length === 0))
        ) {
          const len = state.length;
          debug("maybeReadMore read 0");
          stream.read(0);
          if (len === state.length) break;
        }
        state.readingMore = false;
      }
      Readable.prototype._read = function (n) {
        throw new ERR_METHOD_NOT_IMPLEMENTED("_read()");
      };
      Readable.prototype.pipe = function (dest, pipeOpts) {
        const src = this;
        const state = this._readableState;
        if (state.pipes.length === 1) {
          if (!state.multiAwaitDrain) {
            state.multiAwaitDrain = true;
            state.awaitDrainWriters = new SafeSet(
              state.awaitDrainWriters ? [state.awaitDrainWriters] : []
            );
          }
        }
        state.pipes.push(dest);
        debug("pipe count=%d opts=%j", state.pipes.length, pipeOpts);
        const doEnd =
          (!pipeOpts || pipeOpts.end !== false) &&
          dest !== process.stdout &&
          dest !== process.stderr;
        const endFn = doEnd ? onend : unpipe;
        if (state.endEmitted) process.nextTick(endFn);
        else src.once("end", endFn);
        dest.on("unpipe", onunpipe);
        function onunpipe(readable, unpipeInfo) {
          debug("onunpipe");
          if (readable === src) {
            if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
              unpipeInfo.hasUnpiped = true;
              cleanup();
            }
          }
        }
        function onend() {
          debug("onend");
          dest.end();
        }
        let ondrain;
        let cleanedUp = false;
        function cleanup() {
          debug("cleanup");
          dest.removeListener("close", onclose);
          dest.removeListener("finish", onfinish);
          if (ondrain) {
            dest.removeListener("drain", ondrain);
          }
          dest.removeListener("error", onerror);
          dest.removeListener("unpipe", onunpipe);
          src.removeListener("end", onend);
          src.removeListener("end", unpipe);
          src.removeListener("data", ondata);
          cleanedUp = true;
          if (
            ondrain &&
            state.awaitDrainWriters &&
            (!dest._writableState || dest._writableState.needDrain)
          )
            ondrain();
        }
        function pause() {
          if (!cleanedUp) {
            if (state.pipes.length === 1 && state.pipes[0] === dest) {
              debug("false write response, pause", 0);
              state.awaitDrainWriters = dest;
              state.multiAwaitDrain = false;
            } else if (state.pipes.length > 1 && state.pipes.includes(dest)) {
              debug(
                "false write response, pause",
                state.awaitDrainWriters.size
              );
              state.awaitDrainWriters.add(dest);
            }
            src.pause();
          }
          if (!ondrain) {
            ondrain = pipeOnDrain(src, dest);
            dest.on("drain", ondrain);
          }
        }
        src.on("data", ondata);
        function ondata(chunk) {
          debug("ondata");
          const ret = dest.write(chunk);
          debug("dest.write", ret);
          if (ret === false) {
            pause();
          }
        }
        function onerror(er) {
          debug("onerror", er);
          unpipe();
          dest.removeListener("error", onerror);
          if (dest.listenerCount("error") === 0) {
            const s = dest._writableState || dest._readableState;
            if (s && !s.errorEmitted) {
              errorOrDestroy(dest, er);
            } else {
              dest.emit("error", er);
            }
          }
        }
        prependListener(dest, "error", onerror);
        function onclose() {
          dest.removeListener("finish", onfinish);
          unpipe();
        }
        dest.once("close", onclose);
        function onfinish() {
          debug("onfinish");
          dest.removeListener("close", onclose);
          unpipe();
        }
        dest.once("finish", onfinish);
        function unpipe() {
          debug("unpipe");
          src.unpipe(dest);
        }
        dest.emit("pipe", src);
        if (dest.writableNeedDrain === true) {
          if (state.flowing) {
            pause();
          }
        } else if (!state.flowing) {
          debug("pipe resume");
          src.resume();
        }
        return dest;
      };
      function pipeOnDrain(src, dest) {
        return function pipeOnDrainFunctionResult() {
          const state = src._readableState;
          if (state.awaitDrainWriters === dest) {
            debug("pipeOnDrain", 1);
            state.awaitDrainWriters = null;
          } else if (state.multiAwaitDrain) {
            debug("pipeOnDrain", state.awaitDrainWriters.size);
            state.awaitDrainWriters.delete(dest);
          }
          if (
            (!state.awaitDrainWriters || state.awaitDrainWriters.size === 0) &&
            src.listenerCount("data")
          ) {
            src.resume();
          }
        };
      }
      Readable.prototype.unpipe = function (dest) {
        const state = this._readableState;
        const unpipeInfo = {
          hasUnpiped: false,
        };
        if (state.pipes.length === 0) return this;
        if (!dest) {
          const dests = state.pipes;
          state.pipes = [];
          this.pause();
          for (let i = 0; i < dests.length; i++)
            dests[i].emit("unpipe", this, {
              hasUnpiped: false,
            });
          return this;
        }
        const index = ArrayPrototypeIndexOf(state.pipes, dest);
        if (index === -1) return this;
        state.pipes.splice(index, 1);
        if (state.pipes.length === 0) this.pause();
        dest.emit("unpipe", this, unpipeInfo);
        return this;
      };
      Readable.prototype.on = function (ev, fn) {
        const res = Stream.prototype.on.call(this, ev, fn);
        const state = this._readableState;
        if (ev === "data") {
          state.readableListening = this.listenerCount("readable") > 0;
          if (state.flowing !== false) this.resume();
        } else if (ev === "readable") {
          if (!state.endEmitted && !state.readableListening) {
            state.readableListening = state.needReadable = true;
            state.flowing = false;
            state.emittedReadable = false;
            debug("on readable", state.length, state.reading);
            if (state.length) {
              emitReadable(this);
            } else if (!state.reading) {
              process.nextTick(nReadingNextTick, this);
            }
          }
        }
        return res;
      };
      Readable.prototype.addListener = Readable.prototype.on;
      Readable.prototype.removeListener = function (ev, fn) {
        const res = Stream.prototype.removeListener.call(this, ev, fn);
        if (ev === "readable") {
          process.nextTick(updateReadableListening, this);
        }
        return res;
      };
      Readable.prototype.off = Readable.prototype.removeListener;
      Readable.prototype.removeAllListeners = function (ev) {
        const res = Stream.prototype.removeAllListeners.apply(this, arguments);
        if (ev === "readable" || ev === void 0) {
          process.nextTick(updateReadableListening, this);
        }
        return res;
      };
      function updateReadableListening(self2) {
        const state = self2._readableState;
        state.readableListening = self2.listenerCount("readable") > 0;
        if (state.resumeScheduled && state[kPaused] === false) {
          state.flowing = true;
        } else if (self2.listenerCount("data") > 0) {
          self2.resume();
        } else if (!state.readableListening) {
          state.flowing = null;
        }
      }
      function nReadingNextTick(self2) {
        debug("readable nexttick read 0");
        self2.read(0);
      }
      Readable.prototype.resume = function () {
        const state = this._readableState;
        if (!state.flowing) {
          debug("resume");
          state.flowing = !state.readableListening;
          resume(this, state);
        }
        state[kPaused] = false;
        return this;
      };
      function resume(stream, state) {
        if (!state.resumeScheduled) {
          state.resumeScheduled = true;
          process.nextTick(resume_, stream, state);
        }
      }
      function resume_(stream, state) {
        debug("resume", state.reading);
        if (!state.reading) {
          stream.read(0);
        }
        state.resumeScheduled = false;
        stream.emit("resume");
        flow(stream);
        if (state.flowing && !state.reading) stream.read(0);
      }
      Readable.prototype.pause = function () {
        debug("call pause flowing=%j", this._readableState.flowing);
        if (this._readableState.flowing !== false) {
          debug("pause");
          this._readableState.flowing = false;
          this.emit("pause");
        }
        this._readableState[kPaused] = true;
        return this;
      };
      function flow(stream) {
        const state = stream._readableState;
        debug("flow", state.flowing);
        while (state.flowing && stream.read() !== null);
      }
      Readable.prototype.wrap = function (stream) {
        let paused = false;
        stream.on("data", (chunk) => {
          if (!this.push(chunk) && stream.pause) {
            paused = true;
            stream.pause();
          }
        });
        stream.on("end", () => {
          this.push(null);
        });
        stream.on("error", (err) => {
          errorOrDestroy(this, err);
        });
        stream.on("close", () => {
          this.destroy();
        });
        stream.on("destroy", () => {
          this.destroy();
        });
        this._read = () => {
          if (paused && stream.resume) {
            paused = false;
            stream.resume();
          }
        };
        const streamKeys = ObjectKeys(stream);
        for (let j = 1; j < streamKeys.length; j++) {
          const i = streamKeys[j];
          if (this[i] === void 0 && typeof stream[i] === "function") {
            this[i] = stream[i].bind(stream);
          }
        }
        return this;
      };
      Readable.prototype[SymbolAsyncIterator] = function () {
        return streamToAsyncIterator(this);
      };
      Readable.prototype.iterator = function (options) {
        if (options !== void 0) {
          validateObject(options, "options");
        }
        return streamToAsyncIterator(this, options);
      };
      function streamToAsyncIterator(stream, options) {
        if (typeof stream.read !== "function") {
          stream = Readable.wrap(stream, {
            objectMode: true,
          });
        }
        const iter = createAsyncIterator(stream, options);
        iter.stream = stream;
        return iter;
      }
      async function* createAsyncIterator(stream, options) {
        let callback = nop;
        function next(resolve) {
          if (this === stream) {
            callback();
            callback = nop;
          } else {
            callback = resolve;
          }
        }
        stream.on("readable", next);
        let error;
        const cleanup = eos(
          stream,
          {
            writable: false,
          },
          (err) => {
            error = err ? aggregateTwoErrors(error, err) : null;
            callback();
            callback = nop;
          }
        );
        try {
          while (true) {
            const chunk = stream.destroyed ? null : stream.read();
            if (chunk !== null) {
              yield chunk;
            } else if (error) {
              throw error;
            } else if (error === null) {
              return;
            } else {
              await new Promise2(next);
            }
          }
        } catch (err) {
          error = aggregateTwoErrors(error, err);
          throw error;
        } finally {
          if (
            (error ||
              (options === null || options === void 0
                ? void 0
                : options.destroyOnReturn) !== false) &&
            (error === void 0 || stream._readableState.autoDestroy)
          ) {
            destroyImpl.destroyer(stream, null);
          } else {
            stream.off("readable", next);
            cleanup();
          }
        }
      }
      ObjectDefineProperties(Readable.prototype, {
        readable: {
          get() {
            const r = this._readableState;
            return (
              !!r &&
              r.readable !== false &&
              !r.destroyed &&
              !r.errorEmitted &&
              !r.endEmitted
            );
          },
          set(val) {
            if (this._readableState) {
              this._readableState.readable = !!val;
            }
          },
        },
        readableDidRead: {
          enumerable: false,
          get: function () {
            return this._readableState.dataEmitted;
          },
        },
        readableAborted: {
          enumerable: false,
          get: function () {
            return !!(
              this._readableState.readable !== false &&
              (this._readableState.destroyed || this._readableState.errored) &&
              !this._readableState.endEmitted
            );
          },
        },
        readableHighWaterMark: {
          enumerable: false,
          get: function () {
            return this._readableState.highWaterMark;
          },
        },
        readableBuffer: {
          enumerable: false,
          get: function () {
            return this._readableState && this._readableState.buffer;
          },
        },
        readableFlowing: {
          enumerable: false,
          get: function () {
            return this._readableState.flowing;
          },
          set: function (state) {
            if (this._readableState) {
              this._readableState.flowing = state;
            }
          },
        },
        readableLength: {
          enumerable: false,
          get() {
            return this._readableState.length;
          },
        },
        readableObjectMode: {
          enumerable: false,
          get() {
            return this._readableState ? this._readableState.objectMode : false;
          },
        },
        readableEncoding: {
          enumerable: false,
          get() {
            return this._readableState ? this._readableState.encoding : null;
          },
        },
        errored: {
          enumerable: false,
          get() {
            return this._readableState ? this._readableState.errored : null;
          },
        },
        closed: {
          get() {
            return this._readableState ? this._readableState.closed : false;
          },
        },
        destroyed: {
          enumerable: false,
          get() {
            return this._readableState ? this._readableState.destroyed : false;
          },
          set(value) {
            if (!this._readableState) {
              return;
            }
            this._readableState.destroyed = value;
          },
        },
        readableEnded: {
          enumerable: false,
          get() {
            return this._readableState ? this._readableState.endEmitted : false;
          },
        },
      });
      ObjectDefineProperties(ReadableState.prototype, {
        pipesCount: {
          get() {
            return this.pipes.length;
          },
        },
        paused: {
          get() {
            return this[kPaused] !== false;
          },
          set(value) {
            this[kPaused] = !!value;
          },
        },
      });
      Readable._fromList = fromList;
      function fromList(n, state) {
        if (state.length === 0) return null;
        let ret;
        if (state.objectMode) ret = state.buffer.shift();
        else if (!n || n >= state.length) {
          if (state.decoder) ret = state.buffer.join("");
          else if (state.buffer.length === 1) ret = state.buffer.first();
          else ret = state.buffer.concat(state.length);
          state.buffer.clear();
        } else {
          ret = state.buffer.consume(n, state.decoder);
        }
        return ret;
      }
      function endReadable(stream) {
        const state = stream._readableState;
        debug("endReadable", state.endEmitted);
        if (!state.endEmitted) {
          state.ended = true;
          process.nextTick(endReadableNT, state, stream);
        }
      }
      function endReadableNT(state, stream) {
        debug("endReadableNT", state.endEmitted, state.length);
        if (
          !state.errored &&
          !state.closeEmitted &&
          !state.endEmitted &&
          state.length === 0
        ) {
          state.endEmitted = true;
          stream.emit("end");
          if (stream.writable && stream.allowHalfOpen === false) {
            process.nextTick(endWritableNT, stream);
          } else if (state.autoDestroy) {
            const wState = stream._writableState;
            const autoDestroy =
              !wState ||
              (wState.autoDestroy &&
                (wState.finished || wState.writable === false));
            if (autoDestroy) {
              stream.destroy();
            }
          }
        }
      }
      function endWritableNT(stream) {
        const writable =
          stream.writable && !stream.writableEnded && !stream.destroyed;
        if (writable) {
          stream.end();
        }
      }
      Readable.from = function (iterable, opts) {
        return from(Readable, iterable, opts);
      };
      var webStreamsAdapters;
      function lazyWebStreams() {
        if (webStreamsAdapters === void 0) webStreamsAdapters = {};
        return webStreamsAdapters;
      }
      Readable.fromWeb = function (readableStream, options) {
        return lazyWebStreams().newStreamReadableFromReadableStream(
          readableStream,
          options
        );
      };
      Readable.toWeb = function (streamReadable) {
        return lazyWebStreams().newReadableStreamFromStreamReadable(
          streamReadable
        );
      };
      Readable.wrap = function (src, options) {
        var _ref, _src$readableObjectMo;
        return new Readable({
          objectMode:
            (_ref =
              (_src$readableObjectMo = src.readableObjectMode) !== null &&
              _src$readableObjectMo !== void 0
                ? _src$readableObjectMo
                : src.objectMode) !== null && _ref !== void 0
              ? _ref
              : true,
          ...options,
          destroy(err, callback) {
            destroyImpl.destroyer(src, err);
            callback(err);
          },
        }).wrap(src);
      };
    },
  });

  // node_modules/readable-stream/lib/internal/streams/writable.js
  var require_writable = __commonJS({
    "node_modules/readable-stream/lib/internal/streams/writable.js"(
      exports,
      module
    ) {
      "use strict";
      init_process_shim();
      var {
        ArrayPrototypeSlice,
        Error: Error2,
        FunctionPrototypeSymbolHasInstance,
        ObjectDefineProperty,
        ObjectDefineProperties,
        ObjectSetPrototypeOf,
        StringPrototypeToLowerCase,
        Symbol: Symbol2,
        SymbolHasInstance,
      } = require_primordials();
      module.exports = Writable;
      Writable.WritableState = WritableState;
      var { EventEmitter: EE } = require_events();
      var Stream = require_legacy().Stream;
      var destroyImpl = require_destroy();
      var { addAbortSignal } = require_add_abort_signal();
      var { getHighWaterMark, getDefaultHighWaterMark } = require_state();
      var {
        ERR_INVALID_ARG_TYPE,
        ERR_METHOD_NOT_IMPLEMENTED,
        ERR_MULTIPLE_CALLBACK,
        ERR_STREAM_CANNOT_PIPE,
        ERR_STREAM_DESTROYED,
        ERR_STREAM_ALREADY_FINISHED,
        ERR_STREAM_NULL_VALUES,
        ERR_STREAM_WRITE_AFTER_END,
        ERR_UNKNOWN_ENCODING,
      } = require_errors().codes;
      var { errorOrDestroy } = destroyImpl;
      ObjectSetPrototypeOf(Writable.prototype, Stream.prototype);
      ObjectSetPrototypeOf(Writable, Stream);
      function nop() {}
      var kOnFinished = Symbol2("kOnFinished");
      function WritableState(options, stream, isDuplex) {
        if (typeof isDuplex !== "boolean")
          isDuplex = stream instanceof require_duplex();
        this.objectMode = !!(options && options.objectMode);
        if (isDuplex)
          this.objectMode =
            this.objectMode || !!(options && options.writableObjectMode);
        this.highWaterMark = options
          ? getHighWaterMark(this, options, "writableHighWaterMark", isDuplex)
          : getDefaultHighWaterMark(false);
        this.finalCalled = false;
        this.needDrain = false;
        this.ending = false;
        this.ended = false;
        this.finished = false;
        this.destroyed = false;
        const noDecode = !!(options && options.decodeStrings === false);
        this.decodeStrings = !noDecode;
        this.defaultEncoding = (options && options.defaultEncoding) || "utf8";
        this.length = 0;
        this.writing = false;
        this.corked = 0;
        this.sync = true;
        this.bufferProcessing = false;
        this.onwrite = onwrite.bind(void 0, stream);
        this.writecb = null;
        this.writelen = 0;
        this.afterWriteTickInfo = null;
        resetBuffer(this);
        this.pendingcb = 0;
        this.constructed = true;
        this.prefinished = false;
        this.errorEmitted = false;
        this.emitClose = !options || options.emitClose !== false;
        this.autoDestroy = !options || options.autoDestroy !== false;
        this.errored = null;
        this.closed = false;
        this.closeEmitted = false;
        this[kOnFinished] = [];
      }
      function resetBuffer(state) {
        state.buffered = [];
        state.bufferedIndex = 0;
        state.allBuffers = true;
        state.allNoop = true;
      }
      WritableState.prototype.getBuffer = function getBuffer() {
        return ArrayPrototypeSlice(this.buffered, this.bufferedIndex);
      };
      ObjectDefineProperty(WritableState.prototype, "bufferedRequestCount", {
        get() {
          return this.buffered.length - this.bufferedIndex;
        },
      });
      function Writable(options) {
        const isDuplex = this instanceof require_duplex();
        if (!isDuplex && !FunctionPrototypeSymbolHasInstance(Writable, this))
          return new Writable(options);
        this._writableState = new WritableState(options, this, isDuplex);
        if (options) {
          if (typeof options.write === "function") this._write = options.write;
          if (typeof options.writev === "function")
            this._writev = options.writev;
          if (typeof options.destroy === "function")
            this._destroy = options.destroy;
          if (typeof options.final === "function") this._final = options.final;
          if (typeof options.construct === "function")
            this._construct = options.construct;
          if (options.signal) addAbortSignal(options.signal, this);
        }
        Stream.call(this, options);
        destroyImpl.construct(this, () => {
          const state = this._writableState;
          if (!state.writing) {
            clearBuffer(this, state);
          }
          finishMaybe(this, state);
        });
      }
      ObjectDefineProperty(Writable, SymbolHasInstance, {
        value: function (object) {
          if (FunctionPrototypeSymbolHasInstance(this, object)) return true;
          if (this !== Writable) return false;
          return object && object._writableState instanceof WritableState;
        },
      });
      Writable.prototype.pipe = function () {
        errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
      };
      function _write(stream, chunk, encoding, cb) {
        const state = stream._writableState;
        if (typeof encoding === "function") {
          cb = encoding;
          encoding = state.defaultEncoding;
        } else {
          if (!encoding) encoding = state.defaultEncoding;
          else if (encoding !== "buffer" && !Buffer.isEncoding(encoding))
            throw new ERR_UNKNOWN_ENCODING(encoding);
          if (typeof cb !== "function") cb = nop;
        }
        if (chunk === null) {
          throw new ERR_STREAM_NULL_VALUES();
        } else if (!state.objectMode) {
          if (typeof chunk === "string") {
            if (state.decodeStrings !== false) {
              chunk = Buffer.from(chunk, encoding);
              encoding = "buffer";
            }
          } else if (chunk instanceof Buffer) {
            encoding = "buffer";
          } else if (Stream._isUint8Array(chunk)) {
            chunk = Stream._uint8ArrayToBuffer(chunk);
            encoding = "buffer";
          } else {
            throw new ERR_INVALID_ARG_TYPE(
              "chunk",
              ["string", "Buffer", "Uint8Array"],
              chunk
            );
          }
        }
        let err;
        if (state.ending) {
          err = new ERR_STREAM_WRITE_AFTER_END();
        } else if (state.destroyed) {
          err = new ERR_STREAM_DESTROYED("write");
        }
        if (err) {
          process.nextTick(cb, err);
          errorOrDestroy(stream, err, true);
          return err;
        }
        state.pendingcb++;
        return writeOrBuffer(stream, state, chunk, encoding, cb);
      }
      Writable.prototype.write = function (chunk, encoding, cb) {
        return _write(this, chunk, encoding, cb) === true;
      };
      Writable.prototype.cork = function () {
        this._writableState.corked++;
      };
      Writable.prototype.uncork = function () {
        const state = this._writableState;
        if (state.corked) {
          state.corked--;
          if (!state.writing) clearBuffer(this, state);
        }
      };
      Writable.prototype.setDefaultEncoding = function setDefaultEncoding(
        encoding
      ) {
        if (typeof encoding === "string")
          encoding = StringPrototypeToLowerCase(encoding);
        if (!Buffer.isEncoding(encoding))
          throw new ERR_UNKNOWN_ENCODING(encoding);
        this._writableState.defaultEncoding = encoding;
        return this;
      };
      function writeOrBuffer(stream, state, chunk, encoding, callback) {
        const len = state.objectMode ? 1 : chunk.length;
        state.length += len;
        const ret = state.length < state.highWaterMark;
        if (!ret) state.needDrain = true;
        if (
          state.writing ||
          state.corked ||
          state.errored ||
          !state.constructed
        ) {
          state.buffered.push({
            chunk,
            encoding,
            callback,
          });
          if (state.allBuffers && encoding !== "buffer") {
            state.allBuffers = false;
          }
          if (state.allNoop && callback !== nop) {
            state.allNoop = false;
          }
        } else {
          state.writelen = len;
          state.writecb = callback;
          state.writing = true;
          state.sync = true;
          stream._write(chunk, encoding, state.onwrite);
          state.sync = false;
        }
        return ret && !state.errored && !state.destroyed;
      }
      function doWrite(stream, state, writev, len, chunk, encoding, cb) {
        state.writelen = len;
        state.writecb = cb;
        state.writing = true;
        state.sync = true;
        if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED("write"));
        else if (writev) stream._writev(chunk, state.onwrite);
        else stream._write(chunk, encoding, state.onwrite);
        state.sync = false;
      }
      function onwriteError(stream, state, er, cb) {
        --state.pendingcb;
        cb(er);
        errorBuffer(state);
        errorOrDestroy(stream, er);
      }
      function onwrite(stream, er) {
        const state = stream._writableState;
        const sync = state.sync;
        const cb = state.writecb;
        if (typeof cb !== "function") {
          errorOrDestroy(stream, new ERR_MULTIPLE_CALLBACK());
          return;
        }
        state.writing = false;
        state.writecb = null;
        state.length -= state.writelen;
        state.writelen = 0;
        if (er) {
          er.stack;
          if (!state.errored) {
            state.errored = er;
          }
          if (stream._readableState && !stream._readableState.errored) {
            stream._readableState.errored = er;
          }
          if (sync) {
            process.nextTick(onwriteError, stream, state, er, cb);
          } else {
            onwriteError(stream, state, er, cb);
          }
        } else {
          if (state.buffered.length > state.bufferedIndex) {
            clearBuffer(stream, state);
          }
          if (sync) {
            if (
              state.afterWriteTickInfo !== null &&
              state.afterWriteTickInfo.cb === cb
            ) {
              state.afterWriteTickInfo.count++;
            } else {
              state.afterWriteTickInfo = {
                count: 1,
                cb,
                stream,
                state,
              };
              process.nextTick(afterWriteTick, state.afterWriteTickInfo);
            }
          } else {
            afterWrite(stream, state, 1, cb);
          }
        }
      }
      function afterWriteTick({ stream, state, count, cb }) {
        state.afterWriteTickInfo = null;
        return afterWrite(stream, state, count, cb);
      }
      function afterWrite(stream, state, count, cb) {
        const needDrain =
          !state.ending &&
          !stream.destroyed &&
          state.length === 0 &&
          state.needDrain;
        if (needDrain) {
          state.needDrain = false;
          stream.emit("drain");
        }
        while (count-- > 0) {
          state.pendingcb--;
          cb();
        }
        if (state.destroyed) {
          errorBuffer(state);
        }
        finishMaybe(stream, state);
      }
      function errorBuffer(state) {
        if (state.writing) {
          return;
        }
        for (let n = state.bufferedIndex; n < state.buffered.length; ++n) {
          var _state$errored;
          const { chunk, callback } = state.buffered[n];
          const len = state.objectMode ? 1 : chunk.length;
          state.length -= len;
          callback(
            (_state$errored = state.errored) !== null &&
              _state$errored !== void 0
              ? _state$errored
              : new ERR_STREAM_DESTROYED("write")
          );
        }
        const onfinishCallbacks = state[kOnFinished].splice(0);
        for (let i = 0; i < onfinishCallbacks.length; i++) {
          var _state$errored2;
          onfinishCallbacks[i](
            (_state$errored2 = state.errored) !== null &&
              _state$errored2 !== void 0
              ? _state$errored2
              : new ERR_STREAM_DESTROYED("end")
          );
        }
        resetBuffer(state);
      }
      function clearBuffer(stream, state) {
        if (
          state.corked ||
          state.bufferProcessing ||
          state.destroyed ||
          !state.constructed
        ) {
          return;
        }
        const { buffered, bufferedIndex, objectMode } = state;
        const bufferedLength = buffered.length - bufferedIndex;
        if (!bufferedLength) {
          return;
        }
        let i = bufferedIndex;
        state.bufferProcessing = true;
        if (bufferedLength > 1 && stream._writev) {
          state.pendingcb -= bufferedLength - 1;
          const callback = state.allNoop
            ? nop
            : (err) => {
                for (let n = i; n < buffered.length; ++n) {
                  buffered[n].callback(err);
                }
              };
          const chunks =
            state.allNoop && i === 0
              ? buffered
              : ArrayPrototypeSlice(buffered, i);
          chunks.allBuffers = state.allBuffers;
          doWrite(stream, state, true, state.length, chunks, "", callback);
          resetBuffer(state);
        } else {
          do {
            const { chunk, encoding, callback } = buffered[i];
            buffered[i++] = null;
            const len = objectMode ? 1 : chunk.length;
            doWrite(stream, state, false, len, chunk, encoding, callback);
          } while (i < buffered.length && !state.writing);
          if (i === buffered.length) {
            resetBuffer(state);
          } else if (i > 256) {
            buffered.splice(0, i);
            state.bufferedIndex = 0;
          } else {
            state.bufferedIndex = i;
          }
        }
        state.bufferProcessing = false;
      }
      Writable.prototype._write = function (chunk, encoding, cb) {
        if (this._writev) {
          this._writev(
            [
              {
                chunk,
                encoding,
              },
            ],
            cb
          );
        } else {
          throw new ERR_METHOD_NOT_IMPLEMENTED("_write()");
        }
      };
      Writable.prototype._writev = null;
      Writable.prototype.end = function (chunk, encoding, cb) {
        const state = this._writableState;
        if (typeof chunk === "function") {
          cb = chunk;
          chunk = null;
          encoding = null;
        } else if (typeof encoding === "function") {
          cb = encoding;
          encoding = null;
        }
        let err;
        if (chunk !== null && chunk !== void 0) {
          const ret = _write(this, chunk, encoding);
          if (ret instanceof Error2) {
            err = ret;
          }
        }
        if (state.corked) {
          state.corked = 1;
          this.uncork();
        }
        if (err) {
        } else if (!state.errored && !state.ending) {
          state.ending = true;
          finishMaybe(this, state, true);
          state.ended = true;
        } else if (state.finished) {
          err = new ERR_STREAM_ALREADY_FINISHED("end");
        } else if (state.destroyed) {
          err = new ERR_STREAM_DESTROYED("end");
        }
        if (typeof cb === "function") {
          if (err || state.finished) {
            process.nextTick(cb, err);
          } else {
            state[kOnFinished].push(cb);
          }
        }
        return this;
      };
      function needFinish(state) {
        return (
          state.ending &&
          !state.destroyed &&
          state.constructed &&
          state.length === 0 &&
          !state.errored &&
          state.buffered.length === 0 &&
          !state.finished &&
          !state.writing &&
          !state.errorEmitted &&
          !state.closeEmitted
        );
      }
      function callFinal(stream, state) {
        let called = false;
        function onFinish(err) {
          if (called) {
            errorOrDestroy(
              stream,
              err !== null && err !== void 0 ? err : ERR_MULTIPLE_CALLBACK()
            );
            return;
          }
          called = true;
          state.pendingcb--;
          if (err) {
            const onfinishCallbacks = state[kOnFinished].splice(0);
            for (let i = 0; i < onfinishCallbacks.length; i++) {
              onfinishCallbacks[i](err);
            }
            errorOrDestroy(stream, err, state.sync);
          } else if (needFinish(state)) {
            state.prefinished = true;
            stream.emit("prefinish");
            state.pendingcb++;
            process.nextTick(finish, stream, state);
          }
        }
        state.sync = true;
        state.pendingcb++;
        try {
          stream._final(onFinish);
        } catch (err) {
          onFinish(err);
        }
        state.sync = false;
      }
      function prefinish(stream, state) {
        if (!state.prefinished && !state.finalCalled) {
          if (typeof stream._final === "function" && !state.destroyed) {
            state.finalCalled = true;
            callFinal(stream, state);
          } else {
            state.prefinished = true;
            stream.emit("prefinish");
          }
        }
      }
      function finishMaybe(stream, state, sync) {
        if (needFinish(state)) {
          prefinish(stream, state);
          if (state.pendingcb === 0) {
            if (sync) {
              state.pendingcb++;
              process.nextTick(
                (stream2, state2) => {
                  if (needFinish(state2)) {
                    finish(stream2, state2);
                  } else {
                    state2.pendingcb--;
                  }
                },
                stream,
                state
              );
            } else if (needFinish(state)) {
              state.pendingcb++;
              finish(stream, state);
            }
          }
        }
      }
      function finish(stream, state) {
        state.pendingcb--;
        state.finished = true;
        const onfinishCallbacks = state[kOnFinished].splice(0);
        for (let i = 0; i < onfinishCallbacks.length; i++) {
          onfinishCallbacks[i]();
        }
        stream.emit("finish");
        if (state.autoDestroy) {
          const rState = stream._readableState;
          const autoDestroy =
            !rState ||
            (rState.autoDestroy &&
              (rState.endEmitted || rState.readable === false));
          if (autoDestroy) {
            stream.destroy();
          }
        }
      }
      ObjectDefineProperties(Writable.prototype, {
        closed: {
          get() {
            return this._writableState ? this._writableState.closed : false;
          },
        },
        destroyed: {
          get() {
            return this._writableState ? this._writableState.destroyed : false;
          },
          set(value) {
            if (this._writableState) {
              this._writableState.destroyed = value;
            }
          },
        },
        writable: {
          get() {
            const w = this._writableState;
            return (
              !!w &&
              w.writable !== false &&
              !w.destroyed &&
              !w.errored &&
              !w.ending &&
              !w.ended
            );
          },
          set(val) {
            if (this._writableState) {
              this._writableState.writable = !!val;
            }
          },
        },
        writableFinished: {
          get() {
            return this._writableState ? this._writableState.finished : false;
          },
        },
        writableObjectMode: {
          get() {
            return this._writableState ? this._writableState.objectMode : false;
          },
        },
        writableBuffer: {
          get() {
            return this._writableState && this._writableState.getBuffer();
          },
        },
        writableEnded: {
          get() {
            return this._writableState ? this._writableState.ending : false;
          },
        },
        writableNeedDrain: {
          get() {
            const wState = this._writableState;
            if (!wState) return false;
            return !wState.destroyed && !wState.ending && wState.needDrain;
          },
        },
        writableHighWaterMark: {
          get() {
            return this._writableState && this._writableState.highWaterMark;
          },
        },
        writableCorked: {
          get() {
            return this._writableState ? this._writableState.corked : 0;
          },
        },
        writableLength: {
          get() {
            return this._writableState && this._writableState.length;
          },
        },
        errored: {
          enumerable: false,
          get() {
            return this._writableState ? this._writableState.errored : null;
          },
        },
        writableAborted: {
          enumerable: false,
          get: function () {
            return !!(
              this._writableState.writable !== false &&
              (this._writableState.destroyed || this._writableState.errored) &&
              !this._writableState.finished
            );
          },
        },
      });
      var destroy = destroyImpl.destroy;
      Writable.prototype.destroy = function (err, cb) {
        const state = this._writableState;
        if (
          !state.destroyed &&
          (state.bufferedIndex < state.buffered.length ||
            state[kOnFinished].length)
        ) {
          process.nextTick(errorBuffer, state);
        }
        destroy.call(this, err, cb);
        return this;
      };
      Writable.prototype._undestroy = destroyImpl.undestroy;
      Writable.prototype._destroy = function (err, cb) {
        cb(err);
      };
      Writable.prototype[EE.captureRejectionSymbol] = function (err) {
        this.destroy(err);
      };
      var webStreamsAdapters;
      function lazyWebStreams() {
        if (webStreamsAdapters === void 0) webStreamsAdapters = {};
        return webStreamsAdapters;
      }
      Writable.fromWeb = function (writableStream, options) {
        return lazyWebStreams().newStreamWritableFromWritableStream(
          writableStream,
          options
        );
      };
      Writable.toWeb = function (streamWritable) {
        return lazyWebStreams().newWritableStreamFromStreamWritable(
          streamWritable
        );
      };
    },
  });

  // node_modules/readable-stream/lib/internal/streams/duplexify.js
  var require_duplexify = __commonJS({
    "node_modules/readable-stream/lib/internal/streams/duplexify.js"(
      exports,
      module
    ) {
      "use strict";
      init_process_shim();
      var abortControllerModule = require_abort_controller();
      var bufferModule = require_buffer();
      var {
        isReadable,
        isWritable,
        isIterable,
        isNodeStream,
        isReadableNodeStream,
        isWritableNodeStream,
        isDuplexNodeStream,
      } = require_utils();
      var eos = require_end_of_stream();
      var {
        AbortError,
        codes: { ERR_INVALID_ARG_TYPE, ERR_INVALID_RETURN_VALUE },
      } = require_errors();
      var { destroyer } = require_destroy();
      var Duplex = require_duplex();
      var Readable = require_readable();
      var { createDeferredPromise } = require_util();
      var from = require_from();
      var Blob = globalThis.Blob || bufferModule.Blob;
      var isBlob =
        typeof Blob !== "undefined"
          ? function isBlob2(b) {
              return b instanceof Blob;
            }
          : function isBlob2(b) {
              return false;
            };
      var AbortController =
        globalThis.AbortController || abortControllerModule.AbortController;
      var { FunctionPrototypeCall } = require_primordials();
      var Duplexify = class extends Duplex {
        constructor(options) {
          super(options);
          if (
            (options === null || options === void 0
              ? void 0
              : options.readable) === false
          ) {
            this._readableState.readable = false;
            this._readableState.ended = true;
            this._readableState.endEmitted = true;
          }
          if (
            (options === null || options === void 0
              ? void 0
              : options.writable) === false
          ) {
            this._writableState.writable = false;
            this._writableState.ending = true;
            this._writableState.ended = true;
            this._writableState.finished = true;
          }
        }
      };
      module.exports = function duplexify(body, name) {
        if (isDuplexNodeStream(body)) {
          return body;
        }
        if (isReadableNodeStream(body)) {
          return _duplexify({
            readable: body,
          });
        }
        if (isWritableNodeStream(body)) {
          return _duplexify({
            writable: body,
          });
        }
        if (isNodeStream(body)) {
          return _duplexify({
            writable: false,
            readable: false,
          });
        }
        if (typeof body === "function") {
          const { value, write, final, destroy } = fromAsyncGen(body);
          if (isIterable(value)) {
            return from(Duplexify, value, {
              objectMode: true,
              write,
              final,
              destroy,
            });
          }
          const then2 =
            value === null || value === void 0 ? void 0 : value.then;
          if (typeof then2 === "function") {
            let d;
            const promise = FunctionPrototypeCall(
              then2,
              value,
              (val) => {
                if (val != null) {
                  throw new ERR_INVALID_RETURN_VALUE("nully", "body", val);
                }
              },
              (err) => {
                destroyer(d, err);
              }
            );
            return (d = new Duplexify({
              objectMode: true,
              readable: false,
              write,
              final(cb) {
                final(async () => {
                  try {
                    await promise;
                    process.nextTick(cb, null);
                  } catch (err) {
                    process.nextTick(cb, err);
                  }
                });
              },
              destroy,
            }));
          }
          throw new ERR_INVALID_RETURN_VALUE(
            "Iterable, AsyncIterable or AsyncFunction",
            name,
            value
          );
        }
        if (isBlob(body)) {
          return duplexify(body.arrayBuffer());
        }
        if (isIterable(body)) {
          return from(Duplexify, body, {
            objectMode: true,
            writable: false,
          });
        }
        if (
          typeof (body === null || body === void 0 ? void 0 : body.writable) ===
            "object" ||
          typeof (body === null || body === void 0 ? void 0 : body.readable) ===
            "object"
        ) {
          const readable =
            body !== null && body !== void 0 && body.readable
              ? isReadableNodeStream(
                  body === null || body === void 0 ? void 0 : body.readable
                )
                ? body === null || body === void 0
                  ? void 0
                  : body.readable
                : duplexify(body.readable)
              : void 0;
          const writable =
            body !== null && body !== void 0 && body.writable
              ? isWritableNodeStream(
                  body === null || body === void 0 ? void 0 : body.writable
                )
                ? body === null || body === void 0
                  ? void 0
                  : body.writable
                : duplexify(body.writable)
              : void 0;
          return _duplexify({
            readable,
            writable,
          });
        }
        const then = body === null || body === void 0 ? void 0 : body.then;
        if (typeof then === "function") {
          let d;
          FunctionPrototypeCall(
            then,
            body,
            (val) => {
              if (val != null) {
                d.push(val);
              }
              d.push(null);
            },
            (err) => {
              destroyer(d, err);
            }
          );
          return (d = new Duplexify({
            objectMode: true,
            writable: false,
            read() {},
          }));
        }
        throw new ERR_INVALID_ARG_TYPE(
          name,
          [
            "Blob",
            "ReadableStream",
            "WritableStream",
            "Stream",
            "Iterable",
            "AsyncIterable",
            "Function",
            "{ readable, writable } pair",
            "Promise",
          ],
          body
        );
      };
      function fromAsyncGen(fn) {
        let { promise, resolve } = createDeferredPromise();
        const ac = new AbortController();
        const signal = ac.signal;
        const value = fn(
          (async function* () {
            while (true) {
              const _promise = promise;
              promise = null;
              const { chunk, done, cb } = await _promise;
              process.nextTick(cb);
              if (done) return;
              if (signal.aborted)
                throw new AbortError(void 0, {
                  cause: signal.reason,
                });
              ({ promise, resolve } = createDeferredPromise());
              yield chunk;
            }
          })(),
          {
            signal,
          }
        );
        return {
          value,
          write(chunk, encoding, cb) {
            const _resolve = resolve;
            resolve = null;
            _resolve({
              chunk,
              done: false,
              cb,
            });
          },
          final(cb) {
            const _resolve = resolve;
            resolve = null;
            _resolve({
              done: true,
              cb,
            });
          },
          destroy(err, cb) {
            ac.abort();
            cb(err);
          },
        };
      }
      function _duplexify(pair) {
        const r =
          pair.readable && typeof pair.readable.read !== "function"
            ? Readable.wrap(pair.readable)
            : pair.readable;
        const w = pair.writable;
        let readable = !!isReadable(r);
        let writable = !!isWritable(w);
        let ondrain;
        let onfinish;
        let onreadable;
        let onclose;
        let d;
        function onfinished(err) {
          const cb = onclose;
          onclose = null;
          if (cb) {
            cb(err);
          } else if (err) {
            d.destroy(err);
          } else if (!readable && !writable) {
            d.destroy();
          }
        }
        d = new Duplexify({
          readableObjectMode: !!(
            r !== null &&
            r !== void 0 &&
            r.readableObjectMode
          ),
          writableObjectMode: !!(
            w !== null &&
            w !== void 0 &&
            w.writableObjectMode
          ),
          readable,
          writable,
        });
        if (writable) {
          eos(w, (err) => {
            writable = false;
            if (err) {
              destroyer(r, err);
            }
            onfinished(err);
          });
          d._write = function (chunk, encoding, callback) {
            if (w.write(chunk, encoding)) {
              callback();
            } else {
              ondrain = callback;
            }
          };
          d._final = function (callback) {
            w.end();
            onfinish = callback;
          };
          w.on("drain", function () {
            if (ondrain) {
              const cb = ondrain;
              ondrain = null;
              cb();
            }
          });
          w.on("finish", function () {
            if (onfinish) {
              const cb = onfinish;
              onfinish = null;
              cb();
            }
          });
        }
        if (readable) {
          eos(r, (err) => {
            readable = false;
            if (err) {
              destroyer(r, err);
            }
            onfinished(err);
          });
          r.on("readable", function () {
            if (onreadable) {
              const cb = onreadable;
              onreadable = null;
              cb();
            }
          });
          r.on("end", function () {
            d.push(null);
          });
          d._read = function () {
            while (true) {
              const buf = r.read();
              if (buf === null) {
                onreadable = d._read;
                return;
              }
              if (!d.push(buf)) {
                return;
              }
            }
          };
        }
        d._destroy = function (err, callback) {
          if (!err && onclose !== null) {
            err = new AbortError();
          }
          onreadable = null;
          ondrain = null;
          onfinish = null;
          if (onclose === null) {
            callback(err);
          } else {
            onclose = callback;
            destroyer(w, err);
            destroyer(r, err);
          }
        };
        return d;
      }
    },
  });

  // node_modules/readable-stream/lib/internal/streams/duplex.js
  var require_duplex = __commonJS({
    "node_modules/readable-stream/lib/internal/streams/duplex.js"(
      exports,
      module
    ) {
      "use strict";
      init_process_shim();
      var {
        ObjectDefineProperties,
        ObjectGetOwnPropertyDescriptor,
        ObjectKeys,
        ObjectSetPrototypeOf,
      } = require_primordials();
      module.exports = Duplex;
      var Readable = require_readable();
      var Writable = require_writable();
      ObjectSetPrototypeOf(Duplex.prototype, Readable.prototype);
      ObjectSetPrototypeOf(Duplex, Readable);
      {
        const keys = ObjectKeys(Writable.prototype);
        for (let i = 0; i < keys.length; i++) {
          const method = keys[i];
          if (!Duplex.prototype[method])
            Duplex.prototype[method] = Writable.prototype[method];
        }
      }
      function Duplex(options) {
        if (!(this instanceof Duplex)) return new Duplex(options);
        Readable.call(this, options);
        Writable.call(this, options);
        if (options) {
          this.allowHalfOpen = options.allowHalfOpen !== false;
          if (options.readable === false) {
            this._readableState.readable = false;
            this._readableState.ended = true;
            this._readableState.endEmitted = true;
          }
          if (options.writable === false) {
            this._writableState.writable = false;
            this._writableState.ending = true;
            this._writableState.ended = true;
            this._writableState.finished = true;
          }
        } else {
          this.allowHalfOpen = true;
        }
      }
      ObjectDefineProperties(Duplex.prototype, {
        writable: ObjectGetOwnPropertyDescriptor(
          Writable.prototype,
          "writable"
        ),
        writableHighWaterMark: ObjectGetOwnPropertyDescriptor(
          Writable.prototype,
          "writableHighWaterMark"
        ),
        writableObjectMode: ObjectGetOwnPropertyDescriptor(
          Writable.prototype,
          "writableObjectMode"
        ),
        writableBuffer: ObjectGetOwnPropertyDescriptor(
          Writable.prototype,
          "writableBuffer"
        ),
        writableLength: ObjectGetOwnPropertyDescriptor(
          Writable.prototype,
          "writableLength"
        ),
        writableFinished: ObjectGetOwnPropertyDescriptor(
          Writable.prototype,
          "writableFinished"
        ),
        writableCorked: ObjectGetOwnPropertyDescriptor(
          Writable.prototype,
          "writableCorked"
        ),
        writableEnded: ObjectGetOwnPropertyDescriptor(
          Writable.prototype,
          "writableEnded"
        ),
        writableNeedDrain: ObjectGetOwnPropertyDescriptor(
          Writable.prototype,
          "writableNeedDrain"
        ),
        destroyed: {
          get() {
            if (
              this._readableState === void 0 ||
              this._writableState === void 0
            ) {
              return false;
            }
            return (
              this._readableState.destroyed && this._writableState.destroyed
            );
          },
          set(value) {
            if (this._readableState && this._writableState) {
              this._readableState.destroyed = value;
              this._writableState.destroyed = value;
            }
          },
        },
      });
      var webStreamsAdapters;
      function lazyWebStreams() {
        if (webStreamsAdapters === void 0) webStreamsAdapters = {};
        return webStreamsAdapters;
      }
      Duplex.fromWeb = function (pair, options) {
        return lazyWebStreams().newStreamDuplexFromReadableWritablePair(
          pair,
          options
        );
      };
      Duplex.toWeb = function (duplex) {
        return lazyWebStreams().newReadableWritablePairFromDuplex(duplex);
      };
      var duplexify;
      Duplex.from = function (body) {
        if (!duplexify) {
          duplexify = require_duplexify();
        }
        return duplexify(body, "body");
      };
    },
  });

  // node_modules/readable-stream/lib/internal/streams/transform.js
  var require_transform = __commonJS({
    "node_modules/readable-stream/lib/internal/streams/transform.js"(
      exports,
      module
    ) {
      "use strict";
      init_process_shim();
      var { ObjectSetPrototypeOf, Symbol: Symbol2 } = require_primordials();
      module.exports = Transform;
      var { ERR_METHOD_NOT_IMPLEMENTED } = require_errors().codes;
      var Duplex = require_duplex();
      ObjectSetPrototypeOf(Transform.prototype, Duplex.prototype);
      ObjectSetPrototypeOf(Transform, Duplex);
      var kCallback = Symbol2("kCallback");
      function Transform(options) {
        if (!(this instanceof Transform)) return new Transform(options);
        Duplex.call(this, options);
        this._readableState.sync = false;
        this[kCallback] = null;
        if (options) {
          if (typeof options.transform === "function")
            this._transform = options.transform;
          if (typeof options.flush === "function") this._flush = options.flush;
        }
        this.on("prefinish", prefinish);
      }
      function final(cb) {
        if (typeof this._flush === "function" && !this.destroyed) {
          this._flush((er, data) => {
            if (er) {
              if (cb) {
                cb(er);
              } else {
                this.destroy(er);
              }
              return;
            }
            if (data != null) {
              this.push(data);
            }
            this.push(null);
            if (cb) {
              cb();
            }
          });
        } else {
          this.push(null);
          if (cb) {
            cb();
          }
        }
      }
      function prefinish() {
        if (this._final !== final) {
          final.call(this);
        }
      }
      Transform.prototype._final = final;
      Transform.prototype._transform = function (chunk, encoding, callback) {
        throw new ERR_METHOD_NOT_IMPLEMENTED("_transform()");
      };
      Transform.prototype._write = function (chunk, encoding, callback) {
        const rState = this._readableState;
        const wState = this._writableState;
        const length = rState.length;
        this._transform(chunk, encoding, (err, val) => {
          if (err) {
            callback(err);
            return;
          }
          if (val != null) {
            this.push(val);
          }
          if (
            wState.ended ||
            length === rState.length ||
            rState.length < rState.highWaterMark ||
            rState.highWaterMark === 0 ||
            rState.length === 0
          ) {
            callback();
          } else {
            this[kCallback] = callback;
          }
        });
      };
      Transform.prototype._read = function () {
        if (this[kCallback]) {
          const callback = this[kCallback];
          this[kCallback] = null;
          callback();
        }
      };
    },
  });

  // node_modules/readable-stream/lib/internal/streams/passthrough.js
  var require_passthrough = __commonJS({
    "node_modules/readable-stream/lib/internal/streams/passthrough.js"(
      exports,
      module
    ) {
      "use strict";
      init_process_shim();
      var { ObjectSetPrototypeOf } = require_primordials();
      module.exports = PassThrough;
      var Transform = require_transform();
      ObjectSetPrototypeOf(PassThrough.prototype, Transform.prototype);
      ObjectSetPrototypeOf(PassThrough, Transform);
      function PassThrough(options) {
        if (!(this instanceof PassThrough)) return new PassThrough(options);
        Transform.call(this, options);
      }
      PassThrough.prototype._transform = function (chunk, encoding, cb) {
        cb(null, chunk);
      };
    },
  });

  // node_modules/readable-stream/lib/internal/streams/pipeline.js
  var require_pipeline = __commonJS({
    "node_modules/readable-stream/lib/internal/streams/pipeline.js"(
      exports,
      module
    ) {
      "use strict";
      init_process_shim();
      var abortControllerModule = require_abort_controller();
      var {
        ArrayIsArray,
        Promise: Promise2,
        SymbolAsyncIterator,
      } = require_primordials();
      var eos = require_end_of_stream();
      var { once } = require_util();
      var destroyImpl = require_destroy();
      var Duplex = require_duplex();
      var {
        aggregateTwoErrors,
        codes: {
          ERR_INVALID_ARG_TYPE,
          ERR_INVALID_RETURN_VALUE,
          ERR_MISSING_ARGS,
          ERR_STREAM_DESTROYED,
        },
        AbortError,
      } = require_errors();
      var { validateFunction, validateAbortSignal } = require_validators();
      var { isIterable, isReadable, isReadableNodeStream, isNodeStream } =
        require_utils();
      var AbortController =
        globalThis.AbortController || abortControllerModule.AbortController;
      var PassThrough;
      var Readable;
      function destroyer(stream, reading, writing) {
        let finished = false;
        stream.on("close", () => {
          finished = true;
        });
        const cleanup = eos(
          stream,
          {
            readable: reading,
            writable: writing,
          },
          (err) => {
            finished = !err;
          }
        );
        return {
          destroy: (err) => {
            if (finished) return;
            finished = true;
            destroyImpl.destroyer(
              stream,
              err || new ERR_STREAM_DESTROYED("pipe")
            );
          },
          cleanup,
        };
      }
      function popCallback(streams) {
        validateFunction(
          streams[streams.length - 1],
          "streams[stream.length - 1]"
        );
        return streams.pop();
      }
      function makeAsyncIterable(val) {
        if (isIterable(val)) {
          return val;
        } else if (isReadableNodeStream(val)) {
          return fromReadable(val);
        }
        throw new ERR_INVALID_ARG_TYPE(
          "val",
          ["Readable", "Iterable", "AsyncIterable"],
          val
        );
      }
      async function* fromReadable(val) {
        if (!Readable) {
          Readable = require_readable();
        }
        yield* Readable.prototype[SymbolAsyncIterator].call(val);
      }
      async function pump(iterable, writable, finish, { end }) {
        let error;
        let onresolve = null;
        const resume = (err) => {
          if (err) {
            error = err;
          }
          if (onresolve) {
            const callback = onresolve;
            onresolve = null;
            callback();
          }
        };
        const wait = () =>
          new Promise2((resolve, reject) => {
            if (error) {
              reject(error);
            } else {
              onresolve = () => {
                if (error) {
                  reject(error);
                } else {
                  resolve();
                }
              };
            }
          });
        writable.on("drain", resume);
        const cleanup = eos(
          writable,
          {
            readable: false,
          },
          resume
        );
        try {
          if (writable.writableNeedDrain) {
            await wait();
          }
          for await (const chunk of iterable) {
            if (!writable.write(chunk)) {
              await wait();
            }
          }
          if (end) {
            writable.end();
          }
          await wait();
          finish();
        } catch (err) {
          finish(error !== err ? aggregateTwoErrors(error, err) : err);
        } finally {
          cleanup();
          writable.off("drain", resume);
        }
      }
      function pipeline(...streams) {
        return pipelineImpl(streams, once(popCallback(streams)));
      }
      function pipelineImpl(streams, callback, opts) {
        if (streams.length === 1 && ArrayIsArray(streams[0])) {
          streams = streams[0];
        }
        if (streams.length < 2) {
          throw new ERR_MISSING_ARGS("streams");
        }
        const ac = new AbortController();
        const signal = ac.signal;
        const outerSignal =
          opts === null || opts === void 0 ? void 0 : opts.signal;
        const lastStreamCleanup = [];
        validateAbortSignal(outerSignal, "options.signal");
        function abort() {
          finishImpl(new AbortError());
        }
        outerSignal === null || outerSignal === void 0
          ? void 0
          : outerSignal.addEventListener("abort", abort);
        let error;
        let value;
        const destroys = [];
        let finishCount = 0;
        function finish(err) {
          finishImpl(err, --finishCount === 0);
        }
        function finishImpl(err, final) {
          if (err && (!error || error.code === "ERR_STREAM_PREMATURE_CLOSE")) {
            error = err;
          }
          if (!error && !final) {
            return;
          }
          while (destroys.length) {
            destroys.shift()(error);
          }
          outerSignal === null || outerSignal === void 0
            ? void 0
            : outerSignal.removeEventListener("abort", abort);
          ac.abort();
          if (final) {
            if (!error) {
              lastStreamCleanup.forEach((fn) => fn());
            }
            process.nextTick(callback, error, value);
          }
        }
        let ret;
        for (let i = 0; i < streams.length; i++) {
          const stream = streams[i];
          const reading = i < streams.length - 1;
          const writing = i > 0;
          const end =
            reading ||
            (opts === null || opts === void 0 ? void 0 : opts.end) !== false;
          const isLastStream = i === streams.length - 1;
          if (isNodeStream(stream)) {
            let onError = function (err) {
              if (
                err &&
                err.name !== "AbortError" &&
                err.code !== "ERR_STREAM_PREMATURE_CLOSE"
              ) {
                finish(err);
              }
            };
            if (end) {
              const { destroy, cleanup } = destroyer(stream, reading, writing);
              destroys.push(destroy);
              if (isReadable(stream) && isLastStream) {
                lastStreamCleanup.push(cleanup);
              }
            }
            stream.on("error", onError);
            if (isReadable(stream) && isLastStream) {
              lastStreamCleanup.push(() => {
                stream.removeListener("error", onError);
              });
            }
          }
          if (i === 0) {
            if (typeof stream === "function") {
              ret = stream({
                signal,
              });
              if (!isIterable(ret)) {
                throw new ERR_INVALID_RETURN_VALUE(
                  "Iterable, AsyncIterable or Stream",
                  "source",
                  ret
                );
              }
            } else if (isIterable(stream) || isReadableNodeStream(stream)) {
              ret = stream;
            } else {
              ret = Duplex.from(stream);
            }
          } else if (typeof stream === "function") {
            ret = makeAsyncIterable(ret);
            ret = stream(ret, {
              signal,
            });
            if (reading) {
              if (!isIterable(ret, true)) {
                throw new ERR_INVALID_RETURN_VALUE(
                  "AsyncIterable",
                  `transform[${i - 1}]`,
                  ret
                );
              }
            } else {
              var _ret;
              if (!PassThrough) {
                PassThrough = require_passthrough();
              }
              const pt = new PassThrough({
                objectMode: true,
              });
              const then =
                (_ret = ret) === null || _ret === void 0 ? void 0 : _ret.then;
              if (typeof then === "function") {
                finishCount++;
                then.call(
                  ret,
                  (val) => {
                    value = val;
                    if (val != null) {
                      pt.write(val);
                    }
                    if (end) {
                      pt.end();
                    }
                    process.nextTick(finish);
                  },
                  (err) => {
                    pt.destroy(err);
                    process.nextTick(finish, err);
                  }
                );
              } else if (isIterable(ret, true)) {
                finishCount++;
                pump(ret, pt, finish, {
                  end,
                });
              } else {
                throw new ERR_INVALID_RETURN_VALUE(
                  "AsyncIterable or Promise",
                  "destination",
                  ret
                );
              }
              ret = pt;
              const { destroy, cleanup } = destroyer(ret, false, true);
              destroys.push(destroy);
              if (isLastStream) {
                lastStreamCleanup.push(cleanup);
              }
            }
          } else if (isNodeStream(stream)) {
            if (isReadableNodeStream(ret)) {
              finishCount += 2;
              const cleanup = pipe(ret, stream, finish, {
                end,
              });
              if (isReadable(stream) && isLastStream) {
                lastStreamCleanup.push(cleanup);
              }
            } else if (isIterable(ret)) {
              finishCount++;
              pump(ret, stream, finish, {
                end,
              });
            } else {
              throw new ERR_INVALID_ARG_TYPE(
                "val",
                ["Readable", "Iterable", "AsyncIterable"],
                ret
              );
            }
            ret = stream;
          } else {
            ret = Duplex.from(stream);
          }
        }
        if (
          (signal !== null && signal !== void 0 && signal.aborted) ||
          (outerSignal !== null &&
            outerSignal !== void 0 &&
            outerSignal.aborted)
        ) {
          process.nextTick(abort);
        }
        return ret;
      }
      function pipe(src, dst, finish, { end }) {
        src.pipe(dst, {
          end,
        });
        if (end) {
          src.once("end", () => dst.end());
        } else {
          finish();
        }
        eos(
          src,
          {
            readable: true,
            writable: false,
          },
          (err) => {
            const rState = src._readableState;
            if (
              err &&
              err.code === "ERR_STREAM_PREMATURE_CLOSE" &&
              rState &&
              rState.ended &&
              !rState.errored &&
              !rState.errorEmitted
            ) {
              src.once("end", finish).once("error", finish);
            } else {
              finish(err);
            }
          }
        );
        return eos(
          dst,
          {
            readable: false,
            writable: true,
          },
          finish
        );
      }
      module.exports = {
        pipelineImpl,
        pipeline,
      };
    },
  });

  // node_modules/readable-stream/lib/internal/streams/compose.js
  var require_compose = __commonJS({
    "node_modules/readable-stream/lib/internal/streams/compose.js"(
      exports,
      module
    ) {
      "use strict";
      init_process_shim();
      var { pipeline } = require_pipeline();
      var Duplex = require_duplex();
      var { destroyer } = require_destroy();
      var { isNodeStream, isReadable, isWritable } = require_utils();
      var {
        AbortError,
        codes: { ERR_INVALID_ARG_VALUE, ERR_MISSING_ARGS },
      } = require_errors();
      module.exports = function compose(...streams) {
        if (streams.length === 0) {
          throw new ERR_MISSING_ARGS("streams");
        }
        if (streams.length === 1) {
          return Duplex.from(streams[0]);
        }
        const orgStreams = [...streams];
        if (typeof streams[0] === "function") {
          streams[0] = Duplex.from(streams[0]);
        }
        if (typeof streams[streams.length - 1] === "function") {
          const idx = streams.length - 1;
          streams[idx] = Duplex.from(streams[idx]);
        }
        for (let n = 0; n < streams.length; ++n) {
          if (!isNodeStream(streams[n])) {
            continue;
          }
          if (n < streams.length - 1 && !isReadable(streams[n])) {
            throw new ERR_INVALID_ARG_VALUE(
              `streams[${n}]`,
              orgStreams[n],
              "must be readable"
            );
          }
          if (n > 0 && !isWritable(streams[n])) {
            throw new ERR_INVALID_ARG_VALUE(
              `streams[${n}]`,
              orgStreams[n],
              "must be writable"
            );
          }
        }
        let ondrain;
        let onfinish;
        let onreadable;
        let onclose;
        let d;
        function onfinished(err) {
          const cb = onclose;
          onclose = null;
          if (cb) {
            cb(err);
          } else if (err) {
            d.destroy(err);
          } else if (!readable && !writable) {
            d.destroy();
          }
        }
        const head = streams[0];
        const tail = pipeline(streams, onfinished);
        const writable = !!isWritable(head);
        const readable = !!isReadable(tail);
        d = new Duplex({
          writableObjectMode: !!(
            head !== null &&
            head !== void 0 &&
            head.writableObjectMode
          ),
          readableObjectMode: !!(
            tail !== null &&
            tail !== void 0 &&
            tail.writableObjectMode
          ),
          writable,
          readable,
        });
        if (writable) {
          d._write = function (chunk, encoding, callback) {
            if (head.write(chunk, encoding)) {
              callback();
            } else {
              ondrain = callback;
            }
          };
          d._final = function (callback) {
            head.end();
            onfinish = callback;
          };
          head.on("drain", function () {
            if (ondrain) {
              const cb = ondrain;
              ondrain = null;
              cb();
            }
          });
          tail.on("finish", function () {
            if (onfinish) {
              const cb = onfinish;
              onfinish = null;
              cb();
            }
          });
        }
        if (readable) {
          tail.on("readable", function () {
            if (onreadable) {
              const cb = onreadable;
              onreadable = null;
              cb();
            }
          });
          tail.on("end", function () {
            d.push(null);
          });
          d._read = function () {
            while (true) {
              const buf = tail.read();
              if (buf === null) {
                onreadable = d._read;
                return;
              }
              if (!d.push(buf)) {
                return;
              }
            }
          };
        }
        d._destroy = function (err, callback) {
          if (!err && onclose !== null) {
            err = new AbortError();
          }
          onreadable = null;
          ondrain = null;
          onfinish = null;
          if (onclose === null) {
            callback(err);
          } else {
            onclose = callback;
            destroyer(tail, err);
          }
        };
        return d;
      };
    },
  });

  // node_modules/readable-stream/lib/stream/promises.js
  var require_promises = __commonJS({
    "node_modules/readable-stream/lib/stream/promises.js"(exports, module) {
      "use strict";
      init_process_shim();
      var { ArrayPrototypePop, Promise: Promise2 } = require_primordials();
      var { isIterable, isNodeStream } = require_utils();
      var { pipelineImpl: pl } = require_pipeline();
      var { finished } = require_end_of_stream();
      function pipeline(...streams) {
        return new Promise2((resolve, reject) => {
          let signal;
          let end;
          const lastArg = streams[streams.length - 1];
          if (
            lastArg &&
            typeof lastArg === "object" &&
            !isNodeStream(lastArg) &&
            !isIterable(lastArg)
          ) {
            const options = ArrayPrototypePop(streams);
            signal = options.signal;
            end = options.end;
          }
          pl(
            streams,
            (err, value) => {
              if (err) {
                reject(err);
              } else {
                resolve(value);
              }
            },
            {
              signal,
              end,
            }
          );
        });
      }
      module.exports = {
        finished,
        pipeline,
      };
    },
  });

  // node_modules/readable-stream/lib/stream.js
  var require_stream = __commonJS({
    "node_modules/readable-stream/lib/stream.js"(exports, module) {
      "use strict";
      init_process_shim();
      var { ObjectDefineProperty, ObjectKeys, ReflectApply } =
        require_primordials();
      var {
        promisify: { custom: customPromisify },
      } = require_util();
      var { streamReturningOperators, promiseReturningOperators } =
        require_operators();
      var {
        codes: { ERR_ILLEGAL_CONSTRUCTOR },
      } = require_errors();
      var compose = require_compose();
      var { pipeline } = require_pipeline();
      var { destroyer } = require_destroy();
      var eos = require_end_of_stream();
      var promises = require_promises();
      var utils = require_utils();
      var Stream = (module.exports = require_legacy().Stream);
      Stream.isDisturbed = utils.isDisturbed;
      Stream.isErrored = utils.isErrored;
      Stream.isReadable = utils.isReadable;
      Stream.Readable = require_readable();
      for (const key of ObjectKeys(streamReturningOperators)) {
        let fn = function (...args) {
          if (new.target) {
            throw ERR_ILLEGAL_CONSTRUCTOR();
          }
          return Stream.Readable.from(ReflectApply(op, this, args));
        };
        const op = streamReturningOperators[key];
        ObjectDefineProperty(fn, "name", {
          value: op.name,
        });
        ObjectDefineProperty(fn, "length", {
          value: op.length,
        });
        ObjectDefineProperty(Stream.Readable.prototype, key, {
          value: fn,
          enumerable: false,
          configurable: true,
          writable: true,
        });
      }
      for (const key of ObjectKeys(promiseReturningOperators)) {
        let fn = function (...args) {
          if (new.target) {
            throw ERR_ILLEGAL_CONSTRUCTOR();
          }
          return ReflectApply(op, this, args);
        };
        const op = promiseReturningOperators[key];
        ObjectDefineProperty(fn, "name", {
          value: op.name,
        });
        ObjectDefineProperty(fn, "length", {
          value: op.length,
        });
        ObjectDefineProperty(Stream.Readable.prototype, key, {
          value: fn,
          enumerable: false,
          configurable: true,
          writable: true,
        });
      }
      Stream.Writable = require_writable();
      Stream.Duplex = require_duplex();
      Stream.Transform = require_transform();
      Stream.PassThrough = require_passthrough();
      Stream.pipeline = pipeline;
      var { addAbortSignal } = require_add_abort_signal();
      Stream.addAbortSignal = addAbortSignal;
      Stream.finished = eos;
      Stream.destroy = destroyer;
      Stream.compose = compose;
      ObjectDefineProperty(Stream, "promises", {
        configurable: true,
        enumerable: true,
        get() {
          return promises;
        },
      });
      ObjectDefineProperty(pipeline, customPromisify, {
        enumerable: true,
        get() {
          return promises.pipeline;
        },
      });
      ObjectDefineProperty(eos, customPromisify, {
        enumerable: true,
        get() {
          return promises.finished;
        },
      });
      Stream.Stream = Stream;
      Stream._isUint8Array = function isUint8Array(value) {
        return value instanceof Uint8Array;
      };
      Stream._uint8ArrayToBuffer = function _uint8ArrayToBuffer(chunk) {
        return Buffer.from(chunk.buffer, chunk.byteOffset, chunk.byteLength);
      };
    },
  });

  // node_modules/readable-stream/lib/ours/index.js
  var require_ours = __commonJS({
    "node_modules/readable-stream/lib/ours/index.js"(exports, module) {
      "use strict";
      init_process_shim();
      var Stream = require_stream2();
      if (Stream && process.env.READABLE_STREAM === "disable") {
        const promises = Stream.promises;
        module.exports._uint8ArrayToBuffer = Stream._uint8ArrayToBuffer;
        module.exports._isUint8Array = Stream._isUint8Array;
        module.exports.isDisturbed = Stream.isDisturbed;
        module.exports.isErrored = Stream.isErrored;
        module.exports.isReadable = Stream.isReadable;
        module.exports.Readable = Stream.Readable;
        module.exports.Writable = Stream.Writable;
        module.exports.Duplex = Stream.Duplex;
        module.exports.Transform = Stream.Transform;
        module.exports.PassThrough = Stream.PassThrough;
        module.exports.addAbortSignal = Stream.addAbortSignal;
        module.exports.finished = Stream.finished;
        module.exports.destroy = Stream.destroy;
        module.exports.pipeline = Stream.pipeline;
        module.exports.compose = Stream.compose;
        Object.defineProperty(Stream, "promises", {
          configurable: true,
          enumerable: true,
          get() {
            return promises;
          },
        });
        module.exports.Stream = Stream.Stream;
      } else {
        const CustomStream = require_stream();
        const promises = require_promises();
        const originalDestroy = CustomStream.Readable.destroy;
        module.exports = CustomStream.Readable;
        module.exports._uint8ArrayToBuffer = CustomStream._uint8ArrayToBuffer;
        module.exports._isUint8Array = CustomStream._isUint8Array;
        module.exports.isDisturbed = CustomStream.isDisturbed;
        module.exports.isErrored = CustomStream.isErrored;
        module.exports.isReadable = CustomStream.isReadable;
        module.exports.Readable = CustomStream.Readable;
        module.exports.Writable = CustomStream.Writable;
        module.exports.Duplex = CustomStream.Duplex;
        module.exports.Transform = CustomStream.Transform;
        module.exports.PassThrough = CustomStream.PassThrough;
        module.exports.addAbortSignal = CustomStream.addAbortSignal;
        module.exports.finished = CustomStream.finished;
        module.exports.destroy = CustomStream.destroy;
        module.exports.destroy = originalDestroy;
        module.exports.pipeline = CustomStream.pipeline;
        module.exports.compose = CustomStream.compose;
        Object.defineProperty(CustomStream, "promises", {
          configurable: true,
          enumerable: true,
          get() {
            return promises;
          },
        });
        module.exports.Stream = CustomStream.Stream;
      }
      module.exports.default = module.exports;
    },
  });

  // ../../graalvm-react/src/main/node/stream/index.js
  var require_stream2 = __commonJS({
    "../../graalvm-react/src/main/node/stream/index.js"(exports, module) {
      init_process_shim();
      var { Readable, Writable, Transform, Duplex, pipeline, finished } =
        require_ours();
      module.exports.Readable = Readable;
      module.exports.Writable = Writable;
      module.exports.Transform = Transform;
      module.exports.Duplex = Duplex;
      module.exports.pipeline = pipeline;
      module.exports.finished = finished;
    },
  });

  // node_modules/react-dom/cjs/react-dom-server-legacy.node.production.min.js
  var require_react_dom_server_legacy_node_production_min = __commonJS({
    "node_modules/react-dom/cjs/react-dom-server-legacy.node.production.min.js"(
      exports
    ) {
      "use strict";
      init_process_shim();
      var ea = require_react();
      var fa = require_stream2();
      var n = Object.prototype.hasOwnProperty;
      var ha =
        /^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/;
      var ia = {};
      var ja = {};
      function ka(a) {
        if (n.call(ja, a)) return true;
        if (n.call(ia, a)) return false;
        if (ha.test(a)) return (ja[a] = true);
        ia[a] = true;
        return false;
      }
      function q(a, b, c, d, f, e, g) {
        this.acceptsBooleans = b === 2 || b === 3 || b === 4;
        this.attributeName = d;
        this.attributeNamespace = f;
        this.mustUseProperty = c;
        this.propertyName = a;
        this.type = b;
        this.sanitizeURL = e;
        this.removeEmptyString = g;
      }
      var r = {};
      "children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style"
        .split(" ")
        .forEach(function (a) {
          r[a] = new q(a, 0, false, a, null, false, false);
        });
      [
        ["acceptCharset", "accept-charset"],
        ["className", "class"],
        ["htmlFor", "for"],
        ["httpEquiv", "http-equiv"],
      ].forEach(function (a) {
        var b = a[0];
        r[b] = new q(b, 1, false, a[1], null, false, false);
      });
      ["contentEditable", "draggable", "spellCheck", "value"].forEach(function (
        a
      ) {
        r[a] = new q(a, 2, false, a.toLowerCase(), null, false, false);
      });
      [
        "autoReverse",
        "externalResourcesRequired",
        "focusable",
        "preserveAlpha",
      ].forEach(function (a) {
        r[a] = new q(a, 2, false, a, null, false, false);
      });
      "allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope"
        .split(" ")
        .forEach(function (a) {
          r[a] = new q(a, 3, false, a.toLowerCase(), null, false, false);
        });
      ["checked", "multiple", "muted", "selected"].forEach(function (a) {
        r[a] = new q(a, 3, true, a, null, false, false);
      });
      ["capture", "download"].forEach(function (a) {
        r[a] = new q(a, 4, false, a, null, false, false);
      });
      ["cols", "rows", "size", "span"].forEach(function (a) {
        r[a] = new q(a, 6, false, a, null, false, false);
      });
      ["rowSpan", "start"].forEach(function (a) {
        r[a] = new q(a, 5, false, a.toLowerCase(), null, false, false);
      });
      var la = /[\-:]([a-z])/g;
      function ma(a) {
        return a[1].toUpperCase();
      }
      "accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height"
        .split(" ")
        .forEach(function (a) {
          var b = a.replace(la, ma);
          r[b] = new q(b, 1, false, a, null, false, false);
        });
      "xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type"
        .split(" ")
        .forEach(function (a) {
          var b = a.replace(la, ma);
          r[b] = new q(
            b,
            1,
            false,
            a,
            "http://www.w3.org/1999/xlink",
            false,
            false
          );
        });
      ["xml:base", "xml:lang", "xml:space"].forEach(function (a) {
        var b = a.replace(la, ma);
        r[b] = new q(
          b,
          1,
          false,
          a,
          "http://www.w3.org/XML/1998/namespace",
          false,
          false
        );
      });
      ["tabIndex", "crossOrigin"].forEach(function (a) {
        r[a] = new q(a, 1, false, a.toLowerCase(), null, false, false);
      });
      r.xlinkHref = new q(
        "xlinkHref",
        1,
        false,
        "xlink:href",
        "http://www.w3.org/1999/xlink",
        true,
        false
      );
      ["src", "href", "action", "formAction"].forEach(function (a) {
        r[a] = new q(a, 1, false, a.toLowerCase(), null, true, true);
      });
      var t = {
        animationIterationCount: true,
        aspectRatio: true,
        borderImageOutset: true,
        borderImageSlice: true,
        borderImageWidth: true,
        boxFlex: true,
        boxFlexGroup: true,
        boxOrdinalGroup: true,
        columnCount: true,
        columns: true,
        flex: true,
        flexGrow: true,
        flexPositive: true,
        flexShrink: true,
        flexNegative: true,
        flexOrder: true,
        gridArea: true,
        gridRow: true,
        gridRowEnd: true,
        gridRowSpan: true,
        gridRowStart: true,
        gridColumn: true,
        gridColumnEnd: true,
        gridColumnSpan: true,
        gridColumnStart: true,
        fontWeight: true,
        lineClamp: true,
        lineHeight: true,
        opacity: true,
        order: true,
        orphans: true,
        tabSize: true,
        widows: true,
        zIndex: true,
        zoom: true,
        fillOpacity: true,
        floodOpacity: true,
        stopOpacity: true,
        strokeDasharray: true,
        strokeDashoffset: true,
        strokeMiterlimit: true,
        strokeOpacity: true,
        strokeWidth: true,
      };
      var na = ["Webkit", "ms", "Moz", "O"];
      Object.keys(t).forEach(function (a) {
        na.forEach(function (b) {
          b = b + a.charAt(0).toUpperCase() + a.substring(1);
          t[b] = t[a];
        });
      });
      var oa = /["'&<>]/;
      function u(a) {
        if (typeof a === "boolean" || typeof a === "number") return "" + a;
        a = "" + a;
        var b = oa.exec(a);
        if (b) {
          var c = "",
            d,
            f = 0;
          for (d = b.index; d < a.length; d++) {
            switch (a.charCodeAt(d)) {
              case 34:
                b = "&quot;";
                break;
              case 38:
                b = "&amp;";
                break;
              case 39:
                b = "&#x27;";
                break;
              case 60:
                b = "&lt;";
                break;
              case 62:
                b = "&gt;";
                break;
              default:
                continue;
            }
            f !== d && (c += a.substring(f, d));
            f = d + 1;
            c += b;
          }
          a = f !== d ? c + a.substring(f, d) : c;
        }
        return a;
      }
      var pa = /([A-Z])/g;
      var qa = /^ms-/;
      var ra = Array.isArray;
      function v(a, b) {
        return { insertionMode: a, selectedValue: b };
      }
      function sa(a, b, c) {
        switch (b) {
          case "select":
            return v(1, c.value != null ? c.value : c.defaultValue);
          case "svg":
            return v(2, null);
          case "math":
            return v(3, null);
          case "foreignObject":
            return v(1, null);
          case "table":
            return v(4, null);
          case "thead":
          case "tbody":
          case "tfoot":
            return v(5, null);
          case "colgroup":
            return v(7, null);
          case "tr":
            return v(6, null);
        }
        return 4 <= a.insertionMode || a.insertionMode === 0 ? v(1, null) : a;
      }
      var ta = /* @__PURE__ */ new Map();
      function ua(a, b, c) {
        if (typeof c !== "object")
          throw Error(
            "The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX."
          );
        b = true;
        for (var d in c)
          if (n.call(c, d)) {
            var f = c[d];
            if (f != null && typeof f !== "boolean" && f !== "") {
              if (d.indexOf("--") === 0) {
                var e = u(d);
                f = u(("" + f).trim());
              } else {
                e = d;
                var g = ta.get(e);
                g !== void 0
                  ? (e = g)
                  : ((g = u(
                      e.replace(pa, "-$1").toLowerCase().replace(qa, "-ms-")
                    )),
                    ta.set(e, g),
                    (e = g));
                f =
                  typeof f === "number"
                    ? f === 0 || n.call(t, d)
                      ? "" + f
                      : f + "px"
                    : u(("" + f).trim());
              }
              b
                ? ((b = false), a.push(' style="', e, ":", f))
                : a.push(";", e, ":", f);
            }
          }
        b || a.push('"');
      }
      function w(a, b, c, d) {
        switch (c) {
          case "style":
            ua(a, b, d);
            return;
          case "defaultValue":
          case "defaultChecked":
          case "innerHTML":
          case "suppressContentEditableWarning":
          case "suppressHydrationWarning":
            return;
        }
        if (
          !(2 < c.length) ||
          (c[0] !== "o" && c[0] !== "O") ||
          (c[1] !== "n" && c[1] !== "N")
        ) {
          if (((b = r.hasOwnProperty(c) ? r[c] : null), b !== null)) {
            switch (typeof d) {
              case "function":
              case "symbol":
                return;
              case "boolean":
                if (!b.acceptsBooleans) return;
            }
            c = b.attributeName;
            switch (b.type) {
              case 3:
                d && a.push(" ", c, '=""');
                break;
              case 4:
                d === true
                  ? a.push(" ", c, '=""')
                  : d !== false && a.push(" ", c, '="', u(d), '"');
                break;
              case 5:
                isNaN(d) || a.push(" ", c, '="', u(d), '"');
                break;
              case 6:
                !isNaN(d) && 1 <= d && a.push(" ", c, '="', u(d), '"');
                break;
              default:
                b.sanitizeURL && (d = "" + d), a.push(" ", c, '="', u(d), '"');
            }
          } else if (ka(c)) {
            switch (typeof d) {
              case "function":
              case "symbol":
                return;
              case "boolean":
                if (
                  ((b = c.toLowerCase().slice(0, 5)),
                  b !== "data-" && b !== "aria-")
                )
                  return;
            }
            a.push(" ", c, '="', u(d), '"');
          }
        }
      }
      function x(a, b, c) {
        if (b != null) {
          if (c != null)
            throw Error(
              "Can only set one of `children` or `props.dangerouslySetInnerHTML`."
            );
          if (typeof b !== "object" || !("__html" in b))
            throw Error(
              "`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information."
            );
          b = b.__html;
          b !== null && b !== void 0 && a.push("" + b);
        }
      }
      function va(a) {
        var b = "";
        ea.Children.forEach(a, function (a2) {
          a2 != null && (b += a2);
        });
        return b;
      }
      function wa(a, b, c, d) {
        a.push(z(c));
        var f = (c = null),
          e;
        for (e in b)
          if (n.call(b, e)) {
            var g = b[e];
            if (g != null)
              switch (e) {
                case "children":
                  c = g;
                  break;
                case "dangerouslySetInnerHTML":
                  f = g;
                  break;
                default:
                  w(a, d, e, g);
              }
          }
        a.push(">");
        x(a, f, c);
        return typeof c === "string" ? (a.push(u(c)), null) : c;
      }
      var xa = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/;
      var ya = /* @__PURE__ */ new Map();
      function z(a) {
        var b = ya.get(a);
        if (b === void 0) {
          if (!xa.test(a)) throw Error("Invalid tag: " + a);
          b = "<" + a;
          ya.set(a, b);
        }
        return b;
      }
      function za(a, b, c, d, f) {
        switch (b) {
          case "select":
            a.push(z("select"));
            var e = null,
              g = null;
            for (l in c)
              if (n.call(c, l)) {
                var h = c[l];
                if (h != null)
                  switch (l) {
                    case "children":
                      e = h;
                      break;
                    case "dangerouslySetInnerHTML":
                      g = h;
                      break;
                    case "defaultValue":
                    case "value":
                      break;
                    default:
                      w(a, d, l, h);
                  }
              }
            a.push(">");
            x(a, g, e);
            return e;
          case "option":
            g = f.selectedValue;
            a.push(z("option"));
            var k = (h = null),
              m = null;
            var l = null;
            for (e in c)
              if (n.call(c, e)) {
                var p = c[e];
                if (p != null)
                  switch (e) {
                    case "children":
                      h = p;
                      break;
                    case "selected":
                      m = p;
                      break;
                    case "dangerouslySetInnerHTML":
                      l = p;
                      break;
                    case "value":
                      k = p;
                    default:
                      w(a, d, e, p);
                  }
              }
            if (g != null)
              if (((c = k !== null ? "" + k : va(h)), ra(g)))
                for (d = 0; d < g.length; d++) {
                  if ("" + g[d] === c) {
                    a.push(' selected=""');
                    break;
                  }
                }
              else "" + g === c && a.push(' selected=""');
            else m && a.push(' selected=""');
            a.push(">");
            x(a, l, h);
            return h;
          case "textarea":
            a.push(z("textarea"));
            l = g = e = null;
            for (h in c)
              if (n.call(c, h) && ((k = c[h]), k != null))
                switch (h) {
                  case "children":
                    l = k;
                    break;
                  case "value":
                    e = k;
                    break;
                  case "defaultValue":
                    g = k;
                    break;
                  case "dangerouslySetInnerHTML":
                    throw Error(
                      "`dangerouslySetInnerHTML` does not make sense on <textarea>."
                    );
                  default:
                    w(a, d, h, k);
                }
            e === null && g !== null && (e = g);
            a.push(">");
            if (l != null) {
              if (e != null)
                throw Error(
                  "If you supply `defaultValue` on a <textarea>, do not pass children."
                );
              if (ra(l) && 1 < l.length)
                throw Error("<textarea> can only have at most one child.");
              e = "" + l;
            }
            typeof e === "string" && e[0] === "\n" && a.push("\n");
            e !== null && a.push(u("" + e));
            return null;
          case "input":
            a.push(z("input"));
            k = l = h = e = null;
            for (g in c)
              if (n.call(c, g) && ((m = c[g]), m != null))
                switch (g) {
                  case "children":
                  case "dangerouslySetInnerHTML":
                    throw Error(
                      "input is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`."
                    );
                  case "defaultChecked":
                    k = m;
                    break;
                  case "defaultValue":
                    h = m;
                    break;
                  case "checked":
                    l = m;
                    break;
                  case "value":
                    e = m;
                    break;
                  default:
                    w(a, d, g, m);
                }
            l !== null
              ? w(a, d, "checked", l)
              : k !== null && w(a, d, "checked", k);
            e !== null
              ? w(a, d, "value", e)
              : h !== null && w(a, d, "value", h);
            a.push("/>");
            return null;
          case "menuitem":
            a.push(z("menuitem"));
            for (var B in c)
              if (n.call(c, B) && ((e = c[B]), e != null))
                switch (B) {
                  case "children":
                  case "dangerouslySetInnerHTML":
                    throw Error(
                      "menuitems cannot have `children` nor `dangerouslySetInnerHTML`."
                    );
                  default:
                    w(a, d, B, e);
                }
            a.push(">");
            return null;
          case "title":
            a.push(z("title"));
            e = null;
            for (p in c)
              if (n.call(c, p) && ((g = c[p]), g != null))
                switch (p) {
                  case "children":
                    e = g;
                    break;
                  case "dangerouslySetInnerHTML":
                    throw Error(
                      "`dangerouslySetInnerHTML` does not make sense on <title>."
                    );
                  default:
                    w(a, d, p, g);
                }
            a.push(">");
            return e;
          case "listing":
          case "pre":
            a.push(z(b));
            g = e = null;
            for (k in c)
              if (n.call(c, k) && ((h = c[k]), h != null))
                switch (k) {
                  case "children":
                    e = h;
                    break;
                  case "dangerouslySetInnerHTML":
                    g = h;
                    break;
                  default:
                    w(a, d, k, h);
                }
            a.push(">");
            if (g != null) {
              if (e != null)
                throw Error(
                  "Can only set one of `children` or `props.dangerouslySetInnerHTML`."
                );
              if (typeof g !== "object" || !("__html" in g))
                throw Error(
                  "`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information."
                );
              c = g.__html;
              c !== null &&
                c !== void 0 &&
                (typeof c === "string" && 0 < c.length && c[0] === "\n"
                  ? a.push("\n", c)
                  : a.push("" + c));
            }
            typeof e === "string" && e[0] === "\n" && a.push("\n");
            return e;
          case "area":
          case "base":
          case "br":
          case "col":
          case "embed":
          case "hr":
          case "img":
          case "keygen":
          case "link":
          case "meta":
          case "param":
          case "source":
          case "track":
          case "wbr":
            a.push(z(b));
            for (var C in c)
              if (n.call(c, C) && ((e = c[C]), e != null))
                switch (C) {
                  case "children":
                  case "dangerouslySetInnerHTML":
                    throw Error(
                      b +
                        " is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`."
                    );
                  default:
                    w(a, d, C, e);
                }
            a.push("/>");
            return null;
          case "annotation-xml":
          case "color-profile":
          case "font-face":
          case "font-face-src":
          case "font-face-uri":
          case "font-face-format":
          case "font-face-name":
          case "missing-glyph":
            return wa(a, c, b, d);
          case "html":
            return (
              f.insertionMode === 0 && a.push("<!DOCTYPE html>"), wa(a, c, b, d)
            );
          default:
            if (b.indexOf("-") === -1 && typeof c.is !== "string")
              return wa(a, c, b, d);
            a.push(z(b));
            g = e = null;
            for (m in c)
              if (n.call(c, m) && ((h = c[m]), h != null))
                switch (m) {
                  case "children":
                    e = h;
                    break;
                  case "dangerouslySetInnerHTML":
                    g = h;
                    break;
                  case "style":
                    ua(a, d, h);
                    break;
                  case "suppressContentEditableWarning":
                  case "suppressHydrationWarning":
                    break;
                  default:
                    ka(m) &&
                      typeof h !== "function" &&
                      typeof h !== "symbol" &&
                      a.push(" ", m, '="', u(h), '"');
                }
            a.push(">");
            x(a, g, e);
            return e;
        }
      }
      function Aa(a, b, c) {
        a.push('<!--$?--><template id="');
        if (c === null)
          throw Error(
            "An ID must have been assigned before we can complete the boundary."
          );
        a.push(c);
        return a.push('"></template>');
      }
      function Ba(a, b, c, d) {
        switch (c.insertionMode) {
          case 0:
          case 1:
            return (
              a.push('<div hidden id="'),
              a.push(b.segmentPrefix),
              (b = d.toString(16)),
              a.push(b),
              a.push('">')
            );
          case 2:
            return (
              a.push('<svg aria-hidden="true" style="display:none" id="'),
              a.push(b.segmentPrefix),
              (b = d.toString(16)),
              a.push(b),
              a.push('">')
            );
          case 3:
            return (
              a.push('<math aria-hidden="true" style="display:none" id="'),
              a.push(b.segmentPrefix),
              (b = d.toString(16)),
              a.push(b),
              a.push('">')
            );
          case 4:
            return (
              a.push('<table hidden id="'),
              a.push(b.segmentPrefix),
              (b = d.toString(16)),
              a.push(b),
              a.push('">')
            );
          case 5:
            return (
              a.push('<table hidden><tbody id="'),
              a.push(b.segmentPrefix),
              (b = d.toString(16)),
              a.push(b),
              a.push('">')
            );
          case 6:
            return (
              a.push('<table hidden><tr id="'),
              a.push(b.segmentPrefix),
              (b = d.toString(16)),
              a.push(b),
              a.push('">')
            );
          case 7:
            return (
              a.push('<table hidden><colgroup id="'),
              a.push(b.segmentPrefix),
              (b = d.toString(16)),
              a.push(b),
              a.push('">')
            );
          default:
            throw Error("Unknown insertion mode. This is a bug in React.");
        }
      }
      function Ca(a, b) {
        switch (b.insertionMode) {
          case 0:
          case 1:
            return a.push("</div>");
          case 2:
            return a.push("</svg>");
          case 3:
            return a.push("</math>");
          case 4:
            return a.push("</table>");
          case 5:
            return a.push("</tbody></table>");
          case 6:
            return a.push("</tr></table>");
          case 7:
            return a.push("</colgroup></table>");
          default:
            throw Error("Unknown insertion mode. This is a bug in React.");
        }
      }
      var Da = /[<\u2028\u2029]/g;
      function Ea(a) {
        return JSON.stringify(a).replace(Da, function (a2) {
          switch (a2) {
            case "<":
              return "\\u003c";
            case "\u2028":
              return "\\u2028";
            case "\u2029":
              return "\\u2029";
            default:
              throw Error(
                "escapeJSStringsForInstructionScripts encountered a match it does not know how to replace. this means the match regex and the replacement characters are no longer in sync. This is a bug in React"
              );
          }
        });
      }
      function Fa(a, b) {
        b = b === void 0 ? "" : b;
        return {
          bootstrapChunks: [],
          startInlineScript: "<script>",
          placeholderPrefix: b + "P:",
          segmentPrefix: b + "S:",
          boundaryPrefix: b + "B:",
          idPrefix: b,
          nextSuspenseID: 0,
          sentCompleteSegmentFunction: false,
          sentCompleteBoundaryFunction: false,
          sentClientRenderFunction: false,
          generateStaticMarkup: a,
        };
      }
      function Ga() {
        return { insertionMode: 1, selectedValue: null };
      }
      function Ha(a, b, c, d) {
        if (c.generateStaticMarkup) return a.push(u(b)), false;
        b === ""
          ? (a = d)
          : (d && a.push("<!-- -->"), a.push(u(b)), (a = true));
        return a;
      }
      var A = Object.assign;
      var Ia = Symbol.for("react.element");
      var Ja = Symbol.for("react.portal");
      var Ka = Symbol.for("react.fragment");
      var La = Symbol.for("react.strict_mode");
      var Ma = Symbol.for("react.profiler");
      var Na = Symbol.for("react.provider");
      var Oa = Symbol.for("react.context");
      var Pa = Symbol.for("react.forward_ref");
      var Qa = Symbol.for("react.suspense");
      var Ra = Symbol.for("react.suspense_list");
      var Sa = Symbol.for("react.memo");
      var Ta = Symbol.for("react.lazy");
      var Ua = Symbol.for("react.scope");
      var Va = Symbol.for("react.debug_trace_mode");
      var Wa = Symbol.for("react.legacy_hidden");
      var Xa = Symbol.for("react.default_value");
      var Ya = Symbol.iterator;
      function Za(a) {
        if (a == null) return null;
        if (typeof a === "function") return a.displayName || a.name || null;
        if (typeof a === "string") return a;
        switch (a) {
          case Ka:
            return "Fragment";
          case Ja:
            return "Portal";
          case Ma:
            return "Profiler";
          case La:
            return "StrictMode";
          case Qa:
            return "Suspense";
          case Ra:
            return "SuspenseList";
        }
        if (typeof a === "object")
          switch (a.$$typeof) {
            case Oa:
              return (a.displayName || "Context") + ".Consumer";
            case Na:
              return (a._context.displayName || "Context") + ".Provider";
            case Pa:
              var b = a.render;
              a = a.displayName;
              a ||
                ((a = b.displayName || b.name || ""),
                (a = a !== "" ? "ForwardRef(" + a + ")" : "ForwardRef"));
              return a;
            case Sa:
              return (
                (b = a.displayName || null),
                b !== null ? b : Za(a.type) || "Memo"
              );
            case Ta:
              b = a._payload;
              a = a._init;
              try {
                return Za(a(b));
              } catch (c) {}
          }
        return null;
      }
      var $a = {};
      function ab(a, b) {
        a = a.contextTypes;
        if (!a) return $a;
        var c = {},
          d;
        for (d in a) c[d] = b[d];
        return c;
      }
      var D = null;
      function E(a, b) {
        if (a !== b) {
          a.context._currentValue2 = a.parentValue;
          a = a.parent;
          var c = b.parent;
          if (a === null) {
            if (c !== null)
              throw Error(
                "The stacks must reach the root at the same time. This is a bug in React."
              );
          } else {
            if (c === null)
              throw Error(
                "The stacks must reach the root at the same time. This is a bug in React."
              );
            E(a, c);
          }
          b.context._currentValue2 = b.value;
        }
      }
      function bb(a) {
        a.context._currentValue2 = a.parentValue;
        a = a.parent;
        a !== null && bb(a);
      }
      function cb(a) {
        var b = a.parent;
        b !== null && cb(b);
        a.context._currentValue2 = a.value;
      }
      function db(a, b) {
        a.context._currentValue2 = a.parentValue;
        a = a.parent;
        if (a === null)
          throw Error(
            "The depth must equal at least at zero before reaching the root. This is a bug in React."
          );
        a.depth === b.depth ? E(a, b) : db(a, b);
      }
      function eb(a, b) {
        var c = b.parent;
        if (c === null)
          throw Error(
            "The depth must equal at least at zero before reaching the root. This is a bug in React."
          );
        a.depth === c.depth ? E(a, c) : eb(a, c);
        b.context._currentValue2 = b.value;
      }
      function F(a) {
        var b = D;
        b !== a &&
          (b === null
            ? cb(a)
            : a === null
            ? bb(b)
            : b.depth === a.depth
            ? E(b, a)
            : b.depth > a.depth
            ? db(b, a)
            : eb(b, a),
          (D = a));
      }
      var fb = {
        isMounted: function () {
          return false;
        },
        enqueueSetState: function (a, b) {
          a = a._reactInternals;
          a.queue !== null && a.queue.push(b);
        },
        enqueueReplaceState: function (a, b) {
          a = a._reactInternals;
          a.replace = true;
          a.queue = [b];
        },
        enqueueForceUpdate: function () {},
      };
      function gb(a, b, c, d) {
        var f = a.state !== void 0 ? a.state : null;
        a.updater = fb;
        a.props = c;
        a.state = f;
        var e = { queue: [], replace: false };
        a._reactInternals = e;
        var g = b.contextType;
        a.context = typeof g === "object" && g !== null ? g._currentValue2 : d;
        g = b.getDerivedStateFromProps;
        typeof g === "function" &&
          ((g = g(c, f)),
          (f = g === null || g === void 0 ? f : A({}, f, g)),
          (a.state = f));
        if (
          typeof b.getDerivedStateFromProps !== "function" &&
          typeof a.getSnapshotBeforeUpdate !== "function" &&
          (typeof a.UNSAFE_componentWillMount === "function" ||
            typeof a.componentWillMount === "function")
        )
          if (
            ((b = a.state),
            typeof a.componentWillMount === "function" &&
              a.componentWillMount(),
            typeof a.UNSAFE_componentWillMount === "function" &&
              a.UNSAFE_componentWillMount(),
            b !== a.state && fb.enqueueReplaceState(a, a.state, null),
            e.queue !== null && 0 < e.queue.length)
          )
            if (
              ((b = e.queue),
              (g = e.replace),
              (e.queue = null),
              (e.replace = false),
              g && b.length === 1)
            )
              a.state = b[0];
            else {
              e = g ? b[0] : a.state;
              f = true;
              for (g = g ? 1 : 0; g < b.length; g++) {
                var h = b[g];
                h = typeof h === "function" ? h.call(a, e, c, d) : h;
                h != null && (f ? ((f = false), (e = A({}, e, h))) : A(e, h));
              }
              a.state = e;
            }
          else e.queue = null;
      }
      var hb = { id: 1, overflow: "" };
      function ib(a, b, c) {
        var d = a.id;
        a = a.overflow;
        var f = 32 - G(d) - 1;
        d &= ~(1 << f);
        c += 1;
        var e = 32 - G(b) + f;
        if (30 < e) {
          var g = f - (f % 5);
          e = (d & ((1 << g) - 1)).toString(32);
          d >>= g;
          f -= g;
          return { id: (1 << (32 - G(b) + f)) | (c << f) | d, overflow: e + a };
        }
        return { id: (1 << e) | (c << f) | d, overflow: a };
      }
      var G = Math.clz32 ? Math.clz32 : jb;
      var kb = Math.log;
      var lb = Math.LN2;
      function jb(a) {
        a >>>= 0;
        return a === 0 ? 32 : (31 - ((kb(a) / lb) | 0)) | 0;
      }
      function mb(a, b) {
        return (
          (a === b && (a !== 0 || 1 / a === 1 / b)) || (a !== a && b !== b)
        );
      }
      var nb = typeof Object.is === "function" ? Object.is : mb;
      var H = null;
      var ob = null;
      var I = null;
      var J = null;
      var K = false;
      var L = false;
      var M = 0;
      var N = null;
      var O = 0;
      function P() {
        if (H === null)
          throw Error(
            "Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem."
          );
        return H;
      }
      function rb() {
        if (0 < O)
          throw Error("Rendered more hooks than during the previous render");
        return { memoizedState: null, queue: null, next: null };
      }
      function sb() {
        J === null
          ? I === null
            ? ((K = false), (I = J = rb()))
            : ((K = true), (J = I))
          : J.next === null
          ? ((K = false), (J = J.next = rb()))
          : ((K = true), (J = J.next));
        return J;
      }
      function tb() {
        ob = H = null;
        L = false;
        I = null;
        O = 0;
        J = N = null;
      }
      function ub(a, b) {
        return typeof b === "function" ? b(a) : b;
      }
      function vb(a, b, c) {
        H = P();
        J = sb();
        if (K) {
          var d = J.queue;
          b = d.dispatch;
          if (N !== null && ((c = N.get(d)), c !== void 0)) {
            N.delete(d);
            d = J.memoizedState;
            do (d = a(d, c.action)), (c = c.next);
            while (c !== null);
            J.memoizedState = d;
            return [d, b];
          }
          return [J.memoizedState, b];
        }
        a =
          a === ub
            ? typeof b === "function"
              ? b()
              : b
            : c !== void 0
            ? c(b)
            : b;
        J.memoizedState = a;
        a = J.queue = { last: null, dispatch: null };
        a = a.dispatch = wb.bind(null, H, a);
        return [J.memoizedState, a];
      }
      function xb(a, b) {
        H = P();
        J = sb();
        b = b === void 0 ? null : b;
        if (J !== null) {
          var c = J.memoizedState;
          if (c !== null && b !== null) {
            var d = c[1];
            a: if (d === null) d = false;
            else {
              for (var f = 0; f < d.length && f < b.length; f++)
                if (!nb(b[f], d[f])) {
                  d = false;
                  break a;
                }
              d = true;
            }
            if (d) return c[0];
          }
        }
        a = a();
        J.memoizedState = [a, b];
        return a;
      }
      function wb(a, b, c) {
        if (25 <= O)
          throw Error(
            "Too many re-renders. React limits the number of renders to prevent an infinite loop."
          );
        if (a === H)
          if (
            ((L = true),
            (a = { action: c, next: null }),
            N === null && (N = /* @__PURE__ */ new Map()),
            (c = N.get(b)),
            c === void 0)
          )
            N.set(b, a);
          else {
            for (b = c; b.next !== null; ) b = b.next;
            b.next = a;
          }
      }
      function yb() {
        throw Error(
          "startTransition cannot be called during server rendering."
        );
      }
      function Q() {}
      var zb = {
        readContext: function (a) {
          return a._currentValue2;
        },
        useContext: function (a) {
          P();
          return a._currentValue2;
        },
        useMemo: xb,
        useReducer: vb,
        useRef: function (a) {
          H = P();
          J = sb();
          var b = J.memoizedState;
          return b === null ? ((a = { current: a }), (J.memoizedState = a)) : b;
        },
        useState: function (a) {
          return vb(ub, a);
        },
        useInsertionEffect: Q,
        useLayoutEffect: function () {},
        useCallback: function (a, b) {
          return xb(function () {
            return a;
          }, b);
        },
        useImperativeHandle: Q,
        useEffect: Q,
        useDebugValue: Q,
        useDeferredValue: function (a) {
          P();
          return a;
        },
        useTransition: function () {
          P();
          return [false, yb];
        },
        useId: function () {
          var a = ob.treeContext;
          var b = a.overflow;
          a = a.id;
          a = (a & ~(1 << (32 - G(a) - 1))).toString(32) + b;
          var c = R;
          if (c === null)
            throw Error(
              "Invalid hook call. Hooks can only be called inside of the body of a function component."
            );
          b = M++;
          a = ":" + c.idPrefix + "R" + a;
          0 < b && (a += "H" + b.toString(32));
          return a + ":";
        },
        useMutableSource: function (a, b) {
          P();
          return b(a._source);
        },
        useSyncExternalStore: function (a, b, c) {
          if (c === void 0)
            throw Error(
              "Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering."
            );
          return c();
        },
      };
      var R = null;
      var Ab =
        ea.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED
          .ReactCurrentDispatcher;
      function Bb(a) {
        console.error(a);
        return null;
      }
      function S() {}
      function Cb(a, b, c, d, f, e, g, h, k) {
        var m = [],
          l = /* @__PURE__ */ new Set();
        b = {
          destination: null,
          responseState: b,
          progressiveChunkSize: d === void 0 ? 12800 : d,
          status: 0,
          fatalError: null,
          nextSegmentId: 0,
          allPendingTasks: 0,
          pendingRootTasks: 0,
          completedRootSegment: null,
          abortableTasks: l,
          pingedTasks: m,
          clientRenderedBoundaries: [],
          completedBoundaries: [],
          partialBoundaries: [],
          onError: f === void 0 ? Bb : f,
          onAllReady: e === void 0 ? S : e,
          onShellReady: g === void 0 ? S : g,
          onShellError: h === void 0 ? S : h,
          onFatalError: k === void 0 ? S : k,
        };
        c = T(b, 0, null, c, false, false);
        c.parentFlushed = true;
        a = Db(b, a, null, c, l, $a, null, hb);
        m.push(a);
        return b;
      }
      function Db(a, b, c, d, f, e, g, h) {
        a.allPendingTasks++;
        c === null ? a.pendingRootTasks++ : c.pendingTasks++;
        var k = {
          node: b,
          ping: function () {
            var b2 = a.pingedTasks;
            b2.push(k);
            b2.length === 1 && Eb(a);
          },
          blockedBoundary: c,
          blockedSegment: d,
          abortSet: f,
          legacyContext: e,
          context: g,
          treeContext: h,
        };
        f.add(k);
        return k;
      }
      function T(a, b, c, d, f, e) {
        return {
          status: 0,
          id: -1,
          index: b,
          parentFlushed: false,
          chunks: [],
          children: [],
          formatContext: d,
          boundary: c,
          lastPushedText: f,
          textEmbedded: e,
        };
      }
      function U(a, b) {
        a = a.onError(b);
        if (a != null && typeof a !== "string")
          throw Error(
            'onError returned something with a type other than "string". onError should return a string and may return null or undefined but must not return anything else. It received something of type "' +
              typeof a +
              '" instead'
          );
        return a;
      }
      function V(a, b) {
        var c = a.onShellError;
        c(b);
        c = a.onFatalError;
        c(b);
        a.destination !== null
          ? ((a.status = 2), a.destination.destroy(b))
          : ((a.status = 1), (a.fatalError = b));
      }
      function Fb(a, b, c, d, f) {
        H = {};
        ob = b;
        M = 0;
        for (a = c(d, f); L; )
          (L = false), (M = 0), (O += 1), (J = null), (a = c(d, f));
        tb();
        return a;
      }
      function Gb(a, b, c, d) {
        var f = c.render(),
          e = d.childContextTypes;
        if (e !== null && e !== void 0) {
          var g = b.legacyContext;
          if (typeof c.getChildContext !== "function") d = g;
          else {
            c = c.getChildContext();
            for (var h in c)
              if (!(h in e))
                throw Error(
                  (Za(d) || "Unknown") +
                    '.getChildContext(): key "' +
                    h +
                    '" is not defined in childContextTypes.'
                );
            d = A({}, g, c);
          }
          b.legacyContext = d;
          W(a, b, f);
          b.legacyContext = g;
        } else W(a, b, f);
      }
      function Hb(a, b) {
        if (a && a.defaultProps) {
          b = A({}, b);
          a = a.defaultProps;
          for (var c in a) b[c] === void 0 && (b[c] = a[c]);
          return b;
        }
        return b;
      }
      function Ib(a, b, c, d, f) {
        if (typeof c === "function")
          if (c.prototype && c.prototype.isReactComponent) {
            f = ab(c, b.legacyContext);
            var e = c.contextType;
            e = new c(
              d,
              typeof e === "object" && e !== null ? e._currentValue2 : f
            );
            gb(e, c, d, f);
            Gb(a, b, e, c);
          } else {
            e = ab(c, b.legacyContext);
            f = Fb(a, b, c, d, e);
            var g = M !== 0;
            if (
              typeof f === "object" &&
              f !== null &&
              typeof f.render === "function" &&
              f.$$typeof === void 0
            )
              gb(f, c, d, e), Gb(a, b, f, c);
            else if (g) {
              d = b.treeContext;
              b.treeContext = ib(d, 1, 0);
              try {
                W(a, b, f);
              } finally {
                b.treeContext = d;
              }
            } else W(a, b, f);
          }
        else if (typeof c === "string") {
          f = b.blockedSegment;
          e = za(f.chunks, c, d, a.responseState, f.formatContext);
          f.lastPushedText = false;
          g = f.formatContext;
          f.formatContext = sa(g, c, d);
          Jb(a, b, e);
          f.formatContext = g;
          switch (c) {
            case "area":
            case "base":
            case "br":
            case "col":
            case "embed":
            case "hr":
            case "img":
            case "input":
            case "keygen":
            case "link":
            case "meta":
            case "param":
            case "source":
            case "track":
            case "wbr":
              break;
            default:
              f.chunks.push("</", c, ">");
          }
          f.lastPushedText = false;
        } else {
          switch (c) {
            case Wa:
            case Va:
            case La:
            case Ma:
            case Ka:
              W(a, b, d.children);
              return;
            case Ra:
              W(a, b, d.children);
              return;
            case Ua:
              throw Error(
                "ReactDOMServer does not yet support scope components."
              );
            case Qa:
              a: {
                c = b.blockedBoundary;
                f = b.blockedSegment;
                e = d.fallback;
                d = d.children;
                g = /* @__PURE__ */ new Set();
                var h = {
                    id: null,
                    rootSegmentID: -1,
                    parentFlushed: false,
                    pendingTasks: 0,
                    forceClientRender: false,
                    completedSegments: [],
                    byteSize: 0,
                    fallbackAbortableTasks: g,
                    errorDigest: null,
                  },
                  k = T(a, f.chunks.length, h, f.formatContext, false, false);
                f.children.push(k);
                f.lastPushedText = false;
                var m = T(a, 0, null, f.formatContext, false, false);
                m.parentFlushed = true;
                b.blockedBoundary = h;
                b.blockedSegment = m;
                try {
                  if (
                    (Jb(a, b, d),
                    a.responseState.generateStaticMarkup ||
                      (m.lastPushedText &&
                        m.textEmbedded &&
                        m.chunks.push("<!-- -->")),
                    (m.status = 1),
                    X(h, m),
                    h.pendingTasks === 0)
                  )
                    break a;
                } catch (l) {
                  (m.status = 4),
                    (h.forceClientRender = true),
                    (h.errorDigest = U(a, l));
                } finally {
                  (b.blockedBoundary = c), (b.blockedSegment = f);
                }
                b = Db(
                  a,
                  e,
                  c,
                  k,
                  g,
                  b.legacyContext,
                  b.context,
                  b.treeContext
                );
                a.pingedTasks.push(b);
              }
              return;
          }
          if (typeof c === "object" && c !== null)
            switch (c.$$typeof) {
              case Pa:
                d = Fb(a, b, c.render, d, f);
                if (M !== 0) {
                  c = b.treeContext;
                  b.treeContext = ib(c, 1, 0);
                  try {
                    W(a, b, d);
                  } finally {
                    b.treeContext = c;
                  }
                } else W(a, b, d);
                return;
              case Sa:
                c = c.type;
                d = Hb(c, d);
                Ib(a, b, c, d, f);
                return;
              case Na:
                f = d.children;
                c = c._context;
                d = d.value;
                e = c._currentValue2;
                c._currentValue2 = d;
                g = D;
                D = d = {
                  parent: g,
                  depth: g === null ? 0 : g.depth + 1,
                  context: c,
                  parentValue: e,
                  value: d,
                };
                b.context = d;
                W(a, b, f);
                a = D;
                if (a === null)
                  throw Error(
                    "Tried to pop a Context at the root of the app. This is a bug in React."
                  );
                d = a.parentValue;
                a.context._currentValue2 =
                  d === Xa ? a.context._defaultValue : d;
                a = D = a.parent;
                b.context = a;
                return;
              case Oa:
                d = d.children;
                d = d(c._currentValue2);
                W(a, b, d);
                return;
              case Ta:
                f = c._init;
                c = f(c._payload);
                d = Hb(c, d);
                Ib(a, b, c, d, void 0);
                return;
            }
          throw Error(
            "Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " +
              ((c == null ? c : typeof c) + ".")
          );
        }
      }
      function W(a, b, c) {
        b.node = c;
        if (typeof c === "object" && c !== null) {
          switch (c.$$typeof) {
            case Ia:
              Ib(a, b, c.type, c.props, c.ref);
              return;
            case Ja:
              throw Error(
                "Portals are not currently supported by the server renderer. Render them conditionally so that they only appear on the client render."
              );
            case Ta:
              var d = c._init;
              c = d(c._payload);
              W(a, b, c);
              return;
          }
          if (ra(c)) {
            Kb(a, b, c);
            return;
          }
          c === null || typeof c !== "object"
            ? (d = null)
            : ((d = (Ya && c[Ya]) || c["@@iterator"]),
              (d = typeof d === "function" ? d : null));
          if (d && (d = d.call(c))) {
            c = d.next();
            if (!c.done) {
              var f = [];
              do f.push(c.value), (c = d.next());
              while (!c.done);
              Kb(a, b, f);
            }
            return;
          }
          a = Object.prototype.toString.call(c);
          throw Error(
            "Objects are not valid as a React child (found: " +
              (a === "[object Object]"
                ? "object with keys {" + Object.keys(c).join(", ") + "}"
                : a) +
              "). If you meant to render a collection of children, use an array instead."
          );
        }
        typeof c === "string"
          ? ((d = b.blockedSegment),
            (d.lastPushedText = Ha(
              b.blockedSegment.chunks,
              c,
              a.responseState,
              d.lastPushedText
            )))
          : typeof c === "number" &&
            ((d = b.blockedSegment),
            (d.lastPushedText = Ha(
              b.blockedSegment.chunks,
              "" + c,
              a.responseState,
              d.lastPushedText
            )));
      }
      function Kb(a, b, c) {
        for (var d = c.length, f = 0; f < d; f++) {
          var e = b.treeContext;
          b.treeContext = ib(e, d, f);
          try {
            Jb(a, b, c[f]);
          } finally {
            b.treeContext = e;
          }
        }
      }
      function Jb(a, b, c) {
        var d = b.blockedSegment.formatContext,
          f = b.legacyContext,
          e = b.context;
        try {
          return W(a, b, c);
        } catch (k) {
          if (
            (tb(),
            typeof k === "object" && k !== null && typeof k.then === "function")
          ) {
            c = k;
            var g = b.blockedSegment,
              h = T(
                a,
                g.chunks.length,
                null,
                g.formatContext,
                g.lastPushedText,
                true
              );
            g.children.push(h);
            g.lastPushedText = false;
            a = Db(
              a,
              b.node,
              b.blockedBoundary,
              h,
              b.abortSet,
              b.legacyContext,
              b.context,
              b.treeContext
            ).ping;
            c.then(a, a);
            b.blockedSegment.formatContext = d;
            b.legacyContext = f;
            b.context = e;
            F(e);
          } else
            throw (
              ((b.blockedSegment.formatContext = d),
              (b.legacyContext = f),
              (b.context = e),
              F(e),
              k)
            );
        }
      }
      function Lb(a) {
        var b = a.blockedBoundary;
        a = a.blockedSegment;
        a.status = 3;
        Mb(this, b, a);
      }
      function Nb(a, b, c) {
        var d = a.blockedBoundary;
        a.blockedSegment.status = 3;
        d === null
          ? (b.allPendingTasks--,
            b.status !== 2 &&
              ((b.status = 2),
              b.destination !== null && b.destination.push(null)))
          : (d.pendingTasks--,
            d.forceClientRender ||
              ((d.forceClientRender = true),
              (d.errorDigest = b.onError(
                c === void 0
                  ? Error(
                      "The render was aborted by the server without a reason."
                    )
                  : c
              )),
              d.parentFlushed && b.clientRenderedBoundaries.push(d)),
            d.fallbackAbortableTasks.forEach(function (a2) {
              return Nb(a2, b, c);
            }),
            d.fallbackAbortableTasks.clear(),
            b.allPendingTasks--,
            b.allPendingTasks === 0 && ((a = b.onAllReady), a()));
      }
      function X(a, b) {
        if (
          b.chunks.length === 0 &&
          b.children.length === 1 &&
          b.children[0].boundary === null
        ) {
          var c = b.children[0];
          c.id = b.id;
          c.parentFlushed = true;
          c.status === 1 && X(a, c);
        } else a.completedSegments.push(b);
      }
      function Mb(a, b, c) {
        if (b === null) {
          if (c.parentFlushed) {
            if (a.completedRootSegment !== null)
              throw Error(
                "There can only be one root segment. This is a bug in React."
              );
            a.completedRootSegment = c;
          }
          a.pendingRootTasks--;
          a.pendingRootTasks === 0 &&
            ((a.onShellError = S), (b = a.onShellReady), b());
        } else
          b.pendingTasks--,
            b.forceClientRender ||
              (b.pendingTasks === 0
                ? (c.parentFlushed && c.status === 1 && X(b, c),
                  b.parentFlushed && a.completedBoundaries.push(b),
                  b.fallbackAbortableTasks.forEach(Lb, a),
                  b.fallbackAbortableTasks.clear())
                : c.parentFlushed &&
                  c.status === 1 &&
                  (X(b, c),
                  b.completedSegments.length === 1 &&
                    b.parentFlushed &&
                    a.partialBoundaries.push(b)));
        a.allPendingTasks--;
        a.allPendingTasks === 0 && ((a = a.onAllReady), a());
      }
      function Eb(a) {
        if (a.status !== 2) {
          var b = D,
            c = Ab.current;
          Ab.current = zb;
          var d = R;
          R = a.responseState;
          try {
            var f = a.pingedTasks,
              e;
            for (e = 0; e < f.length; e++) {
              var g = f[e];
              var h = a,
                k = g.blockedSegment;
              if (k.status === 0) {
                F(g.context);
                try {
                  W(h, g, g.node),
                    h.responseState.generateStaticMarkup ||
                      (k.lastPushedText &&
                        k.textEmbedded &&
                        k.chunks.push("<!-- -->")),
                    g.abortSet.delete(g),
                    (k.status = 1),
                    Mb(h, g.blockedBoundary, k);
                } catch (y) {
                  if (
                    (tb(),
                    typeof y === "object" &&
                      y !== null &&
                      typeof y.then === "function")
                  ) {
                    var m = g.ping;
                    y.then(m, m);
                  } else {
                    g.abortSet.delete(g);
                    k.status = 4;
                    var l = g.blockedBoundary,
                      p = y,
                      B = U(h, p);
                    l === null
                      ? V(h, p)
                      : (l.pendingTasks--,
                        l.forceClientRender ||
                          ((l.forceClientRender = true),
                          (l.errorDigest = B),
                          l.parentFlushed &&
                            h.clientRenderedBoundaries.push(l)));
                    h.allPendingTasks--;
                    if (h.allPendingTasks === 0) {
                      var C = h.onAllReady;
                      C();
                    }
                  }
                } finally {
                }
              }
            }
            f.splice(0, e);
            a.destination !== null && Ob(a, a.destination);
          } catch (y) {
            U(a, y), V(a, y);
          } finally {
            (R = d), (Ab.current = c), c === zb && F(b);
          }
        }
      }
      function Y(a, b, c) {
        c.parentFlushed = true;
        switch (c.status) {
          case 0:
            var d = (c.id = a.nextSegmentId++);
            c.lastPushedText = false;
            c.textEmbedded = false;
            a = a.responseState;
            b.push('<template id="');
            b.push(a.placeholderPrefix);
            a = d.toString(16);
            b.push(a);
            return b.push('"></template>');
          case 1:
            c.status = 2;
            var f = true;
            d = c.chunks;
            var e = 0;
            c = c.children;
            for (var g = 0; g < c.length; g++) {
              for (f = c[g]; e < f.index; e++) b.push(d[e]);
              f = Z(a, b, f);
            }
            for (; e < d.length - 1; e++) b.push(d[e]);
            e < d.length && (f = b.push(d[e]));
            return f;
          default:
            throw Error(
              "Aborted, errored or already flushed boundaries should not be flushed again. This is a bug in React."
            );
        }
      }
      function Z(a, b, c) {
        var d = c.boundary;
        if (d === null) return Y(a, b, c);
        d.parentFlushed = true;
        if (d.forceClientRender)
          return (
            a.responseState.generateStaticMarkup ||
              ((d = d.errorDigest),
              b.push("<!--$!-->"),
              b.push("<template"),
              d && (b.push(' data-dgst="'), (d = u(d)), b.push(d), b.push('"')),
              b.push("></template>")),
            Y(a, b, c),
            (a = a.responseState.generateStaticMarkup
              ? true
              : b.push("<!--/$-->")),
            a
          );
        if (0 < d.pendingTasks) {
          d.rootSegmentID = a.nextSegmentId++;
          0 < d.completedSegments.length && a.partialBoundaries.push(d);
          var f = a.responseState;
          var e = f.nextSuspenseID++;
          f = f.boundaryPrefix + e.toString(16);
          d = d.id = f;
          Aa(b, a.responseState, d);
          Y(a, b, c);
          return b.push("<!--/$-->");
        }
        if (d.byteSize > a.progressiveChunkSize)
          return (
            (d.rootSegmentID = a.nextSegmentId++),
            a.completedBoundaries.push(d),
            Aa(b, a.responseState, d.id),
            Y(a, b, c),
            b.push("<!--/$-->")
          );
        a.responseState.generateStaticMarkup || b.push("<!--$-->");
        c = d.completedSegments;
        if (c.length !== 1)
          throw Error(
            "A previously unvisited boundary must have exactly one root segment. This is a bug in React."
          );
        Z(a, b, c[0]);
        a = a.responseState.generateStaticMarkup ? true : b.push("<!--/$-->");
        return a;
      }
      function Pb(a, b, c) {
        Ba(b, a.responseState, c.formatContext, c.id);
        Z(a, b, c);
        return Ca(b, c.formatContext);
      }
      function Qb(a, b, c) {
        for (var d = c.completedSegments, f = 0; f < d.length; f++)
          Rb(a, b, c, d[f]);
        d.length = 0;
        a = a.responseState;
        d = c.id;
        c = c.rootSegmentID;
        b.push(a.startInlineScript);
        a.sentCompleteBoundaryFunction
          ? b.push('$RC("')
          : ((a.sentCompleteBoundaryFunction = true),
            b.push(
              'function $RC(a,b){a=document.getElementById(a);b=document.getElementById(b);b.parentNode.removeChild(b);if(a){a=a.previousSibling;var f=a.parentNode,c=a.nextSibling,e=0;do{if(c&&8===c.nodeType){var d=c.data;if("/$"===d)if(0===e)break;else e--;else"$"!==d&&"$?"!==d&&"$!"!==d||e++}d=c.nextSibling;f.removeChild(c);c=d}while(c);for(;b.firstChild;)f.insertBefore(b.firstChild,c);a.data="$";a._reactRetry&&a._reactRetry()}};$RC("'
            ));
        if (d === null)
          throw Error(
            "An ID must have been assigned before we can complete the boundary."
          );
        c = c.toString(16);
        b.push(d);
        b.push('","');
        b.push(a.segmentPrefix);
        b.push(c);
        return b.push('")</script>');
      }
      function Rb(a, b, c, d) {
        if (d.status === 2) return true;
        var f = d.id;
        if (f === -1) {
          if ((d.id = c.rootSegmentID) === -1)
            throw Error(
              "A root segment ID must have been assigned by now. This is a bug in React."
            );
          return Pb(a, b, d);
        }
        Pb(a, b, d);
        a = a.responseState;
        b.push(a.startInlineScript);
        a.sentCompleteSegmentFunction
          ? b.push('$RS("')
          : ((a.sentCompleteSegmentFunction = true),
            b.push(
              'function $RS(a,b){a=document.getElementById(a);b=document.getElementById(b);for(a.parentNode.removeChild(a);a.firstChild;)b.parentNode.insertBefore(a.firstChild,b);b.parentNode.removeChild(b)};$RS("'
            ));
        b.push(a.segmentPrefix);
        f = f.toString(16);
        b.push(f);
        b.push('","');
        b.push(a.placeholderPrefix);
        b.push(f);
        return b.push('")</script>');
      }
      function Ob(a, b) {
        try {
          var c = a.completedRootSegment;
          if (c !== null && a.pendingRootTasks === 0) {
            Z(a, b, c);
            a.completedRootSegment = null;
            var d = a.responseState.bootstrapChunks;
            for (c = 0; c < d.length - 1; c++) b.push(d[c]);
            c < d.length && b.push(d[c]);
          }
          var f = a.clientRenderedBoundaries,
            e;
          for (e = 0; e < f.length; e++) {
            var g = f[e];
            d = b;
            var h = a.responseState,
              k = g.id,
              m = g.errorDigest,
              l = g.errorMessage,
              p = g.errorComponentStack;
            d.push(h.startInlineScript);
            h.sentClientRenderFunction
              ? d.push('$RX("')
              : ((h.sentClientRenderFunction = true),
                d.push(
                  'function $RX(b,c,d,e){var a=document.getElementById(b);a&&(b=a.previousSibling,b.data="$!",a=a.dataset,c&&(a.dgst=c),d&&(a.msg=d),e&&(a.stck=e),b._reactRetry&&b._reactRetry())};$RX("'
                ));
            if (k === null)
              throw Error(
                "An ID must have been assigned before we can complete the boundary."
              );
            d.push(k);
            d.push('"');
            if (m || l || p) {
              d.push(",");
              var B = Ea(m || "");
              d.push(B);
            }
            if (l || p) {
              d.push(",");
              var C = Ea(l || "");
              d.push(C);
            }
            if (p) {
              d.push(",");
              var y = Ea(p);
              d.push(y);
            }
            if (!d.push(")</script>")) {
              a.destination = null;
              e++;
              f.splice(0, e);
              return;
            }
          }
          f.splice(0, e);
          var aa = a.completedBoundaries;
          for (e = 0; e < aa.length; e++)
            if (!Qb(a, b, aa[e])) {
              a.destination = null;
              e++;
              aa.splice(0, e);
              return;
            }
          aa.splice(0, e);
          var ba = a.partialBoundaries;
          for (e = 0; e < ba.length; e++) {
            var pb = ba[e];
            a: {
              f = a;
              g = b;
              var ca = pb.completedSegments;
              for (h = 0; h < ca.length; h++)
                if (!Rb(f, g, pb, ca[h])) {
                  h++;
                  ca.splice(0, h);
                  var qb = false;
                  break a;
                }
              ca.splice(0, h);
              qb = true;
            }
            if (!qb) {
              a.destination = null;
              e++;
              ba.splice(0, e);
              return;
            }
          }
          ba.splice(0, e);
          var da = a.completedBoundaries;
          for (e = 0; e < da.length; e++)
            if (!Qb(a, b, da[e])) {
              a.destination = null;
              e++;
              da.splice(0, e);
              return;
            }
          da.splice(0, e);
        } finally {
          a.allPendingTasks === 0 &&
            a.pingedTasks.length === 0 &&
            a.clientRenderedBoundaries.length === 0 &&
            a.completedBoundaries.length === 0 &&
            b.push(null);
        }
      }
      function Sb(a, b) {
        if (a.status === 1) (a.status = 2), b.destroy(a.fatalError);
        else if (a.status !== 2 && a.destination === null) {
          a.destination = b;
          try {
            Ob(a, b);
          } catch (c) {
            U(a, c), V(a, c);
          }
        }
      }
      function Tb(a, b) {
        try {
          var c = a.abortableTasks;
          c.forEach(function (c2) {
            return Nb(c2, a, b);
          });
          c.clear();
          a.destination !== null && Ob(a, a.destination);
        } catch (d) {
          U(a, d), V(a, d);
        }
      }
      function Ub() {}
      function Vb(a, b, c, d) {
        var f = false,
          e = null,
          g = "",
          h = false;
        a = Cb(
          a,
          Fa(c, b ? b.identifierPrefix : void 0),
          Ga(),
          Infinity,
          Ub,
          void 0,
          function () {
            h = true;
          },
          void 0,
          void 0
        );
        Eb(a);
        Tb(a, d);
        Sb(a, {
          push: function (a2) {
            a2 !== null && (g += a2);
            return true;
          },
          destroy: function (a2) {
            f = true;
            e = a2;
          },
        });
        if (f) throw e;
        if (!h)
          throw Error(
            "A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition."
          );
        return g;
      }
      function Wb(a, b) {
        a.prototype = Object.create(b.prototype);
        a.prototype.constructor = a;
        a.__proto__ = b;
      }
      var Xb = (function (a) {
        function b() {
          var b2 = a.call(this, {}) || this;
          b2.request = null;
          b2.startedFlowing = false;
          return b2;
        }
        Wb(b, a);
        var c = b.prototype;
        c._destroy = function (a2, b2) {
          Tb(this.request);
          b2(a2);
        };
        c._read = function () {
          this.startedFlowing && Sb(this.request, this);
        };
        return b;
      })(fa.Readable);
      function Yb() {}
      function Zb(a, b) {
        var c = new Xb(),
          d = Cb(
            a,
            Fa(false, b ? b.identifierPrefix : void 0),
            Ga(),
            Infinity,
            Yb,
            function () {
              c.startedFlowing = true;
              Sb(d, c);
            },
            void 0,
            void 0
          );
        c.request = d;
        Eb(d);
        return c;
      }
      exports.renderToNodeStream = function (a, b) {
        return Zb(a, b);
      };
      exports.renderToStaticMarkup = function (a, b) {
        return Vb(
          a,
          b,
          true,
          'The server used "renderToStaticMarkup" which does not support Suspense. If you intended to have the server wait for the suspended component please switch to "renderToPipeableStream" which supports Suspense on the server'
        );
      };
      exports.renderToStaticNodeStream = function (a, b) {
        return Zb(a, b);
      };
      exports.renderToString = function (a, b) {
        return Vb(
          a,
          b,
          false,
          'The server used "renderToString" which does not support Suspense. If you intended for this Suspense boundary to render the fallback content on the server consider throwing an Error somewhere within the Suspense boundary. If you intended to have the server wait for the suspended component please switch to "renderToPipeableStream" which supports Suspense on the server'
        );
      };
      exports.version = "18.2.0";
    },
  });

  // ../../graalvm-react/src/main/node/util/inherits.js
  var require_inherits = __commonJS({
    "../../graalvm-react/src/main/node/util/inherits.js"(exports, module) {
      init_process_shim();
      module.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          var TempCtor = function () {};
          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        }
      };
    },
  });

  // ../../graalvm-react/src/main/node/util/textencoder.js
  var require_textencoder = __commonJS({
    "../../graalvm-react/src/main/node/util/textencoder.js"(exports, module) {
      init_process_shim();
      (function (undefined2) {
        if (!("TextEncoder" in self && "TextDecoder" in self)) {
          var ENCODEINTO_BUILD = false;
          (function (window2) {
            "use strict";
            var fromCharCode = String.fromCharCode;
            var Object_prototype_toString = {}.toString;
            var sharedArrayBufferString = Object_prototype_toString.call(
              window2["SharedArrayBuffer"]
            );
            var undefinedObjectString = "[object Undefined]";
            var NativeUint8Array = window2.Uint8Array;
            var patchedU8Array = NativeUint8Array || Array;
            var nativeArrayBuffer = NativeUint8Array
              ? ArrayBuffer
              : patchedU8Array;
            var arrayBuffer_isView =
              nativeArrayBuffer.isView ||
              function (x) {
                return x && "length" in x;
              };
            var arrayBufferString = Object_prototype_toString.call(
              nativeArrayBuffer.prototype
            );
            var window_encodeURIComponent = encodeURIComponent;
            var window_parseInt = parseInt;
            var TextEncoderPrototype = TextEncoder["prototype"];
            var GlobalTextEncoder = window2["TextEncoder"];
            var decoderRegexp = /[\xc0-\xff][\x80-\xbf]+|[\x80-\xff]/g;
            var encoderRegexp =
              /[\x80-\uD7ff\uDC00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]?/g;
            var tmpBufferU16 = new (
              NativeUint8Array ? Uint16Array : patchedU8Array
            )(32);
            var globalTextEncoderPrototype;
            var globalTextEncoderInstance;
            function TextDecoder() {}
            TextDecoder["prototype"]["decode"] = function (inputArrayOrBuffer) {
              var inputAs8 = inputArrayOrBuffer,
                asObjectString;
              if (!arrayBuffer_isView(inputAs8)) {
                asObjectString = Object_prototype_toString.call(inputAs8);
                if (
                  asObjectString !== arrayBufferString &&
                  asObjectString !== sharedArrayBufferString &&
                  asObjectString !== undefinedObjectString
                )
                  throw TypeError(
                    "Failed to execute 'decode' on 'TextDecoder': The provided value is not of type '(ArrayBuffer or ArrayBufferView)'"
                  );
                inputAs8 = NativeUint8Array
                  ? new patchedU8Array(inputAs8)
                  : inputAs8 || [];
              }
              var resultingString = "",
                tmpStr = "",
                index = 0,
                len = inputAs8.length | 0,
                lenMinus32 = (len - 32) | 0,
                nextEnd = 0,
                nextStop = 0,
                cp0 = 0,
                codePoint = 0,
                minBits = 0,
                cp1 = 0,
                pos = 0,
                tmp = -1;
              for (; index < len; ) {
                nextEnd = index <= lenMinus32 ? 32 : (len - index) | 0;
                for (
                  ;
                  pos < nextEnd;
                  index = (index + 1) | 0, pos = (pos + 1) | 0
                ) {
                  cp0 = inputAs8[index] & 255;
                  switch (cp0 >> 4) {
                    case 15:
                      cp1 = inputAs8[(index = (index + 1) | 0)] & 255;
                      if (cp1 >> 6 !== 2 || 247 < cp0) {
                        index = (index - 1) | 0;
                        break;
                      }
                      codePoint = ((cp0 & 7) << 6) | (cp1 & 63);
                      minBits = 5;
                      cp0 = 256;
                    case 14:
                      cp1 = inputAs8[(index = (index + 1) | 0)] & 255;
                      codePoint <<= 6;
                      codePoint |= ((cp0 & 15) << 6) | (cp1 & 63);
                      minBits = cp1 >> 6 === 2 ? (minBits + 4) | 0 : 24;
                      cp0 = (cp0 + 256) & 768;
                    case 13:
                    case 12:
                      cp1 = inputAs8[(index = (index + 1) | 0)] & 255;
                      codePoint <<= 6;
                      codePoint |= ((cp0 & 31) << 6) | (cp1 & 63);
                      minBits = (minBits + 7) | 0;
                      if (
                        index < len &&
                        cp1 >> 6 === 2 &&
                        codePoint >> minBits &&
                        codePoint < 1114112
                      ) {
                        cp0 = codePoint;
                        codePoint = (codePoint - 65536) | 0;
                        if (0 <= codePoint) {
                          tmp = ((codePoint >> 10) + 55296) | 0;
                          cp0 = ((codePoint & 1023) + 56320) | 0;
                          if (pos < 31) {
                            tmpBufferU16[pos] = tmp;
                            pos = (pos + 1) | 0;
                            tmp = -1;
                          } else {
                            cp1 = tmp;
                            tmp = cp0;
                            cp0 = cp1;
                          }
                        } else nextEnd = (nextEnd + 1) | 0;
                      } else {
                        cp0 >>= 8;
                        index = (index - cp0 - 1) | 0;
                        cp0 = 65533;
                      }
                      minBits = 0;
                      codePoint = 0;
                      nextEnd = index <= lenMinus32 ? 32 : (len - index) | 0;
                    default:
                      tmpBufferU16[pos] = cp0;
                      continue;
                    case 11:
                    case 10:
                    case 9:
                    case 8:
                  }
                  tmpBufferU16[pos] = 65533;
                }
                tmpStr += fromCharCode(
                  tmpBufferU16[0],
                  tmpBufferU16[1],
                  tmpBufferU16[2],
                  tmpBufferU16[3],
                  tmpBufferU16[4],
                  tmpBufferU16[5],
                  tmpBufferU16[6],
                  tmpBufferU16[7],
                  tmpBufferU16[8],
                  tmpBufferU16[9],
                  tmpBufferU16[10],
                  tmpBufferU16[11],
                  tmpBufferU16[12],
                  tmpBufferU16[13],
                  tmpBufferU16[14],
                  tmpBufferU16[15],
                  tmpBufferU16[16],
                  tmpBufferU16[17],
                  tmpBufferU16[18],
                  tmpBufferU16[19],
                  tmpBufferU16[20],
                  tmpBufferU16[21],
                  tmpBufferU16[22],
                  tmpBufferU16[23],
                  tmpBufferU16[24],
                  tmpBufferU16[25],
                  tmpBufferU16[26],
                  tmpBufferU16[27],
                  tmpBufferU16[28],
                  tmpBufferU16[29],
                  tmpBufferU16[30],
                  tmpBufferU16[31]
                );
                if (pos < 32) tmpStr = tmpStr.slice(0, (pos - 32) | 0);
                if (index < len) {
                  tmpBufferU16[0] = tmp;
                  pos = ~tmp >>> 31;
                  tmp = -1;
                  if (tmpStr.length < resultingString.length) continue;
                } else if (tmp !== -1) {
                  tmpStr += fromCharCode(tmp);
                }
                resultingString += tmpStr;
                tmpStr = "";
              }
              return resultingString;
            };
            function encoderReplacer(nonAsciiChars) {
              var point = nonAsciiChars.charCodeAt(0) | 0;
              if (55296 <= point) {
                if (point <= 56319) {
                  var nextcode = nonAsciiChars.charCodeAt(1) | 0;
                  if (56320 <= nextcode && nextcode <= 57343) {
                    point = ((point << 10) + nextcode - 56613888) | 0;
                    if (point > 65535)
                      return fromCharCode(
                        (30 << 3) | (point >> 18),
                        (2 << 6) | ((point >> 12) & 63),
                        (2 << 6) | ((point >> 6) & 63),
                        (2 << 6) | (point & 63)
                      );
                  } else point = 65533;
                } else if (point <= 57343) {
                  point = 65533;
                }
              }
              if (point <= 2047) {
                return fromCharCode(
                  (6 << 5) | (point >> 6),
                  (2 << 6) | (point & 63)
                );
              } else
                return fromCharCode(
                  (14 << 4) | (point >> 12),
                  (2 << 6) | ((point >> 6) & 63),
                  (2 << 6) | (point & 63)
                );
            }
            function TextEncoder() {}
            TextEncoderPrototype["encode"] = function (inputString) {
              var encodedString =
                  inputString === void 0 ? "" : "" + inputString,
                len = encodedString.length | 0;
              var result = new patchedU8Array(((len << 1) + 8) | 0),
                tmpResult;
              var i = 0,
                pos = 0,
                point = 0,
                nextcode = 0;
              var upgradededArraySize = !NativeUint8Array;
              for (i = 0; i < len; i = (i + 1) | 0, pos = (pos + 1) | 0) {
                point = encodedString.charCodeAt(i) | 0;
                if (point <= 127) {
                  result[pos] = point;
                } else if (point <= 2047) {
                  result[pos] = (6 << 5) | (point >> 6);
                  result[(pos = (pos + 1) | 0)] = (2 << 6) | (point & 63);
                } else {
                  widenCheck: {
                    if (55296 <= point) {
                      if (point <= 56319) {
                        nextcode =
                          encodedString.charCodeAt((i = (i + 1) | 0)) | 0;
                        if (56320 <= nextcode && nextcode <= 57343) {
                          point = ((point << 10) + nextcode - 56613888) | 0;
                          if (point > 65535) {
                            result[pos] = (30 << 3) | (point >> 18);
                            result[(pos = (pos + 1) | 0)] =
                              (2 << 6) | ((point >> 12) & 63);
                            result[(pos = (pos + 1) | 0)] =
                              (2 << 6) | ((point >> 6) & 63);
                            result[(pos = (pos + 1) | 0)] =
                              (2 << 6) | (point & 63);
                            continue;
                          }
                          break widenCheck;
                        }
                        point = 65533;
                      } else if (point <= 57343) {
                        point = 65533;
                      }
                    }
                    if (
                      !upgradededArraySize &&
                      i << 1 < pos &&
                      i << 1 < ((pos - 7) | 0)
                    ) {
                      upgradededArraySize = true;
                      tmpResult = new patchedU8Array(len * 3);
                      tmpResult.set(result);
                      result = tmpResult;
                    }
                  }
                  result[pos] = (14 << 4) | (point >> 12);
                  result[(pos = (pos + 1) | 0)] =
                    (2 << 6) | ((point >> 6) & 63);
                  result[(pos = (pos + 1) | 0)] = (2 << 6) | (point & 63);
                }
              }
              return NativeUint8Array
                ? result.subarray(0, pos)
                : result.slice(0, pos);
            };
            function polyfill_encodeInto(inputString, u8Arr) {
              var encodedString =
                inputString === void 0
                  ? ""
                  : ("" + inputString).replace(encoderRegexp, encoderReplacer);
              var len = encodedString.length | 0,
                i = 0,
                char = 0,
                read = 0,
                u8ArrLen = u8Arr.length | 0,
                inputLength = inputString.length | 0;
              if (u8ArrLen < len) len = u8ArrLen;
              putChars: {
                for (; i < len; i = (i + 1) | 0) {
                  char = encodedString.charCodeAt(i) | 0;
                  switch (char >> 4) {
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                      read = (read + 1) | 0;
                    case 8:
                    case 9:
                    case 10:
                    case 11:
                      break;
                    case 12:
                    case 13:
                      if (((i + 1) | 0) < u8ArrLen) {
                        read = (read + 1) | 0;
                        break;
                      }
                    case 14:
                      if (((i + 2) | 0) < u8ArrLen) {
                        read = (read + 1) | 0;
                        break;
                      }
                    case 15:
                      if (((i + 3) | 0) < u8ArrLen) {
                        read = (read + 1) | 0;
                        break;
                      }
                    default:
                      break putChars;
                  }
                  u8Arr[i] = char;
                }
              }
              return {
                written: i,
                read: inputLength < read ? inputLength : read,
              };
            }
            if (ENCODEINTO_BUILD) {
              TextEncoderPrototype["encodeInto"] = polyfill_encodeInto;
            }
            if (!GlobalTextEncoder) {
              window2["TextDecoder"] = TextDecoder;
              window2["TextEncoder"] = TextEncoder;
              if (module && module.exports) {
                module.exports.TextEncoder = TextEncoder;
                module.exports.TextDecoder = TextDecoder;
              } else if (!!exports) {
                exports.TextEncoder = TextEncoder;
                exports.TextDecoder = TextDecoder;
              }
            } else if (
              ENCODEINTO_BUILD &&
              !(globalTextEncoderPrototype = GlobalTextEncoder["prototype"])[
                "encodeInto"
              ]
            ) {
              globalTextEncoderInstance = new GlobalTextEncoder();
              globalTextEncoderPrototype["encodeInto"] = function (
                string,
                u8arr
              ) {
                var strLen = string.length | 0,
                  u8Len = u8arr.length | 0;
                if (strLen < u8Len >> 1) {
                  var res8 = globalTextEncoderInstance["encode"](string);
                  var res8Len = res8.length | 0;
                  if (res8Len < u8Len) {
                    u8arr.set(res8);
                    return {
                      read: strLen,
                      written: res8.length | 0,
                    };
                  }
                }
                return polyfill_encodeInto(string, u8arr);
              };
            }
          })(
            (module && module.exports) ||
              (!!exports && exports) ||
              typeof global == "" + void 0
              ? typeof self == "" + void 0
                ? this
                : self
              : global
          );
        } else {
          const encoder = self["TextEncoder"];
          const decoder = self["TextDecoder"];
          if (module && module.exports) {
            module.exports.TextEncoder = encoder;
            module.exports.TextDecoder = decoder;
          } else if (!!exports) {
            exports.TextEncoder = encoder;
            exports.TextDecoder = decoder;
          }
        }
      }.call(
        (typeof window === "object" && window) ||
          (typeof self === "object" && self) ||
          (typeof global === "object" && global) ||
          {}
      ));
    },
  });

  // ../../graalvm-react/src/main/node/util/index.js
  var require_util2 = __commonJS({
    "../../graalvm-react/src/main/node/util/index.js"(exports, module) {
      init_process_shim();
      var inherits = require_inherits();
      var { TextEncoder, TextDecoder } = require_textencoder();
      module.exports.inherits = inherits;
      module.exports.TextEncoder = TextEncoder;
      module.exports.TextDecoder = TextDecoder;
    },
  });

  // node_modules/react-dom/cjs/react-dom-server.node.production.min.js
  var require_react_dom_server_node_production_min = __commonJS({
    "node_modules/react-dom/cjs/react-dom-server.node.production.min.js"(
      exports
    ) {
      "use strict";
      init_process_shim();
      var aa = require_util2();
      var ba = require_react();
      var k = null;
      var l = 0;
      var q = true;
      function r(a, b) {
        if (typeof b === "string") {
          if (b.length !== 0)
            if (2048 < 3 * b.length)
              0 < l &&
                (t(a, k.subarray(0, l)), (k = new Uint8Array(2048)), (l = 0)),
                t(a, u.encode(b));
            else {
              var c = k;
              0 < l && (c = k.subarray(l));
              c = u.encodeInto(b, c);
              var d = c.read;
              l += c.written;
              d < b.length &&
                (t(a, k),
                (k = new Uint8Array(2048)),
                (l = u.encodeInto(b.slice(d), k).written));
              l === 2048 && (t(a, k), (k = new Uint8Array(2048)), (l = 0));
            }
        } else
          b.byteLength !== 0 &&
            (2048 < b.byteLength
              ? (0 < l &&
                  (t(a, k.subarray(0, l)), (k = new Uint8Array(2048)), (l = 0)),
                t(a, b))
              : ((c = k.length - l),
                c < b.byteLength &&
                  (c === 0
                    ? t(a, k)
                    : (k.set(b.subarray(0, c), l),
                      (l += c),
                      t(a, k),
                      (b = b.subarray(c))),
                  (k = new Uint8Array(2048)),
                  (l = 0)),
                k.set(b, l),
                (l += b.byteLength),
                l === 2048 && (t(a, k), (k = new Uint8Array(2048)), (l = 0))));
      }
      function t(a, b) {
        a = a.write(b);
        q = q && a;
      }
      function w(a, b) {
        r(a, b);
        return q;
      }
      function ca(a) {
        k && 0 < l && a.write(k.subarray(0, l));
        k = null;
        l = 0;
        q = true;
      }
      var u = new aa.TextEncoder();
      function x(a) {
        return u.encode(a);
      }
      var y = Object.prototype.hasOwnProperty;
      var da =
        /^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/;
      var ea = {};
      var fa = {};
      function ha(a) {
        if (y.call(fa, a)) return true;
        if (y.call(ea, a)) return false;
        if (da.test(a)) return (fa[a] = true);
        ea[a] = true;
        return false;
      }
      function z(a, b, c, d, f, e, g) {
        this.acceptsBooleans = b === 2 || b === 3 || b === 4;
        this.attributeName = d;
        this.attributeNamespace = f;
        this.mustUseProperty = c;
        this.propertyName = a;
        this.type = b;
        this.sanitizeURL = e;
        this.removeEmptyString = g;
      }
      var A = {};
      "children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style"
        .split(" ")
        .forEach(function (a) {
          A[a] = new z(a, 0, false, a, null, false, false);
        });
      [
        ["acceptCharset", "accept-charset"],
        ["className", "class"],
        ["htmlFor", "for"],
        ["httpEquiv", "http-equiv"],
      ].forEach(function (a) {
        var b = a[0];
        A[b] = new z(b, 1, false, a[1], null, false, false);
      });
      ["contentEditable", "draggable", "spellCheck", "value"].forEach(function (
        a
      ) {
        A[a] = new z(a, 2, false, a.toLowerCase(), null, false, false);
      });
      [
        "autoReverse",
        "externalResourcesRequired",
        "focusable",
        "preserveAlpha",
      ].forEach(function (a) {
        A[a] = new z(a, 2, false, a, null, false, false);
      });
      "allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope"
        .split(" ")
        .forEach(function (a) {
          A[a] = new z(a, 3, false, a.toLowerCase(), null, false, false);
        });
      ["checked", "multiple", "muted", "selected"].forEach(function (a) {
        A[a] = new z(a, 3, true, a, null, false, false);
      });
      ["capture", "download"].forEach(function (a) {
        A[a] = new z(a, 4, false, a, null, false, false);
      });
      ["cols", "rows", "size", "span"].forEach(function (a) {
        A[a] = new z(a, 6, false, a, null, false, false);
      });
      ["rowSpan", "start"].forEach(function (a) {
        A[a] = new z(a, 5, false, a.toLowerCase(), null, false, false);
      });
      var ia = /[\-:]([a-z])/g;
      function ja(a) {
        return a[1].toUpperCase();
      }
      "accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height"
        .split(" ")
        .forEach(function (a) {
          var b = a.replace(ia, ja);
          A[b] = new z(b, 1, false, a, null, false, false);
        });
      "xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type"
        .split(" ")
        .forEach(function (a) {
          var b = a.replace(ia, ja);
          A[b] = new z(
            b,
            1,
            false,
            a,
            "http://www.w3.org/1999/xlink",
            false,
            false
          );
        });
      ["xml:base", "xml:lang", "xml:space"].forEach(function (a) {
        var b = a.replace(ia, ja);
        A[b] = new z(
          b,
          1,
          false,
          a,
          "http://www.w3.org/XML/1998/namespace",
          false,
          false
        );
      });
      ["tabIndex", "crossOrigin"].forEach(function (a) {
        A[a] = new z(a, 1, false, a.toLowerCase(), null, false, false);
      });
      A.xlinkHref = new z(
        "xlinkHref",
        1,
        false,
        "xlink:href",
        "http://www.w3.org/1999/xlink",
        true,
        false
      );
      ["src", "href", "action", "formAction"].forEach(function (a) {
        A[a] = new z(a, 1, false, a.toLowerCase(), null, true, true);
      });
      var B = {
        animationIterationCount: true,
        aspectRatio: true,
        borderImageOutset: true,
        borderImageSlice: true,
        borderImageWidth: true,
        boxFlex: true,
        boxFlexGroup: true,
        boxOrdinalGroup: true,
        columnCount: true,
        columns: true,
        flex: true,
        flexGrow: true,
        flexPositive: true,
        flexShrink: true,
        flexNegative: true,
        flexOrder: true,
        gridArea: true,
        gridRow: true,
        gridRowEnd: true,
        gridRowSpan: true,
        gridRowStart: true,
        gridColumn: true,
        gridColumnEnd: true,
        gridColumnSpan: true,
        gridColumnStart: true,
        fontWeight: true,
        lineClamp: true,
        lineHeight: true,
        opacity: true,
        order: true,
        orphans: true,
        tabSize: true,
        widows: true,
        zIndex: true,
        zoom: true,
        fillOpacity: true,
        floodOpacity: true,
        stopOpacity: true,
        strokeDasharray: true,
        strokeDashoffset: true,
        strokeMiterlimit: true,
        strokeOpacity: true,
        strokeWidth: true,
      };
      var ka = ["Webkit", "ms", "Moz", "O"];
      Object.keys(B).forEach(function (a) {
        ka.forEach(function (b) {
          b = b + a.charAt(0).toUpperCase() + a.substring(1);
          B[b] = B[a];
        });
      });
      var la = /["'&<>]/;
      function F(a) {
        if (typeof a === "boolean" || typeof a === "number") return "" + a;
        a = "" + a;
        var b = la.exec(a);
        if (b) {
          var c = "",
            d,
            f = 0;
          for (d = b.index; d < a.length; d++) {
            switch (a.charCodeAt(d)) {
              case 34:
                b = "&quot;";
                break;
              case 38:
                b = "&amp;";
                break;
              case 39:
                b = "&#x27;";
                break;
              case 60:
                b = "&lt;";
                break;
              case 62:
                b = "&gt;";
                break;
              default:
                continue;
            }
            f !== d && (c += a.substring(f, d));
            f = d + 1;
            c += b;
          }
          a = f !== d ? c + a.substring(f, d) : c;
        }
        return a;
      }
      var ma = /([A-Z])/g;
      var pa = /^ms-/;
      var qa = Array.isArray;
      var ra = x("<script>");
      var sa = x("</script>");
      var ta = x('<script src="');
      var ua = x('<script type="module" src="');
      var va = x('" async=""></script>');
      var wa = /(<\/|<)(s)(cript)/gi;
      function xa(a, b, c, d) {
        return "" + b + (c === "s" ? "\\u0073" : "\\u0053") + d;
      }
      function G(a, b) {
        return { insertionMode: a, selectedValue: b };
      }
      function ya(a, b, c) {
        switch (b) {
          case "select":
            return G(1, c.value != null ? c.value : c.defaultValue);
          case "svg":
            return G(2, null);
          case "math":
            return G(3, null);
          case "foreignObject":
            return G(1, null);
          case "table":
            return G(4, null);
          case "thead":
          case "tbody":
          case "tfoot":
            return G(5, null);
          case "colgroup":
            return G(7, null);
          case "tr":
            return G(6, null);
        }
        return 4 <= a.insertionMode || a.insertionMode === 0 ? G(1, null) : a;
      }
      var za = x("<!-- -->");
      function Aa(a, b, c, d) {
        if (b === "") return d;
        d && a.push(za);
        a.push(F(b));
        return true;
      }
      var Ba = /* @__PURE__ */ new Map();
      var Ca = x(' style="');
      var Da = x(":");
      var Ea = x(";");
      function Fa(a, b, c) {
        if (typeof c !== "object")
          throw Error(
            "The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX."
          );
        b = true;
        for (var d in c)
          if (y.call(c, d)) {
            var f = c[d];
            if (f != null && typeof f !== "boolean" && f !== "") {
              if (d.indexOf("--") === 0) {
                var e = F(d);
                f = F(("" + f).trim());
              } else {
                e = d;
                var g = Ba.get(e);
                g !== void 0
                  ? (e = g)
                  : ((g = x(
                      F(e.replace(ma, "-$1").toLowerCase().replace(pa, "-ms-"))
                    )),
                    Ba.set(e, g),
                    (e = g));
                f =
                  typeof f === "number"
                    ? f === 0 || y.call(B, d)
                      ? "" + f
                      : f + "px"
                    : F(("" + f).trim());
              }
              b ? ((b = false), a.push(Ca, e, Da, f)) : a.push(Ea, e, Da, f);
            }
          }
        b || a.push(H);
      }
      var I = x(" ");
      var J = x('="');
      var H = x('"');
      var Ga = x('=""');
      function K(a, b, c, d) {
        switch (c) {
          case "style":
            Fa(a, b, d);
            return;
          case "defaultValue":
          case "defaultChecked":
          case "innerHTML":
          case "suppressContentEditableWarning":
          case "suppressHydrationWarning":
            return;
        }
        if (
          !(2 < c.length) ||
          (c[0] !== "o" && c[0] !== "O") ||
          (c[1] !== "n" && c[1] !== "N")
        ) {
          if (((b = A.hasOwnProperty(c) ? A[c] : null), b !== null)) {
            switch (typeof d) {
              case "function":
              case "symbol":
                return;
              case "boolean":
                if (!b.acceptsBooleans) return;
            }
            c = b.attributeName;
            switch (b.type) {
              case 3:
                d && a.push(I, c, Ga);
                break;
              case 4:
                d === true
                  ? a.push(I, c, Ga)
                  : d !== false && a.push(I, c, J, F(d), H);
                break;
              case 5:
                isNaN(d) || a.push(I, c, J, F(d), H);
                break;
              case 6:
                !isNaN(d) && 1 <= d && a.push(I, c, J, F(d), H);
                break;
              default:
                b.sanitizeURL && (d = "" + d), a.push(I, c, J, F(d), H);
            }
          } else if (ha(c)) {
            switch (typeof d) {
              case "function":
              case "symbol":
                return;
              case "boolean":
                if (
                  ((b = c.toLowerCase().slice(0, 5)),
                  b !== "data-" && b !== "aria-")
                )
                  return;
            }
            a.push(I, c, J, F(d), H);
          }
        }
      }
      var L = x(">");
      var Ha = x("/>");
      function M(a, b, c) {
        if (b != null) {
          if (c != null)
            throw Error(
              "Can only set one of `children` or `props.dangerouslySetInnerHTML`."
            );
          if (typeof b !== "object" || !("__html" in b))
            throw Error(
              "`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information."
            );
          b = b.__html;
          b !== null && b !== void 0 && a.push("" + b);
        }
      }
      function Ia(a) {
        var b = "";
        ba.Children.forEach(a, function (a2) {
          a2 != null && (b += a2);
        });
        return b;
      }
      var Ja = x(' selected=""');
      function Ka(a, b, c, d) {
        a.push(N(c));
        var f = (c = null),
          e;
        for (e in b)
          if (y.call(b, e)) {
            var g = b[e];
            if (g != null)
              switch (e) {
                case "children":
                  c = g;
                  break;
                case "dangerouslySetInnerHTML":
                  f = g;
                  break;
                default:
                  K(a, d, e, g);
              }
          }
        a.push(L);
        M(a, f, c);
        return typeof c === "string" ? (a.push(F(c)), null) : c;
      }
      var La = x("\n");
      var Ma = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/;
      var Na = /* @__PURE__ */ new Map();
      function N(a) {
        var b = Na.get(a);
        if (b === void 0) {
          if (!Ma.test(a)) throw Error("Invalid tag: " + a);
          b = x("<" + a);
          Na.set(a, b);
        }
        return b;
      }
      var Oa = x("<!DOCTYPE html>");
      function Pa(a, b, c, d, f) {
        switch (b) {
          case "select":
            a.push(N("select"));
            var e = null,
              g = null;
            for (p in c)
              if (y.call(c, p)) {
                var h = c[p];
                if (h != null)
                  switch (p) {
                    case "children":
                      e = h;
                      break;
                    case "dangerouslySetInnerHTML":
                      g = h;
                      break;
                    case "defaultValue":
                    case "value":
                      break;
                    default:
                      K(a, d, p, h);
                  }
              }
            a.push(L);
            M(a, g, e);
            return e;
          case "option":
            g = f.selectedValue;
            a.push(N("option"));
            var m = (h = null),
              n = null;
            var p = null;
            for (e in c)
              if (y.call(c, e)) {
                var v = c[e];
                if (v != null)
                  switch (e) {
                    case "children":
                      h = v;
                      break;
                    case "selected":
                      n = v;
                      break;
                    case "dangerouslySetInnerHTML":
                      p = v;
                      break;
                    case "value":
                      m = v;
                    default:
                      K(a, d, e, v);
                  }
              }
            if (g != null)
              if (((c = m !== null ? "" + m : Ia(h)), qa(g)))
                for (d = 0; d < g.length; d++) {
                  if ("" + g[d] === c) {
                    a.push(Ja);
                    break;
                  }
                }
              else "" + g === c && a.push(Ja);
            else n && a.push(Ja);
            a.push(L);
            M(a, p, h);
            return h;
          case "textarea":
            a.push(N("textarea"));
            p = g = e = null;
            for (h in c)
              if (y.call(c, h) && ((m = c[h]), m != null))
                switch (h) {
                  case "children":
                    p = m;
                    break;
                  case "value":
                    e = m;
                    break;
                  case "defaultValue":
                    g = m;
                    break;
                  case "dangerouslySetInnerHTML":
                    throw Error(
                      "`dangerouslySetInnerHTML` does not make sense on <textarea>."
                    );
                  default:
                    K(a, d, h, m);
                }
            e === null && g !== null && (e = g);
            a.push(L);
            if (p != null) {
              if (e != null)
                throw Error(
                  "If you supply `defaultValue` on a <textarea>, do not pass children."
                );
              if (qa(p) && 1 < p.length)
                throw Error("<textarea> can only have at most one child.");
              e = "" + p;
            }
            typeof e === "string" && e[0] === "\n" && a.push(La);
            e !== null && a.push(F("" + e));
            return null;
          case "input":
            a.push(N("input"));
            m = p = h = e = null;
            for (g in c)
              if (y.call(c, g) && ((n = c[g]), n != null))
                switch (g) {
                  case "children":
                  case "dangerouslySetInnerHTML":
                    throw Error(
                      "input is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`."
                    );
                  case "defaultChecked":
                    m = n;
                    break;
                  case "defaultValue":
                    h = n;
                    break;
                  case "checked":
                    p = n;
                    break;
                  case "value":
                    e = n;
                    break;
                  default:
                    K(a, d, g, n);
                }
            p !== null
              ? K(a, d, "checked", p)
              : m !== null && K(a, d, "checked", m);
            e !== null
              ? K(a, d, "value", e)
              : h !== null && K(a, d, "value", h);
            a.push(Ha);
            return null;
          case "menuitem":
            a.push(N("menuitem"));
            for (var C in c)
              if (y.call(c, C) && ((e = c[C]), e != null))
                switch (C) {
                  case "children":
                  case "dangerouslySetInnerHTML":
                    throw Error(
                      "menuitems cannot have `children` nor `dangerouslySetInnerHTML`."
                    );
                  default:
                    K(a, d, C, e);
                }
            a.push(L);
            return null;
          case "title":
            a.push(N("title"));
            e = null;
            for (v in c)
              if (y.call(c, v) && ((g = c[v]), g != null))
                switch (v) {
                  case "children":
                    e = g;
                    break;
                  case "dangerouslySetInnerHTML":
                    throw Error(
                      "`dangerouslySetInnerHTML` does not make sense on <title>."
                    );
                  default:
                    K(a, d, v, g);
                }
            a.push(L);
            return e;
          case "listing":
          case "pre":
            a.push(N(b));
            g = e = null;
            for (m in c)
              if (y.call(c, m) && ((h = c[m]), h != null))
                switch (m) {
                  case "children":
                    e = h;
                    break;
                  case "dangerouslySetInnerHTML":
                    g = h;
                    break;
                  default:
                    K(a, d, m, h);
                }
            a.push(L);
            if (g != null) {
              if (e != null)
                throw Error(
                  "Can only set one of `children` or `props.dangerouslySetInnerHTML`."
                );
              if (typeof g !== "object" || !("__html" in g))
                throw Error(
                  "`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information."
                );
              c = g.__html;
              c !== null &&
                c !== void 0 &&
                (typeof c === "string" && 0 < c.length && c[0] === "\n"
                  ? a.push(La, c)
                  : a.push("" + c));
            }
            typeof e === "string" && e[0] === "\n" && a.push(La);
            return e;
          case "area":
          case "base":
          case "br":
          case "col":
          case "embed":
          case "hr":
          case "img":
          case "keygen":
          case "link":
          case "meta":
          case "param":
          case "source":
          case "track":
          case "wbr":
            a.push(N(b));
            for (var D in c)
              if (y.call(c, D) && ((e = c[D]), e != null))
                switch (D) {
                  case "children":
                  case "dangerouslySetInnerHTML":
                    throw Error(
                      b +
                        " is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`."
                    );
                  default:
                    K(a, d, D, e);
                }
            a.push(Ha);
            return null;
          case "annotation-xml":
          case "color-profile":
          case "font-face":
          case "font-face-src":
          case "font-face-uri":
          case "font-face-format":
          case "font-face-name":
          case "missing-glyph":
            return Ka(a, c, b, d);
          case "html":
            return f.insertionMode === 0 && a.push(Oa), Ka(a, c, b, d);
          default:
            if (b.indexOf("-") === -1 && typeof c.is !== "string")
              return Ka(a, c, b, d);
            a.push(N(b));
            g = e = null;
            for (n in c)
              if (y.call(c, n) && ((h = c[n]), h != null))
                switch (n) {
                  case "children":
                    e = h;
                    break;
                  case "dangerouslySetInnerHTML":
                    g = h;
                    break;
                  case "style":
                    Fa(a, d, h);
                    break;
                  case "suppressContentEditableWarning":
                  case "suppressHydrationWarning":
                    break;
                  default:
                    ha(n) &&
                      typeof h !== "function" &&
                      typeof h !== "symbol" &&
                      a.push(I, n, J, F(h), H);
                }
            a.push(L);
            M(a, g, e);
            return e;
        }
      }
      var Qa = x("</");
      var Ra = x(">");
      var Sa = x('<template id="');
      var Ta = x('"></template>');
      var Ua = x("<!--$-->");
      var Va = x('<!--$?--><template id="');
      var Wa = x('"></template>');
      var Xa = x("<!--$!-->");
      var Ya = x("<!--/$-->");
      var Za = x("<template");
      var $a = x('"');
      var ab = x(' data-dgst="');
      x(' data-msg="');
      x(' data-stck="');
      var bb = x("></template>");
      function cb(a, b, c) {
        r(a, Va);
        if (c === null)
          throw Error(
            "An ID must have been assigned before we can complete the boundary."
          );
        r(a, c);
        return w(a, Wa);
      }
      var db = x('<div hidden id="');
      var eb = x('">');
      var fb = x("</div>");
      var gb = x('<svg aria-hidden="true" style="display:none" id="');
      var hb = x('">');
      var ib = x("</svg>");
      var jb = x('<math aria-hidden="true" style="display:none" id="');
      var kb = x('">');
      var lb = x("</math>");
      var mb = x('<table hidden id="');
      var nb = x('">');
      var ob = x("</table>");
      var pb = x('<table hidden><tbody id="');
      var qb = x('">');
      var rb = x("</tbody></table>");
      var sb = x('<table hidden><tr id="');
      var tb = x('">');
      var ub = x("</tr></table>");
      var vb = x('<table hidden><colgroup id="');
      var wb = x('">');
      var xb = x("</colgroup></table>");
      function yb(a, b, c, d) {
        switch (c.insertionMode) {
          case 0:
          case 1:
            return (
              r(a, db), r(a, b.segmentPrefix), r(a, d.toString(16)), w(a, eb)
            );
          case 2:
            return (
              r(a, gb), r(a, b.segmentPrefix), r(a, d.toString(16)), w(a, hb)
            );
          case 3:
            return (
              r(a, jb), r(a, b.segmentPrefix), r(a, d.toString(16)), w(a, kb)
            );
          case 4:
            return (
              r(a, mb), r(a, b.segmentPrefix), r(a, d.toString(16)), w(a, nb)
            );
          case 5:
            return (
              r(a, pb), r(a, b.segmentPrefix), r(a, d.toString(16)), w(a, qb)
            );
          case 6:
            return (
              r(a, sb), r(a, b.segmentPrefix), r(a, d.toString(16)), w(a, tb)
            );
          case 7:
            return (
              r(a, vb), r(a, b.segmentPrefix), r(a, d.toString(16)), w(a, wb)
            );
          default:
            throw Error("Unknown insertion mode. This is a bug in React.");
        }
      }
      function zb(a, b) {
        switch (b.insertionMode) {
          case 0:
          case 1:
            return w(a, fb);
          case 2:
            return w(a, ib);
          case 3:
            return w(a, lb);
          case 4:
            return w(a, ob);
          case 5:
            return w(a, rb);
          case 6:
            return w(a, ub);
          case 7:
            return w(a, xb);
          default:
            throw Error("Unknown insertion mode. This is a bug in React.");
        }
      }
      var Ab = x(
        'function $RS(a,b){a=document.getElementById(a);b=document.getElementById(b);for(a.parentNode.removeChild(a);a.firstChild;)b.parentNode.insertBefore(a.firstChild,b);b.parentNode.removeChild(b)};$RS("'
      );
      var Bb = x('$RS("');
      var Cb = x('","');
      var Db = x('")</script>');
      var Fb = x(
        'function $RC(a,b){a=document.getElementById(a);b=document.getElementById(b);b.parentNode.removeChild(b);if(a){a=a.previousSibling;var f=a.parentNode,c=a.nextSibling,e=0;do{if(c&&8===c.nodeType){var d=c.data;if("/$"===d)if(0===e)break;else e--;else"$"!==d&&"$?"!==d&&"$!"!==d||e++}d=c.nextSibling;f.removeChild(c);c=d}while(c);for(;b.firstChild;)f.insertBefore(b.firstChild,c);a.data="$";a._reactRetry&&a._reactRetry()}};$RC("'
      );
      var Gb = x('$RC("');
      var Hb = x('","');
      var Ib = x('")</script>');
      var Jb = x(
        'function $RX(b,c,d,e){var a=document.getElementById(b);a&&(b=a.previousSibling,b.data="$!",a=a.dataset,c&&(a.dgst=c),d&&(a.msg=d),e&&(a.stck=e),b._reactRetry&&b._reactRetry())};$RX("'
      );
      var Kb = x('$RX("');
      var Lb = x('"');
      var Mb = x(")</script>");
      var Nb = x(",");
      var Ob = /[<\u2028\u2029]/g;
      function Pb(a) {
        return JSON.stringify(a).replace(Ob, function (a2) {
          switch (a2) {
            case "<":
              return "\\u003c";
            case "\u2028":
              return "\\u2028";
            case "\u2029":
              return "\\u2029";
            default:
              throw Error(
                "escapeJSStringsForInstructionScripts encountered a match it does not know how to replace. this means the match regex and the replacement characters are no longer in sync. This is a bug in React"
              );
          }
        });
      }
      var O = Object.assign;
      var Qb = Symbol.for("react.element");
      var Rb = Symbol.for("react.portal");
      var Sb = Symbol.for("react.fragment");
      var Tb = Symbol.for("react.strict_mode");
      var Ub = Symbol.for("react.profiler");
      var Vb = Symbol.for("react.provider");
      var Wb = Symbol.for("react.context");
      var Xb = Symbol.for("react.forward_ref");
      var Yb = Symbol.for("react.suspense");
      var Zb = Symbol.for("react.suspense_list");
      var $b = Symbol.for("react.memo");
      var ac = Symbol.for("react.lazy");
      var bc = Symbol.for("react.scope");
      var cc = Symbol.for("react.debug_trace_mode");
      var dc = Symbol.for("react.legacy_hidden");
      var ec = Symbol.for("react.default_value");
      var fc = Symbol.iterator;
      function gc(a) {
        if (a == null) return null;
        if (typeof a === "function") return a.displayName || a.name || null;
        if (typeof a === "string") return a;
        switch (a) {
          case Sb:
            return "Fragment";
          case Rb:
            return "Portal";
          case Ub:
            return "Profiler";
          case Tb:
            return "StrictMode";
          case Yb:
            return "Suspense";
          case Zb:
            return "SuspenseList";
        }
        if (typeof a === "object")
          switch (a.$$typeof) {
            case Wb:
              return (a.displayName || "Context") + ".Consumer";
            case Vb:
              return (a._context.displayName || "Context") + ".Provider";
            case Xb:
              var b = a.render;
              a = a.displayName;
              a ||
                ((a = b.displayName || b.name || ""),
                (a = a !== "" ? "ForwardRef(" + a + ")" : "ForwardRef"));
              return a;
            case $b:
              return (
                (b = a.displayName || null),
                b !== null ? b : gc(a.type) || "Memo"
              );
            case ac:
              b = a._payload;
              a = a._init;
              try {
                return gc(a(b));
              } catch (c) {}
          }
        return null;
      }
      var hc = {};
      function ic(a, b) {
        a = a.contextTypes;
        if (!a) return hc;
        var c = {},
          d;
        for (d in a) c[d] = b[d];
        return c;
      }
      var P = null;
      function Q(a, b) {
        if (a !== b) {
          a.context._currentValue = a.parentValue;
          a = a.parent;
          var c = b.parent;
          if (a === null) {
            if (c !== null)
              throw Error(
                "The stacks must reach the root at the same time. This is a bug in React."
              );
          } else {
            if (c === null)
              throw Error(
                "The stacks must reach the root at the same time. This is a bug in React."
              );
            Q(a, c);
          }
          b.context._currentValue = b.value;
        }
      }
      function jc(a) {
        a.context._currentValue = a.parentValue;
        a = a.parent;
        a !== null && jc(a);
      }
      function kc(a) {
        var b = a.parent;
        b !== null && kc(b);
        a.context._currentValue = a.value;
      }
      function lc(a, b) {
        a.context._currentValue = a.parentValue;
        a = a.parent;
        if (a === null)
          throw Error(
            "The depth must equal at least at zero before reaching the root. This is a bug in React."
          );
        a.depth === b.depth ? Q(a, b) : lc(a, b);
      }
      function mc(a, b) {
        var c = b.parent;
        if (c === null)
          throw Error(
            "The depth must equal at least at zero before reaching the root. This is a bug in React."
          );
        a.depth === c.depth ? Q(a, c) : mc(a, c);
        b.context._currentValue = b.value;
      }
      function nc(a) {
        var b = P;
        b !== a &&
          (b === null
            ? kc(a)
            : a === null
            ? jc(b)
            : b.depth === a.depth
            ? Q(b, a)
            : b.depth > a.depth
            ? lc(b, a)
            : mc(b, a),
          (P = a));
      }
      var oc = {
        isMounted: function () {
          return false;
        },
        enqueueSetState: function (a, b) {
          a = a._reactInternals;
          a.queue !== null && a.queue.push(b);
        },
        enqueueReplaceState: function (a, b) {
          a = a._reactInternals;
          a.replace = true;
          a.queue = [b];
        },
        enqueueForceUpdate: function () {},
      };
      function pc(a, b, c, d) {
        var f = a.state !== void 0 ? a.state : null;
        a.updater = oc;
        a.props = c;
        a.state = f;
        var e = { queue: [], replace: false };
        a._reactInternals = e;
        var g = b.contextType;
        a.context = typeof g === "object" && g !== null ? g._currentValue : d;
        g = b.getDerivedStateFromProps;
        typeof g === "function" &&
          ((g = g(c, f)),
          (f = g === null || g === void 0 ? f : O({}, f, g)),
          (a.state = f));
        if (
          typeof b.getDerivedStateFromProps !== "function" &&
          typeof a.getSnapshotBeforeUpdate !== "function" &&
          (typeof a.UNSAFE_componentWillMount === "function" ||
            typeof a.componentWillMount === "function")
        )
          if (
            ((b = a.state),
            typeof a.componentWillMount === "function" &&
              a.componentWillMount(),
            typeof a.UNSAFE_componentWillMount === "function" &&
              a.UNSAFE_componentWillMount(),
            b !== a.state && oc.enqueueReplaceState(a, a.state, null),
            e.queue !== null && 0 < e.queue.length)
          )
            if (
              ((b = e.queue),
              (g = e.replace),
              (e.queue = null),
              (e.replace = false),
              g && b.length === 1)
            )
              a.state = b[0];
            else {
              e = g ? b[0] : a.state;
              f = true;
              for (g = g ? 1 : 0; g < b.length; g++) {
                var h = b[g];
                h = typeof h === "function" ? h.call(a, e, c, d) : h;
                h != null && (f ? ((f = false), (e = O({}, e, h))) : O(e, h));
              }
              a.state = e;
            }
          else e.queue = null;
      }
      var qc = { id: 1, overflow: "" };
      function rc(a, b, c) {
        var d = a.id;
        a = a.overflow;
        var f = 32 - sc(d) - 1;
        d &= ~(1 << f);
        c += 1;
        var e = 32 - sc(b) + f;
        if (30 < e) {
          var g = f - (f % 5);
          e = (d & ((1 << g) - 1)).toString(32);
          d >>= g;
          f -= g;
          return {
            id: (1 << (32 - sc(b) + f)) | (c << f) | d,
            overflow: e + a,
          };
        }
        return { id: (1 << e) | (c << f) | d, overflow: a };
      }
      var sc = Math.clz32 ? Math.clz32 : tc;
      var uc = Math.log;
      var vc = Math.LN2;
      function tc(a) {
        a >>>= 0;
        return a === 0 ? 32 : (31 - ((uc(a) / vc) | 0)) | 0;
      }
      function wc(a, b) {
        return (
          (a === b && (a !== 0 || 1 / a === 1 / b)) || (a !== a && b !== b)
        );
      }
      var xc = typeof Object.is === "function" ? Object.is : wc;
      var R = null;
      var yc = null;
      var zc = null;
      var S = null;
      var T = false;
      var Ac = false;
      var U = 0;
      var V = null;
      var Bc = 0;
      function W() {
        if (R === null)
          throw Error(
            "Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem."
          );
        return R;
      }
      function Cc() {
        if (0 < Bc)
          throw Error("Rendered more hooks than during the previous render");
        return { memoizedState: null, queue: null, next: null };
      }
      function Dc() {
        S === null
          ? zc === null
            ? ((T = false), (zc = S = Cc()))
            : ((T = true), (S = zc))
          : S.next === null
          ? ((T = false), (S = S.next = Cc()))
          : ((T = true), (S = S.next));
        return S;
      }
      function Ec() {
        yc = R = null;
        Ac = false;
        zc = null;
        Bc = 0;
        S = V = null;
      }
      function Fc(a, b) {
        return typeof b === "function" ? b(a) : b;
      }
      function Gc(a, b, c) {
        R = W();
        S = Dc();
        if (T) {
          var d = S.queue;
          b = d.dispatch;
          if (V !== null && ((c = V.get(d)), c !== void 0)) {
            V.delete(d);
            d = S.memoizedState;
            do (d = a(d, c.action)), (c = c.next);
            while (c !== null);
            S.memoizedState = d;
            return [d, b];
          }
          return [S.memoizedState, b];
        }
        a =
          a === Fc
            ? typeof b === "function"
              ? b()
              : b
            : c !== void 0
            ? c(b)
            : b;
        S.memoizedState = a;
        a = S.queue = { last: null, dispatch: null };
        a = a.dispatch = Hc.bind(null, R, a);
        return [S.memoizedState, a];
      }
      function Ic(a, b) {
        R = W();
        S = Dc();
        b = b === void 0 ? null : b;
        if (S !== null) {
          var c = S.memoizedState;
          if (c !== null && b !== null) {
            var d = c[1];
            a: if (d === null) d = false;
            else {
              for (var f = 0; f < d.length && f < b.length; f++)
                if (!xc(b[f], d[f])) {
                  d = false;
                  break a;
                }
              d = true;
            }
            if (d) return c[0];
          }
        }
        a = a();
        S.memoizedState = [a, b];
        return a;
      }
      function Hc(a, b, c) {
        if (25 <= Bc)
          throw Error(
            "Too many re-renders. React limits the number of renders to prevent an infinite loop."
          );
        if (a === R)
          if (
            ((Ac = true),
            (a = { action: c, next: null }),
            V === null && (V = /* @__PURE__ */ new Map()),
            (c = V.get(b)),
            c === void 0)
          )
            V.set(b, a);
          else {
            for (b = c; b.next !== null; ) b = b.next;
            b.next = a;
          }
      }
      function Jc() {
        throw Error(
          "startTransition cannot be called during server rendering."
        );
      }
      function Kc() {}
      var Mc = {
        readContext: function (a) {
          return a._currentValue;
        },
        useContext: function (a) {
          W();
          return a._currentValue;
        },
        useMemo: Ic,
        useReducer: Gc,
        useRef: function (a) {
          R = W();
          S = Dc();
          var b = S.memoizedState;
          return b === null ? ((a = { current: a }), (S.memoizedState = a)) : b;
        },
        useState: function (a) {
          return Gc(Fc, a);
        },
        useInsertionEffect: Kc,
        useLayoutEffect: function () {},
        useCallback: function (a, b) {
          return Ic(function () {
            return a;
          }, b);
        },
        useImperativeHandle: Kc,
        useEffect: Kc,
        useDebugValue: Kc,
        useDeferredValue: function (a) {
          W();
          return a;
        },
        useTransition: function () {
          W();
          return [false, Jc];
        },
        useId: function () {
          var a = yc.treeContext;
          var b = a.overflow;
          a = a.id;
          a = (a & ~(1 << (32 - sc(a) - 1))).toString(32) + b;
          var c = Lc;
          if (c === null)
            throw Error(
              "Invalid hook call. Hooks can only be called inside of the body of a function component."
            );
          b = U++;
          a = ":" + c.idPrefix + "R" + a;
          0 < b && (a += "H" + b.toString(32));
          return a + ":";
        },
        useMutableSource: function (a, b) {
          W();
          return b(a._source);
        },
        useSyncExternalStore: function (a, b, c) {
          if (c === void 0)
            throw Error(
              "Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering."
            );
          return c();
        },
      };
      var Lc = null;
      var Nc =
        ba.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED
          .ReactCurrentDispatcher;
      function Oc(a) {
        console.error(a);
        return null;
      }
      function X() {}
      function Pc(a, b) {
        var c = a.pingedTasks;
        c.push(b);
        c.length === 1 &&
          setImmediate(function () {
            return Qc(a);
          });
      }
      function Rc(a, b, c, d, f, e, g, h) {
        a.allPendingTasks++;
        c === null ? a.pendingRootTasks++ : c.pendingTasks++;
        var m = {
          node: b,
          ping: function () {
            return Pc(a, m);
          },
          blockedBoundary: c,
          blockedSegment: d,
          abortSet: f,
          legacyContext: e,
          context: g,
          treeContext: h,
        };
        f.add(m);
        return m;
      }
      function Sc(a, b, c, d, f, e) {
        return {
          status: 0,
          id: -1,
          index: b,
          parentFlushed: false,
          chunks: [],
          children: [],
          formatContext: d,
          boundary: c,
          lastPushedText: f,
          textEmbedded: e,
        };
      }
      function Y(a, b) {
        a = a.onError(b);
        if (a != null && typeof a !== "string")
          throw Error(
            'onError returned something with a type other than "string". onError should return a string and may return null or undefined but must not return anything else. It received something of type "' +
              typeof a +
              '" instead'
          );
        return a;
      }
      function Tc(a, b) {
        var c = a.onShellError;
        c(b);
        c = a.onFatalError;
        c(b);
        a.destination !== null
          ? ((a.status = 2), a.destination.destroy(b))
          : ((a.status = 1), (a.fatalError = b));
      }
      function Uc(a, b, c, d, f) {
        R = {};
        yc = b;
        U = 0;
        for (a = c(d, f); Ac; )
          (Ac = false), (U = 0), (Bc += 1), (S = null), (a = c(d, f));
        Ec();
        return a;
      }
      function Vc(a, b, c, d) {
        var f = c.render(),
          e = d.childContextTypes;
        if (e !== null && e !== void 0) {
          var g = b.legacyContext;
          if (typeof c.getChildContext !== "function") d = g;
          else {
            c = c.getChildContext();
            for (var h in c)
              if (!(h in e))
                throw Error(
                  (gc(d) || "Unknown") +
                    '.getChildContext(): key "' +
                    h +
                    '" is not defined in childContextTypes.'
                );
            d = O({}, g, c);
          }
          b.legacyContext = d;
          Z(a, b, f);
          b.legacyContext = g;
        } else Z(a, b, f);
      }
      function Wc(a, b) {
        if (a && a.defaultProps) {
          b = O({}, b);
          a = a.defaultProps;
          for (var c in a) b[c] === void 0 && (b[c] = a[c]);
          return b;
        }
        return b;
      }
      function Xc(a, b, c, d, f) {
        if (typeof c === "function")
          if (c.prototype && c.prototype.isReactComponent) {
            f = ic(c, b.legacyContext);
            var e = c.contextType;
            e = new c(
              d,
              typeof e === "object" && e !== null ? e._currentValue : f
            );
            pc(e, c, d, f);
            Vc(a, b, e, c);
          } else {
            e = ic(c, b.legacyContext);
            f = Uc(a, b, c, d, e);
            var g = U !== 0;
            if (
              typeof f === "object" &&
              f !== null &&
              typeof f.render === "function" &&
              f.$$typeof === void 0
            )
              pc(f, c, d, e), Vc(a, b, f, c);
            else if (g) {
              d = b.treeContext;
              b.treeContext = rc(d, 1, 0);
              try {
                Z(a, b, f);
              } finally {
                b.treeContext = d;
              }
            } else Z(a, b, f);
          }
        else if (typeof c === "string") {
          f = b.blockedSegment;
          e = Pa(f.chunks, c, d, a.responseState, f.formatContext);
          f.lastPushedText = false;
          g = f.formatContext;
          f.formatContext = ya(g, c, d);
          Yc(a, b, e);
          f.formatContext = g;
          switch (c) {
            case "area":
            case "base":
            case "br":
            case "col":
            case "embed":
            case "hr":
            case "img":
            case "input":
            case "keygen":
            case "link":
            case "meta":
            case "param":
            case "source":
            case "track":
            case "wbr":
              break;
            default:
              f.chunks.push(Qa, c, Ra);
          }
          f.lastPushedText = false;
        } else {
          switch (c) {
            case dc:
            case cc:
            case Tb:
            case Ub:
            case Sb:
              Z(a, b, d.children);
              return;
            case Zb:
              Z(a, b, d.children);
              return;
            case bc:
              throw Error(
                "ReactDOMServer does not yet support scope components."
              );
            case Yb:
              a: {
                c = b.blockedBoundary;
                f = b.blockedSegment;
                e = d.fallback;
                d = d.children;
                g = /* @__PURE__ */ new Set();
                var h = {
                    id: null,
                    rootSegmentID: -1,
                    parentFlushed: false,
                    pendingTasks: 0,
                    forceClientRender: false,
                    completedSegments: [],
                    byteSize: 0,
                    fallbackAbortableTasks: g,
                    errorDigest: null,
                  },
                  m = Sc(a, f.chunks.length, h, f.formatContext, false, false);
                f.children.push(m);
                f.lastPushedText = false;
                var n = Sc(a, 0, null, f.formatContext, false, false);
                n.parentFlushed = true;
                b.blockedBoundary = h;
                b.blockedSegment = n;
                try {
                  if (
                    (Yc(a, b, d),
                    n.lastPushedText && n.textEmbedded && n.chunks.push(za),
                    (n.status = 1),
                    Zc(h, n),
                    h.pendingTasks === 0)
                  )
                    break a;
                } catch (p) {
                  (n.status = 4),
                    (h.forceClientRender = true),
                    (h.errorDigest = Y(a, p));
                } finally {
                  (b.blockedBoundary = c), (b.blockedSegment = f);
                }
                b = Rc(
                  a,
                  e,
                  c,
                  m,
                  g,
                  b.legacyContext,
                  b.context,
                  b.treeContext
                );
                a.pingedTasks.push(b);
              }
              return;
          }
          if (typeof c === "object" && c !== null)
            switch (c.$$typeof) {
              case Xb:
                d = Uc(a, b, c.render, d, f);
                if (U !== 0) {
                  c = b.treeContext;
                  b.treeContext = rc(c, 1, 0);
                  try {
                    Z(a, b, d);
                  } finally {
                    b.treeContext = c;
                  }
                } else Z(a, b, d);
                return;
              case $b:
                c = c.type;
                d = Wc(c, d);
                Xc(a, b, c, d, f);
                return;
              case Vb:
                f = d.children;
                c = c._context;
                d = d.value;
                e = c._currentValue;
                c._currentValue = d;
                g = P;
                P = d = {
                  parent: g,
                  depth: g === null ? 0 : g.depth + 1,
                  context: c,
                  parentValue: e,
                  value: d,
                };
                b.context = d;
                Z(a, b, f);
                a = P;
                if (a === null)
                  throw Error(
                    "Tried to pop a Context at the root of the app. This is a bug in React."
                  );
                d = a.parentValue;
                a.context._currentValue =
                  d === ec ? a.context._defaultValue : d;
                a = P = a.parent;
                b.context = a;
                return;
              case Wb:
                d = d.children;
                d = d(c._currentValue);
                Z(a, b, d);
                return;
              case ac:
                f = c._init;
                c = f(c._payload);
                d = Wc(c, d);
                Xc(a, b, c, d, void 0);
                return;
            }
          throw Error(
            "Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " +
              ((c == null ? c : typeof c) + ".")
          );
        }
      }
      function Z(a, b, c) {
        b.node = c;
        if (typeof c === "object" && c !== null) {
          switch (c.$$typeof) {
            case Qb:
              Xc(a, b, c.type, c.props, c.ref);
              return;
            case Rb:
              throw Error(
                "Portals are not currently supported by the server renderer. Render them conditionally so that they only appear on the client render."
              );
            case ac:
              var d = c._init;
              c = d(c._payload);
              Z(a, b, c);
              return;
          }
          if (qa(c)) {
            $c(a, b, c);
            return;
          }
          c === null || typeof c !== "object"
            ? (d = null)
            : ((d = (fc && c[fc]) || c["@@iterator"]),
              (d = typeof d === "function" ? d : null));
          if (d && (d = d.call(c))) {
            c = d.next();
            if (!c.done) {
              var f = [];
              do f.push(c.value), (c = d.next());
              while (!c.done);
              $c(a, b, f);
            }
            return;
          }
          a = Object.prototype.toString.call(c);
          throw Error(
            "Objects are not valid as a React child (found: " +
              (a === "[object Object]"
                ? "object with keys {" + Object.keys(c).join(", ") + "}"
                : a) +
              "). If you meant to render a collection of children, use an array instead."
          );
        }
        typeof c === "string"
          ? ((d = b.blockedSegment),
            (d.lastPushedText = Aa(
              b.blockedSegment.chunks,
              c,
              a.responseState,
              d.lastPushedText
            )))
          : typeof c === "number" &&
            ((d = b.blockedSegment),
            (d.lastPushedText = Aa(
              b.blockedSegment.chunks,
              "" + c,
              a.responseState,
              d.lastPushedText
            )));
      }
      function $c(a, b, c) {
        for (var d = c.length, f = 0; f < d; f++) {
          var e = b.treeContext;
          b.treeContext = rc(e, d, f);
          try {
            Yc(a, b, c[f]);
          } finally {
            b.treeContext = e;
          }
        }
      }
      function Yc(a, b, c) {
        var d = b.blockedSegment.formatContext,
          f = b.legacyContext,
          e = b.context;
        try {
          return Z(a, b, c);
        } catch (m) {
          if (
            (Ec(),
            typeof m === "object" && m !== null && typeof m.then === "function")
          ) {
            c = m;
            var g = b.blockedSegment,
              h = Sc(
                a,
                g.chunks.length,
                null,
                g.formatContext,
                g.lastPushedText,
                true
              );
            g.children.push(h);
            g.lastPushedText = false;
            a = Rc(
              a,
              b.node,
              b.blockedBoundary,
              h,
              b.abortSet,
              b.legacyContext,
              b.context,
              b.treeContext
            ).ping;
            c.then(a, a);
            b.blockedSegment.formatContext = d;
            b.legacyContext = f;
            b.context = e;
            nc(e);
          } else
            throw (
              ((b.blockedSegment.formatContext = d),
              (b.legacyContext = f),
              (b.context = e),
              nc(e),
              m)
            );
        }
      }
      function ad(a) {
        var b = a.blockedBoundary;
        a = a.blockedSegment;
        a.status = 3;
        bd(this, b, a);
      }
      function cd(a, b, c) {
        var d = a.blockedBoundary;
        a.blockedSegment.status = 3;
        d === null
          ? (b.allPendingTasks--,
            b.status !== 2 &&
              ((b.status = 2), b.destination !== null && b.destination.end()))
          : (d.pendingTasks--,
            d.forceClientRender ||
              ((d.forceClientRender = true),
              (d.errorDigest = b.onError(
                c === void 0
                  ? Error(
                      "The render was aborted by the server without a reason."
                    )
                  : c
              )),
              d.parentFlushed && b.clientRenderedBoundaries.push(d)),
            d.fallbackAbortableTasks.forEach(function (a2) {
              return cd(a2, b, c);
            }),
            d.fallbackAbortableTasks.clear(),
            b.allPendingTasks--,
            b.allPendingTasks === 0 && ((a = b.onAllReady), a()));
      }
      function Zc(a, b) {
        if (
          b.chunks.length === 0 &&
          b.children.length === 1 &&
          b.children[0].boundary === null
        ) {
          var c = b.children[0];
          c.id = b.id;
          c.parentFlushed = true;
          c.status === 1 && Zc(a, c);
        } else a.completedSegments.push(b);
      }
      function bd(a, b, c) {
        if (b === null) {
          if (c.parentFlushed) {
            if (a.completedRootSegment !== null)
              throw Error(
                "There can only be one root segment. This is a bug in React."
              );
            a.completedRootSegment = c;
          }
          a.pendingRootTasks--;
          a.pendingRootTasks === 0 &&
            ((a.onShellError = X), (b = a.onShellReady), b());
        } else
          b.pendingTasks--,
            b.forceClientRender ||
              (b.pendingTasks === 0
                ? (c.parentFlushed && c.status === 1 && Zc(b, c),
                  b.parentFlushed && a.completedBoundaries.push(b),
                  b.fallbackAbortableTasks.forEach(ad, a),
                  b.fallbackAbortableTasks.clear())
                : c.parentFlushed &&
                  c.status === 1 &&
                  (Zc(b, c),
                  b.completedSegments.length === 1 &&
                    b.parentFlushed &&
                    a.partialBoundaries.push(b)));
        a.allPendingTasks--;
        a.allPendingTasks === 0 && ((a = a.onAllReady), a());
      }
      function Qc(a) {
        if (a.status !== 2) {
          var b = P,
            c = Nc.current;
          Nc.current = Mc;
          var d = Lc;
          Lc = a.responseState;
          try {
            var f = a.pingedTasks,
              e;
            for (e = 0; e < f.length; e++) {
              var g = f[e];
              var h = a,
                m = g.blockedSegment;
              if (m.status === 0) {
                nc(g.context);
                try {
                  Z(h, g, g.node),
                    m.lastPushedText && m.textEmbedded && m.chunks.push(za),
                    g.abortSet.delete(g),
                    (m.status = 1),
                    bd(h, g.blockedBoundary, m);
                } catch (E) {
                  if (
                    (Ec(),
                    typeof E === "object" &&
                      E !== null &&
                      typeof E.then === "function")
                  ) {
                    var n = g.ping;
                    E.then(n, n);
                  } else {
                    g.abortSet.delete(g);
                    m.status = 4;
                    var p = g.blockedBoundary,
                      v = E,
                      C = Y(h, v);
                    p === null
                      ? Tc(h, v)
                      : (p.pendingTasks--,
                        p.forceClientRender ||
                          ((p.forceClientRender = true),
                          (p.errorDigest = C),
                          p.parentFlushed &&
                            h.clientRenderedBoundaries.push(p)));
                    h.allPendingTasks--;
                    if (h.allPendingTasks === 0) {
                      var D = h.onAllReady;
                      D();
                    }
                  }
                } finally {
                }
              }
            }
            f.splice(0, e);
            a.destination !== null && dd(a, a.destination);
          } catch (E) {
            Y(a, E), Tc(a, E);
          } finally {
            (Lc = d), (Nc.current = c), c === Mc && nc(b);
          }
        }
      }
      function ed(a, b, c) {
        c.parentFlushed = true;
        switch (c.status) {
          case 0:
            var d = (c.id = a.nextSegmentId++);
            c.lastPushedText = false;
            c.textEmbedded = false;
            a = a.responseState;
            r(b, Sa);
            r(b, a.placeholderPrefix);
            a = d.toString(16);
            r(b, a);
            return w(b, Ta);
          case 1:
            c.status = 2;
            var f = true;
            d = c.chunks;
            var e = 0;
            c = c.children;
            for (var g = 0; g < c.length; g++) {
              for (f = c[g]; e < f.index; e++) r(b, d[e]);
              f = fd(a, b, f);
            }
            for (; e < d.length - 1; e++) r(b, d[e]);
            e < d.length && (f = w(b, d[e]));
            return f;
          default:
            throw Error(
              "Aborted, errored or already flushed boundaries should not be flushed again. This is a bug in React."
            );
        }
      }
      function fd(a, b, c) {
        var d = c.boundary;
        if (d === null) return ed(a, b, c);
        d.parentFlushed = true;
        if (d.forceClientRender)
          (d = d.errorDigest),
            w(b, Xa),
            r(b, Za),
            d && (r(b, ab), r(b, F(d)), r(b, $a)),
            w(b, bb),
            ed(a, b, c);
        else if (0 < d.pendingTasks) {
          d.rootSegmentID = a.nextSegmentId++;
          0 < d.completedSegments.length && a.partialBoundaries.push(d);
          var f = a.responseState;
          var e = f.nextSuspenseID++;
          f = x(f.boundaryPrefix + e.toString(16));
          d = d.id = f;
          cb(b, a.responseState, d);
          ed(a, b, c);
        } else if (d.byteSize > a.progressiveChunkSize)
          (d.rootSegmentID = a.nextSegmentId++),
            a.completedBoundaries.push(d),
            cb(b, a.responseState, d.id),
            ed(a, b, c);
        else {
          w(b, Ua);
          c = d.completedSegments;
          if (c.length !== 1)
            throw Error(
              "A previously unvisited boundary must have exactly one root segment. This is a bug in React."
            );
          fd(a, b, c[0]);
        }
        return w(b, Ya);
      }
      function gd(a, b, c) {
        yb(b, a.responseState, c.formatContext, c.id);
        fd(a, b, c);
        return zb(b, c.formatContext);
      }
      function hd(a, b, c) {
        for (var d = c.completedSegments, f = 0; f < d.length; f++)
          id(a, b, c, d[f]);
        d.length = 0;
        a = a.responseState;
        d = c.id;
        c = c.rootSegmentID;
        r(b, a.startInlineScript);
        a.sentCompleteBoundaryFunction
          ? r(b, Gb)
          : ((a.sentCompleteBoundaryFunction = true), r(b, Fb));
        if (d === null)
          throw Error(
            "An ID must have been assigned before we can complete the boundary."
          );
        c = c.toString(16);
        r(b, d);
        r(b, Hb);
        r(b, a.segmentPrefix);
        r(b, c);
        return w(b, Ib);
      }
      function id(a, b, c, d) {
        if (d.status === 2) return true;
        var f = d.id;
        if (f === -1) {
          if ((d.id = c.rootSegmentID) === -1)
            throw Error(
              "A root segment ID must have been assigned by now. This is a bug in React."
            );
          return gd(a, b, d);
        }
        gd(a, b, d);
        a = a.responseState;
        r(b, a.startInlineScript);
        a.sentCompleteSegmentFunction
          ? r(b, Bb)
          : ((a.sentCompleteSegmentFunction = true), r(b, Ab));
        r(b, a.segmentPrefix);
        f = f.toString(16);
        r(b, f);
        r(b, Cb);
        r(b, a.placeholderPrefix);
        r(b, f);
        return w(b, Db);
      }
      function dd(a, b) {
        k = new Uint8Array(2048);
        l = 0;
        q = true;
        try {
          var c = a.completedRootSegment;
          if (c !== null && a.pendingRootTasks === 0) {
            fd(a, b, c);
            a.completedRootSegment = null;
            var d = a.responseState.bootstrapChunks;
            for (c = 0; c < d.length - 1; c++) r(b, d[c]);
            c < d.length && w(b, d[c]);
          }
          var f = a.clientRenderedBoundaries,
            e;
          for (e = 0; e < f.length; e++) {
            var g = f[e];
            d = b;
            var h = a.responseState,
              m = g.id,
              n = g.errorDigest,
              p = g.errorMessage,
              v = g.errorComponentStack;
            r(d, h.startInlineScript);
            h.sentClientRenderFunction
              ? r(d, Kb)
              : ((h.sentClientRenderFunction = true), r(d, Jb));
            if (m === null)
              throw Error(
                "An ID must have been assigned before we can complete the boundary."
              );
            r(d, m);
            r(d, Lb);
            if (n || p || v) r(d, Nb), r(d, Pb(n || ""));
            if (p || v) r(d, Nb), r(d, Pb(p || ""));
            v && (r(d, Nb), r(d, Pb(v)));
            if (!w(d, Mb)) {
              a.destination = null;
              e++;
              f.splice(0, e);
              return;
            }
          }
          f.splice(0, e);
          var C = a.completedBoundaries;
          for (e = 0; e < C.length; e++)
            if (!hd(a, b, C[e])) {
              a.destination = null;
              e++;
              C.splice(0, e);
              return;
            }
          C.splice(0, e);
          ca(b);
          k = new Uint8Array(2048);
          l = 0;
          q = true;
          var D = a.partialBoundaries;
          for (e = 0; e < D.length; e++) {
            var E = D[e];
            a: {
              f = a;
              g = b;
              var na = E.completedSegments;
              for (h = 0; h < na.length; h++)
                if (!id(f, g, E, na[h])) {
                  h++;
                  na.splice(0, h);
                  var Eb = false;
                  break a;
                }
              na.splice(0, h);
              Eb = true;
            }
            if (!Eb) {
              a.destination = null;
              e++;
              D.splice(0, e);
              return;
            }
          }
          D.splice(0, e);
          var oa = a.completedBoundaries;
          for (e = 0; e < oa.length; e++)
            if (!hd(a, b, oa[e])) {
              a.destination = null;
              e++;
              oa.splice(0, e);
              return;
            }
          oa.splice(0, e);
        } finally {
          ca(b),
            typeof b.flush === "function" && b.flush(),
            a.allPendingTasks === 0 &&
              a.pingedTasks.length === 0 &&
              a.clientRenderedBoundaries.length === 0 &&
              a.completedBoundaries.length === 0 &&
              b.end();
        }
      }
      function jd(a) {
        setImmediate(function () {
          return Qc(a);
        });
      }
      function kd(a, b) {
        if (a.status === 1) (a.status = 2), b.destroy(a.fatalError);
        else if (a.status !== 2 && a.destination === null) {
          a.destination = b;
          try {
            dd(a, b);
          } catch (c) {
            Y(a, c), Tc(a, c);
          }
        }
      }
      function ld(a, b) {
        try {
          var c = a.abortableTasks;
          c.forEach(function (c2) {
            return cd(c2, a, b);
          });
          c.clear();
          a.destination !== null && dd(a, a.destination);
        } catch (d) {
          Y(a, d), Tc(a, d);
        }
      }
      function md(a, b) {
        return function () {
          return kd(b, a);
        };
      }
      function nd(a, b) {
        return function () {
          return ld(a, b);
        };
      }
      function od(a, b) {
        var c = b ? b.identifierPrefix : void 0,
          d = b ? b.nonce : void 0,
          f = b ? b.bootstrapScriptContent : void 0,
          e = b ? b.bootstrapScripts : void 0;
        var g = b ? b.bootstrapModules : void 0;
        c = c === void 0 ? "" : c;
        d = d === void 0 ? ra : x('<script nonce="' + F(d) + '">');
        var h = [];
        f !== void 0 && h.push(d, ("" + f).replace(wa, xa), sa);
        if (e !== void 0)
          for (f = 0; f < e.length; f++) h.push(ta, F(e[f]), va);
        if (g !== void 0)
          for (e = 0; e < g.length; e++) h.push(ua, F(g[e]), va);
        g = {
          bootstrapChunks: h,
          startInlineScript: d,
          placeholderPrefix: x(c + "P:"),
          segmentPrefix: x(c + "S:"),
          boundaryPrefix: c + "B:",
          idPrefix: c,
          nextSuspenseID: 0,
          sentCompleteSegmentFunction: false,
          sentCompleteBoundaryFunction: false,
          sentClientRenderFunction: false,
        };
        e = b ? b.namespaceURI : void 0;
        e = G(
          e === "http://www.w3.org/2000/svg"
            ? 2
            : e === "http://www.w3.org/1998/Math/MathML"
            ? 3
            : 0,
          null
        );
        f = b ? b.progressiveChunkSize : void 0;
        d = b ? b.onError : void 0;
        h = b ? b.onAllReady : void 0;
        var m = b ? b.onShellReady : void 0,
          n = b ? b.onShellError : void 0;
        b = [];
        c = /* @__PURE__ */ new Set();
        g = {
          destination: null,
          responseState: g,
          progressiveChunkSize: f === void 0 ? 12800 : f,
          status: 0,
          fatalError: null,
          nextSegmentId: 0,
          allPendingTasks: 0,
          pendingRootTasks: 0,
          completedRootSegment: null,
          abortableTasks: c,
          pingedTasks: b,
          clientRenderedBoundaries: [],
          completedBoundaries: [],
          partialBoundaries: [],
          onError: d === void 0 ? Oc : d,
          onAllReady: h === void 0 ? X : h,
          onShellReady: m === void 0 ? X : m,
          onShellError: n === void 0 ? X : n,
          onFatalError: X,
        };
        e = Sc(g, 0, null, e, false, false);
        e.parentFlushed = true;
        a = Rc(g, a, null, e, c, hc, null, qc);
        b.push(a);
        return g;
      }
      exports.renderToPipeableStream = function (a, b) {
        var c = od(a, b),
          d = false;
        jd(c);
        return {
          pipe: function (a2) {
            if (d)
              throw Error(
                "React currently only supports piping to one writable stream."
              );
            d = true;
            kd(c, a2);
            a2.on("drain", md(a2, c));
            a2.on(
              "error",
              nd(c, Error("The destination stream errored while writing data."))
            );
            a2.on(
              "close",
              nd(c, Error("The destination stream closed early."))
            );
            return a2;
          },
          abort: function (a2) {
            ld(c, a2);
          },
        };
      };
      exports.version = "18.2.0";
    },
  });

  // node_modules/react-dom/cjs/react-dom-server-legacy.node.development.js
  var require_react_dom_server_legacy_node_development = __commonJS({
    "node_modules/react-dom/cjs/react-dom-server-legacy.node.development.js"(
      exports
    ) {
      "use strict";
      init_process_shim();
      if (process.env.NODE_ENV !== "production") {
        (function () {
          "use strict";
          var React = require_react();
          var stream = require_stream2();
          var ReactVersion = "18.2.0";
          var ReactSharedInternals =
            React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          function warn(format) {
            {
              {
                for (
                  var _len = arguments.length,
                    args = new Array(_len > 1 ? _len - 1 : 0),
                    _key = 1;
                  _key < _len;
                  _key++
                ) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format, args);
              }
            }
          }
          function error(format) {
            {
              {
                for (
                  var _len2 = arguments.length,
                    args = new Array(_len2 > 1 ? _len2 - 1 : 0),
                    _key2 = 1;
                  _key2 < _len2;
                  _key2++
                ) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 =
                ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function (item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(
                console[level],
                console,
                argsWithFormat
              );
            }
          }
          function scheduleWork(callback) {
            callback();
          }
          function beginWriting(destination) {}
          function writeChunk(destination, chunk) {
            writeChunkAndReturn(destination, chunk);
          }
          function writeChunkAndReturn(destination, chunk) {
            return destination.push(chunk);
          }
          function completeWriting(destination) {}
          function close(destination) {
            destination.push(null);
          }
          function stringToChunk(content) {
            return content;
          }
          function stringToPrecomputedChunk(content) {
            return content;
          }
          function closeWithError(destination, error2) {
            destination.destroy(error2);
          }
          function typeName(value) {
            {
              var hasToStringTag =
                typeof Symbol === "function" && Symbol.toStringTag;
              var type =
                (hasToStringTag && value[Symbol.toStringTag]) ||
                value.constructor.name ||
                "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkAttributeStringCoercion(value, attributeName) {
            {
              if (willCoercionThrow(value)) {
                error(
                  "The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.",
                  attributeName,
                  typeName(value)
                );
                return testStringCoercion(value);
              }
            }
          }
          function checkCSSPropertyStringCoercion(value, propName) {
            {
              if (willCoercionThrow(value)) {
                error(
                  "The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.",
                  propName,
                  typeName(value)
                );
                return testStringCoercion(value);
              }
            }
          }
          function checkHtmlStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error(
                  "The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.",
                  typeName(value)
                );
                return testStringCoercion(value);
              }
            }
          }
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          var RESERVED = 0;
          var STRING = 1;
          var BOOLEANISH_STRING = 2;
          var BOOLEAN = 3;
          var OVERLOADED_BOOLEAN = 4;
          var NUMERIC = 5;
          var POSITIVE_NUMERIC = 6;
          var ATTRIBUTE_NAME_START_CHAR =
            ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
          var ATTRIBUTE_NAME_CHAR =
            ATTRIBUTE_NAME_START_CHAR +
            "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
          var VALID_ATTRIBUTE_NAME_REGEX = new RegExp(
            "^[" +
              ATTRIBUTE_NAME_START_CHAR +
              "][" +
              ATTRIBUTE_NAME_CHAR +
              "]*$"
          );
          var illegalAttributeNameCache = {};
          var validatedAttributeNameCache = {};
          function isAttributeNameSafe(attributeName) {
            if (
              hasOwnProperty.call(validatedAttributeNameCache, attributeName)
            ) {
              return true;
            }
            if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
              return false;
            }
            if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
              validatedAttributeNameCache[attributeName] = true;
              return true;
            }
            illegalAttributeNameCache[attributeName] = true;
            {
              error("Invalid attribute name: `%s`", attributeName);
            }
            return false;
          }
          function shouldRemoveAttributeWithWarning(
            name,
            value,
            propertyInfo,
            isCustomComponentTag
          ) {
            if (propertyInfo !== null && propertyInfo.type === RESERVED) {
              return false;
            }
            switch (typeof value) {
              case "function":
              case "symbol":
                return true;
              case "boolean": {
                if (isCustomComponentTag) {
                  return false;
                }
                if (propertyInfo !== null) {
                  return !propertyInfo.acceptsBooleans;
                } else {
                  var prefix2 = name.toLowerCase().slice(0, 5);
                  return prefix2 !== "data-" && prefix2 !== "aria-";
                }
              }
              default:
                return false;
            }
          }
          function getPropertyInfo(name) {
            return properties.hasOwnProperty(name) ? properties[name] : null;
          }
          function PropertyInfoRecord(
            name,
            type,
            mustUseProperty,
            attributeName,
            attributeNamespace,
            sanitizeURL2,
            removeEmptyString
          ) {
            this.acceptsBooleans =
              type === BOOLEANISH_STRING ||
              type === BOOLEAN ||
              type === OVERLOADED_BOOLEAN;
            this.attributeName = attributeName;
            this.attributeNamespace = attributeNamespace;
            this.mustUseProperty = mustUseProperty;
            this.propertyName = name;
            this.type = type;
            this.sanitizeURL = sanitizeURL2;
            this.removeEmptyString = removeEmptyString;
          }
          var properties = {};
          var reservedProps = [
            "children",
            "dangerouslySetInnerHTML",
            "defaultValue",
            "defaultChecked",
            "innerHTML",
            "suppressContentEditableWarning",
            "suppressHydrationWarning",
            "style",
          ];
          reservedProps.forEach(function (name) {
            properties[name] = new PropertyInfoRecord(
              name,
              RESERVED,
              false,
              name,
              null,
              false,
              false
            );
          });
          [
            ["acceptCharset", "accept-charset"],
            ["className", "class"],
            ["htmlFor", "for"],
            ["httpEquiv", "http-equiv"],
          ].forEach(function (_ref) {
            var name = _ref[0],
              attributeName = _ref[1];
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              attributeName,
              null,
              false,
              false
            );
          });
          ["contentEditable", "draggable", "spellCheck", "value"].forEach(
            function (name) {
              properties[name] = new PropertyInfoRecord(
                name,
                BOOLEANISH_STRING,
                false,
                name.toLowerCase(),
                null,
                false,
                false
              );
            }
          );
          [
            "autoReverse",
            "externalResourcesRequired",
            "focusable",
            "preserveAlpha",
          ].forEach(function (name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEANISH_STRING,
              false,
              name,
              null,
              false,
              false
            );
          });
          [
            "allowFullScreen",
            "async",
            "autoFocus",
            "autoPlay",
            "controls",
            "default",
            "defer",
            "disabled",
            "disablePictureInPicture",
            "disableRemotePlayback",
            "formNoValidate",
            "hidden",
            "loop",
            "noModule",
            "noValidate",
            "open",
            "playsInline",
            "readOnly",
            "required",
            "reversed",
            "scoped",
            "seamless",
            "itemScope",
          ].forEach(function (name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEAN,
              false,
              name.toLowerCase(),
              null,
              false,
              false
            );
          });
          ["checked", "multiple", "muted", "selected"].forEach(function (name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEAN,
              true,
              name,
              null,
              false,
              false
            );
          });
          ["capture", "download"].forEach(function (name) {
            properties[name] = new PropertyInfoRecord(
              name,
              OVERLOADED_BOOLEAN,
              false,
              name,
              null,
              false,
              false
            );
          });
          ["cols", "rows", "size", "span"].forEach(function (name) {
            properties[name] = new PropertyInfoRecord(
              name,
              POSITIVE_NUMERIC,
              false,
              name,
              null,
              false,
              false
            );
          });
          ["rowSpan", "start"].forEach(function (name) {
            properties[name] = new PropertyInfoRecord(
              name,
              NUMERIC,
              false,
              name.toLowerCase(),
              null,
              false,
              false
            );
          });
          var CAMELIZE = /[\-\:]([a-z])/g;
          var capitalize = function (token) {
            return token[1].toUpperCase();
          };
          [
            "accent-height",
            "alignment-baseline",
            "arabic-form",
            "baseline-shift",
            "cap-height",
            "clip-path",
            "clip-rule",
            "color-interpolation",
            "color-interpolation-filters",
            "color-profile",
            "color-rendering",
            "dominant-baseline",
            "enable-background",
            "fill-opacity",
            "fill-rule",
            "flood-color",
            "flood-opacity",
            "font-family",
            "font-size",
            "font-size-adjust",
            "font-stretch",
            "font-style",
            "font-variant",
            "font-weight",
            "glyph-name",
            "glyph-orientation-horizontal",
            "glyph-orientation-vertical",
            "horiz-adv-x",
            "horiz-origin-x",
            "image-rendering",
            "letter-spacing",
            "lighting-color",
            "marker-end",
            "marker-mid",
            "marker-start",
            "overline-position",
            "overline-thickness",
            "paint-order",
            "panose-1",
            "pointer-events",
            "rendering-intent",
            "shape-rendering",
            "stop-color",
            "stop-opacity",
            "strikethrough-position",
            "strikethrough-thickness",
            "stroke-dasharray",
            "stroke-dashoffset",
            "stroke-linecap",
            "stroke-linejoin",
            "stroke-miterlimit",
            "stroke-opacity",
            "stroke-width",
            "text-anchor",
            "text-decoration",
            "text-rendering",
            "underline-position",
            "underline-thickness",
            "unicode-bidi",
            "unicode-range",
            "units-per-em",
            "v-alphabetic",
            "v-hanging",
            "v-ideographic",
            "v-mathematical",
            "vector-effect",
            "vert-adv-y",
            "vert-origin-x",
            "vert-origin-y",
            "word-spacing",
            "writing-mode",
            "xmlns:xlink",
            "x-height",
          ].forEach(function (attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              attributeName,
              null,
              false,
              false
            );
          });
          [
            "xlink:actuate",
            "xlink:arcrole",
            "xlink:role",
            "xlink:show",
            "xlink:title",
            "xlink:type",
          ].forEach(function (attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              attributeName,
              "http://www.w3.org/1999/xlink",
              false,
              false
            );
          });
          ["xml:base", "xml:lang", "xml:space"].forEach(function (
            attributeName
          ) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              attributeName,
              "http://www.w3.org/XML/1998/namespace",
              false,
              false
            );
          });
          ["tabIndex", "crossOrigin"].forEach(function (attributeName) {
            properties[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              attributeName.toLowerCase(),
              null,
              false,
              false
            );
          });
          var xlinkHref = "xlinkHref";
          properties[xlinkHref] = new PropertyInfoRecord(
            "xlinkHref",
            STRING,
            false,
            "xlink:href",
            "http://www.w3.org/1999/xlink",
            true,
            false
          );
          ["src", "href", "action", "formAction"].forEach(function (
            attributeName
          ) {
            properties[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              attributeName.toLowerCase(),
              null,
              true,
              true
            );
          });
          var isUnitlessNumber = {
            animationIterationCount: true,
            aspectRatio: true,
            borderImageOutset: true,
            borderImageSlice: true,
            borderImageWidth: true,
            boxFlex: true,
            boxFlexGroup: true,
            boxOrdinalGroup: true,
            columnCount: true,
            columns: true,
            flex: true,
            flexGrow: true,
            flexPositive: true,
            flexShrink: true,
            flexNegative: true,
            flexOrder: true,
            gridArea: true,
            gridRow: true,
            gridRowEnd: true,
            gridRowSpan: true,
            gridRowStart: true,
            gridColumn: true,
            gridColumnEnd: true,
            gridColumnSpan: true,
            gridColumnStart: true,
            fontWeight: true,
            lineClamp: true,
            lineHeight: true,
            opacity: true,
            order: true,
            orphans: true,
            tabSize: true,
            widows: true,
            zIndex: true,
            zoom: true,
            fillOpacity: true,
            floodOpacity: true,
            stopOpacity: true,
            strokeDasharray: true,
            strokeDashoffset: true,
            strokeMiterlimit: true,
            strokeOpacity: true,
            strokeWidth: true,
          };
          function prefixKey(prefix2, key) {
            return prefix2 + key.charAt(0).toUpperCase() + key.substring(1);
          }
          var prefixes = ["Webkit", "ms", "Moz", "O"];
          Object.keys(isUnitlessNumber).forEach(function (prop) {
            prefixes.forEach(function (prefix2) {
              isUnitlessNumber[prefixKey(prefix2, prop)] =
                isUnitlessNumber[prop];
            });
          });
          var hasReadOnlyValue = {
            button: true,
            checkbox: true,
            image: true,
            hidden: true,
            radio: true,
            reset: true,
            submit: true,
          };
          function checkControlledValueProps(tagName, props) {
            {
              if (
                !(
                  hasReadOnlyValue[props.type] ||
                  props.onChange ||
                  props.onInput ||
                  props.readOnly ||
                  props.disabled ||
                  props.value == null
                )
              ) {
                error(
                  "You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`."
                );
              }
              if (
                !(
                  props.onChange ||
                  props.readOnly ||
                  props.disabled ||
                  props.checked == null
                )
              ) {
                error(
                  "You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`."
                );
              }
            }
          }
          function isCustomComponent(tagName, props) {
            if (tagName.indexOf("-") === -1) {
              return typeof props.is === "string";
            }
            switch (tagName) {
              case "annotation-xml":
              case "color-profile":
              case "font-face":
              case "font-face-src":
              case "font-face-uri":
              case "font-face-format":
              case "font-face-name":
              case "missing-glyph":
                return false;
              default:
                return true;
            }
          }
          var ariaProperties = {
            "aria-current": 0,
            "aria-description": 0,
            "aria-details": 0,
            "aria-disabled": 0,
            "aria-hidden": 0,
            "aria-invalid": 0,
            "aria-keyshortcuts": 0,
            "aria-label": 0,
            "aria-roledescription": 0,
            "aria-autocomplete": 0,
            "aria-checked": 0,
            "aria-expanded": 0,
            "aria-haspopup": 0,
            "aria-level": 0,
            "aria-modal": 0,
            "aria-multiline": 0,
            "aria-multiselectable": 0,
            "aria-orientation": 0,
            "aria-placeholder": 0,
            "aria-pressed": 0,
            "aria-readonly": 0,
            "aria-required": 0,
            "aria-selected": 0,
            "aria-sort": 0,
            "aria-valuemax": 0,
            "aria-valuemin": 0,
            "aria-valuenow": 0,
            "aria-valuetext": 0,
            "aria-atomic": 0,
            "aria-busy": 0,
            "aria-live": 0,
            "aria-relevant": 0,
            "aria-dropeffect": 0,
            "aria-grabbed": 0,
            "aria-activedescendant": 0,
            "aria-colcount": 0,
            "aria-colindex": 0,
            "aria-colspan": 0,
            "aria-controls": 0,
            "aria-describedby": 0,
            "aria-errormessage": 0,
            "aria-flowto": 0,
            "aria-labelledby": 0,
            "aria-owns": 0,
            "aria-posinset": 0,
            "aria-rowcount": 0,
            "aria-rowindex": 0,
            "aria-rowspan": 0,
            "aria-setsize": 0,
          };
          var warnedProperties = {};
          var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel = new RegExp(
            "^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$"
          );
          function validateProperty(tagName, name) {
            {
              if (
                hasOwnProperty.call(warnedProperties, name) &&
                warnedProperties[name]
              ) {
                return true;
              }
              if (rARIACamel.test(name)) {
                var ariaName = "aria-" + name.slice(4).toLowerCase();
                var correctName = ariaProperties.hasOwnProperty(ariaName)
                  ? ariaName
                  : null;
                if (correctName == null) {
                  error(
                    "Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.",
                    name
                  );
                  warnedProperties[name] = true;
                  return true;
                }
                if (name !== correctName) {
                  error(
                    "Invalid ARIA attribute `%s`. Did you mean `%s`?",
                    name,
                    correctName
                  );
                  warnedProperties[name] = true;
                  return true;
                }
              }
              if (rARIA.test(name)) {
                var lowerCasedName = name.toLowerCase();
                var standardName = ariaProperties.hasOwnProperty(lowerCasedName)
                  ? lowerCasedName
                  : null;
                if (standardName == null) {
                  warnedProperties[name] = true;
                  return false;
                }
                if (name !== standardName) {
                  error(
                    "Unknown ARIA attribute `%s`. Did you mean `%s`?",
                    name,
                    standardName
                  );
                  warnedProperties[name] = true;
                  return true;
                }
              }
            }
            return true;
          }
          function warnInvalidARIAProps(type, props) {
            {
              var invalidProps = [];
              for (var key in props) {
                var isValid = validateProperty(type, key);
                if (!isValid) {
                  invalidProps.push(key);
                }
              }
              var unknownPropString = invalidProps
                .map(function (prop) {
                  return "`" + prop + "`";
                })
                .join(", ");
              if (invalidProps.length === 1) {
                error(
                  "Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props",
                  unknownPropString,
                  type
                );
              } else if (invalidProps.length > 1) {
                error(
                  "Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props",
                  unknownPropString,
                  type
                );
              }
            }
          }
          function validateProperties(type, props) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnInvalidARIAProps(type, props);
          }
          var didWarnValueNull = false;
          function validateProperties$1(type, props) {
            {
              if (
                type !== "input" &&
                type !== "textarea" &&
                type !== "select"
              ) {
                return;
              }
              if (props != null && props.value === null && !didWarnValueNull) {
                didWarnValueNull = true;
                if (type === "select" && props.multiple) {
                  error(
                    "`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.",
                    type
                  );
                } else {
                  error(
                    "`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.",
                    type
                  );
                }
              }
            }
          }
          var possibleStandardNames = {
            accept: "accept",
            acceptcharset: "acceptCharset",
            "accept-charset": "acceptCharset",
            accesskey: "accessKey",
            action: "action",
            allowfullscreen: "allowFullScreen",
            alt: "alt",
            as: "as",
            async: "async",
            autocapitalize: "autoCapitalize",
            autocomplete: "autoComplete",
            autocorrect: "autoCorrect",
            autofocus: "autoFocus",
            autoplay: "autoPlay",
            autosave: "autoSave",
            capture: "capture",
            cellpadding: "cellPadding",
            cellspacing: "cellSpacing",
            challenge: "challenge",
            charset: "charSet",
            checked: "checked",
            children: "children",
            cite: "cite",
            class: "className",
            classid: "classID",
            classname: "className",
            cols: "cols",
            colspan: "colSpan",
            content: "content",
            contenteditable: "contentEditable",
            contextmenu: "contextMenu",
            controls: "controls",
            controlslist: "controlsList",
            coords: "coords",
            crossorigin: "crossOrigin",
            dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
            data: "data",
            datetime: "dateTime",
            default: "default",
            defaultchecked: "defaultChecked",
            defaultvalue: "defaultValue",
            defer: "defer",
            dir: "dir",
            disabled: "disabled",
            disablepictureinpicture: "disablePictureInPicture",
            disableremoteplayback: "disableRemotePlayback",
            download: "download",
            draggable: "draggable",
            enctype: "encType",
            enterkeyhint: "enterKeyHint",
            for: "htmlFor",
            form: "form",
            formmethod: "formMethod",
            formaction: "formAction",
            formenctype: "formEncType",
            formnovalidate: "formNoValidate",
            formtarget: "formTarget",
            frameborder: "frameBorder",
            headers: "headers",
            height: "height",
            hidden: "hidden",
            high: "high",
            href: "href",
            hreflang: "hrefLang",
            htmlfor: "htmlFor",
            httpequiv: "httpEquiv",
            "http-equiv": "httpEquiv",
            icon: "icon",
            id: "id",
            imagesizes: "imageSizes",
            imagesrcset: "imageSrcSet",
            innerhtml: "innerHTML",
            inputmode: "inputMode",
            integrity: "integrity",
            is: "is",
            itemid: "itemID",
            itemprop: "itemProp",
            itemref: "itemRef",
            itemscope: "itemScope",
            itemtype: "itemType",
            keyparams: "keyParams",
            keytype: "keyType",
            kind: "kind",
            label: "label",
            lang: "lang",
            list: "list",
            loop: "loop",
            low: "low",
            manifest: "manifest",
            marginwidth: "marginWidth",
            marginheight: "marginHeight",
            max: "max",
            maxlength: "maxLength",
            media: "media",
            mediagroup: "mediaGroup",
            method: "method",
            min: "min",
            minlength: "minLength",
            multiple: "multiple",
            muted: "muted",
            name: "name",
            nomodule: "noModule",
            nonce: "nonce",
            novalidate: "noValidate",
            open: "open",
            optimum: "optimum",
            pattern: "pattern",
            placeholder: "placeholder",
            playsinline: "playsInline",
            poster: "poster",
            preload: "preload",
            profile: "profile",
            radiogroup: "radioGroup",
            readonly: "readOnly",
            referrerpolicy: "referrerPolicy",
            rel: "rel",
            required: "required",
            reversed: "reversed",
            role: "role",
            rows: "rows",
            rowspan: "rowSpan",
            sandbox: "sandbox",
            scope: "scope",
            scoped: "scoped",
            scrolling: "scrolling",
            seamless: "seamless",
            selected: "selected",
            shape: "shape",
            size: "size",
            sizes: "sizes",
            span: "span",
            spellcheck: "spellCheck",
            src: "src",
            srcdoc: "srcDoc",
            srclang: "srcLang",
            srcset: "srcSet",
            start: "start",
            step: "step",
            style: "style",
            summary: "summary",
            tabindex: "tabIndex",
            target: "target",
            title: "title",
            type: "type",
            usemap: "useMap",
            value: "value",
            width: "width",
            wmode: "wmode",
            wrap: "wrap",
            about: "about",
            accentheight: "accentHeight",
            "accent-height": "accentHeight",
            accumulate: "accumulate",
            additive: "additive",
            alignmentbaseline: "alignmentBaseline",
            "alignment-baseline": "alignmentBaseline",
            allowreorder: "allowReorder",
            alphabetic: "alphabetic",
            amplitude: "amplitude",
            arabicform: "arabicForm",
            "arabic-form": "arabicForm",
            ascent: "ascent",
            attributename: "attributeName",
            attributetype: "attributeType",
            autoreverse: "autoReverse",
            azimuth: "azimuth",
            basefrequency: "baseFrequency",
            baselineshift: "baselineShift",
            "baseline-shift": "baselineShift",
            baseprofile: "baseProfile",
            bbox: "bbox",
            begin: "begin",
            bias: "bias",
            by: "by",
            calcmode: "calcMode",
            capheight: "capHeight",
            "cap-height": "capHeight",
            clip: "clip",
            clippath: "clipPath",
            "clip-path": "clipPath",
            clippathunits: "clipPathUnits",
            cliprule: "clipRule",
            "clip-rule": "clipRule",
            color: "color",
            colorinterpolation: "colorInterpolation",
            "color-interpolation": "colorInterpolation",
            colorinterpolationfilters: "colorInterpolationFilters",
            "color-interpolation-filters": "colorInterpolationFilters",
            colorprofile: "colorProfile",
            "color-profile": "colorProfile",
            colorrendering: "colorRendering",
            "color-rendering": "colorRendering",
            contentscripttype: "contentScriptType",
            contentstyletype: "contentStyleType",
            cursor: "cursor",
            cx: "cx",
            cy: "cy",
            d: "d",
            datatype: "datatype",
            decelerate: "decelerate",
            descent: "descent",
            diffuseconstant: "diffuseConstant",
            direction: "direction",
            display: "display",
            divisor: "divisor",
            dominantbaseline: "dominantBaseline",
            "dominant-baseline": "dominantBaseline",
            dur: "dur",
            dx: "dx",
            dy: "dy",
            edgemode: "edgeMode",
            elevation: "elevation",
            enablebackground: "enableBackground",
            "enable-background": "enableBackground",
            end: "end",
            exponent: "exponent",
            externalresourcesrequired: "externalResourcesRequired",
            fill: "fill",
            fillopacity: "fillOpacity",
            "fill-opacity": "fillOpacity",
            fillrule: "fillRule",
            "fill-rule": "fillRule",
            filter: "filter",
            filterres: "filterRes",
            filterunits: "filterUnits",
            floodopacity: "floodOpacity",
            "flood-opacity": "floodOpacity",
            floodcolor: "floodColor",
            "flood-color": "floodColor",
            focusable: "focusable",
            fontfamily: "fontFamily",
            "font-family": "fontFamily",
            fontsize: "fontSize",
            "font-size": "fontSize",
            fontsizeadjust: "fontSizeAdjust",
            "font-size-adjust": "fontSizeAdjust",
            fontstretch: "fontStretch",
            "font-stretch": "fontStretch",
            fontstyle: "fontStyle",
            "font-style": "fontStyle",
            fontvariant: "fontVariant",
            "font-variant": "fontVariant",
            fontweight: "fontWeight",
            "font-weight": "fontWeight",
            format: "format",
            from: "from",
            fx: "fx",
            fy: "fy",
            g1: "g1",
            g2: "g2",
            glyphname: "glyphName",
            "glyph-name": "glyphName",
            glyphorientationhorizontal: "glyphOrientationHorizontal",
            "glyph-orientation-horizontal": "glyphOrientationHorizontal",
            glyphorientationvertical: "glyphOrientationVertical",
            "glyph-orientation-vertical": "glyphOrientationVertical",
            glyphref: "glyphRef",
            gradienttransform: "gradientTransform",
            gradientunits: "gradientUnits",
            hanging: "hanging",
            horizadvx: "horizAdvX",
            "horiz-adv-x": "horizAdvX",
            horizoriginx: "horizOriginX",
            "horiz-origin-x": "horizOriginX",
            ideographic: "ideographic",
            imagerendering: "imageRendering",
            "image-rendering": "imageRendering",
            in2: "in2",
            in: "in",
            inlist: "inlist",
            intercept: "intercept",
            k1: "k1",
            k2: "k2",
            k3: "k3",
            k4: "k4",
            k: "k",
            kernelmatrix: "kernelMatrix",
            kernelunitlength: "kernelUnitLength",
            kerning: "kerning",
            keypoints: "keyPoints",
            keysplines: "keySplines",
            keytimes: "keyTimes",
            lengthadjust: "lengthAdjust",
            letterspacing: "letterSpacing",
            "letter-spacing": "letterSpacing",
            lightingcolor: "lightingColor",
            "lighting-color": "lightingColor",
            limitingconeangle: "limitingConeAngle",
            local: "local",
            markerend: "markerEnd",
            "marker-end": "markerEnd",
            markerheight: "markerHeight",
            markermid: "markerMid",
            "marker-mid": "markerMid",
            markerstart: "markerStart",
            "marker-start": "markerStart",
            markerunits: "markerUnits",
            markerwidth: "markerWidth",
            mask: "mask",
            maskcontentunits: "maskContentUnits",
            maskunits: "maskUnits",
            mathematical: "mathematical",
            mode: "mode",
            numoctaves: "numOctaves",
            offset: "offset",
            opacity: "opacity",
            operator: "operator",
            order: "order",
            orient: "orient",
            orientation: "orientation",
            origin: "origin",
            overflow: "overflow",
            overlineposition: "overlinePosition",
            "overline-position": "overlinePosition",
            overlinethickness: "overlineThickness",
            "overline-thickness": "overlineThickness",
            paintorder: "paintOrder",
            "paint-order": "paintOrder",
            panose1: "panose1",
            "panose-1": "panose1",
            pathlength: "pathLength",
            patterncontentunits: "patternContentUnits",
            patterntransform: "patternTransform",
            patternunits: "patternUnits",
            pointerevents: "pointerEvents",
            "pointer-events": "pointerEvents",
            points: "points",
            pointsatx: "pointsAtX",
            pointsaty: "pointsAtY",
            pointsatz: "pointsAtZ",
            prefix: "prefix",
            preservealpha: "preserveAlpha",
            preserveaspectratio: "preserveAspectRatio",
            primitiveunits: "primitiveUnits",
            property: "property",
            r: "r",
            radius: "radius",
            refx: "refX",
            refy: "refY",
            renderingintent: "renderingIntent",
            "rendering-intent": "renderingIntent",
            repeatcount: "repeatCount",
            repeatdur: "repeatDur",
            requiredextensions: "requiredExtensions",
            requiredfeatures: "requiredFeatures",
            resource: "resource",
            restart: "restart",
            result: "result",
            results: "results",
            rotate: "rotate",
            rx: "rx",
            ry: "ry",
            scale: "scale",
            security: "security",
            seed: "seed",
            shaperendering: "shapeRendering",
            "shape-rendering": "shapeRendering",
            slope: "slope",
            spacing: "spacing",
            specularconstant: "specularConstant",
            specularexponent: "specularExponent",
            speed: "speed",
            spreadmethod: "spreadMethod",
            startoffset: "startOffset",
            stddeviation: "stdDeviation",
            stemh: "stemh",
            stemv: "stemv",
            stitchtiles: "stitchTiles",
            stopcolor: "stopColor",
            "stop-color": "stopColor",
            stopopacity: "stopOpacity",
            "stop-opacity": "stopOpacity",
            strikethroughposition: "strikethroughPosition",
            "strikethrough-position": "strikethroughPosition",
            strikethroughthickness: "strikethroughThickness",
            "strikethrough-thickness": "strikethroughThickness",
            string: "string",
            stroke: "stroke",
            strokedasharray: "strokeDasharray",
            "stroke-dasharray": "strokeDasharray",
            strokedashoffset: "strokeDashoffset",
            "stroke-dashoffset": "strokeDashoffset",
            strokelinecap: "strokeLinecap",
            "stroke-linecap": "strokeLinecap",
            strokelinejoin: "strokeLinejoin",
            "stroke-linejoin": "strokeLinejoin",
            strokemiterlimit: "strokeMiterlimit",
            "stroke-miterlimit": "strokeMiterlimit",
            strokewidth: "strokeWidth",
            "stroke-width": "strokeWidth",
            strokeopacity: "strokeOpacity",
            "stroke-opacity": "strokeOpacity",
            suppresscontenteditablewarning: "suppressContentEditableWarning",
            suppresshydrationwarning: "suppressHydrationWarning",
            surfacescale: "surfaceScale",
            systemlanguage: "systemLanguage",
            tablevalues: "tableValues",
            targetx: "targetX",
            targety: "targetY",
            textanchor: "textAnchor",
            "text-anchor": "textAnchor",
            textdecoration: "textDecoration",
            "text-decoration": "textDecoration",
            textlength: "textLength",
            textrendering: "textRendering",
            "text-rendering": "textRendering",
            to: "to",
            transform: "transform",
            typeof: "typeof",
            u1: "u1",
            u2: "u2",
            underlineposition: "underlinePosition",
            "underline-position": "underlinePosition",
            underlinethickness: "underlineThickness",
            "underline-thickness": "underlineThickness",
            unicode: "unicode",
            unicodebidi: "unicodeBidi",
            "unicode-bidi": "unicodeBidi",
            unicoderange: "unicodeRange",
            "unicode-range": "unicodeRange",
            unitsperem: "unitsPerEm",
            "units-per-em": "unitsPerEm",
            unselectable: "unselectable",
            valphabetic: "vAlphabetic",
            "v-alphabetic": "vAlphabetic",
            values: "values",
            vectoreffect: "vectorEffect",
            "vector-effect": "vectorEffect",
            version: "version",
            vertadvy: "vertAdvY",
            "vert-adv-y": "vertAdvY",
            vertoriginx: "vertOriginX",
            "vert-origin-x": "vertOriginX",
            vertoriginy: "vertOriginY",
            "vert-origin-y": "vertOriginY",
            vhanging: "vHanging",
            "v-hanging": "vHanging",
            videographic: "vIdeographic",
            "v-ideographic": "vIdeographic",
            viewbox: "viewBox",
            viewtarget: "viewTarget",
            visibility: "visibility",
            vmathematical: "vMathematical",
            "v-mathematical": "vMathematical",
            vocab: "vocab",
            widths: "widths",
            wordspacing: "wordSpacing",
            "word-spacing": "wordSpacing",
            writingmode: "writingMode",
            "writing-mode": "writingMode",
            x1: "x1",
            x2: "x2",
            x: "x",
            xchannelselector: "xChannelSelector",
            xheight: "xHeight",
            "x-height": "xHeight",
            xlinkactuate: "xlinkActuate",
            "xlink:actuate": "xlinkActuate",
            xlinkarcrole: "xlinkArcrole",
            "xlink:arcrole": "xlinkArcrole",
            xlinkhref: "xlinkHref",
            "xlink:href": "xlinkHref",
            xlinkrole: "xlinkRole",
            "xlink:role": "xlinkRole",
            xlinkshow: "xlinkShow",
            "xlink:show": "xlinkShow",
            xlinktitle: "xlinkTitle",
            "xlink:title": "xlinkTitle",
            xlinktype: "xlinkType",
            "xlink:type": "xlinkType",
            xmlbase: "xmlBase",
            "xml:base": "xmlBase",
            xmllang: "xmlLang",
            "xml:lang": "xmlLang",
            xmlns: "xmlns",
            "xml:space": "xmlSpace",
            xmlnsxlink: "xmlnsXlink",
            "xmlns:xlink": "xmlnsXlink",
            xmlspace: "xmlSpace",
            y1: "y1",
            y2: "y2",
            y: "y",
            ychannelselector: "yChannelSelector",
            z: "z",
            zoomandpan: "zoomAndPan",
          };
          var validateProperty$1 = function () {};
          {
            var warnedProperties$1 = {};
            var EVENT_NAME_REGEX = /^on./;
            var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
            var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
            var rARIACamel$1 = new RegExp(
              "^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$"
            );
            validateProperty$1 = function (
              tagName,
              name,
              value,
              eventRegistry
            ) {
              if (
                hasOwnProperty.call(warnedProperties$1, name) &&
                warnedProperties$1[name]
              ) {
                return true;
              }
              var lowerCasedName = name.toLowerCase();
              if (
                lowerCasedName === "onfocusin" ||
                lowerCasedName === "onfocusout"
              ) {
                error(
                  "React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React."
                );
                warnedProperties$1[name] = true;
                return true;
              }
              if (eventRegistry != null) {
                var registrationNameDependencies =
                    eventRegistry.registrationNameDependencies,
                  possibleRegistrationNames =
                    eventRegistry.possibleRegistrationNames;
                if (registrationNameDependencies.hasOwnProperty(name)) {
                  return true;
                }
                var registrationName = possibleRegistrationNames.hasOwnProperty(
                  lowerCasedName
                )
                  ? possibleRegistrationNames[lowerCasedName]
                  : null;
                if (registrationName != null) {
                  error(
                    "Invalid event handler property `%s`. Did you mean `%s`?",
                    name,
                    registrationName
                  );
                  warnedProperties$1[name] = true;
                  return true;
                }
                if (EVENT_NAME_REGEX.test(name)) {
                  error(
                    "Unknown event handler property `%s`. It will be ignored.",
                    name
                  );
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (EVENT_NAME_REGEX.test(name)) {
                if (INVALID_EVENT_NAME_REGEX.test(name)) {
                  error(
                    "Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.",
                    name
                  );
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
                return true;
              }
              if (lowerCasedName === "innerhtml") {
                error(
                  "Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`."
                );
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "aria") {
                error(
                  "The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead."
                );
                warnedProperties$1[name] = true;
                return true;
              }
              if (
                lowerCasedName === "is" &&
                value !== null &&
                value !== void 0 &&
                typeof value !== "string"
              ) {
                error(
                  "Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.",
                  typeof value
                );
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "number" && isNaN(value)) {
                error(
                  "Received NaN for the `%s` attribute. If this is expected, cast the value to a string.",
                  name
                );
                warnedProperties$1[name] = true;
                return true;
              }
              var propertyInfo = getPropertyInfo(name);
              var isReserved =
                propertyInfo !== null && propertyInfo.type === RESERVED;
              if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                var standardName = possibleStandardNames[lowerCasedName];
                if (standardName !== name) {
                  error(
                    "Invalid DOM property `%s`. Did you mean `%s`?",
                    name,
                    standardName
                  );
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (!isReserved && name !== lowerCasedName) {
                error(
                  "React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.",
                  name,
                  lowerCasedName
                );
                warnedProperties$1[name] = true;
                return true;
              }
              if (
                typeof value === "boolean" &&
                shouldRemoveAttributeWithWarning(
                  name,
                  value,
                  propertyInfo,
                  false
                )
              ) {
                if (value) {
                  error(
                    'Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.',
                    value,
                    name,
                    name,
                    value,
                    name
                  );
                } else {
                  error(
                    'Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.',
                    value,
                    name,
                    name,
                    value,
                    name,
                    name,
                    name
                  );
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (isReserved) {
                return true;
              }
              if (
                shouldRemoveAttributeWithWarning(
                  name,
                  value,
                  propertyInfo,
                  false
                )
              ) {
                warnedProperties$1[name] = true;
                return false;
              }
              if (
                (value === "false" || value === "true") &&
                propertyInfo !== null &&
                propertyInfo.type === BOOLEAN
              ) {
                error(
                  "Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?",
                  value,
                  name,
                  value === "false"
                    ? "The browser will interpret it as a truthy value."
                    : 'Although this works, it will not work as expected if you pass the string "false".',
                  name,
                  value
                );
                warnedProperties$1[name] = true;
                return true;
              }
              return true;
            };
          }
          var warnUnknownProperties = function (type, props, eventRegistry) {
            {
              var unknownProps = [];
              for (var key in props) {
                var isValid = validateProperty$1(
                  type,
                  key,
                  props[key],
                  eventRegistry
                );
                if (!isValid) {
                  unknownProps.push(key);
                }
              }
              var unknownPropString = unknownProps
                .map(function (prop) {
                  return "`" + prop + "`";
                })
                .join(", ");
              if (unknownProps.length === 1) {
                error(
                  "Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ",
                  unknownPropString,
                  type
                );
              } else if (unknownProps.length > 1) {
                error(
                  "Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ",
                  unknownPropString,
                  type
                );
              }
            }
          };
          function validateProperties$2(type, props, eventRegistry) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnUnknownProperties(type, props, eventRegistry);
          }
          var warnValidStyle = function () {};
          {
            var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
            var msPattern = /^-ms-/;
            var hyphenPattern = /-(.)/g;
            var badStyleValueWithSemicolonPattern = /;\s*$/;
            var warnedStyleNames = {};
            var warnedStyleValues = {};
            var warnedForNaNValue = false;
            var warnedForInfinityValue = false;
            var camelize = function (string) {
              return string.replace(hyphenPattern, function (_, character) {
                return character.toUpperCase();
              });
            };
            var warnHyphenatedStyleName = function (name) {
              if (
                warnedStyleNames.hasOwnProperty(name) &&
                warnedStyleNames[name]
              ) {
                return;
              }
              warnedStyleNames[name] = true;
              error(
                "Unsupported style property %s. Did you mean %s?",
                name,
                camelize(name.replace(msPattern, "ms-"))
              );
            };
            var warnBadVendoredStyleName = function (name) {
              if (
                warnedStyleNames.hasOwnProperty(name) &&
                warnedStyleNames[name]
              ) {
                return;
              }
              warnedStyleNames[name] = true;
              error(
                "Unsupported vendor-prefixed style property %s. Did you mean %s?",
                name,
                name.charAt(0).toUpperCase() + name.slice(1)
              );
            };
            var warnStyleValueWithSemicolon = function (name, value) {
              if (
                warnedStyleValues.hasOwnProperty(value) &&
                warnedStyleValues[value]
              ) {
                return;
              }
              warnedStyleValues[value] = true;
              error(
                `Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`,
                name,
                value.replace(badStyleValueWithSemicolonPattern, "")
              );
            };
            var warnStyleValueIsNaN = function (name, value) {
              if (warnedForNaNValue) {
                return;
              }
              warnedForNaNValue = true;
              error(
                "`NaN` is an invalid value for the `%s` css style property.",
                name
              );
            };
            var warnStyleValueIsInfinity = function (name, value) {
              if (warnedForInfinityValue) {
                return;
              }
              warnedForInfinityValue = true;
              error(
                "`Infinity` is an invalid value for the `%s` css style property.",
                name
              );
            };
            warnValidStyle = function (name, value) {
              if (name.indexOf("-") > -1) {
                warnHyphenatedStyleName(name);
              } else if (badVendoredStyleNamePattern.test(name)) {
                warnBadVendoredStyleName(name);
              } else if (badStyleValueWithSemicolonPattern.test(value)) {
                warnStyleValueWithSemicolon(name, value);
              }
              if (typeof value === "number") {
                if (isNaN(value)) {
                  warnStyleValueIsNaN(name, value);
                } else if (!isFinite(value)) {
                  warnStyleValueIsInfinity(name, value);
                }
              }
            };
          }
          var warnValidStyle$1 = warnValidStyle;
          var matchHtmlRegExp = /["'&<>]/;
          function escapeHtml(string) {
            {
              checkHtmlStringCoercion(string);
            }
            var str = "" + string;
            var match = matchHtmlRegExp.exec(str);
            if (!match) {
              return str;
            }
            var escape;
            var html = "";
            var index;
            var lastIndex = 0;
            for (index = match.index; index < str.length; index++) {
              switch (str.charCodeAt(index)) {
                case 34:
                  escape = "&quot;";
                  break;
                case 38:
                  escape = "&amp;";
                  break;
                case 39:
                  escape = "&#x27;";
                  break;
                case 60:
                  escape = "&lt;";
                  break;
                case 62:
                  escape = "&gt;";
                  break;
                default:
                  continue;
              }
              if (lastIndex !== index) {
                html += str.substring(lastIndex, index);
              }
              lastIndex = index + 1;
              html += escape;
            }
            return lastIndex !== index
              ? html + str.substring(lastIndex, index)
              : html;
          }
          function escapeTextForBrowser(text) {
            if (typeof text === "boolean" || typeof text === "number") {
              return "" + text;
            }
            return escapeHtml(text);
          }
          var uppercasePattern = /([A-Z])/g;
          var msPattern$1 = /^ms-/;
          function hyphenateStyleName(name) {
            return name
              .replace(uppercasePattern, "-$1")
              .toLowerCase()
              .replace(msPattern$1, "-ms-");
          }
          var isJavaScriptProtocol =
            /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
          var didWarn = false;
          function sanitizeURL(url) {
            {
              if (!didWarn && isJavaScriptProtocol.test(url)) {
                didWarn = true;
                error(
                  "A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.",
                  JSON.stringify(url)
                );
              }
            }
          }
          var isArrayImpl = Array.isArray;
          function isArray(a) {
            return isArrayImpl(a);
          }
          var startInlineScript = stringToPrecomputedChunk("<script>");
          var endInlineScript = stringToPrecomputedChunk("</script>");
          var startScriptSrc = stringToPrecomputedChunk('<script src="');
          var startModuleSrc = stringToPrecomputedChunk(
            '<script type="module" src="'
          );
          var endAsyncScript = stringToPrecomputedChunk('" async=""></script>');
          function escapeBootstrapScriptContent(scriptText) {
            {
              checkHtmlStringCoercion(scriptText);
            }
            return ("" + scriptText).replace(scriptRegex, scriptReplacer);
          }
          var scriptRegex = /(<\/|<)(s)(cript)/gi;
          var scriptReplacer = function (match, prefix2, s, suffix) {
            return "" + prefix2 + (s === "s" ? "\\u0073" : "\\u0053") + suffix;
          };
          function createResponseState(
            identifierPrefix,
            nonce,
            bootstrapScriptContent,
            bootstrapScripts,
            bootstrapModules
          ) {
            var idPrefix = identifierPrefix === void 0 ? "" : identifierPrefix;
            var inlineScriptWithNonce =
              nonce === void 0
                ? startInlineScript
                : stringToPrecomputedChunk(
                    '<script nonce="' + escapeTextForBrowser(nonce) + '">'
                  );
            var bootstrapChunks = [];
            if (bootstrapScriptContent !== void 0) {
              bootstrapChunks.push(
                inlineScriptWithNonce,
                stringToChunk(
                  escapeBootstrapScriptContent(bootstrapScriptContent)
                ),
                endInlineScript
              );
            }
            if (bootstrapScripts !== void 0) {
              for (var i = 0; i < bootstrapScripts.length; i++) {
                bootstrapChunks.push(
                  startScriptSrc,
                  stringToChunk(escapeTextForBrowser(bootstrapScripts[i])),
                  endAsyncScript
                );
              }
            }
            if (bootstrapModules !== void 0) {
              for (var _i = 0; _i < bootstrapModules.length; _i++) {
                bootstrapChunks.push(
                  startModuleSrc,
                  stringToChunk(escapeTextForBrowser(bootstrapModules[_i])),
                  endAsyncScript
                );
              }
            }
            return {
              bootstrapChunks,
              startInlineScript: inlineScriptWithNonce,
              placeholderPrefix: stringToPrecomputedChunk(idPrefix + "P:"),
              segmentPrefix: stringToPrecomputedChunk(idPrefix + "S:"),
              boundaryPrefix: idPrefix + "B:",
              idPrefix,
              nextSuspenseID: 0,
              sentCompleteSegmentFunction: false,
              sentCompleteBoundaryFunction: false,
              sentClientRenderFunction: false,
            };
          }
          var ROOT_HTML_MODE = 0;
          var HTML_MODE = 1;
          var SVG_MODE = 2;
          var MATHML_MODE = 3;
          var HTML_TABLE_MODE = 4;
          var HTML_TABLE_BODY_MODE = 5;
          var HTML_TABLE_ROW_MODE = 6;
          var HTML_COLGROUP_MODE = 7;
          function createFormatContext(insertionMode, selectedValue) {
            return {
              insertionMode,
              selectedValue,
            };
          }
          function getChildFormatContext(parentContext, type, props) {
            switch (type) {
              case "select":
                return createFormatContext(
                  HTML_MODE,
                  props.value != null ? props.value : props.defaultValue
                );
              case "svg":
                return createFormatContext(SVG_MODE, null);
              case "math":
                return createFormatContext(MATHML_MODE, null);
              case "foreignObject":
                return createFormatContext(HTML_MODE, null);
              case "table":
                return createFormatContext(HTML_TABLE_MODE, null);
              case "thead":
              case "tbody":
              case "tfoot":
                return createFormatContext(HTML_TABLE_BODY_MODE, null);
              case "colgroup":
                return createFormatContext(HTML_COLGROUP_MODE, null);
              case "tr":
                return createFormatContext(HTML_TABLE_ROW_MODE, null);
            }
            if (parentContext.insertionMode >= HTML_TABLE_MODE) {
              return createFormatContext(HTML_MODE, null);
            }
            if (parentContext.insertionMode === ROOT_HTML_MODE) {
              return createFormatContext(HTML_MODE, null);
            }
            return parentContext;
          }
          var UNINITIALIZED_SUSPENSE_BOUNDARY_ID = null;
          function assignSuspenseBoundaryID(responseState) {
            var generatedID = responseState.nextSuspenseID++;
            return stringToPrecomputedChunk(
              responseState.boundaryPrefix + generatedID.toString(16)
            );
          }
          function makeId(responseState, treeId, localId) {
            var idPrefix = responseState.idPrefix;
            var id = ":" + idPrefix + "R" + treeId;
            if (localId > 0) {
              id += "H" + localId.toString(32);
            }
            return id + ":";
          }
          function encodeHTMLTextNode(text) {
            return escapeTextForBrowser(text);
          }
          var textSeparator = stringToPrecomputedChunk("<!-- -->");
          function pushTextInstance(target, text, responseState, textEmbedded) {
            if (text === "") {
              return textEmbedded;
            }
            if (textEmbedded) {
              target.push(textSeparator);
            }
            target.push(stringToChunk(encodeHTMLTextNode(text)));
            return true;
          }
          function pushSegmentFinale(
            target,
            responseState,
            lastPushedText,
            textEmbedded
          ) {
            if (lastPushedText && textEmbedded) {
              target.push(textSeparator);
            }
          }
          var styleNameCache = /* @__PURE__ */ new Map();
          function processStyleName(styleName) {
            var chunk = styleNameCache.get(styleName);
            if (chunk !== void 0) {
              return chunk;
            }
            var result = stringToPrecomputedChunk(
              escapeTextForBrowser(hyphenateStyleName(styleName))
            );
            styleNameCache.set(styleName, result);
            return result;
          }
          var styleAttributeStart = stringToPrecomputedChunk(' style="');
          var styleAssign = stringToPrecomputedChunk(":");
          var styleSeparator = stringToPrecomputedChunk(";");
          function pushStyle(target, responseState, style) {
            if (typeof style !== "object") {
              throw new Error(
                "The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX."
              );
            }
            var isFirst = true;
            for (var styleName in style) {
              if (!hasOwnProperty.call(style, styleName)) {
                continue;
              }
              var styleValue = style[styleName];
              if (
                styleValue == null ||
                typeof styleValue === "boolean" ||
                styleValue === ""
              ) {
                continue;
              }
              var nameChunk = void 0;
              var valueChunk = void 0;
              var isCustomProperty = styleName.indexOf("--") === 0;
              if (isCustomProperty) {
                nameChunk = stringToChunk(escapeTextForBrowser(styleName));
                {
                  checkCSSPropertyStringCoercion(styleValue, styleName);
                }
                valueChunk = stringToChunk(
                  escapeTextForBrowser(("" + styleValue).trim())
                );
              } else {
                {
                  warnValidStyle$1(styleName, styleValue);
                }
                nameChunk = processStyleName(styleName);
                if (typeof styleValue === "number") {
                  if (
                    styleValue !== 0 &&
                    !hasOwnProperty.call(isUnitlessNumber, styleName)
                  ) {
                    valueChunk = stringToChunk(styleValue + "px");
                  } else {
                    valueChunk = stringToChunk("" + styleValue);
                  }
                } else {
                  {
                    checkCSSPropertyStringCoercion(styleValue, styleName);
                  }
                  valueChunk = stringToChunk(
                    escapeTextForBrowser(("" + styleValue).trim())
                  );
                }
              }
              if (isFirst) {
                isFirst = false;
                target.push(
                  styleAttributeStart,
                  nameChunk,
                  styleAssign,
                  valueChunk
                );
              } else {
                target.push(styleSeparator, nameChunk, styleAssign, valueChunk);
              }
            }
            if (!isFirst) {
              target.push(attributeEnd);
            }
          }
          var attributeSeparator = stringToPrecomputedChunk(" ");
          var attributeAssign = stringToPrecomputedChunk('="');
          var attributeEnd = stringToPrecomputedChunk('"');
          var attributeEmptyString = stringToPrecomputedChunk('=""');
          function pushAttribute(target, responseState, name, value) {
            switch (name) {
              case "style": {
                pushStyle(target, responseState, value);
                return;
              }
              case "defaultValue":
              case "defaultChecked":
              case "innerHTML":
              case "suppressContentEditableWarning":
              case "suppressHydrationWarning":
                return;
            }
            if (
              name.length > 2 &&
              (name[0] === "o" || name[0] === "O") &&
              (name[1] === "n" || name[1] === "N")
            ) {
              return;
            }
            var propertyInfo = getPropertyInfo(name);
            if (propertyInfo !== null) {
              switch (typeof value) {
                case "function":
                case "symbol":
                  return;
                case "boolean": {
                  if (!propertyInfo.acceptsBooleans) {
                    return;
                  }
                }
              }
              var attributeName = propertyInfo.attributeName;
              var attributeNameChunk = stringToChunk(attributeName);
              switch (propertyInfo.type) {
                case BOOLEAN:
                  if (value) {
                    target.push(
                      attributeSeparator,
                      attributeNameChunk,
                      attributeEmptyString
                    );
                  }
                  return;
                case OVERLOADED_BOOLEAN:
                  if (value === true) {
                    target.push(
                      attributeSeparator,
                      attributeNameChunk,
                      attributeEmptyString
                    );
                  } else if (value === false);
                  else {
                    target.push(
                      attributeSeparator,
                      attributeNameChunk,
                      attributeAssign,
                      stringToChunk(escapeTextForBrowser(value)),
                      attributeEnd
                    );
                  }
                  return;
                case NUMERIC:
                  if (!isNaN(value)) {
                    target.push(
                      attributeSeparator,
                      attributeNameChunk,
                      attributeAssign,
                      stringToChunk(escapeTextForBrowser(value)),
                      attributeEnd
                    );
                  }
                  break;
                case POSITIVE_NUMERIC:
                  if (!isNaN(value) && value >= 1) {
                    target.push(
                      attributeSeparator,
                      attributeNameChunk,
                      attributeAssign,
                      stringToChunk(escapeTextForBrowser(value)),
                      attributeEnd
                    );
                  }
                  break;
                default:
                  if (propertyInfo.sanitizeURL) {
                    {
                      checkAttributeStringCoercion(value, attributeName);
                    }
                    value = "" + value;
                    sanitizeURL(value);
                  }
                  target.push(
                    attributeSeparator,
                    attributeNameChunk,
                    attributeAssign,
                    stringToChunk(escapeTextForBrowser(value)),
                    attributeEnd
                  );
              }
            } else if (isAttributeNameSafe(name)) {
              switch (typeof value) {
                case "function":
                case "symbol":
                  return;
                case "boolean": {
                  var prefix2 = name.toLowerCase().slice(0, 5);
                  if (prefix2 !== "data-" && prefix2 !== "aria-") {
                    return;
                  }
                }
              }
              target.push(
                attributeSeparator,
                stringToChunk(name),
                attributeAssign,
                stringToChunk(escapeTextForBrowser(value)),
                attributeEnd
              );
            }
          }
          var endOfStartTag = stringToPrecomputedChunk(">");
          var endOfStartTagSelfClosing = stringToPrecomputedChunk("/>");
          function pushInnerHTML(target, innerHTML, children) {
            if (innerHTML != null) {
              if (children != null) {
                throw new Error(
                  "Can only set one of `children` or `props.dangerouslySetInnerHTML`."
                );
              }
              if (typeof innerHTML !== "object" || !("__html" in innerHTML)) {
                throw new Error(
                  "`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information."
                );
              }
              var html = innerHTML.__html;
              if (html !== null && html !== void 0) {
                {
                  checkHtmlStringCoercion(html);
                }
                target.push(stringToChunk("" + html));
              }
            }
          }
          var didWarnDefaultInputValue = false;
          var didWarnDefaultChecked = false;
          var didWarnDefaultSelectValue = false;
          var didWarnDefaultTextareaValue = false;
          var didWarnInvalidOptionChildren = false;
          var didWarnInvalidOptionInnerHTML = false;
          var didWarnSelectedSetOnOption = false;
          function checkSelectProp(props, propName) {
            {
              var value = props[propName];
              if (value != null) {
                var array = isArray(value);
                if (props.multiple && !array) {
                  error(
                    "The `%s` prop supplied to <select> must be an array if `multiple` is true.",
                    propName
                  );
                } else if (!props.multiple && array) {
                  error(
                    "The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.",
                    propName
                  );
                }
              }
            }
          }
          function pushStartSelect(target, props, responseState) {
            {
              checkControlledValueProps("select", props);
              checkSelectProp(props, "value");
              checkSelectProp(props, "defaultValue");
              if (
                props.value !== void 0 &&
                props.defaultValue !== void 0 &&
                !didWarnDefaultSelectValue
              ) {
                error(
                  "Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components"
                );
                didWarnDefaultSelectValue = true;
              }
            }
            target.push(startChunkForTag("select"));
            var children = null;
            var innerHTML = null;
            for (var propKey in props) {
              if (hasOwnProperty.call(props, propKey)) {
                var propValue = props[propKey];
                if (propValue == null) {
                  continue;
                }
                switch (propKey) {
                  case "children":
                    children = propValue;
                    break;
                  case "dangerouslySetInnerHTML":
                    innerHTML = propValue;
                    break;
                  case "defaultValue":
                  case "value":
                    break;
                  default:
                    pushAttribute(target, responseState, propKey, propValue);
                    break;
                }
              }
            }
            target.push(endOfStartTag);
            pushInnerHTML(target, innerHTML, children);
            return children;
          }
          function flattenOptionChildren(children) {
            var content = "";
            React.Children.forEach(children, function (child) {
              if (child == null) {
                return;
              }
              content += child;
              {
                if (
                  !didWarnInvalidOptionChildren &&
                  typeof child !== "string" &&
                  typeof child !== "number"
                ) {
                  didWarnInvalidOptionChildren = true;
                  error(
                    "Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>."
                  );
                }
              }
            });
            return content;
          }
          var selectedMarkerAttribute =
            stringToPrecomputedChunk(' selected=""');
          function pushStartOption(
            target,
            props,
            responseState,
            formatContext
          ) {
            var selectedValue = formatContext.selectedValue;
            target.push(startChunkForTag("option"));
            var children = null;
            var value = null;
            var selected = null;
            var innerHTML = null;
            for (var propKey in props) {
              if (hasOwnProperty.call(props, propKey)) {
                var propValue = props[propKey];
                if (propValue == null) {
                  continue;
                }
                switch (propKey) {
                  case "children":
                    children = propValue;
                    break;
                  case "selected":
                    selected = propValue;
                    {
                      if (!didWarnSelectedSetOnOption) {
                        error(
                          "Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>."
                        );
                        didWarnSelectedSetOnOption = true;
                      }
                    }
                    break;
                  case "dangerouslySetInnerHTML":
                    innerHTML = propValue;
                    break;
                  case "value":
                    value = propValue;
                  default:
                    pushAttribute(target, responseState, propKey, propValue);
                    break;
                }
              }
            }
            if (selectedValue != null) {
              var stringValue;
              if (value !== null) {
                {
                  checkAttributeStringCoercion(value, "value");
                }
                stringValue = "" + value;
              } else {
                {
                  if (innerHTML !== null) {
                    if (!didWarnInvalidOptionInnerHTML) {
                      didWarnInvalidOptionInnerHTML = true;
                      error(
                        "Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected."
                      );
                    }
                  }
                }
                stringValue = flattenOptionChildren(children);
              }
              if (isArray(selectedValue)) {
                for (var i = 0; i < selectedValue.length; i++) {
                  {
                    checkAttributeStringCoercion(selectedValue[i], "value");
                  }
                  var v = "" + selectedValue[i];
                  if (v === stringValue) {
                    target.push(selectedMarkerAttribute);
                    break;
                  }
                }
              } else {
                {
                  checkAttributeStringCoercion(selectedValue, "select.value");
                }
                if ("" + selectedValue === stringValue) {
                  target.push(selectedMarkerAttribute);
                }
              }
            } else if (selected) {
              target.push(selectedMarkerAttribute);
            }
            target.push(endOfStartTag);
            pushInnerHTML(target, innerHTML, children);
            return children;
          }
          function pushInput(target, props, responseState) {
            {
              checkControlledValueProps("input", props);
              if (
                props.checked !== void 0 &&
                props.defaultChecked !== void 0 &&
                !didWarnDefaultChecked
              ) {
                error(
                  "%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components",
                  "A component",
                  props.type
                );
                didWarnDefaultChecked = true;
              }
              if (
                props.value !== void 0 &&
                props.defaultValue !== void 0 &&
                !didWarnDefaultInputValue
              ) {
                error(
                  "%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components",
                  "A component",
                  props.type
                );
                didWarnDefaultInputValue = true;
              }
            }
            target.push(startChunkForTag("input"));
            var value = null;
            var defaultValue = null;
            var checked = null;
            var defaultChecked = null;
            for (var propKey in props) {
              if (hasOwnProperty.call(props, propKey)) {
                var propValue = props[propKey];
                if (propValue == null) {
                  continue;
                }
                switch (propKey) {
                  case "children":
                  case "dangerouslySetInnerHTML":
                    throw new Error(
                      "input is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`."
                    );
                  case "defaultChecked":
                    defaultChecked = propValue;
                    break;
                  case "defaultValue":
                    defaultValue = propValue;
                    break;
                  case "checked":
                    checked = propValue;
                    break;
                  case "value":
                    value = propValue;
                    break;
                  default:
                    pushAttribute(target, responseState, propKey, propValue);
                    break;
                }
              }
            }
            if (checked !== null) {
              pushAttribute(target, responseState, "checked", checked);
            } else if (defaultChecked !== null) {
              pushAttribute(target, responseState, "checked", defaultChecked);
            }
            if (value !== null) {
              pushAttribute(target, responseState, "value", value);
            } else if (defaultValue !== null) {
              pushAttribute(target, responseState, "value", defaultValue);
            }
            target.push(endOfStartTagSelfClosing);
            return null;
          }
          function pushStartTextArea(target, props, responseState) {
            {
              checkControlledValueProps("textarea", props);
              if (
                props.value !== void 0 &&
                props.defaultValue !== void 0 &&
                !didWarnDefaultTextareaValue
              ) {
                error(
                  "Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components"
                );
                didWarnDefaultTextareaValue = true;
              }
            }
            target.push(startChunkForTag("textarea"));
            var value = null;
            var defaultValue = null;
            var children = null;
            for (var propKey in props) {
              if (hasOwnProperty.call(props, propKey)) {
                var propValue = props[propKey];
                if (propValue == null) {
                  continue;
                }
                switch (propKey) {
                  case "children":
                    children = propValue;
                    break;
                  case "value":
                    value = propValue;
                    break;
                  case "defaultValue":
                    defaultValue = propValue;
                    break;
                  case "dangerouslySetInnerHTML":
                    throw new Error(
                      "`dangerouslySetInnerHTML` does not make sense on <textarea>."
                    );
                  default:
                    pushAttribute(target, responseState, propKey, propValue);
                    break;
                }
              }
            }
            if (value === null && defaultValue !== null) {
              value = defaultValue;
            }
            target.push(endOfStartTag);
            if (children != null) {
              {
                error(
                  "Use the `defaultValue` or `value` props instead of setting children on <textarea>."
                );
              }
              if (value != null) {
                throw new Error(
                  "If you supply `defaultValue` on a <textarea>, do not pass children."
                );
              }
              if (isArray(children)) {
                if (children.length > 1) {
                  throw new Error(
                    "<textarea> can only have at most one child."
                  );
                }
                {
                  checkHtmlStringCoercion(children[0]);
                }
                value = "" + children[0];
              }
              {
                checkHtmlStringCoercion(children);
              }
              value = "" + children;
            }
            if (typeof value === "string" && value[0] === "\n") {
              target.push(leadingNewline);
            }
            if (value !== null) {
              {
                checkAttributeStringCoercion(value, "value");
              }
              target.push(stringToChunk(encodeHTMLTextNode("" + value)));
            }
            return null;
          }
          function pushSelfClosing(target, props, tag, responseState) {
            target.push(startChunkForTag(tag));
            for (var propKey in props) {
              if (hasOwnProperty.call(props, propKey)) {
                var propValue = props[propKey];
                if (propValue == null) {
                  continue;
                }
                switch (propKey) {
                  case "children":
                  case "dangerouslySetInnerHTML":
                    throw new Error(
                      tag +
                        " is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`."
                    );
                  default:
                    pushAttribute(target, responseState, propKey, propValue);
                    break;
                }
              }
            }
            target.push(endOfStartTagSelfClosing);
            return null;
          }
          function pushStartMenuItem(target, props, responseState) {
            target.push(startChunkForTag("menuitem"));
            for (var propKey in props) {
              if (hasOwnProperty.call(props, propKey)) {
                var propValue = props[propKey];
                if (propValue == null) {
                  continue;
                }
                switch (propKey) {
                  case "children":
                  case "dangerouslySetInnerHTML":
                    throw new Error(
                      "menuitems cannot have `children` nor `dangerouslySetInnerHTML`."
                    );
                  default:
                    pushAttribute(target, responseState, propKey, propValue);
                    break;
                }
              }
            }
            target.push(endOfStartTag);
            return null;
          }
          function pushStartTitle(target, props, responseState) {
            target.push(startChunkForTag("title"));
            var children = null;
            for (var propKey in props) {
              if (hasOwnProperty.call(props, propKey)) {
                var propValue = props[propKey];
                if (propValue == null) {
                  continue;
                }
                switch (propKey) {
                  case "children":
                    children = propValue;
                    break;
                  case "dangerouslySetInnerHTML":
                    throw new Error(
                      "`dangerouslySetInnerHTML` does not make sense on <title>."
                    );
                  default:
                    pushAttribute(target, responseState, propKey, propValue);
                    break;
                }
              }
            }
            target.push(endOfStartTag);
            {
              var child =
                Array.isArray(children) && children.length < 2
                  ? children[0] || null
                  : children;
              if (Array.isArray(children) && children.length > 1) {
                error(
                  "A title element received an array with more than 1 element as children. In browsers title Elements can only have Text Nodes as children. If the children being rendered output more than a single text node in aggregate the browser will display markup and comments as text in the title and hydration will likely fail and fall back to client rendering"
                );
              } else if (child != null && child.$$typeof != null) {
                error(
                  "A title element received a React element for children. In the browser title Elements can only have Text Nodes as children. If the children being rendered output more than a single text node in aggregate the browser will display markup and comments as text in the title and hydration will likely fail and fall back to client rendering"
                );
              } else if (
                child != null &&
                typeof child !== "string" &&
                typeof child !== "number"
              ) {
                error(
                  "A title element received a value that was not a string or number for children. In the browser title Elements can only have Text Nodes as children. If the children being rendered output more than a single text node in aggregate the browser will display markup and comments as text in the title and hydration will likely fail and fall back to client rendering"
                );
              }
            }
            return children;
          }
          function pushStartGenericElement(target, props, tag, responseState) {
            target.push(startChunkForTag(tag));
            var children = null;
            var innerHTML = null;
            for (var propKey in props) {
              if (hasOwnProperty.call(props, propKey)) {
                var propValue = props[propKey];
                if (propValue == null) {
                  continue;
                }
                switch (propKey) {
                  case "children":
                    children = propValue;
                    break;
                  case "dangerouslySetInnerHTML":
                    innerHTML = propValue;
                    break;
                  default:
                    pushAttribute(target, responseState, propKey, propValue);
                    break;
                }
              }
            }
            target.push(endOfStartTag);
            pushInnerHTML(target, innerHTML, children);
            if (typeof children === "string") {
              target.push(stringToChunk(encodeHTMLTextNode(children)));
              return null;
            }
            return children;
          }
          function pushStartCustomElement(target, props, tag, responseState) {
            target.push(startChunkForTag(tag));
            var children = null;
            var innerHTML = null;
            for (var propKey in props) {
              if (hasOwnProperty.call(props, propKey)) {
                var propValue = props[propKey];
                if (propValue == null) {
                  continue;
                }
                switch (propKey) {
                  case "children":
                    children = propValue;
                    break;
                  case "dangerouslySetInnerHTML":
                    innerHTML = propValue;
                    break;
                  case "style":
                    pushStyle(target, responseState, propValue);
                    break;
                  case "suppressContentEditableWarning":
                  case "suppressHydrationWarning":
                    break;
                  default:
                    if (
                      isAttributeNameSafe(propKey) &&
                      typeof propValue !== "function" &&
                      typeof propValue !== "symbol"
                    ) {
                      target.push(
                        attributeSeparator,
                        stringToChunk(propKey),
                        attributeAssign,
                        stringToChunk(escapeTextForBrowser(propValue)),
                        attributeEnd
                      );
                    }
                    break;
                }
              }
            }
            target.push(endOfStartTag);
            pushInnerHTML(target, innerHTML, children);
            return children;
          }
          var leadingNewline = stringToPrecomputedChunk("\n");
          function pushStartPreformattedElement(
            target,
            props,
            tag,
            responseState
          ) {
            target.push(startChunkForTag(tag));
            var children = null;
            var innerHTML = null;
            for (var propKey in props) {
              if (hasOwnProperty.call(props, propKey)) {
                var propValue = props[propKey];
                if (propValue == null) {
                  continue;
                }
                switch (propKey) {
                  case "children":
                    children = propValue;
                    break;
                  case "dangerouslySetInnerHTML":
                    innerHTML = propValue;
                    break;
                  default:
                    pushAttribute(target, responseState, propKey, propValue);
                    break;
                }
              }
            }
            target.push(endOfStartTag);
            if (innerHTML != null) {
              if (children != null) {
                throw new Error(
                  "Can only set one of `children` or `props.dangerouslySetInnerHTML`."
                );
              }
              if (typeof innerHTML !== "object" || !("__html" in innerHTML)) {
                throw new Error(
                  "`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information."
                );
              }
              var html = innerHTML.__html;
              if (html !== null && html !== void 0) {
                if (
                  typeof html === "string" &&
                  html.length > 0 &&
                  html[0] === "\n"
                ) {
                  target.push(leadingNewline, stringToChunk(html));
                } else {
                  {
                    checkHtmlStringCoercion(html);
                  }
                  target.push(stringToChunk("" + html));
                }
              }
            }
            if (typeof children === "string" && children[0] === "\n") {
              target.push(leadingNewline);
            }
            return children;
          }
          var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/;
          var validatedTagCache = /* @__PURE__ */ new Map();
          function startChunkForTag(tag) {
            var tagStartChunk = validatedTagCache.get(tag);
            if (tagStartChunk === void 0) {
              if (!VALID_TAG_REGEX.test(tag)) {
                throw new Error("Invalid tag: " + tag);
              }
              tagStartChunk = stringToPrecomputedChunk("<" + tag);
              validatedTagCache.set(tag, tagStartChunk);
            }
            return tagStartChunk;
          }
          var DOCTYPE = stringToPrecomputedChunk("<!DOCTYPE html>");
          function pushStartInstance(
            target,
            type,
            props,
            responseState,
            formatContext
          ) {
            {
              validateProperties(type, props);
              validateProperties$1(type, props);
              validateProperties$2(type, props, null);
              if (
                !props.suppressContentEditableWarning &&
                props.contentEditable &&
                props.children != null
              ) {
                error(
                  "A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional."
                );
              }
              if (
                formatContext.insertionMode !== SVG_MODE &&
                formatContext.insertionMode !== MATHML_MODE
              ) {
                if (
                  type.indexOf("-") === -1 &&
                  typeof props.is !== "string" &&
                  type.toLowerCase() !== type
                ) {
                  error(
                    "<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.",
                    type
                  );
                }
              }
            }
            switch (type) {
              case "select":
                return pushStartSelect(target, props, responseState);
              case "option":
                return pushStartOption(
                  target,
                  props,
                  responseState,
                  formatContext
                );
              case "textarea":
                return pushStartTextArea(target, props, responseState);
              case "input":
                return pushInput(target, props, responseState);
              case "menuitem":
                return pushStartMenuItem(target, props, responseState);
              case "title":
                return pushStartTitle(target, props, responseState);
              case "listing":
              case "pre": {
                return pushStartPreformattedElement(
                  target,
                  props,
                  type,
                  responseState
                );
              }
              case "area":
              case "base":
              case "br":
              case "col":
              case "embed":
              case "hr":
              case "img":
              case "keygen":
              case "link":
              case "meta":
              case "param":
              case "source":
              case "track":
              case "wbr": {
                return pushSelfClosing(target, props, type, responseState);
              }
              case "annotation-xml":
              case "color-profile":
              case "font-face":
              case "font-face-src":
              case "font-face-uri":
              case "font-face-format":
              case "font-face-name":
              case "missing-glyph": {
                return pushStartGenericElement(
                  target,
                  props,
                  type,
                  responseState
                );
              }
              case "html": {
                if (formatContext.insertionMode === ROOT_HTML_MODE) {
                  target.push(DOCTYPE);
                }
                return pushStartGenericElement(
                  target,
                  props,
                  type,
                  responseState
                );
              }
              default: {
                if (type.indexOf("-") === -1 && typeof props.is !== "string") {
                  return pushStartGenericElement(
                    target,
                    props,
                    type,
                    responseState
                  );
                } else {
                  return pushStartCustomElement(
                    target,
                    props,
                    type,
                    responseState
                  );
                }
              }
            }
          }
          var endTag1 = stringToPrecomputedChunk("</");
          var endTag2 = stringToPrecomputedChunk(">");
          function pushEndInstance(target, type, props) {
            switch (type) {
              case "area":
              case "base":
              case "br":
              case "col":
              case "embed":
              case "hr":
              case "img":
              case "input":
              case "keygen":
              case "link":
              case "meta":
              case "param":
              case "source":
              case "track":
              case "wbr": {
                break;
              }
              default: {
                target.push(endTag1, stringToChunk(type), endTag2);
              }
            }
          }
          function writeCompletedRoot(destination, responseState) {
            var bootstrapChunks = responseState.bootstrapChunks;
            var i = 0;
            for (; i < bootstrapChunks.length - 1; i++) {
              writeChunk(destination, bootstrapChunks[i]);
            }
            if (i < bootstrapChunks.length) {
              return writeChunkAndReturn(destination, bootstrapChunks[i]);
            }
            return true;
          }
          var placeholder1 = stringToPrecomputedChunk('<template id="');
          var placeholder2 = stringToPrecomputedChunk('"></template>');
          function writePlaceholder(destination, responseState, id) {
            writeChunk(destination, placeholder1);
            writeChunk(destination, responseState.placeholderPrefix);
            var formattedID = stringToChunk(id.toString(16));
            writeChunk(destination, formattedID);
            return writeChunkAndReturn(destination, placeholder2);
          }
          var startCompletedSuspenseBoundary =
            stringToPrecomputedChunk("<!--$-->");
          var startPendingSuspenseBoundary1 = stringToPrecomputedChunk(
            '<!--$?--><template id="'
          );
          var startPendingSuspenseBoundary2 =
            stringToPrecomputedChunk('"></template>');
          var startClientRenderedSuspenseBoundary =
            stringToPrecomputedChunk("<!--$!-->");
          var endSuspenseBoundary = stringToPrecomputedChunk("<!--/$-->");
          var clientRenderedSuspenseBoundaryError1 =
            stringToPrecomputedChunk("<template");
          var clientRenderedSuspenseBoundaryErrorAttrInterstitial =
            stringToPrecomputedChunk('"');
          var clientRenderedSuspenseBoundaryError1A =
            stringToPrecomputedChunk(' data-dgst="');
          var clientRenderedSuspenseBoundaryError1B =
            stringToPrecomputedChunk(' data-msg="');
          var clientRenderedSuspenseBoundaryError1C =
            stringToPrecomputedChunk(' data-stck="');
          var clientRenderedSuspenseBoundaryError2 =
            stringToPrecomputedChunk("></template>");
          function writeStartCompletedSuspenseBoundary(
            destination,
            responseState
          ) {
            return writeChunkAndReturn(
              destination,
              startCompletedSuspenseBoundary
            );
          }
          function writeStartPendingSuspenseBoundary(
            destination,
            responseState,
            id
          ) {
            writeChunk(destination, startPendingSuspenseBoundary1);
            if (id === null) {
              throw new Error(
                "An ID must have been assigned before we can complete the boundary."
              );
            }
            writeChunk(destination, id);
            return writeChunkAndReturn(
              destination,
              startPendingSuspenseBoundary2
            );
          }
          function writeStartClientRenderedSuspenseBoundary(
            destination,
            responseState,
            errorDigest,
            errorMesssage,
            errorComponentStack
          ) {
            var result;
            result = writeChunkAndReturn(
              destination,
              startClientRenderedSuspenseBoundary
            );
            writeChunk(destination, clientRenderedSuspenseBoundaryError1);
            if (errorDigest) {
              writeChunk(destination, clientRenderedSuspenseBoundaryError1A);
              writeChunk(
                destination,
                stringToChunk(escapeTextForBrowser(errorDigest))
              );
              writeChunk(
                destination,
                clientRenderedSuspenseBoundaryErrorAttrInterstitial
              );
            }
            {
              if (errorMesssage) {
                writeChunk(destination, clientRenderedSuspenseBoundaryError1B);
                writeChunk(
                  destination,
                  stringToChunk(escapeTextForBrowser(errorMesssage))
                );
                writeChunk(
                  destination,
                  clientRenderedSuspenseBoundaryErrorAttrInterstitial
                );
              }
              if (errorComponentStack) {
                writeChunk(destination, clientRenderedSuspenseBoundaryError1C);
                writeChunk(
                  destination,
                  stringToChunk(escapeTextForBrowser(errorComponentStack))
                );
                writeChunk(
                  destination,
                  clientRenderedSuspenseBoundaryErrorAttrInterstitial
                );
              }
            }
            result = writeChunkAndReturn(
              destination,
              clientRenderedSuspenseBoundaryError2
            );
            return result;
          }
          function writeEndCompletedSuspenseBoundary(
            destination,
            responseState
          ) {
            return writeChunkAndReturn(destination, endSuspenseBoundary);
          }
          function writeEndPendingSuspenseBoundary(destination, responseState) {
            return writeChunkAndReturn(destination, endSuspenseBoundary);
          }
          function writeEndClientRenderedSuspenseBoundary(
            destination,
            responseState
          ) {
            return writeChunkAndReturn(destination, endSuspenseBoundary);
          }
          var startSegmentHTML = stringToPrecomputedChunk('<div hidden id="');
          var startSegmentHTML2 = stringToPrecomputedChunk('">');
          var endSegmentHTML = stringToPrecomputedChunk("</div>");
          var startSegmentSVG = stringToPrecomputedChunk(
            '<svg aria-hidden="true" style="display:none" id="'
          );
          var startSegmentSVG2 = stringToPrecomputedChunk('">');
          var endSegmentSVG = stringToPrecomputedChunk("</svg>");
          var startSegmentMathML = stringToPrecomputedChunk(
            '<math aria-hidden="true" style="display:none" id="'
          );
          var startSegmentMathML2 = stringToPrecomputedChunk('">');
          var endSegmentMathML = stringToPrecomputedChunk("</math>");
          var startSegmentTable =
            stringToPrecomputedChunk('<table hidden id="');
          var startSegmentTable2 = stringToPrecomputedChunk('">');
          var endSegmentTable = stringToPrecomputedChunk("</table>");
          var startSegmentTableBody = stringToPrecomputedChunk(
            '<table hidden><tbody id="'
          );
          var startSegmentTableBody2 = stringToPrecomputedChunk('">');
          var endSegmentTableBody =
            stringToPrecomputedChunk("</tbody></table>");
          var startSegmentTableRow = stringToPrecomputedChunk(
            '<table hidden><tr id="'
          );
          var startSegmentTableRow2 = stringToPrecomputedChunk('">');
          var endSegmentTableRow = stringToPrecomputedChunk("</tr></table>");
          var startSegmentColGroup = stringToPrecomputedChunk(
            '<table hidden><colgroup id="'
          );
          var startSegmentColGroup2 = stringToPrecomputedChunk('">');
          var endSegmentColGroup = stringToPrecomputedChunk(
            "</colgroup></table>"
          );
          function writeStartSegment(
            destination,
            responseState,
            formatContext,
            id
          ) {
            switch (formatContext.insertionMode) {
              case ROOT_HTML_MODE:
              case HTML_MODE: {
                writeChunk(destination, startSegmentHTML);
                writeChunk(destination, responseState.segmentPrefix);
                writeChunk(destination, stringToChunk(id.toString(16)));
                return writeChunkAndReturn(destination, startSegmentHTML2);
              }
              case SVG_MODE: {
                writeChunk(destination, startSegmentSVG);
                writeChunk(destination, responseState.segmentPrefix);
                writeChunk(destination, stringToChunk(id.toString(16)));
                return writeChunkAndReturn(destination, startSegmentSVG2);
              }
              case MATHML_MODE: {
                writeChunk(destination, startSegmentMathML);
                writeChunk(destination, responseState.segmentPrefix);
                writeChunk(destination, stringToChunk(id.toString(16)));
                return writeChunkAndReturn(destination, startSegmentMathML2);
              }
              case HTML_TABLE_MODE: {
                writeChunk(destination, startSegmentTable);
                writeChunk(destination, responseState.segmentPrefix);
                writeChunk(destination, stringToChunk(id.toString(16)));
                return writeChunkAndReturn(destination, startSegmentTable2);
              }
              case HTML_TABLE_BODY_MODE: {
                writeChunk(destination, startSegmentTableBody);
                writeChunk(destination, responseState.segmentPrefix);
                writeChunk(destination, stringToChunk(id.toString(16)));
                return writeChunkAndReturn(destination, startSegmentTableBody2);
              }
              case HTML_TABLE_ROW_MODE: {
                writeChunk(destination, startSegmentTableRow);
                writeChunk(destination, responseState.segmentPrefix);
                writeChunk(destination, stringToChunk(id.toString(16)));
                return writeChunkAndReturn(destination, startSegmentTableRow2);
              }
              case HTML_COLGROUP_MODE: {
                writeChunk(destination, startSegmentColGroup);
                writeChunk(destination, responseState.segmentPrefix);
                writeChunk(destination, stringToChunk(id.toString(16)));
                return writeChunkAndReturn(destination, startSegmentColGroup2);
              }
              default: {
                throw new Error(
                  "Unknown insertion mode. This is a bug in React."
                );
              }
            }
          }
          function writeEndSegment(destination, formatContext) {
            switch (formatContext.insertionMode) {
              case ROOT_HTML_MODE:
              case HTML_MODE: {
                return writeChunkAndReturn(destination, endSegmentHTML);
              }
              case SVG_MODE: {
                return writeChunkAndReturn(destination, endSegmentSVG);
              }
              case MATHML_MODE: {
                return writeChunkAndReturn(destination, endSegmentMathML);
              }
              case HTML_TABLE_MODE: {
                return writeChunkAndReturn(destination, endSegmentTable);
              }
              case HTML_TABLE_BODY_MODE: {
                return writeChunkAndReturn(destination, endSegmentTableBody);
              }
              case HTML_TABLE_ROW_MODE: {
                return writeChunkAndReturn(destination, endSegmentTableRow);
              }
              case HTML_COLGROUP_MODE: {
                return writeChunkAndReturn(destination, endSegmentColGroup);
              }
              default: {
                throw new Error(
                  "Unknown insertion mode. This is a bug in React."
                );
              }
            }
          }
          var completeSegmentFunction =
            "function $RS(a,b){a=document.getElementById(a);b=document.getElementById(b);for(a.parentNode.removeChild(a);a.firstChild;)b.parentNode.insertBefore(a.firstChild,b);b.parentNode.removeChild(b)}";
          var completeBoundaryFunction =
            'function $RC(a,b){a=document.getElementById(a);b=document.getElementById(b);b.parentNode.removeChild(b);if(a){a=a.previousSibling;var f=a.parentNode,c=a.nextSibling,e=0;do{if(c&&8===c.nodeType){var d=c.data;if("/$"===d)if(0===e)break;else e--;else"$"!==d&&"$?"!==d&&"$!"!==d||e++}d=c.nextSibling;f.removeChild(c);c=d}while(c);for(;b.firstChild;)f.insertBefore(b.firstChild,c);a.data="$";a._reactRetry&&a._reactRetry()}}';
          var clientRenderFunction =
            'function $RX(b,c,d,e){var a=document.getElementById(b);a&&(b=a.previousSibling,b.data="$!",a=a.dataset,c&&(a.dgst=c),d&&(a.msg=d),e&&(a.stck=e),b._reactRetry&&b._reactRetry())}';
          var completeSegmentScript1Full = stringToPrecomputedChunk(
            completeSegmentFunction + ';$RS("'
          );
          var completeSegmentScript1Partial = stringToPrecomputedChunk('$RS("');
          var completeSegmentScript2 = stringToPrecomputedChunk('","');
          var completeSegmentScript3 = stringToPrecomputedChunk('")</script>');
          function writeCompletedSegmentInstruction(
            destination,
            responseState,
            contentSegmentID
          ) {
            writeChunk(destination, responseState.startInlineScript);
            if (!responseState.sentCompleteSegmentFunction) {
              responseState.sentCompleteSegmentFunction = true;
              writeChunk(destination, completeSegmentScript1Full);
            } else {
              writeChunk(destination, completeSegmentScript1Partial);
            }
            writeChunk(destination, responseState.segmentPrefix);
            var formattedID = stringToChunk(contentSegmentID.toString(16));
            writeChunk(destination, formattedID);
            writeChunk(destination, completeSegmentScript2);
            writeChunk(destination, responseState.placeholderPrefix);
            writeChunk(destination, formattedID);
            return writeChunkAndReturn(destination, completeSegmentScript3);
          }
          var completeBoundaryScript1Full = stringToPrecomputedChunk(
            completeBoundaryFunction + ';$RC("'
          );
          var completeBoundaryScript1Partial =
            stringToPrecomputedChunk('$RC("');
          var completeBoundaryScript2 = stringToPrecomputedChunk('","');
          var completeBoundaryScript3 = stringToPrecomputedChunk('")</script>');
          function writeCompletedBoundaryInstruction(
            destination,
            responseState,
            boundaryID,
            contentSegmentID
          ) {
            writeChunk(destination, responseState.startInlineScript);
            if (!responseState.sentCompleteBoundaryFunction) {
              responseState.sentCompleteBoundaryFunction = true;
              writeChunk(destination, completeBoundaryScript1Full);
            } else {
              writeChunk(destination, completeBoundaryScript1Partial);
            }
            if (boundaryID === null) {
              throw new Error(
                "An ID must have been assigned before we can complete the boundary."
              );
            }
            var formattedContentID = stringToChunk(
              contentSegmentID.toString(16)
            );
            writeChunk(destination, boundaryID);
            writeChunk(destination, completeBoundaryScript2);
            writeChunk(destination, responseState.segmentPrefix);
            writeChunk(destination, formattedContentID);
            return writeChunkAndReturn(destination, completeBoundaryScript3);
          }
          var clientRenderScript1Full = stringToPrecomputedChunk(
            clientRenderFunction + ';$RX("'
          );
          var clientRenderScript1Partial = stringToPrecomputedChunk('$RX("');
          var clientRenderScript1A = stringToPrecomputedChunk('"');
          var clientRenderScript2 = stringToPrecomputedChunk(")</script>");
          var clientRenderErrorScriptArgInterstitial =
            stringToPrecomputedChunk(",");
          function writeClientRenderBoundaryInstruction(
            destination,
            responseState,
            boundaryID,
            errorDigest,
            errorMessage,
            errorComponentStack
          ) {
            writeChunk(destination, responseState.startInlineScript);
            if (!responseState.sentClientRenderFunction) {
              responseState.sentClientRenderFunction = true;
              writeChunk(destination, clientRenderScript1Full);
            } else {
              writeChunk(destination, clientRenderScript1Partial);
            }
            if (boundaryID === null) {
              throw new Error(
                "An ID must have been assigned before we can complete the boundary."
              );
            }
            writeChunk(destination, boundaryID);
            writeChunk(destination, clientRenderScript1A);
            if (errorDigest || errorMessage || errorComponentStack) {
              writeChunk(destination, clientRenderErrorScriptArgInterstitial);
              writeChunk(
                destination,
                stringToChunk(
                  escapeJSStringsForInstructionScripts(errorDigest || "")
                )
              );
            }
            if (errorMessage || errorComponentStack) {
              writeChunk(destination, clientRenderErrorScriptArgInterstitial);
              writeChunk(
                destination,
                stringToChunk(
                  escapeJSStringsForInstructionScripts(errorMessage || "")
                )
              );
            }
            if (errorComponentStack) {
              writeChunk(destination, clientRenderErrorScriptArgInterstitial);
              writeChunk(
                destination,
                stringToChunk(
                  escapeJSStringsForInstructionScripts(errorComponentStack)
                )
              );
            }
            return writeChunkAndReturn(destination, clientRenderScript2);
          }
          var regexForJSStringsInScripts = /[<\u2028\u2029]/g;
          function escapeJSStringsForInstructionScripts(input) {
            var escaped = JSON.stringify(input);
            return escaped.replace(
              regexForJSStringsInScripts,
              function (match) {
                switch (match) {
                  case "<":
                    return "\\u003c";
                  case "\u2028":
                    return "\\u2028";
                  case "\u2029":
                    return "\\u2029";
                  default: {
                    throw new Error(
                      "escapeJSStringsForInstructionScripts encountered a match it does not know how to replace. this means the match regex and the replacement characters are no longer in sync. This is a bug in React"
                    );
                  }
                }
              }
            );
          }
          function createResponseState$1(
            generateStaticMarkup,
            identifierPrefix
          ) {
            var responseState = createResponseState(identifierPrefix, void 0);
            return {
              bootstrapChunks: responseState.bootstrapChunks,
              startInlineScript: responseState.startInlineScript,
              placeholderPrefix: responseState.placeholderPrefix,
              segmentPrefix: responseState.segmentPrefix,
              boundaryPrefix: responseState.boundaryPrefix,
              idPrefix: responseState.idPrefix,
              nextSuspenseID: responseState.nextSuspenseID,
              sentCompleteSegmentFunction:
                responseState.sentCompleteSegmentFunction,
              sentCompleteBoundaryFunction:
                responseState.sentCompleteBoundaryFunction,
              sentClientRenderFunction: responseState.sentClientRenderFunction,
              generateStaticMarkup,
            };
          }
          function createRootFormatContext() {
            return {
              insertionMode: HTML_MODE,
              selectedValue: null,
            };
          }
          function pushTextInstance$1(
            target,
            text,
            responseState,
            textEmbedded
          ) {
            if (responseState.generateStaticMarkup) {
              target.push(stringToChunk(escapeTextForBrowser(text)));
              return false;
            } else {
              return pushTextInstance(
                target,
                text,
                responseState,
                textEmbedded
              );
            }
          }
          function pushSegmentFinale$1(
            target,
            responseState,
            lastPushedText,
            textEmbedded
          ) {
            if (responseState.generateStaticMarkup) {
              return;
            } else {
              return pushSegmentFinale(
                target,
                responseState,
                lastPushedText,
                textEmbedded
              );
            }
          }
          function writeStartCompletedSuspenseBoundary$1(
            destination,
            responseState
          ) {
            if (responseState.generateStaticMarkup) {
              return true;
            }
            return writeStartCompletedSuspenseBoundary(destination);
          }
          function writeStartClientRenderedSuspenseBoundary$1(
            destination,
            responseState,
            errorDigest,
            errorMessage,
            errorComponentStack
          ) {
            if (responseState.generateStaticMarkup) {
              return true;
            }
            return writeStartClientRenderedSuspenseBoundary(
              destination,
              responseState,
              errorDigest,
              errorMessage,
              errorComponentStack
            );
          }
          function writeEndCompletedSuspenseBoundary$1(
            destination,
            responseState
          ) {
            if (responseState.generateStaticMarkup) {
              return true;
            }
            return writeEndCompletedSuspenseBoundary(destination);
          }
          function writeEndClientRenderedSuspenseBoundary$1(
            destination,
            responseState
          ) {
            if (responseState.generateStaticMarkup) {
              return true;
            }
            return writeEndClientRenderedSuspenseBoundary(destination);
          }
          var assign = Object.assign;
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_SCOPE_TYPE = Symbol.for("react.scope");
          var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for(
            "react.debug_trace_mode"
          );
          var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
          var REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED = Symbol.for(
            "react.default_value"
          );
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator =
              (MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL]) ||
              maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== ""
              ? wrapperName + "(" + functionName + ")"
              : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error(
                  "Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."
                );
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {}
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true,
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props,
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true,
                };
                Object.defineProperties(console, {
                  log: assign({}, props, {
                    value: prevLog,
                  }),
                  info: assign({}, props, {
                    value: prevInfo,
                  }),
                  warn: assign({}, props, {
                    value: prevWarn,
                  }),
                  error: assign({}, props, {
                    value: prevError,
                  }),
                  group: assign({}, props, {
                    value: prevGroup,
                  }),
                  groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed,
                  }),
                  groupEnd: assign({}, props, {
                    value: prevGroupEnd,
                  }),
                });
              }
              if (disabledDepth < 0) {
                error(
                  "disabledDepth fell below zero. This is a bug in React. Please file an issue."
                );
              }
            }
          }
          var ReactCurrentDispatcher =
            ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match = x.stack.trim().match(/\n( *(at )?)/);
                  prefix = (match && match[1]) || "";
                }
              }
              return "\n" + prefix + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function () {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function () {
                    throw Error();
                  },
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame =
                            "\n" + sampleLines[s].replace(" at new ", " at ");
                          if (
                            fn.displayName &&
                            _frame.includes("<anonymous>")
                          ) {
                            _frame = _frame.replace(
                              "<anonymous>",
                              fn.displayName
                            );
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name
              ? describeBuiltInComponentFrame(name)
              : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeClassComponentFrame(ctor, source, ownerFn) {
            {
              return describeNativeComponentFrame(ctor, true);
            }
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component) {
            var prototype = Component.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(
                  type,
                  shouldConstruct(type)
                );
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(
                    type.type,
                    source,
                    ownerFn
                  );
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(
                      init(payload),
                      source,
                      ownerFn
                    );
                  } catch (x) {}
                }
              }
            }
            return "";
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame =
            ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(
                  element.type,
                  element._source,
                  owner ? owner.type : null
                );
                ReactDebugCurrentFrame.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(
            typeSpecs,
            values,
            location,
            componentName,
            element
          ) {
            {
              var has = Function.call.bind(hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error(
                        (componentName || "React class") +
                          ": " +
                          location +
                          " type `" +
                          typeSpecName +
                          "` is invalid; it must be a function, usually from the `prop-types` package, but received `" +
                          typeof typeSpecs[typeSpecName] +
                          "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`."
                      );
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](
                      values,
                      typeSpecName,
                      componentName,
                      location,
                      null,
                      "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"
                    );
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error(
                      "%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).",
                      componentName || "React class",
                      location,
                      typeSpecName,
                      typeof error$1
                    );
                    setCurrentlyValidatingElement(null);
                  }
                  if (
                    error$1 instanceof Error &&
                    !(error$1.message in loggedTypeFailures)
                  ) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var warnedAboutMissingGetChildContext;
          {
            warnedAboutMissingGetChildContext = {};
          }
          var emptyContextObject = {};
          {
            Object.freeze(emptyContextObject);
          }
          function getMaskedContext(type, unmaskedContext) {
            {
              var contextTypes = type.contextTypes;
              if (!contextTypes) {
                return emptyContextObject;
              }
              var context = {};
              for (var key in contextTypes) {
                context[key] = unmaskedContext[key];
              }
              {
                var name = getComponentNameFromType(type) || "Unknown";
                checkPropTypes(contextTypes, context, "context", name);
              }
              return context;
            }
          }
          function processChildContext(
            instance,
            type,
            parentContext,
            childContextTypes
          ) {
            {
              if (typeof instance.getChildContext !== "function") {
                {
                  var componentName =
                    getComponentNameFromType(type) || "Unknown";
                  if (!warnedAboutMissingGetChildContext[componentName]) {
                    warnedAboutMissingGetChildContext[componentName] = true;
                    error(
                      "%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.",
                      componentName,
                      componentName
                    );
                  }
                }
                return parentContext;
              }
              var childContext = instance.getChildContext();
              for (var contextKey in childContext) {
                if (!(contextKey in childContextTypes)) {
                  throw new Error(
                    (getComponentNameFromType(type) || "Unknown") +
                      '.getChildContext(): key "' +
                      contextKey +
                      '" is not defined in childContextTypes.'
                  );
                }
              }
              {
                var name = getComponentNameFromType(type) || "Unknown";
                checkPropTypes(
                  childContextTypes,
                  childContext,
                  "child context",
                  name
                );
              }
              return assign({}, parentContext, childContext);
            }
          }
          var rendererSigil;
          {
            rendererSigil = {};
          }
          var rootContextSnapshot = null;
          var currentActiveSnapshot = null;
          function popNode(prev) {
            {
              prev.context._currentValue2 = prev.parentValue;
            }
          }
          function pushNode(next) {
            {
              next.context._currentValue2 = next.value;
            }
          }
          function popToNearestCommonAncestor(prev, next) {
            if (prev === next);
            else {
              popNode(prev);
              var parentPrev = prev.parent;
              var parentNext = next.parent;
              if (parentPrev === null) {
                if (parentNext !== null) {
                  throw new Error(
                    "The stacks must reach the root at the same time. This is a bug in React."
                  );
                }
              } else {
                if (parentNext === null) {
                  throw new Error(
                    "The stacks must reach the root at the same time. This is a bug in React."
                  );
                }
                popToNearestCommonAncestor(parentPrev, parentNext);
              }
              pushNode(next);
            }
          }
          function popAllPrevious(prev) {
            popNode(prev);
            var parentPrev = prev.parent;
            if (parentPrev !== null) {
              popAllPrevious(parentPrev);
            }
          }
          function pushAllNext(next) {
            var parentNext = next.parent;
            if (parentNext !== null) {
              pushAllNext(parentNext);
            }
            pushNode(next);
          }
          function popPreviousToCommonLevel(prev, next) {
            popNode(prev);
            var parentPrev = prev.parent;
            if (parentPrev === null) {
              throw new Error(
                "The depth must equal at least at zero before reaching the root. This is a bug in React."
              );
            }
            if (parentPrev.depth === next.depth) {
              popToNearestCommonAncestor(parentPrev, next);
            } else {
              popPreviousToCommonLevel(parentPrev, next);
            }
          }
          function popNextToCommonLevel(prev, next) {
            var parentNext = next.parent;
            if (parentNext === null) {
              throw new Error(
                "The depth must equal at least at zero before reaching the root. This is a bug in React."
              );
            }
            if (prev.depth === parentNext.depth) {
              popToNearestCommonAncestor(prev, parentNext);
            } else {
              popNextToCommonLevel(prev, parentNext);
            }
            pushNode(next);
          }
          function switchContext(newSnapshot) {
            var prev = currentActiveSnapshot;
            var next = newSnapshot;
            if (prev !== next) {
              if (prev === null) {
                pushAllNext(next);
              } else if (next === null) {
                popAllPrevious(prev);
              } else if (prev.depth === next.depth) {
                popToNearestCommonAncestor(prev, next);
              } else if (prev.depth > next.depth) {
                popPreviousToCommonLevel(prev, next);
              } else {
                popNextToCommonLevel(prev, next);
              }
              currentActiveSnapshot = next;
            }
          }
          function pushProvider(context, nextValue) {
            var prevValue;
            {
              prevValue = context._currentValue2;
              context._currentValue2 = nextValue;
              {
                if (
                  context._currentRenderer2 !== void 0 &&
                  context._currentRenderer2 !== null &&
                  context._currentRenderer2 !== rendererSigil
                ) {
                  error(
                    "Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported."
                  );
                }
                context._currentRenderer2 = rendererSigil;
              }
            }
            var prevNode = currentActiveSnapshot;
            var newNode = {
              parent: prevNode,
              depth: prevNode === null ? 0 : prevNode.depth + 1,
              context,
              parentValue: prevValue,
              value: nextValue,
            };
            currentActiveSnapshot = newNode;
            return newNode;
          }
          function popProvider(context) {
            var prevSnapshot = currentActiveSnapshot;
            if (prevSnapshot === null) {
              throw new Error(
                "Tried to pop a Context at the root of the app. This is a bug in React."
              );
            }
            {
              if (prevSnapshot.context !== context) {
                error(
                  "The parent context is not the expected context. This is probably a bug in React."
                );
              }
            }
            {
              var _value = prevSnapshot.parentValue;
              if (_value === REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED) {
                prevSnapshot.context._currentValue2 =
                  prevSnapshot.context._defaultValue;
              } else {
                prevSnapshot.context._currentValue2 = _value;
              }
              {
                if (
                  context._currentRenderer2 !== void 0 &&
                  context._currentRenderer2 !== null &&
                  context._currentRenderer2 !== rendererSigil
                ) {
                  error(
                    "Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported."
                  );
                }
                context._currentRenderer2 = rendererSigil;
              }
            }
            return (currentActiveSnapshot = prevSnapshot.parent);
          }
          function getActiveContext() {
            return currentActiveSnapshot;
          }
          function readContext(context) {
            var value = context._currentValue2;
            return value;
          }
          function get(key) {
            return key._reactInternals;
          }
          function set(key, value) {
            key._reactInternals = value;
          }
          var didWarnAboutNoopUpdateForComponent = {};
          var didWarnAboutDeprecatedWillMount = {};
          var didWarnAboutUninitializedState;
          var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
          var didWarnAboutLegacyLifecyclesAndDerivedState;
          var didWarnAboutUndefinedDerivedState;
          var warnOnUndefinedDerivedState;
          var warnOnInvalidCallback;
          var didWarnAboutDirectlyAssigningPropsToState;
          var didWarnAboutContextTypeAndContextTypes;
          var didWarnAboutInvalidateContextType;
          {
            didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate =
              /* @__PURE__ */ new Set();
            didWarnAboutLegacyLifecyclesAndDerivedState =
              /* @__PURE__ */ new Set();
            didWarnAboutDirectlyAssigningPropsToState =
              /* @__PURE__ */ new Set();
            didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
            didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
            var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
            warnOnInvalidCallback = function (callback, callerName) {
              if (callback === null || typeof callback === "function") {
                return;
              }
              var key = callerName + "_" + callback;
              if (!didWarnOnInvalidCallback.has(key)) {
                didWarnOnInvalidCallback.add(key);
                error(
                  "%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.",
                  callerName,
                  callback
                );
              }
            };
            warnOnUndefinedDerivedState = function (type, partialState) {
              if (partialState === void 0) {
                var componentName =
                  getComponentNameFromType(type) || "Component";
                if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                  didWarnAboutUndefinedDerivedState.add(componentName);
                  error(
                    "%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.",
                    componentName
                  );
                }
              }
            };
          }
          function warnNoop(publicInstance, callerName) {
            {
              var _constructor = publicInstance.constructor;
              var componentName =
                (_constructor && getComponentNameFromType(_constructor)) ||
                "ReactClass";
              var warningKey = componentName + "." + callerName;
              if (didWarnAboutNoopUpdateForComponent[warningKey]) {
                return;
              }
              error(
                "%s(...): Can only update a mounting component. This usually means you called %s() outside componentWillMount() on the server. This is a no-op.\n\nPlease check the code for the %s component.",
                callerName,
                callerName,
                componentName
              );
              didWarnAboutNoopUpdateForComponent[warningKey] = true;
            }
          }
          var classComponentUpdater = {
            isMounted: function (inst) {
              return false;
            },
            enqueueSetState: function (inst, payload, callback) {
              var internals = get(inst);
              if (internals.queue === null) {
                warnNoop(inst, "setState");
              } else {
                internals.queue.push(payload);
                {
                  if (callback !== void 0 && callback !== null) {
                    warnOnInvalidCallback(callback, "setState");
                  }
                }
              }
            },
            enqueueReplaceState: function (inst, payload, callback) {
              var internals = get(inst);
              internals.replace = true;
              internals.queue = [payload];
              {
                if (callback !== void 0 && callback !== null) {
                  warnOnInvalidCallback(callback, "setState");
                }
              }
            },
            enqueueForceUpdate: function (inst, callback) {
              var internals = get(inst);
              if (internals.queue === null) {
                warnNoop(inst, "forceUpdate");
              } else {
                {
                  if (callback !== void 0 && callback !== null) {
                    warnOnInvalidCallback(callback, "setState");
                  }
                }
              }
            },
          };
          function applyDerivedStateFromProps(
            instance,
            ctor,
            getDerivedStateFromProps,
            prevState,
            nextProps
          ) {
            var partialState = getDerivedStateFromProps(nextProps, prevState);
            {
              warnOnUndefinedDerivedState(ctor, partialState);
            }
            var newState =
              partialState === null || partialState === void 0
                ? prevState
                : assign({}, prevState, partialState);
            return newState;
          }
          function constructClassInstance(ctor, props, maskedLegacyContext) {
            var context = emptyContextObject;
            var contextType = ctor.contextType;
            {
              if ("contextType" in ctor) {
                var isValid =
                  contextType === null ||
                  (contextType !== void 0 &&
                    contextType.$$typeof === REACT_CONTEXT_TYPE &&
                    contextType._context === void 0);
                if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                  didWarnAboutInvalidateContextType.add(ctor);
                  var addendum = "";
                  if (contextType === void 0) {
                    addendum =
                      " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                  } else if (typeof contextType !== "object") {
                    addendum =
                      " However, it is set to a " + typeof contextType + ".";
                  } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                    addendum =
                      " Did you accidentally pass the Context.Provider instead?";
                  } else if (contextType._context !== void 0) {
                    addendum =
                      " Did you accidentally pass the Context.Consumer instead?";
                  } else {
                    addendum =
                      " However, it is set to an object with keys {" +
                      Object.keys(contextType).join(", ") +
                      "}.";
                  }
                  error(
                    "%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s",
                    getComponentNameFromType(ctor) || "Component",
                    addendum
                  );
                }
              }
            }
            if (typeof contextType === "object" && contextType !== null) {
              context = readContext(contextType);
            } else {
              context = maskedLegacyContext;
            }
            var instance = new ctor(props, context);
            {
              if (
                typeof ctor.getDerivedStateFromProps === "function" &&
                (instance.state === null || instance.state === void 0)
              ) {
                var componentName =
                  getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutUninitializedState.has(componentName)) {
                  didWarnAboutUninitializedState.add(componentName);
                  error(
                    "`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.",
                    componentName,
                    instance.state === null ? "null" : "undefined",
                    componentName
                  );
                }
              }
              if (
                typeof ctor.getDerivedStateFromProps === "function" ||
                typeof instance.getSnapshotBeforeUpdate === "function"
              ) {
                var foundWillMountName = null;
                var foundWillReceivePropsName = null;
                var foundWillUpdateName = null;
                if (
                  typeof instance.componentWillMount === "function" &&
                  instance.componentWillMount.__suppressDeprecationWarning !==
                    true
                ) {
                  foundWillMountName = "componentWillMount";
                } else if (
                  typeof instance.UNSAFE_componentWillMount === "function"
                ) {
                  foundWillMountName = "UNSAFE_componentWillMount";
                }
                if (
                  typeof instance.componentWillReceiveProps === "function" &&
                  instance.componentWillReceiveProps
                    .__suppressDeprecationWarning !== true
                ) {
                  foundWillReceivePropsName = "componentWillReceiveProps";
                } else if (
                  typeof instance.UNSAFE_componentWillReceiveProps ===
                  "function"
                ) {
                  foundWillReceivePropsName =
                    "UNSAFE_componentWillReceiveProps";
                }
                if (
                  typeof instance.componentWillUpdate === "function" &&
                  instance.componentWillUpdate.__suppressDeprecationWarning !==
                    true
                ) {
                  foundWillUpdateName = "componentWillUpdate";
                } else if (
                  typeof instance.UNSAFE_componentWillUpdate === "function"
                ) {
                  foundWillUpdateName = "UNSAFE_componentWillUpdate";
                }
                if (
                  foundWillMountName !== null ||
                  foundWillReceivePropsName !== null ||
                  foundWillUpdateName !== null
                ) {
                  var _componentName =
                    getComponentNameFromType(ctor) || "Component";
                  var newApiName =
                    typeof ctor.getDerivedStateFromProps === "function"
                      ? "getDerivedStateFromProps()"
                      : "getSnapshotBeforeUpdate()";
                  if (
                    !didWarnAboutLegacyLifecyclesAndDerivedState.has(
                      _componentName
                    )
                  ) {
                    didWarnAboutLegacyLifecyclesAndDerivedState.add(
                      _componentName
                    );
                    error(
                      "Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles",
                      _componentName,
                      newApiName,
                      foundWillMountName !== null
                        ? "\n  " + foundWillMountName
                        : "",
                      foundWillReceivePropsName !== null
                        ? "\n  " + foundWillReceivePropsName
                        : "",
                      foundWillUpdateName !== null
                        ? "\n  " + foundWillUpdateName
                        : ""
                    );
                  }
                }
              }
            }
            return instance;
          }
          function checkClassInstance(instance, ctor, newProps) {
            {
              var name = getComponentNameFromType(ctor) || "Component";
              var renderPresent = instance.render;
              if (!renderPresent) {
                if (
                  ctor.prototype &&
                  typeof ctor.prototype.render === "function"
                ) {
                  error(
                    "%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?",
                    name
                  );
                } else {
                  error(
                    "%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.",
                    name
                  );
                }
              }
              if (
                instance.getInitialState &&
                !instance.getInitialState.isReactClassApproved &&
                !instance.state
              ) {
                error(
                  "getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?",
                  name
                );
              }
              if (
                instance.getDefaultProps &&
                !instance.getDefaultProps.isReactClassApproved
              ) {
                error(
                  "getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.",
                  name
                );
              }
              if (instance.propTypes) {
                error(
                  "propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.",
                  name
                );
              }
              if (instance.contextType) {
                error(
                  "contextType was defined as an instance property on %s. Use a static property to define contextType instead.",
                  name
                );
              }
              {
                if (instance.contextTypes) {
                  error(
                    "contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.",
                    name
                  );
                }
                if (
                  ctor.contextType &&
                  ctor.contextTypes &&
                  !didWarnAboutContextTypeAndContextTypes.has(ctor)
                ) {
                  didWarnAboutContextTypeAndContextTypes.add(ctor);
                  error(
                    "%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.",
                    name
                  );
                }
              }
              if (typeof instance.componentShouldUpdate === "function") {
                error(
                  "%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.",
                  name
                );
              }
              if (
                ctor.prototype &&
                ctor.prototype.isPureReactComponent &&
                typeof instance.shouldComponentUpdate !== "undefined"
              ) {
                error(
                  "%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.",
                  getComponentNameFromType(ctor) || "A pure component"
                );
              }
              if (typeof instance.componentDidUnmount === "function") {
                error(
                  "%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?",
                  name
                );
              }
              if (typeof instance.componentDidReceiveProps === "function") {
                error(
                  "%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().",
                  name
                );
              }
              if (typeof instance.componentWillRecieveProps === "function") {
                error(
                  "%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?",
                  name
                );
              }
              if (
                typeof instance.UNSAFE_componentWillRecieveProps === "function"
              ) {
                error(
                  "%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?",
                  name
                );
              }
              var hasMutatedProps = instance.props !== newProps;
              if (instance.props !== void 0 && hasMutatedProps) {
                error(
                  "%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.",
                  name,
                  name
                );
              }
              if (instance.defaultProps) {
                error(
                  "Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.",
                  name,
                  name
                );
              }
              if (
                typeof instance.getSnapshotBeforeUpdate === "function" &&
                typeof instance.componentDidUpdate !== "function" &&
                !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)
              ) {
                didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
                error(
                  "%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.",
                  getComponentNameFromType(ctor)
                );
              }
              if (typeof instance.getDerivedStateFromProps === "function") {
                error(
                  "%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.",
                  name
                );
              }
              if (typeof instance.getDerivedStateFromError === "function") {
                error(
                  "%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.",
                  name
                );
              }
              if (typeof ctor.getSnapshotBeforeUpdate === "function") {
                error(
                  "%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.",
                  name
                );
              }
              var _state = instance.state;
              if (_state && (typeof _state !== "object" || isArray(_state))) {
                error("%s.state: must be set to an object or null", name);
              }
              if (
                typeof instance.getChildContext === "function" &&
                typeof ctor.childContextTypes !== "object"
              ) {
                error(
                  "%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().",
                  name
                );
              }
            }
          }
          function callComponentWillMount(type, instance) {
            var oldState = instance.state;
            if (typeof instance.componentWillMount === "function") {
              {
                if (
                  instance.componentWillMount.__suppressDeprecationWarning !==
                  true
                ) {
                  var componentName =
                    getComponentNameFromType(type) || "Unknown";
                  if (!didWarnAboutDeprecatedWillMount[componentName]) {
                    warn(
                      "componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code from componentWillMount to componentDidMount (preferred in most cases) or the constructor.\n\nPlease update the following components: %s",
                      componentName
                    );
                    didWarnAboutDeprecatedWillMount[componentName] = true;
                  }
                }
              }
              instance.componentWillMount();
            }
            if (typeof instance.UNSAFE_componentWillMount === "function") {
              instance.UNSAFE_componentWillMount();
            }
            if (oldState !== instance.state) {
              {
                error(
                  "%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.",
                  getComponentNameFromType(type) || "Component"
                );
              }
              classComponentUpdater.enqueueReplaceState(
                instance,
                instance.state,
                null
              );
            }
          }
          function processUpdateQueue(
            internalInstance,
            inst,
            props,
            maskedLegacyContext
          ) {
            if (
              internalInstance.queue !== null &&
              internalInstance.queue.length > 0
            ) {
              var oldQueue = internalInstance.queue;
              var oldReplace = internalInstance.replace;
              internalInstance.queue = null;
              internalInstance.replace = false;
              if (oldReplace && oldQueue.length === 1) {
                inst.state = oldQueue[0];
              } else {
                var nextState = oldReplace ? oldQueue[0] : inst.state;
                var dontMutate = true;
                for (var i = oldReplace ? 1 : 0; i < oldQueue.length; i++) {
                  var partial = oldQueue[i];
                  var partialState =
                    typeof partial === "function"
                      ? partial.call(
                          inst,
                          nextState,
                          props,
                          maskedLegacyContext
                        )
                      : partial;
                  if (partialState != null) {
                    if (dontMutate) {
                      dontMutate = false;
                      nextState = assign({}, nextState, partialState);
                    } else {
                      assign(nextState, partialState);
                    }
                  }
                }
                inst.state = nextState;
              }
            } else {
              internalInstance.queue = null;
            }
          }
          function mountClassInstance(
            instance,
            ctor,
            newProps,
            maskedLegacyContext
          ) {
            {
              checkClassInstance(instance, ctor, newProps);
            }
            var initialState =
              instance.state !== void 0 ? instance.state : null;
            instance.updater = classComponentUpdater;
            instance.props = newProps;
            instance.state = initialState;
            var internalInstance = {
              queue: [],
              replace: false,
            };
            set(instance, internalInstance);
            var contextType = ctor.contextType;
            if (typeof contextType === "object" && contextType !== null) {
              instance.context = readContext(contextType);
            } else {
              instance.context = maskedLegacyContext;
            }
            {
              if (instance.state === newProps) {
                var componentName =
                  getComponentNameFromType(ctor) || "Component";
                if (
                  !didWarnAboutDirectlyAssigningPropsToState.has(componentName)
                ) {
                  didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                  error(
                    "%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.",
                    componentName
                  );
                }
              }
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === "function") {
              instance.state = applyDerivedStateFromProps(
                instance,
                ctor,
                getDerivedStateFromProps,
                initialState,
                newProps
              );
            }
            if (
              typeof ctor.getDerivedStateFromProps !== "function" &&
              typeof instance.getSnapshotBeforeUpdate !== "function" &&
              (typeof instance.UNSAFE_componentWillMount === "function" ||
                typeof instance.componentWillMount === "function")
            ) {
              callComponentWillMount(ctor, instance);
              processUpdateQueue(
                internalInstance,
                instance,
                newProps,
                maskedLegacyContext
              );
            }
          }
          var emptyTreeContext = {
            id: 1,
            overflow: "",
          };
          function getTreeId(context) {
            var overflow = context.overflow;
            var idWithLeadingBit = context.id;
            var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
            return id.toString(32) + overflow;
          }
          function pushTreeContext(baseContext, totalChildren, index) {
            var baseIdWithLeadingBit = baseContext.id;
            var baseOverflow = baseContext.overflow;
            var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
            var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
            var slot = index + 1;
            var length = getBitLength(totalChildren) + baseLength;
            if (length > 30) {
              var numberOfOverflowBits = baseLength - (baseLength % 5);
              var newOverflowBits = (1 << numberOfOverflowBits) - 1;
              var newOverflow = (baseId & newOverflowBits).toString(32);
              var restOfBaseId = baseId >> numberOfOverflowBits;
              var restOfBaseLength = baseLength - numberOfOverflowBits;
              var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
              var restOfNewBits = slot << restOfBaseLength;
              var id = restOfNewBits | restOfBaseId;
              var overflow = newOverflow + baseOverflow;
              return {
                id: (1 << restOfLength) | id,
                overflow,
              };
            } else {
              var newBits = slot << baseLength;
              var _id = newBits | baseId;
              var _overflow = baseOverflow;
              return {
                id: (1 << length) | _id,
                overflow: _overflow,
              };
            }
          }
          function getBitLength(number) {
            return 32 - clz32(number);
          }
          function getLeadingBit(id) {
            return 1 << (getBitLength(id) - 1);
          }
          var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
          var log = Math.log;
          var LN2 = Math.LN2;
          function clz32Fallback(x) {
            var asUint = x >>> 0;
            if (asUint === 0) {
              return 32;
            }
            return (31 - ((log(asUint) / LN2) | 0)) | 0;
          }
          function is(x, y) {
            return (
              (x === y && (x !== 0 || 1 / x === 1 / y)) || (x !== x && y !== y)
            );
          }
          var objectIs = typeof Object.is === "function" ? Object.is : is;
          var currentlyRenderingComponent = null;
          var currentlyRenderingTask = null;
          var firstWorkInProgressHook = null;
          var workInProgressHook = null;
          var isReRender = false;
          var didScheduleRenderPhaseUpdate = false;
          var localIdCounter = 0;
          var renderPhaseUpdates = null;
          var numberOfReRenders = 0;
          var RE_RENDER_LIMIT = 25;
          var isInHookUserCodeInDev = false;
          var currentHookNameInDev;
          function resolveCurrentlyRenderingComponent() {
            if (currentlyRenderingComponent === null) {
              throw new Error(
                "Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem."
              );
            }
            {
              if (isInHookUserCodeInDev) {
                error(
                  "Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks"
                );
              }
            }
            return currentlyRenderingComponent;
          }
          function areHookInputsEqual(nextDeps, prevDeps) {
            if (prevDeps === null) {
              {
                error(
                  "%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.",
                  currentHookNameInDev
                );
              }
              return false;
            }
            {
              if (nextDeps.length !== prevDeps.length) {
                error(
                  "The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s",
                  currentHookNameInDev,
                  "[" + nextDeps.join(", ") + "]",
                  "[" + prevDeps.join(", ") + "]"
                );
              }
            }
            for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
              if (objectIs(nextDeps[i], prevDeps[i])) {
                continue;
              }
              return false;
            }
            return true;
          }
          function createHook() {
            if (numberOfReRenders > 0) {
              throw new Error(
                "Rendered more hooks than during the previous render"
              );
            }
            return {
              memoizedState: null,
              queue: null,
              next: null,
            };
          }
          function createWorkInProgressHook() {
            if (workInProgressHook === null) {
              if (firstWorkInProgressHook === null) {
                isReRender = false;
                firstWorkInProgressHook = workInProgressHook = createHook();
              } else {
                isReRender = true;
                workInProgressHook = firstWorkInProgressHook;
              }
            } else {
              if (workInProgressHook.next === null) {
                isReRender = false;
                workInProgressHook = workInProgressHook.next = createHook();
              } else {
                isReRender = true;
                workInProgressHook = workInProgressHook.next;
              }
            }
            return workInProgressHook;
          }
          function prepareToUseHooks(task, componentIdentity) {
            currentlyRenderingComponent = componentIdentity;
            currentlyRenderingTask = task;
            {
              isInHookUserCodeInDev = false;
            }
            localIdCounter = 0;
          }
          function finishHooks(Component, props, children, refOrContext) {
            while (didScheduleRenderPhaseUpdate) {
              didScheduleRenderPhaseUpdate = false;
              localIdCounter = 0;
              numberOfReRenders += 1;
              workInProgressHook = null;
              children = Component(props, refOrContext);
            }
            resetHooksState();
            return children;
          }
          function checkDidRenderIdHook() {
            var didRenderIdHook = localIdCounter !== 0;
            return didRenderIdHook;
          }
          function resetHooksState() {
            {
              isInHookUserCodeInDev = false;
            }
            currentlyRenderingComponent = null;
            currentlyRenderingTask = null;
            didScheduleRenderPhaseUpdate = false;
            firstWorkInProgressHook = null;
            numberOfReRenders = 0;
            renderPhaseUpdates = null;
            workInProgressHook = null;
          }
          function readContext$1(context) {
            {
              if (isInHookUserCodeInDev) {
                error(
                  "Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo()."
                );
              }
            }
            return readContext(context);
          }
          function useContext(context) {
            {
              currentHookNameInDev = "useContext";
            }
            resolveCurrentlyRenderingComponent();
            return readContext(context);
          }
          function basicStateReducer(state, action) {
            return typeof action === "function" ? action(state) : action;
          }
          function useState(initialState) {
            {
              currentHookNameInDev = "useState";
            }
            return useReducer(basicStateReducer, initialState);
          }
          function useReducer(reducer, initialArg, init) {
            {
              if (reducer !== basicStateReducer) {
                currentHookNameInDev = "useReducer";
              }
            }
            currentlyRenderingComponent = resolveCurrentlyRenderingComponent();
            workInProgressHook = createWorkInProgressHook();
            if (isReRender) {
              var queue = workInProgressHook.queue;
              var dispatch = queue.dispatch;
              if (renderPhaseUpdates !== null) {
                var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);
                if (firstRenderPhaseUpdate !== void 0) {
                  renderPhaseUpdates.delete(queue);
                  var newState = workInProgressHook.memoizedState;
                  var update = firstRenderPhaseUpdate;
                  do {
                    var action = update.action;
                    {
                      isInHookUserCodeInDev = true;
                    }
                    newState = reducer(newState, action);
                    {
                      isInHookUserCodeInDev = false;
                    }
                    update = update.next;
                  } while (update !== null);
                  workInProgressHook.memoizedState = newState;
                  return [newState, dispatch];
                }
              }
              return [workInProgressHook.memoizedState, dispatch];
            } else {
              {
                isInHookUserCodeInDev = true;
              }
              var initialState;
              if (reducer === basicStateReducer) {
                initialState =
                  typeof initialArg === "function" ? initialArg() : initialArg;
              } else {
                initialState = init !== void 0 ? init(initialArg) : initialArg;
              }
              {
                isInHookUserCodeInDev = false;
              }
              workInProgressHook.memoizedState = initialState;
              var _queue = (workInProgressHook.queue = {
                last: null,
                dispatch: null,
              });
              var _dispatch = (_queue.dispatch = dispatchAction.bind(
                null,
                currentlyRenderingComponent,
                _queue
              ));
              return [workInProgressHook.memoizedState, _dispatch];
            }
          }
          function useMemo(nextCreate, deps) {
            currentlyRenderingComponent = resolveCurrentlyRenderingComponent();
            workInProgressHook = createWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            if (workInProgressHook !== null) {
              var prevState = workInProgressHook.memoizedState;
              if (prevState !== null) {
                if (nextDeps !== null) {
                  var prevDeps = prevState[1];
                  if (areHookInputsEqual(nextDeps, prevDeps)) {
                    return prevState[0];
                  }
                }
              }
            }
            {
              isInHookUserCodeInDev = true;
            }
            var nextValue = nextCreate();
            {
              isInHookUserCodeInDev = false;
            }
            workInProgressHook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function useRef(initialValue) {
            currentlyRenderingComponent = resolveCurrentlyRenderingComponent();
            workInProgressHook = createWorkInProgressHook();
            var previousRef = workInProgressHook.memoizedState;
            if (previousRef === null) {
              var ref = {
                current: initialValue,
              };
              {
                Object.seal(ref);
              }
              workInProgressHook.memoizedState = ref;
              return ref;
            } else {
              return previousRef;
            }
          }
          function useLayoutEffect(create, inputs) {
            {
              currentHookNameInDev = "useLayoutEffect";
              error(
                "useLayoutEffect does nothing on the server, because its effect cannot be encoded into the server renderer's output format. This will lead to a mismatch between the initial, non-hydrated UI and the intended UI. To avoid this, useLayoutEffect should only be used in components that render exclusively on the client. See https://reactjs.org/link/uselayouteffect-ssr for common fixes."
              );
            }
          }
          function dispatchAction(componentIdentity, queue, action) {
            if (numberOfReRenders >= RE_RENDER_LIMIT) {
              throw new Error(
                "Too many re-renders. React limits the number of renders to prevent an infinite loop."
              );
            }
            if (componentIdentity === currentlyRenderingComponent) {
              didScheduleRenderPhaseUpdate = true;
              var update = {
                action,
                next: null,
              };
              if (renderPhaseUpdates === null) {
                renderPhaseUpdates = /* @__PURE__ */ new Map();
              }
              var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);
              if (firstRenderPhaseUpdate === void 0) {
                renderPhaseUpdates.set(queue, update);
              } else {
                var lastRenderPhaseUpdate = firstRenderPhaseUpdate;
                while (lastRenderPhaseUpdate.next !== null) {
                  lastRenderPhaseUpdate = lastRenderPhaseUpdate.next;
                }
                lastRenderPhaseUpdate.next = update;
              }
            }
          }
          function useCallback(callback, deps) {
            return useMemo(function () {
              return callback;
            }, deps);
          }
          function useMutableSource(source, getSnapshot, subscribe) {
            resolveCurrentlyRenderingComponent();
            return getSnapshot(source._source);
          }
          function useSyncExternalStore(
            subscribe,
            getSnapshot,
            getServerSnapshot
          ) {
            if (getServerSnapshot === void 0) {
              throw new Error(
                "Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering."
              );
            }
            return getServerSnapshot();
          }
          function useDeferredValue(value) {
            resolveCurrentlyRenderingComponent();
            return value;
          }
          function unsupportedStartTransition() {
            throw new Error(
              "startTransition cannot be called during server rendering."
            );
          }
          function useTransition() {
            resolveCurrentlyRenderingComponent();
            return [false, unsupportedStartTransition];
          }
          function useId() {
            var task = currentlyRenderingTask;
            var treeId = getTreeId(task.treeContext);
            var responseState = currentResponseState;
            if (responseState === null) {
              throw new Error(
                "Invalid hook call. Hooks can only be called inside of the body of a function component."
              );
            }
            var localId = localIdCounter++;
            return makeId(responseState, treeId, localId);
          }
          function noop() {}
          var Dispatcher = {
            readContext: readContext$1,
            useContext,
            useMemo,
            useReducer,
            useRef,
            useState,
            useInsertionEffect: noop,
            useLayoutEffect,
            useCallback,
            useImperativeHandle: noop,
            useEffect: noop,
            useDebugValue: noop,
            useDeferredValue,
            useTransition,
            useId,
            useMutableSource,
            useSyncExternalStore,
          };
          var currentResponseState = null;
          function setCurrentResponseState(responseState) {
            currentResponseState = responseState;
          }
          function getStackByComponentStackNode(componentStack) {
            try {
              var info = "";
              var node = componentStack;
              do {
                switch (node.tag) {
                  case 0:
                    info += describeBuiltInComponentFrame(
                      node.type,
                      null,
                      null
                    );
                    break;
                  case 1:
                    info += describeFunctionComponentFrame(
                      node.type,
                      null,
                      null
                    );
                    break;
                  case 2:
                    info += describeClassComponentFrame(node.type, null, null);
                    break;
                }
                node = node.parent;
              } while (node);
              return info;
            } catch (x) {
              return "\nError generating stack: " + x.message + "\n" + x.stack;
            }
          }
          var ReactCurrentDispatcher$1 =
            ReactSharedInternals.ReactCurrentDispatcher;
          var ReactDebugCurrentFrame$1 =
            ReactSharedInternals.ReactDebugCurrentFrame;
          var PENDING = 0;
          var COMPLETED = 1;
          var FLUSHED = 2;
          var ABORTED = 3;
          var ERRORED = 4;
          var OPEN = 0;
          var CLOSING = 1;
          var CLOSED = 2;
          var DEFAULT_PROGRESSIVE_CHUNK_SIZE = 12800;
          function defaultErrorHandler(error2) {
            console["error"](error2);
            return null;
          }
          function noop$1() {}
          function createRequest(
            children,
            responseState,
            rootFormatContext,
            progressiveChunkSize,
            onError2,
            onAllReady,
            onShellReady,
            onShellError,
            onFatalError
          ) {
            var pingedTasks = [];
            var abortSet = /* @__PURE__ */ new Set();
            var request = {
              destination: null,
              responseState,
              progressiveChunkSize:
                progressiveChunkSize === void 0
                  ? DEFAULT_PROGRESSIVE_CHUNK_SIZE
                  : progressiveChunkSize,
              status: OPEN,
              fatalError: null,
              nextSegmentId: 0,
              allPendingTasks: 0,
              pendingRootTasks: 0,
              completedRootSegment: null,
              abortableTasks: abortSet,
              pingedTasks,
              clientRenderedBoundaries: [],
              completedBoundaries: [],
              partialBoundaries: [],
              onError: onError2 === void 0 ? defaultErrorHandler : onError2,
              onAllReady: onAllReady === void 0 ? noop$1 : onAllReady,
              onShellReady: onShellReady === void 0 ? noop$1 : onShellReady,
              onShellError: onShellError === void 0 ? noop$1 : onShellError,
              onFatalError: onFatalError === void 0 ? noop$1 : onFatalError,
            };
            var rootSegment = createPendingSegment(
              request,
              0,
              null,
              rootFormatContext,
              false,
              false
            );
            rootSegment.parentFlushed = true;
            var rootTask = createTask(
              request,
              children,
              null,
              rootSegment,
              abortSet,
              emptyContextObject,
              rootContextSnapshot,
              emptyTreeContext
            );
            pingedTasks.push(rootTask);
            return request;
          }
          function pingTask(request, task) {
            var pingedTasks = request.pingedTasks;
            pingedTasks.push(task);
            if (pingedTasks.length === 1) {
              scheduleWork(function () {
                return performWork(request);
              });
            }
          }
          function createSuspenseBoundary(request, fallbackAbortableTasks) {
            return {
              id: UNINITIALIZED_SUSPENSE_BOUNDARY_ID,
              rootSegmentID: -1,
              parentFlushed: false,
              pendingTasks: 0,
              forceClientRender: false,
              completedSegments: [],
              byteSize: 0,
              fallbackAbortableTasks,
              errorDigest: null,
            };
          }
          function createTask(
            request,
            node,
            blockedBoundary,
            blockedSegment,
            abortSet,
            legacyContext,
            context,
            treeContext
          ) {
            request.allPendingTasks++;
            if (blockedBoundary === null) {
              request.pendingRootTasks++;
            } else {
              blockedBoundary.pendingTasks++;
            }
            var task = {
              node,
              ping: function () {
                return pingTask(request, task);
              },
              blockedBoundary,
              blockedSegment,
              abortSet,
              legacyContext,
              context,
              treeContext,
            };
            {
              task.componentStack = null;
            }
            abortSet.add(task);
            return task;
          }
          function createPendingSegment(
            request,
            index,
            boundary,
            formatContext,
            lastPushedText,
            textEmbedded
          ) {
            return {
              status: PENDING,
              id: -1,
              index,
              parentFlushed: false,
              chunks: [],
              children: [],
              formatContext,
              boundary,
              lastPushedText,
              textEmbedded,
            };
          }
          var currentTaskInDEV = null;
          function getCurrentStackInDEV() {
            {
              if (
                currentTaskInDEV === null ||
                currentTaskInDEV.componentStack === null
              ) {
                return "";
              }
              return getStackByComponentStackNode(
                currentTaskInDEV.componentStack
              );
            }
          }
          function pushBuiltInComponentStackInDEV(task, type) {
            {
              task.componentStack = {
                tag: 0,
                parent: task.componentStack,
                type,
              };
            }
          }
          function pushFunctionComponentStackInDEV(task, type) {
            {
              task.componentStack = {
                tag: 1,
                parent: task.componentStack,
                type,
              };
            }
          }
          function pushClassComponentStackInDEV(task, type) {
            {
              task.componentStack = {
                tag: 2,
                parent: task.componentStack,
                type,
              };
            }
          }
          function popComponentStackInDEV(task) {
            {
              if (task.componentStack === null) {
                error(
                  "Unexpectedly popped too many stack frames. This is a bug in React."
                );
              } else {
                task.componentStack = task.componentStack.parent;
              }
            }
          }
          var lastBoundaryErrorComponentStackDev = null;
          function captureBoundaryErrorDetailsDev(boundary, error2) {
            {
              var errorMessage;
              if (typeof error2 === "string") {
                errorMessage = error2;
              } else if (error2 && typeof error2.message === "string") {
                errorMessage = error2.message;
              } else {
                errorMessage = String(error2);
              }
              var errorComponentStack =
                lastBoundaryErrorComponentStackDev || getCurrentStackInDEV();
              lastBoundaryErrorComponentStackDev = null;
              boundary.errorMessage = errorMessage;
              boundary.errorComponentStack = errorComponentStack;
            }
          }
          function logRecoverableError(request, error2) {
            var errorDigest = request.onError(error2);
            if (errorDigest != null && typeof errorDigest !== "string") {
              throw new Error(
                'onError returned something with a type other than "string". onError should return a string and may return null or undefined but must not return anything else. It received something of type "' +
                  typeof errorDigest +
                  '" instead'
              );
            }
            return errorDigest;
          }
          function fatalError(request, error2) {
            var onShellError = request.onShellError;
            onShellError(error2);
            var onFatalError = request.onFatalError;
            onFatalError(error2);
            if (request.destination !== null) {
              request.status = CLOSED;
              closeWithError(request.destination, error2);
            } else {
              request.status = CLOSING;
              request.fatalError = error2;
            }
          }
          function renderSuspenseBoundary(request, task, props) {
            pushBuiltInComponentStackInDEV(task, "Suspense");
            var parentBoundary = task.blockedBoundary;
            var parentSegment = task.blockedSegment;
            var fallback = props.fallback;
            var content = props.children;
            var fallbackAbortSet = /* @__PURE__ */ new Set();
            var newBoundary = createSuspenseBoundary(request, fallbackAbortSet);
            var insertionIndex = parentSegment.chunks.length;
            var boundarySegment = createPendingSegment(
              request,
              insertionIndex,
              newBoundary,
              parentSegment.formatContext,
              false,
              false
            );
            parentSegment.children.push(boundarySegment);
            parentSegment.lastPushedText = false;
            var contentRootSegment = createPendingSegment(
              request,
              0,
              null,
              parentSegment.formatContext,
              false,
              false
            );
            contentRootSegment.parentFlushed = true;
            task.blockedBoundary = newBoundary;
            task.blockedSegment = contentRootSegment;
            try {
              renderNode(request, task, content);
              pushSegmentFinale$1(
                contentRootSegment.chunks,
                request.responseState,
                contentRootSegment.lastPushedText,
                contentRootSegment.textEmbedded
              );
              contentRootSegment.status = COMPLETED;
              queueCompletedSegment(newBoundary, contentRootSegment);
              if (newBoundary.pendingTasks === 0) {
                popComponentStackInDEV(task);
                return;
              }
            } catch (error2) {
              contentRootSegment.status = ERRORED;
              newBoundary.forceClientRender = true;
              newBoundary.errorDigest = logRecoverableError(request, error2);
              {
                captureBoundaryErrorDetailsDev(newBoundary, error2);
              }
            } finally {
              task.blockedBoundary = parentBoundary;
              task.blockedSegment = parentSegment;
            }
            var suspendedFallbackTask = createTask(
              request,
              fallback,
              parentBoundary,
              boundarySegment,
              fallbackAbortSet,
              task.legacyContext,
              task.context,
              task.treeContext
            );
            {
              suspendedFallbackTask.componentStack = task.componentStack;
            }
            request.pingedTasks.push(suspendedFallbackTask);
            popComponentStackInDEV(task);
          }
          function renderHostElement(request, task, type, props) {
            pushBuiltInComponentStackInDEV(task, type);
            var segment = task.blockedSegment;
            var children = pushStartInstance(
              segment.chunks,
              type,
              props,
              request.responseState,
              segment.formatContext
            );
            segment.lastPushedText = false;
            var prevContext = segment.formatContext;
            segment.formatContext = getChildFormatContext(
              prevContext,
              type,
              props
            );
            renderNode(request, task, children);
            segment.formatContext = prevContext;
            pushEndInstance(segment.chunks, type);
            segment.lastPushedText = false;
            popComponentStackInDEV(task);
          }
          function shouldConstruct$1(Component) {
            return Component.prototype && Component.prototype.isReactComponent;
          }
          function renderWithHooks(request, task, Component, props, secondArg) {
            var componentIdentity = {};
            prepareToUseHooks(task, componentIdentity);
            var result = Component(props, secondArg);
            return finishHooks(Component, props, result, secondArg);
          }
          function finishClassComponent(
            request,
            task,
            instance,
            Component,
            props
          ) {
            var nextChildren = instance.render();
            {
              if (instance.props !== props) {
                if (!didWarnAboutReassigningProps) {
                  error(
                    "It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.",
                    getComponentNameFromType(Component) || "a component"
                  );
                }
                didWarnAboutReassigningProps = true;
              }
            }
            {
              var childContextTypes = Component.childContextTypes;
              if (childContextTypes !== null && childContextTypes !== void 0) {
                var previousContext = task.legacyContext;
                var mergedContext = processChildContext(
                  instance,
                  Component,
                  previousContext,
                  childContextTypes
                );
                task.legacyContext = mergedContext;
                renderNodeDestructive(request, task, nextChildren);
                task.legacyContext = previousContext;
                return;
              }
            }
            renderNodeDestructive(request, task, nextChildren);
          }
          function renderClassComponent(request, task, Component, props) {
            pushClassComponentStackInDEV(task, Component);
            var maskedContext = getMaskedContext(Component, task.legacyContext);
            var instance = constructClassInstance(
              Component,
              props,
              maskedContext
            );
            mountClassInstance(instance, Component, props, maskedContext);
            finishClassComponent(request, task, instance, Component, props);
            popComponentStackInDEV(task);
          }
          var didWarnAboutBadClass = {};
          var didWarnAboutModulePatternComponent = {};
          var didWarnAboutContextTypeOnFunctionComponent = {};
          var didWarnAboutGetDerivedStateOnFunctionComponent = {};
          var didWarnAboutReassigningProps = false;
          var didWarnAboutGenerators = false;
          var didWarnAboutMaps = false;
          var hasWarnedAboutUsingContextAsConsumer = false;
          function renderIndeterminateComponent(
            request,
            task,
            Component,
            props
          ) {
            var legacyContext;
            {
              legacyContext = getMaskedContext(Component, task.legacyContext);
            }
            pushFunctionComponentStackInDEV(task, Component);
            {
              if (
                Component.prototype &&
                typeof Component.prototype.render === "function"
              ) {
                var componentName =
                  getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutBadClass[componentName]) {
                  error(
                    "The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.",
                    componentName,
                    componentName
                  );
                  didWarnAboutBadClass[componentName] = true;
                }
              }
            }
            var value = renderWithHooks(
              request,
              task,
              Component,
              props,
              legacyContext
            );
            var hasId = checkDidRenderIdHook();
            {
              if (
                typeof value === "object" &&
                value !== null &&
                typeof value.render === "function" &&
                value.$$typeof === void 0
              ) {
                var _componentName =
                  getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName]) {
                  error(
                    "The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.",
                    _componentName,
                    _componentName,
                    _componentName
                  );
                  didWarnAboutModulePatternComponent[_componentName] = true;
                }
              }
            }
            if (
              typeof value === "object" &&
              value !== null &&
              typeof value.render === "function" &&
              value.$$typeof === void 0
            ) {
              {
                var _componentName2 =
                  getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName2]) {
                  error(
                    "The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.",
                    _componentName2,
                    _componentName2,
                    _componentName2
                  );
                  didWarnAboutModulePatternComponent[_componentName2] = true;
                }
              }
              mountClassInstance(value, Component, props, legacyContext);
              finishClassComponent(request, task, value, Component, props);
            } else {
              {
                validateFunctionComponentInDev(Component);
              }
              if (hasId) {
                var prevTreeContext = task.treeContext;
                var totalChildren = 1;
                var index = 0;
                task.treeContext = pushTreeContext(
                  prevTreeContext,
                  totalChildren,
                  index
                );
                try {
                  renderNodeDestructive(request, task, value);
                } finally {
                  task.treeContext = prevTreeContext;
                }
              } else {
                renderNodeDestructive(request, task, value);
              }
            }
            popComponentStackInDEV(task);
          }
          function validateFunctionComponentInDev(Component) {
            {
              if (Component) {
                if (Component.childContextTypes) {
                  error(
                    "%s(...): childContextTypes cannot be defined on a function component.",
                    Component.displayName || Component.name || "Component"
                  );
                }
              }
              if (typeof Component.getDerivedStateFromProps === "function") {
                var _componentName3 =
                  getComponentNameFromType(Component) || "Unknown";
                if (
                  !didWarnAboutGetDerivedStateOnFunctionComponent[
                    _componentName3
                  ]
                ) {
                  error(
                    "%s: Function components do not support getDerivedStateFromProps.",
                    _componentName3
                  );
                  didWarnAboutGetDerivedStateOnFunctionComponent[
                    _componentName3
                  ] = true;
                }
              }
              if (
                typeof Component.contextType === "object" &&
                Component.contextType !== null
              ) {
                var _componentName4 =
                  getComponentNameFromType(Component) || "Unknown";
                if (
                  !didWarnAboutContextTypeOnFunctionComponent[_componentName4]
                ) {
                  error(
                    "%s: Function components do not support contextType.",
                    _componentName4
                  );
                  didWarnAboutContextTypeOnFunctionComponent[
                    _componentName4
                  ] = true;
                }
              }
            }
          }
          function resolveDefaultProps(Component, baseProps) {
            if (Component && Component.defaultProps) {
              var props = assign({}, baseProps);
              var defaultProps = Component.defaultProps;
              for (var propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
              return props;
            }
            return baseProps;
          }
          function renderForwardRef(request, task, type, props, ref) {
            pushFunctionComponentStackInDEV(task, type.render);
            var children = renderWithHooks(
              request,
              task,
              type.render,
              props,
              ref
            );
            var hasId = checkDidRenderIdHook();
            if (hasId) {
              var prevTreeContext = task.treeContext;
              var totalChildren = 1;
              var index = 0;
              task.treeContext = pushTreeContext(
                prevTreeContext,
                totalChildren,
                index
              );
              try {
                renderNodeDestructive(request, task, children);
              } finally {
                task.treeContext = prevTreeContext;
              }
            } else {
              renderNodeDestructive(request, task, children);
            }
            popComponentStackInDEV(task);
          }
          function renderMemo(request, task, type, props, ref) {
            var innerType = type.type;
            var resolvedProps = resolveDefaultProps(innerType, props);
            renderElement(request, task, innerType, resolvedProps, ref);
          }
          function renderContextConsumer(request, task, context, props) {
            {
              if (context._context === void 0) {
                if (context !== context.Consumer) {
                  if (!hasWarnedAboutUsingContextAsConsumer) {
                    hasWarnedAboutUsingContextAsConsumer = true;
                    error(
                      "Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?"
                    );
                  }
                }
              } else {
                context = context._context;
              }
            }
            var render = props.children;
            {
              if (typeof render !== "function") {
                error(
                  "A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it."
                );
              }
            }
            var newValue = readContext(context);
            var newChildren = render(newValue);
            renderNodeDestructive(request, task, newChildren);
          }
          function renderContextProvider(request, task, type, props) {
            var context = type._context;
            var value = props.value;
            var children = props.children;
            var prevSnapshot;
            {
              prevSnapshot = task.context;
            }
            task.context = pushProvider(context, value);
            renderNodeDestructive(request, task, children);
            task.context = popProvider(context);
            {
              if (prevSnapshot !== task.context) {
                error(
                  "Popping the context provider did not return back to the original snapshot. This is a bug in React."
                );
              }
            }
          }
          function renderLazyComponent(
            request,
            task,
            lazyComponent,
            props,
            ref
          ) {
            pushBuiltInComponentStackInDEV(task, "Lazy");
            var payload = lazyComponent._payload;
            var init = lazyComponent._init;
            var Component = init(payload);
            var resolvedProps = resolveDefaultProps(Component, props);
            renderElement(request, task, Component, resolvedProps, ref);
            popComponentStackInDEV(task);
          }
          function renderElement(request, task, type, props, ref) {
            if (typeof type === "function") {
              if (shouldConstruct$1(type)) {
                renderClassComponent(request, task, type, props);
                return;
              } else {
                renderIndeterminateComponent(request, task, type, props);
                return;
              }
            }
            if (typeof type === "string") {
              renderHostElement(request, task, type, props);
              return;
            }
            switch (type) {
              case REACT_LEGACY_HIDDEN_TYPE:
              case REACT_DEBUG_TRACING_MODE_TYPE:
              case REACT_STRICT_MODE_TYPE:
              case REACT_PROFILER_TYPE:
              case REACT_FRAGMENT_TYPE: {
                renderNodeDestructive(request, task, props.children);
                return;
              }
              case REACT_SUSPENSE_LIST_TYPE: {
                pushBuiltInComponentStackInDEV(task, "SuspenseList");
                renderNodeDestructive(request, task, props.children);
                popComponentStackInDEV(task);
                return;
              }
              case REACT_SCOPE_TYPE: {
                throw new Error(
                  "ReactDOMServer does not yet support scope components."
                );
              }
              case REACT_SUSPENSE_TYPE: {
                {
                  renderSuspenseBoundary(request, task, props);
                }
                return;
              }
            }
            if (typeof type === "object" && type !== null) {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE: {
                  renderForwardRef(request, task, type, props, ref);
                  return;
                }
                case REACT_MEMO_TYPE: {
                  renderMemo(request, task, type, props, ref);
                  return;
                }
                case REACT_PROVIDER_TYPE: {
                  renderContextProvider(request, task, type, props);
                  return;
                }
                case REACT_CONTEXT_TYPE: {
                  renderContextConsumer(request, task, type, props);
                  return;
                }
                case REACT_LAZY_TYPE: {
                  renderLazyComponent(request, task, type, props);
                  return;
                }
              }
            }
            var info = "";
            {
              if (
                type === void 0 ||
                (typeof type === "object" &&
                  type !== null &&
                  Object.keys(type).length === 0)
              ) {
                info +=
                  " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
            }
            throw new Error(
              "Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " +
                ("but got: " + (type == null ? type : typeof type) + "." + info)
            );
          }
          function validateIterable(iterable, iteratorFn) {
            {
              if (
                typeof Symbol === "function" &&
                iterable[Symbol.toStringTag] === "Generator"
              ) {
                if (!didWarnAboutGenerators) {
                  error(
                    "Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers."
                  );
                }
                didWarnAboutGenerators = true;
              }
              if (iterable.entries === iteratorFn) {
                if (!didWarnAboutMaps) {
                  error(
                    "Using Maps as children is not supported. Use an array of keyed ReactElements instead."
                  );
                }
                didWarnAboutMaps = true;
              }
            }
          }
          function renderNodeDestructive(request, task, node) {
            {
              try {
                return renderNodeDestructiveImpl(request, task, node);
              } catch (x) {
                if (
                  typeof x === "object" &&
                  x !== null &&
                  typeof x.then === "function"
                );
                else {
                  lastBoundaryErrorComponentStackDev =
                    lastBoundaryErrorComponentStackDev !== null
                      ? lastBoundaryErrorComponentStackDev
                      : getCurrentStackInDEV();
                }
                throw x;
              }
            }
          }
          function renderNodeDestructiveImpl(request, task, node) {
            task.node = node;
            if (typeof node === "object" && node !== null) {
              switch (node.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  var element = node;
                  var type = element.type;
                  var props = element.props;
                  var ref = element.ref;
                  renderElement(request, task, type, props, ref);
                  return;
                }
                case REACT_PORTAL_TYPE:
                  throw new Error(
                    "Portals are not currently supported by the server renderer. Render them conditionally so that they only appear on the client render."
                  );
                case REACT_LAZY_TYPE: {
                  var lazyNode = node;
                  var payload = lazyNode._payload;
                  var init = lazyNode._init;
                  var resolvedNode;
                  {
                    try {
                      resolvedNode = init(payload);
                    } catch (x) {
                      if (
                        typeof x === "object" &&
                        x !== null &&
                        typeof x.then === "function"
                      ) {
                        pushBuiltInComponentStackInDEV(task, "Lazy");
                      }
                      throw x;
                    }
                  }
                  renderNodeDestructive(request, task, resolvedNode);
                  return;
                }
              }
              if (isArray(node)) {
                renderChildrenArray(request, task, node);
                return;
              }
              var iteratorFn = getIteratorFn(node);
              if (iteratorFn) {
                {
                  validateIterable(node, iteratorFn);
                }
                var iterator = iteratorFn.call(node);
                if (iterator) {
                  var step = iterator.next();
                  if (!step.done) {
                    var children = [];
                    do {
                      children.push(step.value);
                      step = iterator.next();
                    } while (!step.done);
                    renderChildrenArray(request, task, children);
                    return;
                  }
                  return;
                }
              }
              var childString = Object.prototype.toString.call(node);
              throw new Error(
                "Objects are not valid as a React child (found: " +
                  (childString === "[object Object]"
                    ? "object with keys {" + Object.keys(node).join(", ") + "}"
                    : childString) +
                  "). If you meant to render a collection of children, use an array instead."
              );
            }
            if (typeof node === "string") {
              var segment = task.blockedSegment;
              segment.lastPushedText = pushTextInstance$1(
                task.blockedSegment.chunks,
                node,
                request.responseState,
                segment.lastPushedText
              );
              return;
            }
            if (typeof node === "number") {
              var _segment = task.blockedSegment;
              _segment.lastPushedText = pushTextInstance$1(
                task.blockedSegment.chunks,
                "" + node,
                request.responseState,
                _segment.lastPushedText
              );
              return;
            }
            {
              if (typeof node === "function") {
                error(
                  "Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it."
                );
              }
            }
          }
          function renderChildrenArray(request, task, children) {
            var totalChildren = children.length;
            for (var i = 0; i < totalChildren; i++) {
              var prevTreeContext = task.treeContext;
              task.treeContext = pushTreeContext(
                prevTreeContext,
                totalChildren,
                i
              );
              try {
                renderNode(request, task, children[i]);
              } finally {
                task.treeContext = prevTreeContext;
              }
            }
          }
          function spawnNewSuspendedTask(request, task, x) {
            var segment = task.blockedSegment;
            var insertionIndex = segment.chunks.length;
            var newSegment = createPendingSegment(
              request,
              insertionIndex,
              null,
              segment.formatContext,
              segment.lastPushedText,
              true
            );
            segment.children.push(newSegment);
            segment.lastPushedText = false;
            var newTask = createTask(
              request,
              task.node,
              task.blockedBoundary,
              newSegment,
              task.abortSet,
              task.legacyContext,
              task.context,
              task.treeContext
            );
            {
              if (task.componentStack !== null) {
                newTask.componentStack = task.componentStack.parent;
              }
            }
            var ping = newTask.ping;
            x.then(ping, ping);
          }
          function renderNode(request, task, node) {
            var previousFormatContext = task.blockedSegment.formatContext;
            var previousLegacyContext = task.legacyContext;
            var previousContext = task.context;
            var previousComponentStack = null;
            {
              previousComponentStack = task.componentStack;
            }
            try {
              return renderNodeDestructive(request, task, node);
            } catch (x) {
              resetHooksState();
              if (
                typeof x === "object" &&
                x !== null &&
                typeof x.then === "function"
              ) {
                spawnNewSuspendedTask(request, task, x);
                task.blockedSegment.formatContext = previousFormatContext;
                task.legacyContext = previousLegacyContext;
                task.context = previousContext;
                switchContext(previousContext);
                {
                  task.componentStack = previousComponentStack;
                }
                return;
              } else {
                task.blockedSegment.formatContext = previousFormatContext;
                task.legacyContext = previousLegacyContext;
                task.context = previousContext;
                switchContext(previousContext);
                {
                  task.componentStack = previousComponentStack;
                }
                throw x;
              }
            }
          }
          function erroredTask(request, boundary, segment, error2) {
            var errorDigest = logRecoverableError(request, error2);
            if (boundary === null) {
              fatalError(request, error2);
            } else {
              boundary.pendingTasks--;
              if (!boundary.forceClientRender) {
                boundary.forceClientRender = true;
                boundary.errorDigest = errorDigest;
                {
                  captureBoundaryErrorDetailsDev(boundary, error2);
                }
                if (boundary.parentFlushed) {
                  request.clientRenderedBoundaries.push(boundary);
                }
              }
            }
            request.allPendingTasks--;
            if (request.allPendingTasks === 0) {
              var onAllReady = request.onAllReady;
              onAllReady();
            }
          }
          function abortTaskSoft(task) {
            var request = this;
            var boundary = task.blockedBoundary;
            var segment = task.blockedSegment;
            segment.status = ABORTED;
            finishedTask(request, boundary, segment);
          }
          function abortTask(task, request, reason) {
            var boundary = task.blockedBoundary;
            var segment = task.blockedSegment;
            segment.status = ABORTED;
            if (boundary === null) {
              request.allPendingTasks--;
              if (request.status !== CLOSED) {
                request.status = CLOSED;
                if (request.destination !== null) {
                  close(request.destination);
                }
              }
            } else {
              boundary.pendingTasks--;
              if (!boundary.forceClientRender) {
                boundary.forceClientRender = true;
                var _error =
                  reason === void 0
                    ? new Error(
                        "The render was aborted by the server without a reason."
                      )
                    : reason;
                boundary.errorDigest = request.onError(_error);
                {
                  var errorPrefix =
                    "The server did not finish this Suspense boundary: ";
                  if (_error && typeof _error.message === "string") {
                    _error = errorPrefix + _error.message;
                  } else {
                    _error = errorPrefix + String(_error);
                  }
                  var previousTaskInDev = currentTaskInDEV;
                  currentTaskInDEV = task;
                  try {
                    captureBoundaryErrorDetailsDev(boundary, _error);
                  } finally {
                    currentTaskInDEV = previousTaskInDev;
                  }
                }
                if (boundary.parentFlushed) {
                  request.clientRenderedBoundaries.push(boundary);
                }
              }
              boundary.fallbackAbortableTasks.forEach(function (fallbackTask) {
                return abortTask(fallbackTask, request, reason);
              });
              boundary.fallbackAbortableTasks.clear();
              request.allPendingTasks--;
              if (request.allPendingTasks === 0) {
                var onAllReady = request.onAllReady;
                onAllReady();
              }
            }
          }
          function queueCompletedSegment(boundary, segment) {
            if (
              segment.chunks.length === 0 &&
              segment.children.length === 1 &&
              segment.children[0].boundary === null
            ) {
              var childSegment = segment.children[0];
              childSegment.id = segment.id;
              childSegment.parentFlushed = true;
              if (childSegment.status === COMPLETED) {
                queueCompletedSegment(boundary, childSegment);
              }
            } else {
              var completedSegments = boundary.completedSegments;
              completedSegments.push(segment);
            }
          }
          function finishedTask(request, boundary, segment) {
            if (boundary === null) {
              if (segment.parentFlushed) {
                if (request.completedRootSegment !== null) {
                  throw new Error(
                    "There can only be one root segment. This is a bug in React."
                  );
                }
                request.completedRootSegment = segment;
              }
              request.pendingRootTasks--;
              if (request.pendingRootTasks === 0) {
                request.onShellError = noop$1;
                var onShellReady = request.onShellReady;
                onShellReady();
              }
            } else {
              boundary.pendingTasks--;
              if (boundary.forceClientRender);
              else if (boundary.pendingTasks === 0) {
                if (segment.parentFlushed) {
                  if (segment.status === COMPLETED) {
                    queueCompletedSegment(boundary, segment);
                  }
                }
                if (boundary.parentFlushed) {
                  request.completedBoundaries.push(boundary);
                }
                boundary.fallbackAbortableTasks.forEach(abortTaskSoft, request);
                boundary.fallbackAbortableTasks.clear();
              } else {
                if (segment.parentFlushed) {
                  if (segment.status === COMPLETED) {
                    queueCompletedSegment(boundary, segment);
                    var completedSegments = boundary.completedSegments;
                    if (completedSegments.length === 1) {
                      if (boundary.parentFlushed) {
                        request.partialBoundaries.push(boundary);
                      }
                    }
                  }
                }
              }
            }
            request.allPendingTasks--;
            if (request.allPendingTasks === 0) {
              var onAllReady = request.onAllReady;
              onAllReady();
            }
          }
          function retryTask(request, task) {
            var segment = task.blockedSegment;
            if (segment.status !== PENDING) {
              return;
            }
            switchContext(task.context);
            var prevTaskInDEV = null;
            {
              prevTaskInDEV = currentTaskInDEV;
              currentTaskInDEV = task;
            }
            try {
              renderNodeDestructive(request, task, task.node);
              pushSegmentFinale$1(
                segment.chunks,
                request.responseState,
                segment.lastPushedText,
                segment.textEmbedded
              );
              task.abortSet.delete(task);
              segment.status = COMPLETED;
              finishedTask(request, task.blockedBoundary, segment);
            } catch (x) {
              resetHooksState();
              if (
                typeof x === "object" &&
                x !== null &&
                typeof x.then === "function"
              ) {
                var ping = task.ping;
                x.then(ping, ping);
              } else {
                task.abortSet.delete(task);
                segment.status = ERRORED;
                erroredTask(request, task.blockedBoundary, segment, x);
              }
            } finally {
              {
                currentTaskInDEV = prevTaskInDEV;
              }
            }
          }
          function performWork(request) {
            if (request.status === CLOSED) {
              return;
            }
            var prevContext = getActiveContext();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = Dispatcher;
            var prevGetCurrentStackImpl;
            {
              prevGetCurrentStackImpl =
                ReactDebugCurrentFrame$1.getCurrentStack;
              ReactDebugCurrentFrame$1.getCurrentStack = getCurrentStackInDEV;
            }
            var prevResponseState = currentResponseState;
            setCurrentResponseState(request.responseState);
            try {
              var pingedTasks = request.pingedTasks;
              var i;
              for (i = 0; i < pingedTasks.length; i++) {
                var task = pingedTasks[i];
                retryTask(request, task);
              }
              pingedTasks.splice(0, i);
              if (request.destination !== null) {
                flushCompletedQueues(request, request.destination);
              }
            } catch (error2) {
              logRecoverableError(request, error2);
              fatalError(request, error2);
            } finally {
              setCurrentResponseState(prevResponseState);
              ReactCurrentDispatcher$1.current = prevDispatcher;
              {
                ReactDebugCurrentFrame$1.getCurrentStack =
                  prevGetCurrentStackImpl;
              }
              if (prevDispatcher === Dispatcher) {
                switchContext(prevContext);
              }
            }
          }
          function flushSubtree(request, destination, segment) {
            segment.parentFlushed = true;
            switch (segment.status) {
              case PENDING: {
                var segmentID = (segment.id = request.nextSegmentId++);
                segment.lastPushedText = false;
                segment.textEmbedded = false;
                return writePlaceholder(
                  destination,
                  request.responseState,
                  segmentID
                );
              }
              case COMPLETED: {
                segment.status = FLUSHED;
                var r = true;
                var chunks = segment.chunks;
                var chunkIdx = 0;
                var children = segment.children;
                for (var childIdx = 0; childIdx < children.length; childIdx++) {
                  var nextChild = children[childIdx];
                  for (; chunkIdx < nextChild.index; chunkIdx++) {
                    writeChunk(destination, chunks[chunkIdx]);
                  }
                  r = flushSegment(request, destination, nextChild);
                }
                for (; chunkIdx < chunks.length - 1; chunkIdx++) {
                  writeChunk(destination, chunks[chunkIdx]);
                }
                if (chunkIdx < chunks.length) {
                  r = writeChunkAndReturn(destination, chunks[chunkIdx]);
                }
                return r;
              }
              default: {
                throw new Error(
                  "Aborted, errored or already flushed boundaries should not be flushed again. This is a bug in React."
                );
              }
            }
          }
          function flushSegment(request, destination, segment) {
            var boundary = segment.boundary;
            if (boundary === null) {
              return flushSubtree(request, destination, segment);
            }
            boundary.parentFlushed = true;
            if (boundary.forceClientRender) {
              writeStartClientRenderedSuspenseBoundary$1(
                destination,
                request.responseState,
                boundary.errorDigest,
                boundary.errorMessage,
                boundary.errorComponentStack
              );
              flushSubtree(request, destination, segment);
              return writeEndClientRenderedSuspenseBoundary$1(
                destination,
                request.responseState
              );
            } else if (boundary.pendingTasks > 0) {
              boundary.rootSegmentID = request.nextSegmentId++;
              if (boundary.completedSegments.length > 0) {
                request.partialBoundaries.push(boundary);
              }
              var id = (boundary.id = assignSuspenseBoundaryID(
                request.responseState
              ));
              writeStartPendingSuspenseBoundary(
                destination,
                request.responseState,
                id
              );
              flushSubtree(request, destination, segment);
              return writeEndPendingSuspenseBoundary(
                destination,
                request.responseState
              );
            } else if (boundary.byteSize > request.progressiveChunkSize) {
              boundary.rootSegmentID = request.nextSegmentId++;
              request.completedBoundaries.push(boundary);
              writeStartPendingSuspenseBoundary(
                destination,
                request.responseState,
                boundary.id
              );
              flushSubtree(request, destination, segment);
              return writeEndPendingSuspenseBoundary(
                destination,
                request.responseState
              );
            } else {
              writeStartCompletedSuspenseBoundary$1(
                destination,
                request.responseState
              );
              var completedSegments = boundary.completedSegments;
              if (completedSegments.length !== 1) {
                throw new Error(
                  "A previously unvisited boundary must have exactly one root segment. This is a bug in React."
                );
              }
              var contentSegment = completedSegments[0];
              flushSegment(request, destination, contentSegment);
              return writeEndCompletedSuspenseBoundary$1(
                destination,
                request.responseState
              );
            }
          }
          function flushClientRenderedBoundary(request, destination, boundary) {
            return writeClientRenderBoundaryInstruction(
              destination,
              request.responseState,
              boundary.id,
              boundary.errorDigest,
              boundary.errorMessage,
              boundary.errorComponentStack
            );
          }
          function flushSegmentContainer(request, destination, segment) {
            writeStartSegment(
              destination,
              request.responseState,
              segment.formatContext,
              segment.id
            );
            flushSegment(request, destination, segment);
            return writeEndSegment(destination, segment.formatContext);
          }
          function flushCompletedBoundary(request, destination, boundary) {
            var completedSegments = boundary.completedSegments;
            var i = 0;
            for (; i < completedSegments.length; i++) {
              var segment = completedSegments[i];
              flushPartiallyCompletedSegment(
                request,
                destination,
                boundary,
                segment
              );
            }
            completedSegments.length = 0;
            return writeCompletedBoundaryInstruction(
              destination,
              request.responseState,
              boundary.id,
              boundary.rootSegmentID
            );
          }
          function flushPartialBoundary(request, destination, boundary) {
            var completedSegments = boundary.completedSegments;
            var i = 0;
            for (; i < completedSegments.length; i++) {
              var segment = completedSegments[i];
              if (
                !flushPartiallyCompletedSegment(
                  request,
                  destination,
                  boundary,
                  segment
                )
              ) {
                i++;
                completedSegments.splice(0, i);
                return false;
              }
            }
            completedSegments.splice(0, i);
            return true;
          }
          function flushPartiallyCompletedSegment(
            request,
            destination,
            boundary,
            segment
          ) {
            if (segment.status === FLUSHED) {
              return true;
            }
            var segmentID = segment.id;
            if (segmentID === -1) {
              var rootSegmentID = (segment.id = boundary.rootSegmentID);
              if (rootSegmentID === -1) {
                throw new Error(
                  "A root segment ID must have been assigned by now. This is a bug in React."
                );
              }
              return flushSegmentContainer(request, destination, segment);
            } else {
              flushSegmentContainer(request, destination, segment);
              return writeCompletedSegmentInstruction(
                destination,
                request.responseState,
                segmentID
              );
            }
          }
          function flushCompletedQueues(request, destination) {
            try {
              var completedRootSegment = request.completedRootSegment;
              if (
                completedRootSegment !== null &&
                request.pendingRootTasks === 0
              ) {
                flushSegment(request, destination, completedRootSegment);
                request.completedRootSegment = null;
                writeCompletedRoot(destination, request.responseState);
              }
              var clientRenderedBoundaries = request.clientRenderedBoundaries;
              var i;
              for (i = 0; i < clientRenderedBoundaries.length; i++) {
                var boundary = clientRenderedBoundaries[i];
                if (
                  !flushClientRenderedBoundary(request, destination, boundary)
                ) {
                  request.destination = null;
                  i++;
                  clientRenderedBoundaries.splice(0, i);
                  return;
                }
              }
              clientRenderedBoundaries.splice(0, i);
              var completedBoundaries = request.completedBoundaries;
              for (i = 0; i < completedBoundaries.length; i++) {
                var _boundary = completedBoundaries[i];
                if (!flushCompletedBoundary(request, destination, _boundary)) {
                  request.destination = null;
                  i++;
                  completedBoundaries.splice(0, i);
                  return;
                }
              }
              completedBoundaries.splice(0, i);
              completeWriting(destination);
              beginWriting(destination);
              var partialBoundaries = request.partialBoundaries;
              for (i = 0; i < partialBoundaries.length; i++) {
                var _boundary2 = partialBoundaries[i];
                if (!flushPartialBoundary(request, destination, _boundary2)) {
                  request.destination = null;
                  i++;
                  partialBoundaries.splice(0, i);
                  return;
                }
              }
              partialBoundaries.splice(0, i);
              var largeBoundaries = request.completedBoundaries;
              for (i = 0; i < largeBoundaries.length; i++) {
                var _boundary3 = largeBoundaries[i];
                if (!flushCompletedBoundary(request, destination, _boundary3)) {
                  request.destination = null;
                  i++;
                  largeBoundaries.splice(0, i);
                  return;
                }
              }
              largeBoundaries.splice(0, i);
            } finally {
              if (
                request.allPendingTasks === 0 &&
                request.pingedTasks.length === 0 &&
                request.clientRenderedBoundaries.length === 0 &&
                request.completedBoundaries.length === 0
              ) {
                {
                  if (request.abortableTasks.size !== 0) {
                    error(
                      "There was still abortable task at the root when we closed. This is a bug in React."
                    );
                  }
                }
                close(destination);
              }
            }
          }
          function startWork(request) {
            scheduleWork(function () {
              return performWork(request);
            });
          }
          function startFlowing(request, destination) {
            if (request.status === CLOSING) {
              request.status = CLOSED;
              closeWithError(destination, request.fatalError);
              return;
            }
            if (request.status === CLOSED) {
              return;
            }
            if (request.destination !== null) {
              return;
            }
            request.destination = destination;
            try {
              flushCompletedQueues(request, destination);
            } catch (error2) {
              logRecoverableError(request, error2);
              fatalError(request, error2);
            }
          }
          function abort(request, reason) {
            try {
              var abortableTasks = request.abortableTasks;
              abortableTasks.forEach(function (task) {
                return abortTask(task, request, reason);
              });
              abortableTasks.clear();
              if (request.destination !== null) {
                flushCompletedQueues(request, request.destination);
              }
            } catch (error2) {
              logRecoverableError(request, error2);
              fatalError(request, error2);
            }
          }
          function onError() {}
          function renderToStringImpl(
            children,
            options,
            generateStaticMarkup,
            abortReason
          ) {
            var didFatal = false;
            var fatalError2 = null;
            var result = "";
            var destination = {
              push: function (chunk) {
                if (chunk !== null) {
                  result += chunk;
                }
                return true;
              },
              destroy: function (error2) {
                didFatal = true;
                fatalError2 = error2;
              },
            };
            var readyToStream = false;
            function onShellReady() {
              readyToStream = true;
            }
            var request = createRequest(
              children,
              createResponseState$1(
                generateStaticMarkup,
                options ? options.identifierPrefix : void 0
              ),
              createRootFormatContext(),
              Infinity,
              onError,
              void 0,
              onShellReady,
              void 0,
              void 0
            );
            startWork(request);
            abort(request, abortReason);
            startFlowing(request, destination);
            if (didFatal) {
              throw fatalError2;
            }
            if (!readyToStream) {
              throw new Error(
                "A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition."
              );
            }
            return result;
          }
          function _inheritsLoose(subClass, superClass) {
            subClass.prototype = Object.create(superClass.prototype);
            subClass.prototype.constructor = subClass;
            subClass.__proto__ = superClass;
          }
          var ReactMarkupReadableStream = /* @__PURE__ */ (function (
            _Readable
          ) {
            _inheritsLoose(ReactMarkupReadableStream2, _Readable);
            function ReactMarkupReadableStream2() {
              var _this;
              _this = _Readable.call(this, {}) || this;
              _this.request = null;
              _this.startedFlowing = false;
              return _this;
            }
            var _proto = ReactMarkupReadableStream2.prototype;
            _proto._destroy = function _destroy(err, callback) {
              abort(this.request);
              callback(err);
            };
            _proto._read = function _read(size) {
              if (this.startedFlowing) {
                startFlowing(this.request, this);
              }
            };
            return ReactMarkupReadableStream2;
          })(stream.Readable);
          function onError$1() {}
          function renderToNodeStreamImpl(
            children,
            options,
            generateStaticMarkup
          ) {
            function onAllReady() {
              destination.startedFlowing = true;
              startFlowing(request, destination);
            }
            var destination = new ReactMarkupReadableStream();
            var request = createRequest(
              children,
              createResponseState$1(
                false,
                options ? options.identifierPrefix : void 0
              ),
              createRootFormatContext(),
              Infinity,
              onError$1,
              onAllReady,
              void 0,
              void 0
            );
            destination.request = request;
            startWork(request);
            return destination;
          }
          function renderToNodeStream(children, options) {
            {
              error(
                "renderToNodeStream is deprecated. Use renderToPipeableStream instead."
              );
            }
            return renderToNodeStreamImpl(children, options);
          }
          function renderToStaticNodeStream(children, options) {
            return renderToNodeStreamImpl(children, options);
          }
          function renderToString(children, options) {
            return renderToStringImpl(
              children,
              options,
              false,
              'The server used "renderToString" which does not support Suspense. If you intended for this Suspense boundary to render the fallback content on the server consider throwing an Error somewhere within the Suspense boundary. If you intended to have the server wait for the suspended component please switch to "renderToPipeableStream" which supports Suspense on the server'
            );
          }
          function renderToStaticMarkup(children, options) {
            return renderToStringImpl(
              children,
              options,
              true,
              'The server used "renderToStaticMarkup" which does not support Suspense. If you intended to have the server wait for the suspended component please switch to "renderToPipeableStream" which supports Suspense on the server'
            );
          }
          exports.renderToNodeStream = renderToNodeStream;
          exports.renderToStaticMarkup = renderToStaticMarkup;
          exports.renderToStaticNodeStream = renderToStaticNodeStream;
          exports.renderToString = renderToString;
          exports.version = ReactVersion;
        })();
      }
    },
  });

  // node_modules/react-dom/cjs/react-dom-server.node.development.js
  var require_react_dom_server_node_development = __commonJS({
    "node_modules/react-dom/cjs/react-dom-server.node.development.js"(exports) {
      "use strict";
      init_process_shim();
      if (process.env.NODE_ENV !== "production") {
        (function () {
          "use strict";
          var React = require_react();
          var util = require_util2();
          var ReactVersion = "18.2.0";
          var ReactSharedInternals =
            React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          function warn(format) {
            {
              {
                for (
                  var _len = arguments.length,
                    args = new Array(_len > 1 ? _len - 1 : 0),
                    _key = 1;
                  _key < _len;
                  _key++
                ) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format, args);
              }
            }
          }
          function error(format) {
            {
              {
                for (
                  var _len2 = arguments.length,
                    args = new Array(_len2 > 1 ? _len2 - 1 : 0),
                    _key2 = 1;
                  _key2 < _len2;
                  _key2++
                ) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 =
                ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function (item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(
                console[level],
                console,
                argsWithFormat
              );
            }
          }
          function scheduleWork(callback) {
            setImmediate(callback);
          }
          function flushBuffered(destination) {
            if (typeof destination.flush === "function") {
              destination.flush();
            }
          }
          var VIEW_SIZE = 2048;
          var currentView = null;
          var writtenBytes = 0;
          var destinationHasCapacity = true;
          function beginWriting(destination) {
            currentView = new Uint8Array(VIEW_SIZE);
            writtenBytes = 0;
            destinationHasCapacity = true;
          }
          function writeStringChunk(destination, stringChunk) {
            if (stringChunk.length === 0) {
              return;
            }
            if (stringChunk.length * 3 > VIEW_SIZE) {
              if (writtenBytes > 0) {
                writeToDestination(
                  destination,
                  currentView.subarray(0, writtenBytes)
                );
                currentView = new Uint8Array(VIEW_SIZE);
                writtenBytes = 0;
              }
              writeToDestination(destination, textEncoder.encode(stringChunk));
              return;
            }
            var target = currentView;
            if (writtenBytes > 0) {
              target = currentView.subarray(writtenBytes);
            }
            var _textEncoder$encodeIn = textEncoder.encodeInto(
                stringChunk,
                target
              ),
              read = _textEncoder$encodeIn.read,
              written = _textEncoder$encodeIn.written;
            writtenBytes += written;
            if (read < stringChunk.length) {
              writeToDestination(destination, currentView);
              currentView = new Uint8Array(VIEW_SIZE);
              writtenBytes = textEncoder.encodeInto(
                stringChunk.slice(read),
                currentView
              ).written;
            }
            if (writtenBytes === VIEW_SIZE) {
              writeToDestination(destination, currentView);
              currentView = new Uint8Array(VIEW_SIZE);
              writtenBytes = 0;
            }
          }
          function writeViewChunk(destination, chunk) {
            if (chunk.byteLength === 0) {
              return;
            }
            if (chunk.byteLength > VIEW_SIZE) {
              if (writtenBytes > 0) {
                writeToDestination(
                  destination,
                  currentView.subarray(0, writtenBytes)
                );
                currentView = new Uint8Array(VIEW_SIZE);
                writtenBytes = 0;
              }
              writeToDestination(destination, chunk);
              return;
            }
            var bytesToWrite = chunk;
            var allowableBytes = currentView.length - writtenBytes;
            if (allowableBytes < bytesToWrite.byteLength) {
              if (allowableBytes === 0) {
                writeToDestination(destination, currentView);
              } else {
                currentView.set(
                  bytesToWrite.subarray(0, allowableBytes),
                  writtenBytes
                );
                writtenBytes += allowableBytes;
                writeToDestination(destination, currentView);
                bytesToWrite = bytesToWrite.subarray(allowableBytes);
              }
              currentView = new Uint8Array(VIEW_SIZE);
              writtenBytes = 0;
            }
            currentView.set(bytesToWrite, writtenBytes);
            writtenBytes += bytesToWrite.byteLength;
            if (writtenBytes === VIEW_SIZE) {
              writeToDestination(destination, currentView);
              currentView = new Uint8Array(VIEW_SIZE);
              writtenBytes = 0;
            }
          }
          function writeChunk(destination, chunk) {
            if (typeof chunk === "string") {
              writeStringChunk(destination, chunk);
            } else {
              writeViewChunk(destination, chunk);
            }
          }
          function writeToDestination(destination, view) {
            var currentHasCapacity = destination.write(view);
            destinationHasCapacity =
              destinationHasCapacity && currentHasCapacity;
          }
          function writeChunkAndReturn(destination, chunk) {
            writeChunk(destination, chunk);
            return destinationHasCapacity;
          }
          function completeWriting(destination) {
            if (currentView && writtenBytes > 0) {
              destination.write(currentView.subarray(0, writtenBytes));
            }
            currentView = null;
            writtenBytes = 0;
            destinationHasCapacity = true;
          }
          function close(destination) {
            destination.end();
          }
          var textEncoder = new util.TextEncoder();
          function stringToChunk(content) {
            return content;
          }
          function stringToPrecomputedChunk(content) {
            return textEncoder.encode(content);
          }
          function closeWithError(destination, error2) {
            destination.destroy(error2);
          }
          function typeName(value) {
            {
              var hasToStringTag =
                typeof Symbol === "function" && Symbol.toStringTag;
              var type =
                (hasToStringTag && value[Symbol.toStringTag]) ||
                value.constructor.name ||
                "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkAttributeStringCoercion(value, attributeName) {
            {
              if (willCoercionThrow(value)) {
                error(
                  "The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.",
                  attributeName,
                  typeName(value)
                );
                return testStringCoercion(value);
              }
            }
          }
          function checkCSSPropertyStringCoercion(value, propName) {
            {
              if (willCoercionThrow(value)) {
                error(
                  "The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.",
                  propName,
                  typeName(value)
                );
                return testStringCoercion(value);
              }
            }
          }
          function checkHtmlStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error(
                  "The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.",
                  typeName(value)
                );
                return testStringCoercion(value);
              }
            }
          }
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          var RESERVED = 0;
          var STRING = 1;
          var BOOLEANISH_STRING = 2;
          var BOOLEAN = 3;
          var OVERLOADED_BOOLEAN = 4;
          var NUMERIC = 5;
          var POSITIVE_NUMERIC = 6;
          var ATTRIBUTE_NAME_START_CHAR =
            ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
          var ATTRIBUTE_NAME_CHAR =
            ATTRIBUTE_NAME_START_CHAR +
            "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
          var VALID_ATTRIBUTE_NAME_REGEX = new RegExp(
            "^[" +
              ATTRIBUTE_NAME_START_CHAR +
              "][" +
              ATTRIBUTE_NAME_CHAR +
              "]*$"
          );
          var illegalAttributeNameCache = {};
          var validatedAttributeNameCache = {};
          function isAttributeNameSafe(attributeName) {
            if (
              hasOwnProperty.call(validatedAttributeNameCache, attributeName)
            ) {
              return true;
            }
            if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
              return false;
            }
            if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
              validatedAttributeNameCache[attributeName] = true;
              return true;
            }
            illegalAttributeNameCache[attributeName] = true;
            {
              error("Invalid attribute name: `%s`", attributeName);
            }
            return false;
          }
          function shouldRemoveAttributeWithWarning(
            name,
            value,
            propertyInfo,
            isCustomComponentTag
          ) {
            if (propertyInfo !== null && propertyInfo.type === RESERVED) {
              return false;
            }
            switch (typeof value) {
              case "function":
              case "symbol":
                return true;
              case "boolean": {
                if (isCustomComponentTag) {
                  return false;
                }
                if (propertyInfo !== null) {
                  return !propertyInfo.acceptsBooleans;
                } else {
                  var prefix2 = name.toLowerCase().slice(0, 5);
                  return prefix2 !== "data-" && prefix2 !== "aria-";
                }
              }
              default:
                return false;
            }
          }
          function getPropertyInfo(name) {
            return properties.hasOwnProperty(name) ? properties[name] : null;
          }
          function PropertyInfoRecord(
            name,
            type,
            mustUseProperty,
            attributeName,
            attributeNamespace,
            sanitizeURL2,
            removeEmptyString
          ) {
            this.acceptsBooleans =
              type === BOOLEANISH_STRING ||
              type === BOOLEAN ||
              type === OVERLOADED_BOOLEAN;
            this.attributeName = attributeName;
            this.attributeNamespace = attributeNamespace;
            this.mustUseProperty = mustUseProperty;
            this.propertyName = name;
            this.type = type;
            this.sanitizeURL = sanitizeURL2;
            this.removeEmptyString = removeEmptyString;
          }
          var properties = {};
          var reservedProps = [
            "children",
            "dangerouslySetInnerHTML",
            "defaultValue",
            "defaultChecked",
            "innerHTML",
            "suppressContentEditableWarning",
            "suppressHydrationWarning",
            "style",
          ];
          reservedProps.forEach(function (name) {
            properties[name] = new PropertyInfoRecord(
              name,
              RESERVED,
              false,
              name,
              null,
              false,
              false
            );
          });
          [
            ["acceptCharset", "accept-charset"],
            ["className", "class"],
            ["htmlFor", "for"],
            ["httpEquiv", "http-equiv"],
          ].forEach(function (_ref) {
            var name = _ref[0],
              attributeName = _ref[1];
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              attributeName,
              null,
              false,
              false
            );
          });
          ["contentEditable", "draggable", "spellCheck", "value"].forEach(
            function (name) {
              properties[name] = new PropertyInfoRecord(
                name,
                BOOLEANISH_STRING,
                false,
                name.toLowerCase(),
                null,
                false,
                false
              );
            }
          );
          [
            "autoReverse",
            "externalResourcesRequired",
            "focusable",
            "preserveAlpha",
          ].forEach(function (name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEANISH_STRING,
              false,
              name,
              null,
              false,
              false
            );
          });
          [
            "allowFullScreen",
            "async",
            "autoFocus",
            "autoPlay",
            "controls",
            "default",
            "defer",
            "disabled",
            "disablePictureInPicture",
            "disableRemotePlayback",
            "formNoValidate",
            "hidden",
            "loop",
            "noModule",
            "noValidate",
            "open",
            "playsInline",
            "readOnly",
            "required",
            "reversed",
            "scoped",
            "seamless",
            "itemScope",
          ].forEach(function (name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEAN,
              false,
              name.toLowerCase(),
              null,
              false,
              false
            );
          });
          ["checked", "multiple", "muted", "selected"].forEach(function (name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEAN,
              true,
              name,
              null,
              false,
              false
            );
          });
          ["capture", "download"].forEach(function (name) {
            properties[name] = new PropertyInfoRecord(
              name,
              OVERLOADED_BOOLEAN,
              false,
              name,
              null,
              false,
              false
            );
          });
          ["cols", "rows", "size", "span"].forEach(function (name) {
            properties[name] = new PropertyInfoRecord(
              name,
              POSITIVE_NUMERIC,
              false,
              name,
              null,
              false,
              false
            );
          });
          ["rowSpan", "start"].forEach(function (name) {
            properties[name] = new PropertyInfoRecord(
              name,
              NUMERIC,
              false,
              name.toLowerCase(),
              null,
              false,
              false
            );
          });
          var CAMELIZE = /[\-\:]([a-z])/g;
          var capitalize = function (token) {
            return token[1].toUpperCase();
          };
          [
            "accent-height",
            "alignment-baseline",
            "arabic-form",
            "baseline-shift",
            "cap-height",
            "clip-path",
            "clip-rule",
            "color-interpolation",
            "color-interpolation-filters",
            "color-profile",
            "color-rendering",
            "dominant-baseline",
            "enable-background",
            "fill-opacity",
            "fill-rule",
            "flood-color",
            "flood-opacity",
            "font-family",
            "font-size",
            "font-size-adjust",
            "font-stretch",
            "font-style",
            "font-variant",
            "font-weight",
            "glyph-name",
            "glyph-orientation-horizontal",
            "glyph-orientation-vertical",
            "horiz-adv-x",
            "horiz-origin-x",
            "image-rendering",
            "letter-spacing",
            "lighting-color",
            "marker-end",
            "marker-mid",
            "marker-start",
            "overline-position",
            "overline-thickness",
            "paint-order",
            "panose-1",
            "pointer-events",
            "rendering-intent",
            "shape-rendering",
            "stop-color",
            "stop-opacity",
            "strikethrough-position",
            "strikethrough-thickness",
            "stroke-dasharray",
            "stroke-dashoffset",
            "stroke-linecap",
            "stroke-linejoin",
            "stroke-miterlimit",
            "stroke-opacity",
            "stroke-width",
            "text-anchor",
            "text-decoration",
            "text-rendering",
            "underline-position",
            "underline-thickness",
            "unicode-bidi",
            "unicode-range",
            "units-per-em",
            "v-alphabetic",
            "v-hanging",
            "v-ideographic",
            "v-mathematical",
            "vector-effect",
            "vert-adv-y",
            "vert-origin-x",
            "vert-origin-y",
            "word-spacing",
            "writing-mode",
            "xmlns:xlink",
            "x-height",
          ].forEach(function (attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              attributeName,
              null,
              false,
              false
            );
          });
          [
            "xlink:actuate",
            "xlink:arcrole",
            "xlink:role",
            "xlink:show",
            "xlink:title",
            "xlink:type",
          ].forEach(function (attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              attributeName,
              "http://www.w3.org/1999/xlink",
              false,
              false
            );
          });
          ["xml:base", "xml:lang", "xml:space"].forEach(function (
            attributeName
          ) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              attributeName,
              "http://www.w3.org/XML/1998/namespace",
              false,
              false
            );
          });
          ["tabIndex", "crossOrigin"].forEach(function (attributeName) {
            properties[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              attributeName.toLowerCase(),
              null,
              false,
              false
            );
          });
          var xlinkHref = "xlinkHref";
          properties[xlinkHref] = new PropertyInfoRecord(
            "xlinkHref",
            STRING,
            false,
            "xlink:href",
            "http://www.w3.org/1999/xlink",
            true,
            false
          );
          ["src", "href", "action", "formAction"].forEach(function (
            attributeName
          ) {
            properties[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              attributeName.toLowerCase(),
              null,
              true,
              true
            );
          });
          var isUnitlessNumber = {
            animationIterationCount: true,
            aspectRatio: true,
            borderImageOutset: true,
            borderImageSlice: true,
            borderImageWidth: true,
            boxFlex: true,
            boxFlexGroup: true,
            boxOrdinalGroup: true,
            columnCount: true,
            columns: true,
            flex: true,
            flexGrow: true,
            flexPositive: true,
            flexShrink: true,
            flexNegative: true,
            flexOrder: true,
            gridArea: true,
            gridRow: true,
            gridRowEnd: true,
            gridRowSpan: true,
            gridRowStart: true,
            gridColumn: true,
            gridColumnEnd: true,
            gridColumnSpan: true,
            gridColumnStart: true,
            fontWeight: true,
            lineClamp: true,
            lineHeight: true,
            opacity: true,
            order: true,
            orphans: true,
            tabSize: true,
            widows: true,
            zIndex: true,
            zoom: true,
            fillOpacity: true,
            floodOpacity: true,
            stopOpacity: true,
            strokeDasharray: true,
            strokeDashoffset: true,
            strokeMiterlimit: true,
            strokeOpacity: true,
            strokeWidth: true,
          };
          function prefixKey(prefix2, key) {
            return prefix2 + key.charAt(0).toUpperCase() + key.substring(1);
          }
          var prefixes = ["Webkit", "ms", "Moz", "O"];
          Object.keys(isUnitlessNumber).forEach(function (prop) {
            prefixes.forEach(function (prefix2) {
              isUnitlessNumber[prefixKey(prefix2, prop)] =
                isUnitlessNumber[prop];
            });
          });
          var hasReadOnlyValue = {
            button: true,
            checkbox: true,
            image: true,
            hidden: true,
            radio: true,
            reset: true,
            submit: true,
          };
          function checkControlledValueProps(tagName, props) {
            {
              if (
                !(
                  hasReadOnlyValue[props.type] ||
                  props.onChange ||
                  props.onInput ||
                  props.readOnly ||
                  props.disabled ||
                  props.value == null
                )
              ) {
                error(
                  "You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`."
                );
              }
              if (
                !(
                  props.onChange ||
                  props.readOnly ||
                  props.disabled ||
                  props.checked == null
                )
              ) {
                error(
                  "You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`."
                );
              }
            }
          }
          function isCustomComponent(tagName, props) {
            if (tagName.indexOf("-") === -1) {
              return typeof props.is === "string";
            }
            switch (tagName) {
              case "annotation-xml":
              case "color-profile":
              case "font-face":
              case "font-face-src":
              case "font-face-uri":
              case "font-face-format":
              case "font-face-name":
              case "missing-glyph":
                return false;
              default:
                return true;
            }
          }
          var ariaProperties = {
            "aria-current": 0,
            "aria-description": 0,
            "aria-details": 0,
            "aria-disabled": 0,
            "aria-hidden": 0,
            "aria-invalid": 0,
            "aria-keyshortcuts": 0,
            "aria-label": 0,
            "aria-roledescription": 0,
            "aria-autocomplete": 0,
            "aria-checked": 0,
            "aria-expanded": 0,
            "aria-haspopup": 0,
            "aria-level": 0,
            "aria-modal": 0,
            "aria-multiline": 0,
            "aria-multiselectable": 0,
            "aria-orientation": 0,
            "aria-placeholder": 0,
            "aria-pressed": 0,
            "aria-readonly": 0,
            "aria-required": 0,
            "aria-selected": 0,
            "aria-sort": 0,
            "aria-valuemax": 0,
            "aria-valuemin": 0,
            "aria-valuenow": 0,
            "aria-valuetext": 0,
            "aria-atomic": 0,
            "aria-busy": 0,
            "aria-live": 0,
            "aria-relevant": 0,
            "aria-dropeffect": 0,
            "aria-grabbed": 0,
            "aria-activedescendant": 0,
            "aria-colcount": 0,
            "aria-colindex": 0,
            "aria-colspan": 0,
            "aria-controls": 0,
            "aria-describedby": 0,
            "aria-errormessage": 0,
            "aria-flowto": 0,
            "aria-labelledby": 0,
            "aria-owns": 0,
            "aria-posinset": 0,
            "aria-rowcount": 0,
            "aria-rowindex": 0,
            "aria-rowspan": 0,
            "aria-setsize": 0,
          };
          var warnedProperties = {};
          var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel = new RegExp(
            "^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$"
          );
          function validateProperty(tagName, name) {
            {
              if (
                hasOwnProperty.call(warnedProperties, name) &&
                warnedProperties[name]
              ) {
                return true;
              }
              if (rARIACamel.test(name)) {
                var ariaName = "aria-" + name.slice(4).toLowerCase();
                var correctName = ariaProperties.hasOwnProperty(ariaName)
                  ? ariaName
                  : null;
                if (correctName == null) {
                  error(
                    "Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.",
                    name
                  );
                  warnedProperties[name] = true;
                  return true;
                }
                if (name !== correctName) {
                  error(
                    "Invalid ARIA attribute `%s`. Did you mean `%s`?",
                    name,
                    correctName
                  );
                  warnedProperties[name] = true;
                  return true;
                }
              }
              if (rARIA.test(name)) {
                var lowerCasedName = name.toLowerCase();
                var standardName = ariaProperties.hasOwnProperty(lowerCasedName)
                  ? lowerCasedName
                  : null;
                if (standardName == null) {
                  warnedProperties[name] = true;
                  return false;
                }
                if (name !== standardName) {
                  error(
                    "Unknown ARIA attribute `%s`. Did you mean `%s`?",
                    name,
                    standardName
                  );
                  warnedProperties[name] = true;
                  return true;
                }
              }
            }
            return true;
          }
          function warnInvalidARIAProps(type, props) {
            {
              var invalidProps = [];
              for (var key in props) {
                var isValid = validateProperty(type, key);
                if (!isValid) {
                  invalidProps.push(key);
                }
              }
              var unknownPropString = invalidProps
                .map(function (prop) {
                  return "`" + prop + "`";
                })
                .join(", ");
              if (invalidProps.length === 1) {
                error(
                  "Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props",
                  unknownPropString,
                  type
                );
              } else if (invalidProps.length > 1) {
                error(
                  "Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props",
                  unknownPropString,
                  type
                );
              }
            }
          }
          function validateProperties(type, props) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnInvalidARIAProps(type, props);
          }
          var didWarnValueNull = false;
          function validateProperties$1(type, props) {
            {
              if (
                type !== "input" &&
                type !== "textarea" &&
                type !== "select"
              ) {
                return;
              }
              if (props != null && props.value === null && !didWarnValueNull) {
                didWarnValueNull = true;
                if (type === "select" && props.multiple) {
                  error(
                    "`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.",
                    type
                  );
                } else {
                  error(
                    "`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.",
                    type
                  );
                }
              }
            }
          }
          var possibleStandardNames = {
            accept: "accept",
            acceptcharset: "acceptCharset",
            "accept-charset": "acceptCharset",
            accesskey: "accessKey",
            action: "action",
            allowfullscreen: "allowFullScreen",
            alt: "alt",
            as: "as",
            async: "async",
            autocapitalize: "autoCapitalize",
            autocomplete: "autoComplete",
            autocorrect: "autoCorrect",
            autofocus: "autoFocus",
            autoplay: "autoPlay",
            autosave: "autoSave",
            capture: "capture",
            cellpadding: "cellPadding",
            cellspacing: "cellSpacing",
            challenge: "challenge",
            charset: "charSet",
            checked: "checked",
            children: "children",
            cite: "cite",
            class: "className",
            classid: "classID",
            classname: "className",
            cols: "cols",
            colspan: "colSpan",
            content: "content",
            contenteditable: "contentEditable",
            contextmenu: "contextMenu",
            controls: "controls",
            controlslist: "controlsList",
            coords: "coords",
            crossorigin: "crossOrigin",
            dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
            data: "data",
            datetime: "dateTime",
            default: "default",
            defaultchecked: "defaultChecked",
            defaultvalue: "defaultValue",
            defer: "defer",
            dir: "dir",
            disabled: "disabled",
            disablepictureinpicture: "disablePictureInPicture",
            disableremoteplayback: "disableRemotePlayback",
            download: "download",
            draggable: "draggable",
            enctype: "encType",
            enterkeyhint: "enterKeyHint",
            for: "htmlFor",
            form: "form",
            formmethod: "formMethod",
            formaction: "formAction",
            formenctype: "formEncType",
            formnovalidate: "formNoValidate",
            formtarget: "formTarget",
            frameborder: "frameBorder",
            headers: "headers",
            height: "height",
            hidden: "hidden",
            high: "high",
            href: "href",
            hreflang: "hrefLang",
            htmlfor: "htmlFor",
            httpequiv: "httpEquiv",
            "http-equiv": "httpEquiv",
            icon: "icon",
            id: "id",
            imagesizes: "imageSizes",
            imagesrcset: "imageSrcSet",
            innerhtml: "innerHTML",
            inputmode: "inputMode",
            integrity: "integrity",
            is: "is",
            itemid: "itemID",
            itemprop: "itemProp",
            itemref: "itemRef",
            itemscope: "itemScope",
            itemtype: "itemType",
            keyparams: "keyParams",
            keytype: "keyType",
            kind: "kind",
            label: "label",
            lang: "lang",
            list: "list",
            loop: "loop",
            low: "low",
            manifest: "manifest",
            marginwidth: "marginWidth",
            marginheight: "marginHeight",
            max: "max",
            maxlength: "maxLength",
            media: "media",
            mediagroup: "mediaGroup",
            method: "method",
            min: "min",
            minlength: "minLength",
            multiple: "multiple",
            muted: "muted",
            name: "name",
            nomodule: "noModule",
            nonce: "nonce",
            novalidate: "noValidate",
            open: "open",
            optimum: "optimum",
            pattern: "pattern",
            placeholder: "placeholder",
            playsinline: "playsInline",
            poster: "poster",
            preload: "preload",
            profile: "profile",
            radiogroup: "radioGroup",
            readonly: "readOnly",
            referrerpolicy: "referrerPolicy",
            rel: "rel",
            required: "required",
            reversed: "reversed",
            role: "role",
            rows: "rows",
            rowspan: "rowSpan",
            sandbox: "sandbox",
            scope: "scope",
            scoped: "scoped",
            scrolling: "scrolling",
            seamless: "seamless",
            selected: "selected",
            shape: "shape",
            size: "size",
            sizes: "sizes",
            span: "span",
            spellcheck: "spellCheck",
            src: "src",
            srcdoc: "srcDoc",
            srclang: "srcLang",
            srcset: "srcSet",
            start: "start",
            step: "step",
            style: "style",
            summary: "summary",
            tabindex: "tabIndex",
            target: "target",
            title: "title",
            type: "type",
            usemap: "useMap",
            value: "value",
            width: "width",
            wmode: "wmode",
            wrap: "wrap",
            about: "about",
            accentheight: "accentHeight",
            "accent-height": "accentHeight",
            accumulate: "accumulate",
            additive: "additive",
            alignmentbaseline: "alignmentBaseline",
            "alignment-baseline": "alignmentBaseline",
            allowreorder: "allowReorder",
            alphabetic: "alphabetic",
            amplitude: "amplitude",
            arabicform: "arabicForm",
            "arabic-form": "arabicForm",
            ascent: "ascent",
            attributename: "attributeName",
            attributetype: "attributeType",
            autoreverse: "autoReverse",
            azimuth: "azimuth",
            basefrequency: "baseFrequency",
            baselineshift: "baselineShift",
            "baseline-shift": "baselineShift",
            baseprofile: "baseProfile",
            bbox: "bbox",
            begin: "begin",
            bias: "bias",
            by: "by",
            calcmode: "calcMode",
            capheight: "capHeight",
            "cap-height": "capHeight",
            clip: "clip",
            clippath: "clipPath",
            "clip-path": "clipPath",
            clippathunits: "clipPathUnits",
            cliprule: "clipRule",
            "clip-rule": "clipRule",
            color: "color",
            colorinterpolation: "colorInterpolation",
            "color-interpolation": "colorInterpolation",
            colorinterpolationfilters: "colorInterpolationFilters",
            "color-interpolation-filters": "colorInterpolationFilters",
            colorprofile: "colorProfile",
            "color-profile": "colorProfile",
            colorrendering: "colorRendering",
            "color-rendering": "colorRendering",
            contentscripttype: "contentScriptType",
            contentstyletype: "contentStyleType",
            cursor: "cursor",
            cx: "cx",
            cy: "cy",
            d: "d",
            datatype: "datatype",
            decelerate: "decelerate",
            descent: "descent",
            diffuseconstant: "diffuseConstant",
            direction: "direction",
            display: "display",
            divisor: "divisor",
            dominantbaseline: "dominantBaseline",
            "dominant-baseline": "dominantBaseline",
            dur: "dur",
            dx: "dx",
            dy: "dy",
            edgemode: "edgeMode",
            elevation: "elevation",
            enablebackground: "enableBackground",
            "enable-background": "enableBackground",
            end: "end",
            exponent: "exponent",
            externalresourcesrequired: "externalResourcesRequired",
            fill: "fill",
            fillopacity: "fillOpacity",
            "fill-opacity": "fillOpacity",
            fillrule: "fillRule",
            "fill-rule": "fillRule",
            filter: "filter",
            filterres: "filterRes",
            filterunits: "filterUnits",
            floodopacity: "floodOpacity",
            "flood-opacity": "floodOpacity",
            floodcolor: "floodColor",
            "flood-color": "floodColor",
            focusable: "focusable",
            fontfamily: "fontFamily",
            "font-family": "fontFamily",
            fontsize: "fontSize",
            "font-size": "fontSize",
            fontsizeadjust: "fontSizeAdjust",
            "font-size-adjust": "fontSizeAdjust",
            fontstretch: "fontStretch",
            "font-stretch": "fontStretch",
            fontstyle: "fontStyle",
            "font-style": "fontStyle",
            fontvariant: "fontVariant",
            "font-variant": "fontVariant",
            fontweight: "fontWeight",
            "font-weight": "fontWeight",
            format: "format",
            from: "from",
            fx: "fx",
            fy: "fy",
            g1: "g1",
            g2: "g2",
            glyphname: "glyphName",
            "glyph-name": "glyphName",
            glyphorientationhorizontal: "glyphOrientationHorizontal",
            "glyph-orientation-horizontal": "glyphOrientationHorizontal",
            glyphorientationvertical: "glyphOrientationVertical",
            "glyph-orientation-vertical": "glyphOrientationVertical",
            glyphref: "glyphRef",
            gradienttransform: "gradientTransform",
            gradientunits: "gradientUnits",
            hanging: "hanging",
            horizadvx: "horizAdvX",
            "horiz-adv-x": "horizAdvX",
            horizoriginx: "horizOriginX",
            "horiz-origin-x": "horizOriginX",
            ideographic: "ideographic",
            imagerendering: "imageRendering",
            "image-rendering": "imageRendering",
            in2: "in2",
            in: "in",
            inlist: "inlist",
            intercept: "intercept",
            k1: "k1",
            k2: "k2",
            k3: "k3",
            k4: "k4",
            k: "k",
            kernelmatrix: "kernelMatrix",
            kernelunitlength: "kernelUnitLength",
            kerning: "kerning",
            keypoints: "keyPoints",
            keysplines: "keySplines",
            keytimes: "keyTimes",
            lengthadjust: "lengthAdjust",
            letterspacing: "letterSpacing",
            "letter-spacing": "letterSpacing",
            lightingcolor: "lightingColor",
            "lighting-color": "lightingColor",
            limitingconeangle: "limitingConeAngle",
            local: "local",
            markerend: "markerEnd",
            "marker-end": "markerEnd",
            markerheight: "markerHeight",
            markermid: "markerMid",
            "marker-mid": "markerMid",
            markerstart: "markerStart",
            "marker-start": "markerStart",
            markerunits: "markerUnits",
            markerwidth: "markerWidth",
            mask: "mask",
            maskcontentunits: "maskContentUnits",
            maskunits: "maskUnits",
            mathematical: "mathematical",
            mode: "mode",
            numoctaves: "numOctaves",
            offset: "offset",
            opacity: "opacity",
            operator: "operator",
            order: "order",
            orient: "orient",
            orientation: "orientation",
            origin: "origin",
            overflow: "overflow",
            overlineposition: "overlinePosition",
            "overline-position": "overlinePosition",
            overlinethickness: "overlineThickness",
            "overline-thickness": "overlineThickness",
            paintorder: "paintOrder",
            "paint-order": "paintOrder",
            panose1: "panose1",
            "panose-1": "panose1",
            pathlength: "pathLength",
            patterncontentunits: "patternContentUnits",
            patterntransform: "patternTransform",
            patternunits: "patternUnits",
            pointerevents: "pointerEvents",
            "pointer-events": "pointerEvents",
            points: "points",
            pointsatx: "pointsAtX",
            pointsaty: "pointsAtY",
            pointsatz: "pointsAtZ",
            prefix: "prefix",
            preservealpha: "preserveAlpha",
            preserveaspectratio: "preserveAspectRatio",
            primitiveunits: "primitiveUnits",
            property: "property",
            r: "r",
            radius: "radius",
            refx: "refX",
            refy: "refY",
            renderingintent: "renderingIntent",
            "rendering-intent": "renderingIntent",
            repeatcount: "repeatCount",
            repeatdur: "repeatDur",
            requiredextensions: "requiredExtensions",
            requiredfeatures: "requiredFeatures",
            resource: "resource",
            restart: "restart",
            result: "result",
            results: "results",
            rotate: "rotate",
            rx: "rx",
            ry: "ry",
            scale: "scale",
            security: "security",
            seed: "seed",
            shaperendering: "shapeRendering",
            "shape-rendering": "shapeRendering",
            slope: "slope",
            spacing: "spacing",
            specularconstant: "specularConstant",
            specularexponent: "specularExponent",
            speed: "speed",
            spreadmethod: "spreadMethod",
            startoffset: "startOffset",
            stddeviation: "stdDeviation",
            stemh: "stemh",
            stemv: "stemv",
            stitchtiles: "stitchTiles",
            stopcolor: "stopColor",
            "stop-color": "stopColor",
            stopopacity: "stopOpacity",
            "stop-opacity": "stopOpacity",
            strikethroughposition: "strikethroughPosition",
            "strikethrough-position": "strikethroughPosition",
            strikethroughthickness: "strikethroughThickness",
            "strikethrough-thickness": "strikethroughThickness",
            string: "string",
            stroke: "stroke",
            strokedasharray: "strokeDasharray",
            "stroke-dasharray": "strokeDasharray",
            strokedashoffset: "strokeDashoffset",
            "stroke-dashoffset": "strokeDashoffset",
            strokelinecap: "strokeLinecap",
            "stroke-linecap": "strokeLinecap",
            strokelinejoin: "strokeLinejoin",
            "stroke-linejoin": "strokeLinejoin",
            strokemiterlimit: "strokeMiterlimit",
            "stroke-miterlimit": "strokeMiterlimit",
            strokewidth: "strokeWidth",
            "stroke-width": "strokeWidth",
            strokeopacity: "strokeOpacity",
            "stroke-opacity": "strokeOpacity",
            suppresscontenteditablewarning: "suppressContentEditableWarning",
            suppresshydrationwarning: "suppressHydrationWarning",
            surfacescale: "surfaceScale",
            systemlanguage: "systemLanguage",
            tablevalues: "tableValues",
            targetx: "targetX",
            targety: "targetY",
            textanchor: "textAnchor",
            "text-anchor": "textAnchor",
            textdecoration: "textDecoration",
            "text-decoration": "textDecoration",
            textlength: "textLength",
            textrendering: "textRendering",
            "text-rendering": "textRendering",
            to: "to",
            transform: "transform",
            typeof: "typeof",
            u1: "u1",
            u2: "u2",
            underlineposition: "underlinePosition",
            "underline-position": "underlinePosition",
            underlinethickness: "underlineThickness",
            "underline-thickness": "underlineThickness",
            unicode: "unicode",
            unicodebidi: "unicodeBidi",
            "unicode-bidi": "unicodeBidi",
            unicoderange: "unicodeRange",
            "unicode-range": "unicodeRange",
            unitsperem: "unitsPerEm",
            "units-per-em": "unitsPerEm",
            unselectable: "unselectable",
            valphabetic: "vAlphabetic",
            "v-alphabetic": "vAlphabetic",
            values: "values",
            vectoreffect: "vectorEffect",
            "vector-effect": "vectorEffect",
            version: "version",
            vertadvy: "vertAdvY",
            "vert-adv-y": "vertAdvY",
            vertoriginx: "vertOriginX",
            "vert-origin-x": "vertOriginX",
            vertoriginy: "vertOriginY",
            "vert-origin-y": "vertOriginY",
            vhanging: "vHanging",
            "v-hanging": "vHanging",
            videographic: "vIdeographic",
            "v-ideographic": "vIdeographic",
            viewbox: "viewBox",
            viewtarget: "viewTarget",
            visibility: "visibility",
            vmathematical: "vMathematical",
            "v-mathematical": "vMathematical",
            vocab: "vocab",
            widths: "widths",
            wordspacing: "wordSpacing",
            "word-spacing": "wordSpacing",
            writingmode: "writingMode",
            "writing-mode": "writingMode",
            x1: "x1",
            x2: "x2",
            x: "x",
            xchannelselector: "xChannelSelector",
            xheight: "xHeight",
            "x-height": "xHeight",
            xlinkactuate: "xlinkActuate",
            "xlink:actuate": "xlinkActuate",
            xlinkarcrole: "xlinkArcrole",
            "xlink:arcrole": "xlinkArcrole",
            xlinkhref: "xlinkHref",
            "xlink:href": "xlinkHref",
            xlinkrole: "xlinkRole",
            "xlink:role": "xlinkRole",
            xlinkshow: "xlinkShow",
            "xlink:show": "xlinkShow",
            xlinktitle: "xlinkTitle",
            "xlink:title": "xlinkTitle",
            xlinktype: "xlinkType",
            "xlink:type": "xlinkType",
            xmlbase: "xmlBase",
            "xml:base": "xmlBase",
            xmllang: "xmlLang",
            "xml:lang": "xmlLang",
            xmlns: "xmlns",
            "xml:space": "xmlSpace",
            xmlnsxlink: "xmlnsXlink",
            "xmlns:xlink": "xmlnsXlink",
            xmlspace: "xmlSpace",
            y1: "y1",
            y2: "y2",
            y: "y",
            ychannelselector: "yChannelSelector",
            z: "z",
            zoomandpan: "zoomAndPan",
          };
          var validateProperty$1 = function () {};
          {
            var warnedProperties$1 = {};
            var EVENT_NAME_REGEX = /^on./;
            var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
            var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
            var rARIACamel$1 = new RegExp(
              "^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$"
            );
            validateProperty$1 = function (
              tagName,
              name,
              value,
              eventRegistry
            ) {
              if (
                hasOwnProperty.call(warnedProperties$1, name) &&
                warnedProperties$1[name]
              ) {
                return true;
              }
              var lowerCasedName = name.toLowerCase();
              if (
                lowerCasedName === "onfocusin" ||
                lowerCasedName === "onfocusout"
              ) {
                error(
                  "React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React."
                );
                warnedProperties$1[name] = true;
                return true;
              }
              if (eventRegistry != null) {
                var registrationNameDependencies =
                    eventRegistry.registrationNameDependencies,
                  possibleRegistrationNames =
                    eventRegistry.possibleRegistrationNames;
                if (registrationNameDependencies.hasOwnProperty(name)) {
                  return true;
                }
                var registrationName = possibleRegistrationNames.hasOwnProperty(
                  lowerCasedName
                )
                  ? possibleRegistrationNames[lowerCasedName]
                  : null;
                if (registrationName != null) {
                  error(
                    "Invalid event handler property `%s`. Did you mean `%s`?",
                    name,
                    registrationName
                  );
                  warnedProperties$1[name] = true;
                  return true;
                }
                if (EVENT_NAME_REGEX.test(name)) {
                  error(
                    "Unknown event handler property `%s`. It will be ignored.",
                    name
                  );
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (EVENT_NAME_REGEX.test(name)) {
                if (INVALID_EVENT_NAME_REGEX.test(name)) {
                  error(
                    "Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.",
                    name
                  );
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
                return true;
              }
              if (lowerCasedName === "innerhtml") {
                error(
                  "Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`."
                );
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "aria") {
                error(
                  "The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead."
                );
                warnedProperties$1[name] = true;
                return true;
              }
              if (
                lowerCasedName === "is" &&
                value !== null &&
                value !== void 0 &&
                typeof value !== "string"
              ) {
                error(
                  "Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.",
                  typeof value
                );
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "number" && isNaN(value)) {
                error(
                  "Received NaN for the `%s` attribute. If this is expected, cast the value to a string.",
                  name
                );
                warnedProperties$1[name] = true;
                return true;
              }
              var propertyInfo = getPropertyInfo(name);
              var isReserved =
                propertyInfo !== null && propertyInfo.type === RESERVED;
              if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                var standardName = possibleStandardNames[lowerCasedName];
                if (standardName !== name) {
                  error(
                    "Invalid DOM property `%s`. Did you mean `%s`?",
                    name,
                    standardName
                  );
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (!isReserved && name !== lowerCasedName) {
                error(
                  "React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.",
                  name,
                  lowerCasedName
                );
                warnedProperties$1[name] = true;
                return true;
              }
              if (
                typeof value === "boolean" &&
                shouldRemoveAttributeWithWarning(
                  name,
                  value,
                  propertyInfo,
                  false
                )
              ) {
                if (value) {
                  error(
                    'Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.',
                    value,
                    name,
                    name,
                    value,
                    name
                  );
                } else {
                  error(
                    'Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.',
                    value,
                    name,
                    name,
                    value,
                    name,
                    name,
                    name
                  );
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (isReserved) {
                return true;
              }
              if (
                shouldRemoveAttributeWithWarning(
                  name,
                  value,
                  propertyInfo,
                  false
                )
              ) {
                warnedProperties$1[name] = true;
                return false;
              }
              if (
                (value === "false" || value === "true") &&
                propertyInfo !== null &&
                propertyInfo.type === BOOLEAN
              ) {
                error(
                  "Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?",
                  value,
                  name,
                  value === "false"
                    ? "The browser will interpret it as a truthy value."
                    : 'Although this works, it will not work as expected if you pass the string "false".',
                  name,
                  value
                );
                warnedProperties$1[name] = true;
                return true;
              }
              return true;
            };
          }
          var warnUnknownProperties = function (type, props, eventRegistry) {
            {
              var unknownProps = [];
              for (var key in props) {
                var isValid = validateProperty$1(
                  type,
                  key,
                  props[key],
                  eventRegistry
                );
                if (!isValid) {
                  unknownProps.push(key);
                }
              }
              var unknownPropString = unknownProps
                .map(function (prop) {
                  return "`" + prop + "`";
                })
                .join(", ");
              if (unknownProps.length === 1) {
                error(
                  "Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ",
                  unknownPropString,
                  type
                );
              } else if (unknownProps.length > 1) {
                error(
                  "Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ",
                  unknownPropString,
                  type
                );
              }
            }
          };
          function validateProperties$2(type, props, eventRegistry) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnUnknownProperties(type, props, eventRegistry);
          }
          var warnValidStyle = function () {};
          {
            var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
            var msPattern = /^-ms-/;
            var hyphenPattern = /-(.)/g;
            var badStyleValueWithSemicolonPattern = /;\s*$/;
            var warnedStyleNames = {};
            var warnedStyleValues = {};
            var warnedForNaNValue = false;
            var warnedForInfinityValue = false;
            var camelize = function (string) {
              return string.replace(hyphenPattern, function (_, character) {
                return character.toUpperCase();
              });
            };
            var warnHyphenatedStyleName = function (name) {
              if (
                warnedStyleNames.hasOwnProperty(name) &&
                warnedStyleNames[name]
              ) {
                return;
              }
              warnedStyleNames[name] = true;
              error(
                "Unsupported style property %s. Did you mean %s?",
                name,
                camelize(name.replace(msPattern, "ms-"))
              );
            };
            var warnBadVendoredStyleName = function (name) {
              if (
                warnedStyleNames.hasOwnProperty(name) &&
                warnedStyleNames[name]
              ) {
                return;
              }
              warnedStyleNames[name] = true;
              error(
                "Unsupported vendor-prefixed style property %s. Did you mean %s?",
                name,
                name.charAt(0).toUpperCase() + name.slice(1)
              );
            };
            var warnStyleValueWithSemicolon = function (name, value) {
              if (
                warnedStyleValues.hasOwnProperty(value) &&
                warnedStyleValues[value]
              ) {
                return;
              }
              warnedStyleValues[value] = true;
              error(
                `Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`,
                name,
                value.replace(badStyleValueWithSemicolonPattern, "")
              );
            };
            var warnStyleValueIsNaN = function (name, value) {
              if (warnedForNaNValue) {
                return;
              }
              warnedForNaNValue = true;
              error(
                "`NaN` is an invalid value for the `%s` css style property.",
                name
              );
            };
            var warnStyleValueIsInfinity = function (name, value) {
              if (warnedForInfinityValue) {
                return;
              }
              warnedForInfinityValue = true;
              error(
                "`Infinity` is an invalid value for the `%s` css style property.",
                name
              );
            };
            warnValidStyle = function (name, value) {
              if (name.indexOf("-") > -1) {
                warnHyphenatedStyleName(name);
              } else if (badVendoredStyleNamePattern.test(name)) {
                warnBadVendoredStyleName(name);
              } else if (badStyleValueWithSemicolonPattern.test(value)) {
                warnStyleValueWithSemicolon(name, value);
              }
              if (typeof value === "number") {
                if (isNaN(value)) {
                  warnStyleValueIsNaN(name, value);
                } else if (!isFinite(value)) {
                  warnStyleValueIsInfinity(name, value);
                }
              }
            };
          }
          var warnValidStyle$1 = warnValidStyle;
          var matchHtmlRegExp = /["'&<>]/;
          function escapeHtml(string) {
            {
              checkHtmlStringCoercion(string);
            }
            var str = "" + string;
            var match = matchHtmlRegExp.exec(str);
            if (!match) {
              return str;
            }
            var escape;
            var html = "";
            var index;
            var lastIndex = 0;
            for (index = match.index; index < str.length; index++) {
              switch (str.charCodeAt(index)) {
                case 34:
                  escape = "&quot;";
                  break;
                case 38:
                  escape = "&amp;";
                  break;
                case 39:
                  escape = "&#x27;";
                  break;
                case 60:
                  escape = "&lt;";
                  break;
                case 62:
                  escape = "&gt;";
                  break;
                default:
                  continue;
              }
              if (lastIndex !== index) {
                html += str.substring(lastIndex, index);
              }
              lastIndex = index + 1;
              html += escape;
            }
            return lastIndex !== index
              ? html + str.substring(lastIndex, index)
              : html;
          }
          function escapeTextForBrowser(text) {
            if (typeof text === "boolean" || typeof text === "number") {
              return "" + text;
            }
            return escapeHtml(text);
          }
          var uppercasePattern = /([A-Z])/g;
          var msPattern$1 = /^ms-/;
          function hyphenateStyleName(name) {
            return name
              .replace(uppercasePattern, "-$1")
              .toLowerCase()
              .replace(msPattern$1, "-ms-");
          }
          var isJavaScriptProtocol =
            /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
          var didWarn = false;
          function sanitizeURL(url) {
            {
              if (!didWarn && isJavaScriptProtocol.test(url)) {
                didWarn = true;
                error(
                  "A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.",
                  JSON.stringify(url)
                );
              }
            }
          }
          var isArrayImpl = Array.isArray;
          function isArray(a) {
            return isArrayImpl(a);
          }
          var startInlineScript = stringToPrecomputedChunk("<script>");
          var endInlineScript = stringToPrecomputedChunk("</script>");
          var startScriptSrc = stringToPrecomputedChunk('<script src="');
          var startModuleSrc = stringToPrecomputedChunk(
            '<script type="module" src="'
          );
          var endAsyncScript = stringToPrecomputedChunk('" async=""></script>');
          function escapeBootstrapScriptContent(scriptText) {
            {
              checkHtmlStringCoercion(scriptText);
            }
            return ("" + scriptText).replace(scriptRegex, scriptReplacer);
          }
          var scriptRegex = /(<\/|<)(s)(cript)/gi;
          var scriptReplacer = function (match, prefix2, s, suffix) {
            return "" + prefix2 + (s === "s" ? "\\u0073" : "\\u0053") + suffix;
          };
          function createResponseState(
            identifierPrefix,
            nonce,
            bootstrapScriptContent,
            bootstrapScripts,
            bootstrapModules
          ) {
            var idPrefix = identifierPrefix === void 0 ? "" : identifierPrefix;
            var inlineScriptWithNonce =
              nonce === void 0
                ? startInlineScript
                : stringToPrecomputedChunk(
                    '<script nonce="' + escapeTextForBrowser(nonce) + '">'
                  );
            var bootstrapChunks = [];
            if (bootstrapScriptContent !== void 0) {
              bootstrapChunks.push(
                inlineScriptWithNonce,
                stringToChunk(
                  escapeBootstrapScriptContent(bootstrapScriptContent)
                ),
                endInlineScript
              );
            }
            if (bootstrapScripts !== void 0) {
              for (var i = 0; i < bootstrapScripts.length; i++) {
                bootstrapChunks.push(
                  startScriptSrc,
                  stringToChunk(escapeTextForBrowser(bootstrapScripts[i])),
                  endAsyncScript
                );
              }
            }
            if (bootstrapModules !== void 0) {
              for (var _i = 0; _i < bootstrapModules.length; _i++) {
                bootstrapChunks.push(
                  startModuleSrc,
                  stringToChunk(escapeTextForBrowser(bootstrapModules[_i])),
                  endAsyncScript
                );
              }
            }
            return {
              bootstrapChunks,
              startInlineScript: inlineScriptWithNonce,
              placeholderPrefix: stringToPrecomputedChunk(idPrefix + "P:"),
              segmentPrefix: stringToPrecomputedChunk(idPrefix + "S:"),
              boundaryPrefix: idPrefix + "B:",
              idPrefix,
              nextSuspenseID: 0,
              sentCompleteSegmentFunction: false,
              sentCompleteBoundaryFunction: false,
              sentClientRenderFunction: false,
            };
          }
          var ROOT_HTML_MODE = 0;
          var HTML_MODE = 1;
          var SVG_MODE = 2;
          var MATHML_MODE = 3;
          var HTML_TABLE_MODE = 4;
          var HTML_TABLE_BODY_MODE = 5;
          var HTML_TABLE_ROW_MODE = 6;
          var HTML_COLGROUP_MODE = 7;
          function createFormatContext(insertionMode, selectedValue) {
            return {
              insertionMode,
              selectedValue,
            };
          }
          function createRootFormatContext(namespaceURI) {
            var insertionMode =
              namespaceURI === "http://www.w3.org/2000/svg"
                ? SVG_MODE
                : namespaceURI === "http://www.w3.org/1998/Math/MathML"
                ? MATHML_MODE
                : ROOT_HTML_MODE;
            return createFormatContext(insertionMode, null);
          }
          function getChildFormatContext(parentContext, type, props) {
            switch (type) {
              case "select":
                return createFormatContext(
                  HTML_MODE,
                  props.value != null ? props.value : props.defaultValue
                );
              case "svg":
                return createFormatContext(SVG_MODE, null);
              case "math":
                return createFormatContext(MATHML_MODE, null);
              case "foreignObject":
                return createFormatContext(HTML_MODE, null);
              case "table":
                return createFormatContext(HTML_TABLE_MODE, null);
              case "thead":
              case "tbody":
              case "tfoot":
                return createFormatContext(HTML_TABLE_BODY_MODE, null);
              case "colgroup":
                return createFormatContext(HTML_COLGROUP_MODE, null);
              case "tr":
                return createFormatContext(HTML_TABLE_ROW_MODE, null);
            }
            if (parentContext.insertionMode >= HTML_TABLE_MODE) {
              return createFormatContext(HTML_MODE, null);
            }
            if (parentContext.insertionMode === ROOT_HTML_MODE) {
              return createFormatContext(HTML_MODE, null);
            }
            return parentContext;
          }
          var UNINITIALIZED_SUSPENSE_BOUNDARY_ID = null;
          function assignSuspenseBoundaryID(responseState) {
            var generatedID = responseState.nextSuspenseID++;
            return stringToPrecomputedChunk(
              responseState.boundaryPrefix + generatedID.toString(16)
            );
          }
          function makeId(responseState, treeId, localId) {
            var idPrefix = responseState.idPrefix;
            var id = ":" + idPrefix + "R" + treeId;
            if (localId > 0) {
              id += "H" + localId.toString(32);
            }
            return id + ":";
          }
          function encodeHTMLTextNode(text) {
            return escapeTextForBrowser(text);
          }
          var textSeparator = stringToPrecomputedChunk("<!-- -->");
          function pushTextInstance(target, text, responseState, textEmbedded) {
            if (text === "") {
              return textEmbedded;
            }
            if (textEmbedded) {
              target.push(textSeparator);
            }
            target.push(stringToChunk(encodeHTMLTextNode(text)));
            return true;
          }
          function pushSegmentFinale(
            target,
            responseState,
            lastPushedText,
            textEmbedded
          ) {
            if (lastPushedText && textEmbedded) {
              target.push(textSeparator);
            }
          }
          var styleNameCache = /* @__PURE__ */ new Map();
          function processStyleName(styleName) {
            var chunk = styleNameCache.get(styleName);
            if (chunk !== void 0) {
              return chunk;
            }
            var result = stringToPrecomputedChunk(
              escapeTextForBrowser(hyphenateStyleName(styleName))
            );
            styleNameCache.set(styleName, result);
            return result;
          }
          var styleAttributeStart = stringToPrecomputedChunk(' style="');
          var styleAssign = stringToPrecomputedChunk(":");
          var styleSeparator = stringToPrecomputedChunk(";");
          function pushStyle(target, responseState, style) {
            if (typeof style !== "object") {
              throw new Error(
                "The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX."
              );
            }
            var isFirst = true;
            for (var styleName in style) {
              if (!hasOwnProperty.call(style, styleName)) {
                continue;
              }
              var styleValue = style[styleName];
              if (
                styleValue == null ||
                typeof styleValue === "boolean" ||
                styleValue === ""
              ) {
                continue;
              }
              var nameChunk = void 0;
              var valueChunk = void 0;
              var isCustomProperty = styleName.indexOf("--") === 0;
              if (isCustomProperty) {
                nameChunk = stringToChunk(escapeTextForBrowser(styleName));
                {
                  checkCSSPropertyStringCoercion(styleValue, styleName);
                }
                valueChunk = stringToChunk(
                  escapeTextForBrowser(("" + styleValue).trim())
                );
              } else {
                {
                  warnValidStyle$1(styleName, styleValue);
                }
                nameChunk = processStyleName(styleName);
                if (typeof styleValue === "number") {
                  if (
                    styleValue !== 0 &&
                    !hasOwnProperty.call(isUnitlessNumber, styleName)
                  ) {
                    valueChunk = stringToChunk(styleValue + "px");
                  } else {
                    valueChunk = stringToChunk("" + styleValue);
                  }
                } else {
                  {
                    checkCSSPropertyStringCoercion(styleValue, styleName);
                  }
                  valueChunk = stringToChunk(
                    escapeTextForBrowser(("" + styleValue).trim())
                  );
                }
              }
              if (isFirst) {
                isFirst = false;
                target.push(
                  styleAttributeStart,
                  nameChunk,
                  styleAssign,
                  valueChunk
                );
              } else {
                target.push(styleSeparator, nameChunk, styleAssign, valueChunk);
              }
            }
            if (!isFirst) {
              target.push(attributeEnd);
            }
          }
          var attributeSeparator = stringToPrecomputedChunk(" ");
          var attributeAssign = stringToPrecomputedChunk('="');
          var attributeEnd = stringToPrecomputedChunk('"');
          var attributeEmptyString = stringToPrecomputedChunk('=""');
          function pushAttribute(target, responseState, name, value) {
            switch (name) {
              case "style": {
                pushStyle(target, responseState, value);
                return;
              }
              case "defaultValue":
              case "defaultChecked":
              case "innerHTML":
              case "suppressContentEditableWarning":
              case "suppressHydrationWarning":
                return;
            }
            if (
              name.length > 2 &&
              (name[0] === "o" || name[0] === "O") &&
              (name[1] === "n" || name[1] === "N")
            ) {
              return;
            }
            var propertyInfo = getPropertyInfo(name);
            if (propertyInfo !== null) {
              switch (typeof value) {
                case "function":
                case "symbol":
                  return;
                case "boolean": {
                  if (!propertyInfo.acceptsBooleans) {
                    return;
                  }
                }
              }
              var attributeName = propertyInfo.attributeName;
              var attributeNameChunk = stringToChunk(attributeName);
              switch (propertyInfo.type) {
                case BOOLEAN:
                  if (value) {
                    target.push(
                      attributeSeparator,
                      attributeNameChunk,
                      attributeEmptyString
                    );
                  }
                  return;
                case OVERLOADED_BOOLEAN:
                  if (value === true) {
                    target.push(
                      attributeSeparator,
                      attributeNameChunk,
                      attributeEmptyString
                    );
                  } else if (value === false);
                  else {
                    target.push(
                      attributeSeparator,
                      attributeNameChunk,
                      attributeAssign,
                      stringToChunk(escapeTextForBrowser(value)),
                      attributeEnd
                    );
                  }
                  return;
                case NUMERIC:
                  if (!isNaN(value)) {
                    target.push(
                      attributeSeparator,
                      attributeNameChunk,
                      attributeAssign,
                      stringToChunk(escapeTextForBrowser(value)),
                      attributeEnd
                    );
                  }
                  break;
                case POSITIVE_NUMERIC:
                  if (!isNaN(value) && value >= 1) {
                    target.push(
                      attributeSeparator,
                      attributeNameChunk,
                      attributeAssign,
                      stringToChunk(escapeTextForBrowser(value)),
                      attributeEnd
                    );
                  }
                  break;
                default:
                  if (propertyInfo.sanitizeURL) {
                    {
                      checkAttributeStringCoercion(value, attributeName);
                    }
                    value = "" + value;
                    sanitizeURL(value);
                  }
                  target.push(
                    attributeSeparator,
                    attributeNameChunk,
                    attributeAssign,
                    stringToChunk(escapeTextForBrowser(value)),
                    attributeEnd
                  );
              }
            } else if (isAttributeNameSafe(name)) {
              switch (typeof value) {
                case "function":
                case "symbol":
                  return;
                case "boolean": {
                  var prefix2 = name.toLowerCase().slice(0, 5);
                  if (prefix2 !== "data-" && prefix2 !== "aria-") {
                    return;
                  }
                }
              }
              target.push(
                attributeSeparator,
                stringToChunk(name),
                attributeAssign,
                stringToChunk(escapeTextForBrowser(value)),
                attributeEnd
              );
            }
          }
          var endOfStartTag = stringToPrecomputedChunk(">");
          var endOfStartTagSelfClosing = stringToPrecomputedChunk("/>");
          function pushInnerHTML(target, innerHTML, children) {
            if (innerHTML != null) {
              if (children != null) {
                throw new Error(
                  "Can only set one of `children` or `props.dangerouslySetInnerHTML`."
                );
              }
              if (typeof innerHTML !== "object" || !("__html" in innerHTML)) {
                throw new Error(
                  "`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information."
                );
              }
              var html = innerHTML.__html;
              if (html !== null && html !== void 0) {
                {
                  checkHtmlStringCoercion(html);
                }
                target.push(stringToChunk("" + html));
              }
            }
          }
          var didWarnDefaultInputValue = false;
          var didWarnDefaultChecked = false;
          var didWarnDefaultSelectValue = false;
          var didWarnDefaultTextareaValue = false;
          var didWarnInvalidOptionChildren = false;
          var didWarnInvalidOptionInnerHTML = false;
          var didWarnSelectedSetOnOption = false;
          function checkSelectProp(props, propName) {
            {
              var value = props[propName];
              if (value != null) {
                var array = isArray(value);
                if (props.multiple && !array) {
                  error(
                    "The `%s` prop supplied to <select> must be an array if `multiple` is true.",
                    propName
                  );
                } else if (!props.multiple && array) {
                  error(
                    "The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.",
                    propName
                  );
                }
              }
            }
          }
          function pushStartSelect(target, props, responseState) {
            {
              checkControlledValueProps("select", props);
              checkSelectProp(props, "value");
              checkSelectProp(props, "defaultValue");
              if (
                props.value !== void 0 &&
                props.defaultValue !== void 0 &&
                !didWarnDefaultSelectValue
              ) {
                error(
                  "Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components"
                );
                didWarnDefaultSelectValue = true;
              }
            }
            target.push(startChunkForTag("select"));
            var children = null;
            var innerHTML = null;
            for (var propKey in props) {
              if (hasOwnProperty.call(props, propKey)) {
                var propValue = props[propKey];
                if (propValue == null) {
                  continue;
                }
                switch (propKey) {
                  case "children":
                    children = propValue;
                    break;
                  case "dangerouslySetInnerHTML":
                    innerHTML = propValue;
                    break;
                  case "defaultValue":
                  case "value":
                    break;
                  default:
                    pushAttribute(target, responseState, propKey, propValue);
                    break;
                }
              }
            }
            target.push(endOfStartTag);
            pushInnerHTML(target, innerHTML, children);
            return children;
          }
          function flattenOptionChildren(children) {
            var content = "";
            React.Children.forEach(children, function (child) {
              if (child == null) {
                return;
              }
              content += child;
              {
                if (
                  !didWarnInvalidOptionChildren &&
                  typeof child !== "string" &&
                  typeof child !== "number"
                ) {
                  didWarnInvalidOptionChildren = true;
                  error(
                    "Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>."
                  );
                }
              }
            });
            return content;
          }
          var selectedMarkerAttribute =
            stringToPrecomputedChunk(' selected=""');
          function pushStartOption(
            target,
            props,
            responseState,
            formatContext
          ) {
            var selectedValue = formatContext.selectedValue;
            target.push(startChunkForTag("option"));
            var children = null;
            var value = null;
            var selected = null;
            var innerHTML = null;
            for (var propKey in props) {
              if (hasOwnProperty.call(props, propKey)) {
                var propValue = props[propKey];
                if (propValue == null) {
                  continue;
                }
                switch (propKey) {
                  case "children":
                    children = propValue;
                    break;
                  case "selected":
                    selected = propValue;
                    {
                      if (!didWarnSelectedSetOnOption) {
                        error(
                          "Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>."
                        );
                        didWarnSelectedSetOnOption = true;
                      }
                    }
                    break;
                  case "dangerouslySetInnerHTML":
                    innerHTML = propValue;
                    break;
                  case "value":
                    value = propValue;
                  default:
                    pushAttribute(target, responseState, propKey, propValue);
                    break;
                }
              }
            }
            if (selectedValue != null) {
              var stringValue;
              if (value !== null) {
                {
                  checkAttributeStringCoercion(value, "value");
                }
                stringValue = "" + value;
              } else {
                {
                  if (innerHTML !== null) {
                    if (!didWarnInvalidOptionInnerHTML) {
                      didWarnInvalidOptionInnerHTML = true;
                      error(
                        "Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected."
                      );
                    }
                  }
                }
                stringValue = flattenOptionChildren(children);
              }
              if (isArray(selectedValue)) {
                for (var i = 0; i < selectedValue.length; i++) {
                  {
                    checkAttributeStringCoercion(selectedValue[i], "value");
                  }
                  var v = "" + selectedValue[i];
                  if (v === stringValue) {
                    target.push(selectedMarkerAttribute);
                    break;
                  }
                }
              } else {
                {
                  checkAttributeStringCoercion(selectedValue, "select.value");
                }
                if ("" + selectedValue === stringValue) {
                  target.push(selectedMarkerAttribute);
                }
              }
            } else if (selected) {
              target.push(selectedMarkerAttribute);
            }
            target.push(endOfStartTag);
            pushInnerHTML(target, innerHTML, children);
            return children;
          }
          function pushInput(target, props, responseState) {
            {
              checkControlledValueProps("input", props);
              if (
                props.checked !== void 0 &&
                props.defaultChecked !== void 0 &&
                !didWarnDefaultChecked
              ) {
                error(
                  "%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components",
                  "A component",
                  props.type
                );
                didWarnDefaultChecked = true;
              }
              if (
                props.value !== void 0 &&
                props.defaultValue !== void 0 &&
                !didWarnDefaultInputValue
              ) {
                error(
                  "%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components",
                  "A component",
                  props.type
                );
                didWarnDefaultInputValue = true;
              }
            }
            target.push(startChunkForTag("input"));
            var value = null;
            var defaultValue = null;
            var checked = null;
            var defaultChecked = null;
            for (var propKey in props) {
              if (hasOwnProperty.call(props, propKey)) {
                var propValue = props[propKey];
                if (propValue == null) {
                  continue;
                }
                switch (propKey) {
                  case "children":
                  case "dangerouslySetInnerHTML":
                    throw new Error(
                      "input is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`."
                    );
                  case "defaultChecked":
                    defaultChecked = propValue;
                    break;
                  case "defaultValue":
                    defaultValue = propValue;
                    break;
                  case "checked":
                    checked = propValue;
                    break;
                  case "value":
                    value = propValue;
                    break;
                  default:
                    pushAttribute(target, responseState, propKey, propValue);
                    break;
                }
              }
            }
            if (checked !== null) {
              pushAttribute(target, responseState, "checked", checked);
            } else if (defaultChecked !== null) {
              pushAttribute(target, responseState, "checked", defaultChecked);
            }
            if (value !== null) {
              pushAttribute(target, responseState, "value", value);
            } else if (defaultValue !== null) {
              pushAttribute(target, responseState, "value", defaultValue);
            }
            target.push(endOfStartTagSelfClosing);
            return null;
          }
          function pushStartTextArea(target, props, responseState) {
            {
              checkControlledValueProps("textarea", props);
              if (
                props.value !== void 0 &&
                props.defaultValue !== void 0 &&
                !didWarnDefaultTextareaValue
              ) {
                error(
                  "Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components"
                );
                didWarnDefaultTextareaValue = true;
              }
            }
            target.push(startChunkForTag("textarea"));
            var value = null;
            var defaultValue = null;
            var children = null;
            for (var propKey in props) {
              if (hasOwnProperty.call(props, propKey)) {
                var propValue = props[propKey];
                if (propValue == null) {
                  continue;
                }
                switch (propKey) {
                  case "children":
                    children = propValue;
                    break;
                  case "value":
                    value = propValue;
                    break;
                  case "defaultValue":
                    defaultValue = propValue;
                    break;
                  case "dangerouslySetInnerHTML":
                    throw new Error(
                      "`dangerouslySetInnerHTML` does not make sense on <textarea>."
                    );
                  default:
                    pushAttribute(target, responseState, propKey, propValue);
                    break;
                }
              }
            }
            if (value === null && defaultValue !== null) {
              value = defaultValue;
            }
            target.push(endOfStartTag);
            if (children != null) {
              {
                error(
                  "Use the `defaultValue` or `value` props instead of setting children on <textarea>."
                );
              }
              if (value != null) {
                throw new Error(
                  "If you supply `defaultValue` on a <textarea>, do not pass children."
                );
              }
              if (isArray(children)) {
                if (children.length > 1) {
                  throw new Error(
                    "<textarea> can only have at most one child."
                  );
                }
                {
                  checkHtmlStringCoercion(children[0]);
                }
                value = "" + children[0];
              }
              {
                checkHtmlStringCoercion(children);
              }
              value = "" + children;
            }
            if (typeof value === "string" && value[0] === "\n") {
              target.push(leadingNewline);
            }
            if (value !== null) {
              {
                checkAttributeStringCoercion(value, "value");
              }
              target.push(stringToChunk(encodeHTMLTextNode("" + value)));
            }
            return null;
          }
          function pushSelfClosing(target, props, tag, responseState) {
            target.push(startChunkForTag(tag));
            for (var propKey in props) {
              if (hasOwnProperty.call(props, propKey)) {
                var propValue = props[propKey];
                if (propValue == null) {
                  continue;
                }
                switch (propKey) {
                  case "children":
                  case "dangerouslySetInnerHTML":
                    throw new Error(
                      tag +
                        " is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`."
                    );
                  default:
                    pushAttribute(target, responseState, propKey, propValue);
                    break;
                }
              }
            }
            target.push(endOfStartTagSelfClosing);
            return null;
          }
          function pushStartMenuItem(target, props, responseState) {
            target.push(startChunkForTag("menuitem"));
            for (var propKey in props) {
              if (hasOwnProperty.call(props, propKey)) {
                var propValue = props[propKey];
                if (propValue == null) {
                  continue;
                }
                switch (propKey) {
                  case "children":
                  case "dangerouslySetInnerHTML":
                    throw new Error(
                      "menuitems cannot have `children` nor `dangerouslySetInnerHTML`."
                    );
                  default:
                    pushAttribute(target, responseState, propKey, propValue);
                    break;
                }
              }
            }
            target.push(endOfStartTag);
            return null;
          }
          function pushStartTitle(target, props, responseState) {
            target.push(startChunkForTag("title"));
            var children = null;
            for (var propKey in props) {
              if (hasOwnProperty.call(props, propKey)) {
                var propValue = props[propKey];
                if (propValue == null) {
                  continue;
                }
                switch (propKey) {
                  case "children":
                    children = propValue;
                    break;
                  case "dangerouslySetInnerHTML":
                    throw new Error(
                      "`dangerouslySetInnerHTML` does not make sense on <title>."
                    );
                  default:
                    pushAttribute(target, responseState, propKey, propValue);
                    break;
                }
              }
            }
            target.push(endOfStartTag);
            {
              var child =
                Array.isArray(children) && children.length < 2
                  ? children[0] || null
                  : children;
              if (Array.isArray(children) && children.length > 1) {
                error(
                  "A title element received an array with more than 1 element as children. In browsers title Elements can only have Text Nodes as children. If the children being rendered output more than a single text node in aggregate the browser will display markup and comments as text in the title and hydration will likely fail and fall back to client rendering"
                );
              } else if (child != null && child.$$typeof != null) {
                error(
                  "A title element received a React element for children. In the browser title Elements can only have Text Nodes as children. If the children being rendered output more than a single text node in aggregate the browser will display markup and comments as text in the title and hydration will likely fail and fall back to client rendering"
                );
              } else if (
                child != null &&
                typeof child !== "string" &&
                typeof child !== "number"
              ) {
                error(
                  "A title element received a value that was not a string or number for children. In the browser title Elements can only have Text Nodes as children. If the children being rendered output more than a single text node in aggregate the browser will display markup and comments as text in the title and hydration will likely fail and fall back to client rendering"
                );
              }
            }
            return children;
          }
          function pushStartGenericElement(target, props, tag, responseState) {
            target.push(startChunkForTag(tag));
            var children = null;
            var innerHTML = null;
            for (var propKey in props) {
              if (hasOwnProperty.call(props, propKey)) {
                var propValue = props[propKey];
                if (propValue == null) {
                  continue;
                }
                switch (propKey) {
                  case "children":
                    children = propValue;
                    break;
                  case "dangerouslySetInnerHTML":
                    innerHTML = propValue;
                    break;
                  default:
                    pushAttribute(target, responseState, propKey, propValue);
                    break;
                }
              }
            }
            target.push(endOfStartTag);
            pushInnerHTML(target, innerHTML, children);
            if (typeof children === "string") {
              target.push(stringToChunk(encodeHTMLTextNode(children)));
              return null;
            }
            return children;
          }
          function pushStartCustomElement(target, props, tag, responseState) {
            target.push(startChunkForTag(tag));
            var children = null;
            var innerHTML = null;
            for (var propKey in props) {
              if (hasOwnProperty.call(props, propKey)) {
                var propValue = props[propKey];
                if (propValue == null) {
                  continue;
                }
                switch (propKey) {
                  case "children":
                    children = propValue;
                    break;
                  case "dangerouslySetInnerHTML":
                    innerHTML = propValue;
                    break;
                  case "style":
                    pushStyle(target, responseState, propValue);
                    break;
                  case "suppressContentEditableWarning":
                  case "suppressHydrationWarning":
                    break;
                  default:
                    if (
                      isAttributeNameSafe(propKey) &&
                      typeof propValue !== "function" &&
                      typeof propValue !== "symbol"
                    ) {
                      target.push(
                        attributeSeparator,
                        stringToChunk(propKey),
                        attributeAssign,
                        stringToChunk(escapeTextForBrowser(propValue)),
                        attributeEnd
                      );
                    }
                    break;
                }
              }
            }
            target.push(endOfStartTag);
            pushInnerHTML(target, innerHTML, children);
            return children;
          }
          var leadingNewline = stringToPrecomputedChunk("\n");
          function pushStartPreformattedElement(
            target,
            props,
            tag,
            responseState
          ) {
            target.push(startChunkForTag(tag));
            var children = null;
            var innerHTML = null;
            for (var propKey in props) {
              if (hasOwnProperty.call(props, propKey)) {
                var propValue = props[propKey];
                if (propValue == null) {
                  continue;
                }
                switch (propKey) {
                  case "children":
                    children = propValue;
                    break;
                  case "dangerouslySetInnerHTML":
                    innerHTML = propValue;
                    break;
                  default:
                    pushAttribute(target, responseState, propKey, propValue);
                    break;
                }
              }
            }
            target.push(endOfStartTag);
            if (innerHTML != null) {
              if (children != null) {
                throw new Error(
                  "Can only set one of `children` or `props.dangerouslySetInnerHTML`."
                );
              }
              if (typeof innerHTML !== "object" || !("__html" in innerHTML)) {
                throw new Error(
                  "`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information."
                );
              }
              var html = innerHTML.__html;
              if (html !== null && html !== void 0) {
                if (
                  typeof html === "string" &&
                  html.length > 0 &&
                  html[0] === "\n"
                ) {
                  target.push(leadingNewline, stringToChunk(html));
                } else {
                  {
                    checkHtmlStringCoercion(html);
                  }
                  target.push(stringToChunk("" + html));
                }
              }
            }
            if (typeof children === "string" && children[0] === "\n") {
              target.push(leadingNewline);
            }
            return children;
          }
          var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/;
          var validatedTagCache = /* @__PURE__ */ new Map();
          function startChunkForTag(tag) {
            var tagStartChunk = validatedTagCache.get(tag);
            if (tagStartChunk === void 0) {
              if (!VALID_TAG_REGEX.test(tag)) {
                throw new Error("Invalid tag: " + tag);
              }
              tagStartChunk = stringToPrecomputedChunk("<" + tag);
              validatedTagCache.set(tag, tagStartChunk);
            }
            return tagStartChunk;
          }
          var DOCTYPE = stringToPrecomputedChunk("<!DOCTYPE html>");
          function pushStartInstance(
            target,
            type,
            props,
            responseState,
            formatContext
          ) {
            {
              validateProperties(type, props);
              validateProperties$1(type, props);
              validateProperties$2(type, props, null);
              if (
                !props.suppressContentEditableWarning &&
                props.contentEditable &&
                props.children != null
              ) {
                error(
                  "A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional."
                );
              }
              if (
                formatContext.insertionMode !== SVG_MODE &&
                formatContext.insertionMode !== MATHML_MODE
              ) {
                if (
                  type.indexOf("-") === -1 &&
                  typeof props.is !== "string" &&
                  type.toLowerCase() !== type
                ) {
                  error(
                    "<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.",
                    type
                  );
                }
              }
            }
            switch (type) {
              case "select":
                return pushStartSelect(target, props, responseState);
              case "option":
                return pushStartOption(
                  target,
                  props,
                  responseState,
                  formatContext
                );
              case "textarea":
                return pushStartTextArea(target, props, responseState);
              case "input":
                return pushInput(target, props, responseState);
              case "menuitem":
                return pushStartMenuItem(target, props, responseState);
              case "title":
                return pushStartTitle(target, props, responseState);
              case "listing":
              case "pre": {
                return pushStartPreformattedElement(
                  target,
                  props,
                  type,
                  responseState
                );
              }
              case "area":
              case "base":
              case "br":
              case "col":
              case "embed":
              case "hr":
              case "img":
              case "keygen":
              case "link":
              case "meta":
              case "param":
              case "source":
              case "track":
              case "wbr": {
                return pushSelfClosing(target, props, type, responseState);
              }
              case "annotation-xml":
              case "color-profile":
              case "font-face":
              case "font-face-src":
              case "font-face-uri":
              case "font-face-format":
              case "font-face-name":
              case "missing-glyph": {
                return pushStartGenericElement(
                  target,
                  props,
                  type,
                  responseState
                );
              }
              case "html": {
                if (formatContext.insertionMode === ROOT_HTML_MODE) {
                  target.push(DOCTYPE);
                }
                return pushStartGenericElement(
                  target,
                  props,
                  type,
                  responseState
                );
              }
              default: {
                if (type.indexOf("-") === -1 && typeof props.is !== "string") {
                  return pushStartGenericElement(
                    target,
                    props,
                    type,
                    responseState
                  );
                } else {
                  return pushStartCustomElement(
                    target,
                    props,
                    type,
                    responseState
                  );
                }
              }
            }
          }
          var endTag1 = stringToPrecomputedChunk("</");
          var endTag2 = stringToPrecomputedChunk(">");
          function pushEndInstance(target, type, props) {
            switch (type) {
              case "area":
              case "base":
              case "br":
              case "col":
              case "embed":
              case "hr":
              case "img":
              case "input":
              case "keygen":
              case "link":
              case "meta":
              case "param":
              case "source":
              case "track":
              case "wbr": {
                break;
              }
              default: {
                target.push(endTag1, stringToChunk(type), endTag2);
              }
            }
          }
          function writeCompletedRoot(destination, responseState) {
            var bootstrapChunks = responseState.bootstrapChunks;
            var i = 0;
            for (; i < bootstrapChunks.length - 1; i++) {
              writeChunk(destination, bootstrapChunks[i]);
            }
            if (i < bootstrapChunks.length) {
              return writeChunkAndReturn(destination, bootstrapChunks[i]);
            }
            return true;
          }
          var placeholder1 = stringToPrecomputedChunk('<template id="');
          var placeholder2 = stringToPrecomputedChunk('"></template>');
          function writePlaceholder(destination, responseState, id) {
            writeChunk(destination, placeholder1);
            writeChunk(destination, responseState.placeholderPrefix);
            var formattedID = stringToChunk(id.toString(16));
            writeChunk(destination, formattedID);
            return writeChunkAndReturn(destination, placeholder2);
          }
          var startCompletedSuspenseBoundary =
            stringToPrecomputedChunk("<!--$-->");
          var startPendingSuspenseBoundary1 = stringToPrecomputedChunk(
            '<!--$?--><template id="'
          );
          var startPendingSuspenseBoundary2 =
            stringToPrecomputedChunk('"></template>');
          var startClientRenderedSuspenseBoundary =
            stringToPrecomputedChunk("<!--$!-->");
          var endSuspenseBoundary = stringToPrecomputedChunk("<!--/$-->");
          var clientRenderedSuspenseBoundaryError1 =
            stringToPrecomputedChunk("<template");
          var clientRenderedSuspenseBoundaryErrorAttrInterstitial =
            stringToPrecomputedChunk('"');
          var clientRenderedSuspenseBoundaryError1A =
            stringToPrecomputedChunk(' data-dgst="');
          var clientRenderedSuspenseBoundaryError1B =
            stringToPrecomputedChunk(' data-msg="');
          var clientRenderedSuspenseBoundaryError1C =
            stringToPrecomputedChunk(' data-stck="');
          var clientRenderedSuspenseBoundaryError2 =
            stringToPrecomputedChunk("></template>");
          function writeStartCompletedSuspenseBoundary(
            destination,
            responseState
          ) {
            return writeChunkAndReturn(
              destination,
              startCompletedSuspenseBoundary
            );
          }
          function writeStartPendingSuspenseBoundary(
            destination,
            responseState,
            id
          ) {
            writeChunk(destination, startPendingSuspenseBoundary1);
            if (id === null) {
              throw new Error(
                "An ID must have been assigned before we can complete the boundary."
              );
            }
            writeChunk(destination, id);
            return writeChunkAndReturn(
              destination,
              startPendingSuspenseBoundary2
            );
          }
          function writeStartClientRenderedSuspenseBoundary(
            destination,
            responseState,
            errorDigest,
            errorMesssage,
            errorComponentStack
          ) {
            var result;
            result = writeChunkAndReturn(
              destination,
              startClientRenderedSuspenseBoundary
            );
            writeChunk(destination, clientRenderedSuspenseBoundaryError1);
            if (errorDigest) {
              writeChunk(destination, clientRenderedSuspenseBoundaryError1A);
              writeChunk(
                destination,
                stringToChunk(escapeTextForBrowser(errorDigest))
              );
              writeChunk(
                destination,
                clientRenderedSuspenseBoundaryErrorAttrInterstitial
              );
            }
            {
              if (errorMesssage) {
                writeChunk(destination, clientRenderedSuspenseBoundaryError1B);
                writeChunk(
                  destination,
                  stringToChunk(escapeTextForBrowser(errorMesssage))
                );
                writeChunk(
                  destination,
                  clientRenderedSuspenseBoundaryErrorAttrInterstitial
                );
              }
              if (errorComponentStack) {
                writeChunk(destination, clientRenderedSuspenseBoundaryError1C);
                writeChunk(
                  destination,
                  stringToChunk(escapeTextForBrowser(errorComponentStack))
                );
                writeChunk(
                  destination,
                  clientRenderedSuspenseBoundaryErrorAttrInterstitial
                );
              }
            }
            result = writeChunkAndReturn(
              destination,
              clientRenderedSuspenseBoundaryError2
            );
            return result;
          }
          function writeEndCompletedSuspenseBoundary(
            destination,
            responseState
          ) {
            return writeChunkAndReturn(destination, endSuspenseBoundary);
          }
          function writeEndPendingSuspenseBoundary(destination, responseState) {
            return writeChunkAndReturn(destination, endSuspenseBoundary);
          }
          function writeEndClientRenderedSuspenseBoundary(
            destination,
            responseState
          ) {
            return writeChunkAndReturn(destination, endSuspenseBoundary);
          }
          var startSegmentHTML = stringToPrecomputedChunk('<div hidden id="');
          var startSegmentHTML2 = stringToPrecomputedChunk('">');
          var endSegmentHTML = stringToPrecomputedChunk("</div>");
          var startSegmentSVG = stringToPrecomputedChunk(
            '<svg aria-hidden="true" style="display:none" id="'
          );
          var startSegmentSVG2 = stringToPrecomputedChunk('">');
          var endSegmentSVG = stringToPrecomputedChunk("</svg>");
          var startSegmentMathML = stringToPrecomputedChunk(
            '<math aria-hidden="true" style="display:none" id="'
          );
          var startSegmentMathML2 = stringToPrecomputedChunk('">');
          var endSegmentMathML = stringToPrecomputedChunk("</math>");
          var startSegmentTable =
            stringToPrecomputedChunk('<table hidden id="');
          var startSegmentTable2 = stringToPrecomputedChunk('">');
          var endSegmentTable = stringToPrecomputedChunk("</table>");
          var startSegmentTableBody = stringToPrecomputedChunk(
            '<table hidden><tbody id="'
          );
          var startSegmentTableBody2 = stringToPrecomputedChunk('">');
          var endSegmentTableBody =
            stringToPrecomputedChunk("</tbody></table>");
          var startSegmentTableRow = stringToPrecomputedChunk(
            '<table hidden><tr id="'
          );
          var startSegmentTableRow2 = stringToPrecomputedChunk('">');
          var endSegmentTableRow = stringToPrecomputedChunk("</tr></table>");
          var startSegmentColGroup = stringToPrecomputedChunk(
            '<table hidden><colgroup id="'
          );
          var startSegmentColGroup2 = stringToPrecomputedChunk('">');
          var endSegmentColGroup = stringToPrecomputedChunk(
            "</colgroup></table>"
          );
          function writeStartSegment(
            destination,
            responseState,
            formatContext,
            id
          ) {
            switch (formatContext.insertionMode) {
              case ROOT_HTML_MODE:
              case HTML_MODE: {
                writeChunk(destination, startSegmentHTML);
                writeChunk(destination, responseState.segmentPrefix);
                writeChunk(destination, stringToChunk(id.toString(16)));
                return writeChunkAndReturn(destination, startSegmentHTML2);
              }
              case SVG_MODE: {
                writeChunk(destination, startSegmentSVG);
                writeChunk(destination, responseState.segmentPrefix);
                writeChunk(destination, stringToChunk(id.toString(16)));
                return writeChunkAndReturn(destination, startSegmentSVG2);
              }
              case MATHML_MODE: {
                writeChunk(destination, startSegmentMathML);
                writeChunk(destination, responseState.segmentPrefix);
                writeChunk(destination, stringToChunk(id.toString(16)));
                return writeChunkAndReturn(destination, startSegmentMathML2);
              }
              case HTML_TABLE_MODE: {
                writeChunk(destination, startSegmentTable);
                writeChunk(destination, responseState.segmentPrefix);
                writeChunk(destination, stringToChunk(id.toString(16)));
                return writeChunkAndReturn(destination, startSegmentTable2);
              }
              case HTML_TABLE_BODY_MODE: {
                writeChunk(destination, startSegmentTableBody);
                writeChunk(destination, responseState.segmentPrefix);
                writeChunk(destination, stringToChunk(id.toString(16)));
                return writeChunkAndReturn(destination, startSegmentTableBody2);
              }
              case HTML_TABLE_ROW_MODE: {
                writeChunk(destination, startSegmentTableRow);
                writeChunk(destination, responseState.segmentPrefix);
                writeChunk(destination, stringToChunk(id.toString(16)));
                return writeChunkAndReturn(destination, startSegmentTableRow2);
              }
              case HTML_COLGROUP_MODE: {
                writeChunk(destination, startSegmentColGroup);
                writeChunk(destination, responseState.segmentPrefix);
                writeChunk(destination, stringToChunk(id.toString(16)));
                return writeChunkAndReturn(destination, startSegmentColGroup2);
              }
              default: {
                throw new Error(
                  "Unknown insertion mode. This is a bug in React."
                );
              }
            }
          }
          function writeEndSegment(destination, formatContext) {
            switch (formatContext.insertionMode) {
              case ROOT_HTML_MODE:
              case HTML_MODE: {
                return writeChunkAndReturn(destination, endSegmentHTML);
              }
              case SVG_MODE: {
                return writeChunkAndReturn(destination, endSegmentSVG);
              }
              case MATHML_MODE: {
                return writeChunkAndReturn(destination, endSegmentMathML);
              }
              case HTML_TABLE_MODE: {
                return writeChunkAndReturn(destination, endSegmentTable);
              }
              case HTML_TABLE_BODY_MODE: {
                return writeChunkAndReturn(destination, endSegmentTableBody);
              }
              case HTML_TABLE_ROW_MODE: {
                return writeChunkAndReturn(destination, endSegmentTableRow);
              }
              case HTML_COLGROUP_MODE: {
                return writeChunkAndReturn(destination, endSegmentColGroup);
              }
              default: {
                throw new Error(
                  "Unknown insertion mode. This is a bug in React."
                );
              }
            }
          }
          var completeSegmentFunction =
            "function $RS(a,b){a=document.getElementById(a);b=document.getElementById(b);for(a.parentNode.removeChild(a);a.firstChild;)b.parentNode.insertBefore(a.firstChild,b);b.parentNode.removeChild(b)}";
          var completeBoundaryFunction =
            'function $RC(a,b){a=document.getElementById(a);b=document.getElementById(b);b.parentNode.removeChild(b);if(a){a=a.previousSibling;var f=a.parentNode,c=a.nextSibling,e=0;do{if(c&&8===c.nodeType){var d=c.data;if("/$"===d)if(0===e)break;else e--;else"$"!==d&&"$?"!==d&&"$!"!==d||e++}d=c.nextSibling;f.removeChild(c);c=d}while(c);for(;b.firstChild;)f.insertBefore(b.firstChild,c);a.data="$";a._reactRetry&&a._reactRetry()}}';
          var clientRenderFunction =
            'function $RX(b,c,d,e){var a=document.getElementById(b);a&&(b=a.previousSibling,b.data="$!",a=a.dataset,c&&(a.dgst=c),d&&(a.msg=d),e&&(a.stck=e),b._reactRetry&&b._reactRetry())}';
          var completeSegmentScript1Full = stringToPrecomputedChunk(
            completeSegmentFunction + ';$RS("'
          );
          var completeSegmentScript1Partial = stringToPrecomputedChunk('$RS("');
          var completeSegmentScript2 = stringToPrecomputedChunk('","');
          var completeSegmentScript3 = stringToPrecomputedChunk('")</script>');
          function writeCompletedSegmentInstruction(
            destination,
            responseState,
            contentSegmentID
          ) {
            writeChunk(destination, responseState.startInlineScript);
            if (!responseState.sentCompleteSegmentFunction) {
              responseState.sentCompleteSegmentFunction = true;
              writeChunk(destination, completeSegmentScript1Full);
            } else {
              writeChunk(destination, completeSegmentScript1Partial);
            }
            writeChunk(destination, responseState.segmentPrefix);
            var formattedID = stringToChunk(contentSegmentID.toString(16));
            writeChunk(destination, formattedID);
            writeChunk(destination, completeSegmentScript2);
            writeChunk(destination, responseState.placeholderPrefix);
            writeChunk(destination, formattedID);
            return writeChunkAndReturn(destination, completeSegmentScript3);
          }
          var completeBoundaryScript1Full = stringToPrecomputedChunk(
            completeBoundaryFunction + ';$RC("'
          );
          var completeBoundaryScript1Partial =
            stringToPrecomputedChunk('$RC("');
          var completeBoundaryScript2 = stringToPrecomputedChunk('","');
          var completeBoundaryScript3 = stringToPrecomputedChunk('")</script>');
          function writeCompletedBoundaryInstruction(
            destination,
            responseState,
            boundaryID,
            contentSegmentID
          ) {
            writeChunk(destination, responseState.startInlineScript);
            if (!responseState.sentCompleteBoundaryFunction) {
              responseState.sentCompleteBoundaryFunction = true;
              writeChunk(destination, completeBoundaryScript1Full);
            } else {
              writeChunk(destination, completeBoundaryScript1Partial);
            }
            if (boundaryID === null) {
              throw new Error(
                "An ID must have been assigned before we can complete the boundary."
              );
            }
            var formattedContentID = stringToChunk(
              contentSegmentID.toString(16)
            );
            writeChunk(destination, boundaryID);
            writeChunk(destination, completeBoundaryScript2);
            writeChunk(destination, responseState.segmentPrefix);
            writeChunk(destination, formattedContentID);
            return writeChunkAndReturn(destination, completeBoundaryScript3);
          }
          var clientRenderScript1Full = stringToPrecomputedChunk(
            clientRenderFunction + ';$RX("'
          );
          var clientRenderScript1Partial = stringToPrecomputedChunk('$RX("');
          var clientRenderScript1A = stringToPrecomputedChunk('"');
          var clientRenderScript2 = stringToPrecomputedChunk(")</script>");
          var clientRenderErrorScriptArgInterstitial =
            stringToPrecomputedChunk(",");
          function writeClientRenderBoundaryInstruction(
            destination,
            responseState,
            boundaryID,
            errorDigest,
            errorMessage,
            errorComponentStack
          ) {
            writeChunk(destination, responseState.startInlineScript);
            if (!responseState.sentClientRenderFunction) {
              responseState.sentClientRenderFunction = true;
              writeChunk(destination, clientRenderScript1Full);
            } else {
              writeChunk(destination, clientRenderScript1Partial);
            }
            if (boundaryID === null) {
              throw new Error(
                "An ID must have been assigned before we can complete the boundary."
              );
            }
            writeChunk(destination, boundaryID);
            writeChunk(destination, clientRenderScript1A);
            if (errorDigest || errorMessage || errorComponentStack) {
              writeChunk(destination, clientRenderErrorScriptArgInterstitial);
              writeChunk(
                destination,
                stringToChunk(
                  escapeJSStringsForInstructionScripts(errorDigest || "")
                )
              );
            }
            if (errorMessage || errorComponentStack) {
              writeChunk(destination, clientRenderErrorScriptArgInterstitial);
              writeChunk(
                destination,
                stringToChunk(
                  escapeJSStringsForInstructionScripts(errorMessage || "")
                )
              );
            }
            if (errorComponentStack) {
              writeChunk(destination, clientRenderErrorScriptArgInterstitial);
              writeChunk(
                destination,
                stringToChunk(
                  escapeJSStringsForInstructionScripts(errorComponentStack)
                )
              );
            }
            return writeChunkAndReturn(destination, clientRenderScript2);
          }
          var regexForJSStringsInScripts = /[<\u2028\u2029]/g;
          function escapeJSStringsForInstructionScripts(input) {
            var escaped = JSON.stringify(input);
            return escaped.replace(
              regexForJSStringsInScripts,
              function (match) {
                switch (match) {
                  case "<":
                    return "\\u003c";
                  case "\u2028":
                    return "\\u2028";
                  case "\u2029":
                    return "\\u2029";
                  default: {
                    throw new Error(
                      "escapeJSStringsForInstructionScripts encountered a match it does not know how to replace. this means the match regex and the replacement characters are no longer in sync. This is a bug in React"
                    );
                  }
                }
              }
            );
          }
          var assign = Object.assign;
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_SCOPE_TYPE = Symbol.for("react.scope");
          var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for(
            "react.debug_trace_mode"
          );
          var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
          var REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED = Symbol.for(
            "react.default_value"
          );
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator =
              (MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL]) ||
              maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== ""
              ? wrapperName + "(" + functionName + ")"
              : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error(
                  "Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."
                );
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {}
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true,
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props,
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true,
                };
                Object.defineProperties(console, {
                  log: assign({}, props, {
                    value: prevLog,
                  }),
                  info: assign({}, props, {
                    value: prevInfo,
                  }),
                  warn: assign({}, props, {
                    value: prevWarn,
                  }),
                  error: assign({}, props, {
                    value: prevError,
                  }),
                  group: assign({}, props, {
                    value: prevGroup,
                  }),
                  groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed,
                  }),
                  groupEnd: assign({}, props, {
                    value: prevGroupEnd,
                  }),
                });
              }
              if (disabledDepth < 0) {
                error(
                  "disabledDepth fell below zero. This is a bug in React. Please file an issue."
                );
              }
            }
          }
          var ReactCurrentDispatcher =
            ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match = x.stack.trim().match(/\n( *(at )?)/);
                  prefix = (match && match[1]) || "";
                }
              }
              return "\n" + prefix + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function () {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function () {
                    throw Error();
                  },
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame =
                            "\n" + sampleLines[s].replace(" at new ", " at ");
                          if (
                            fn.displayName &&
                            _frame.includes("<anonymous>")
                          ) {
                            _frame = _frame.replace(
                              "<anonymous>",
                              fn.displayName
                            );
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name
              ? describeBuiltInComponentFrame(name)
              : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeClassComponentFrame(ctor, source, ownerFn) {
            {
              return describeNativeComponentFrame(ctor, true);
            }
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component) {
            var prototype = Component.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(
                  type,
                  shouldConstruct(type)
                );
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(
                    type.type,
                    source,
                    ownerFn
                  );
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(
                      init(payload),
                      source,
                      ownerFn
                    );
                  } catch (x) {}
                }
              }
            }
            return "";
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame =
            ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(
                  element.type,
                  element._source,
                  owner ? owner.type : null
                );
                ReactDebugCurrentFrame.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(
            typeSpecs,
            values,
            location,
            componentName,
            element
          ) {
            {
              var has = Function.call.bind(hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error(
                        (componentName || "React class") +
                          ": " +
                          location +
                          " type `" +
                          typeSpecName +
                          "` is invalid; it must be a function, usually from the `prop-types` package, but received `" +
                          typeof typeSpecs[typeSpecName] +
                          "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`."
                      );
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](
                      values,
                      typeSpecName,
                      componentName,
                      location,
                      null,
                      "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"
                    );
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error(
                      "%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).",
                      componentName || "React class",
                      location,
                      typeSpecName,
                      typeof error$1
                    );
                    setCurrentlyValidatingElement(null);
                  }
                  if (
                    error$1 instanceof Error &&
                    !(error$1.message in loggedTypeFailures)
                  ) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var warnedAboutMissingGetChildContext;
          {
            warnedAboutMissingGetChildContext = {};
          }
          var emptyContextObject = {};
          {
            Object.freeze(emptyContextObject);
          }
          function getMaskedContext(type, unmaskedContext) {
            {
              var contextTypes = type.contextTypes;
              if (!contextTypes) {
                return emptyContextObject;
              }
              var context = {};
              for (var key in contextTypes) {
                context[key] = unmaskedContext[key];
              }
              {
                var name = getComponentNameFromType(type) || "Unknown";
                checkPropTypes(contextTypes, context, "context", name);
              }
              return context;
            }
          }
          function processChildContext(
            instance,
            type,
            parentContext,
            childContextTypes
          ) {
            {
              if (typeof instance.getChildContext !== "function") {
                {
                  var componentName =
                    getComponentNameFromType(type) || "Unknown";
                  if (!warnedAboutMissingGetChildContext[componentName]) {
                    warnedAboutMissingGetChildContext[componentName] = true;
                    error(
                      "%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.",
                      componentName,
                      componentName
                    );
                  }
                }
                return parentContext;
              }
              var childContext = instance.getChildContext();
              for (var contextKey in childContext) {
                if (!(contextKey in childContextTypes)) {
                  throw new Error(
                    (getComponentNameFromType(type) || "Unknown") +
                      '.getChildContext(): key "' +
                      contextKey +
                      '" is not defined in childContextTypes.'
                  );
                }
              }
              {
                var name = getComponentNameFromType(type) || "Unknown";
                checkPropTypes(
                  childContextTypes,
                  childContext,
                  "child context",
                  name
                );
              }
              return assign({}, parentContext, childContext);
            }
          }
          var rendererSigil;
          {
            rendererSigil = {};
          }
          var rootContextSnapshot = null;
          var currentActiveSnapshot = null;
          function popNode(prev) {
            {
              prev.context._currentValue = prev.parentValue;
            }
          }
          function pushNode(next) {
            {
              next.context._currentValue = next.value;
            }
          }
          function popToNearestCommonAncestor(prev, next) {
            if (prev === next);
            else {
              popNode(prev);
              var parentPrev = prev.parent;
              var parentNext = next.parent;
              if (parentPrev === null) {
                if (parentNext !== null) {
                  throw new Error(
                    "The stacks must reach the root at the same time. This is a bug in React."
                  );
                }
              } else {
                if (parentNext === null) {
                  throw new Error(
                    "The stacks must reach the root at the same time. This is a bug in React."
                  );
                }
                popToNearestCommonAncestor(parentPrev, parentNext);
              }
              pushNode(next);
            }
          }
          function popAllPrevious(prev) {
            popNode(prev);
            var parentPrev = prev.parent;
            if (parentPrev !== null) {
              popAllPrevious(parentPrev);
            }
          }
          function pushAllNext(next) {
            var parentNext = next.parent;
            if (parentNext !== null) {
              pushAllNext(parentNext);
            }
            pushNode(next);
          }
          function popPreviousToCommonLevel(prev, next) {
            popNode(prev);
            var parentPrev = prev.parent;
            if (parentPrev === null) {
              throw new Error(
                "The depth must equal at least at zero before reaching the root. This is a bug in React."
              );
            }
            if (parentPrev.depth === next.depth) {
              popToNearestCommonAncestor(parentPrev, next);
            } else {
              popPreviousToCommonLevel(parentPrev, next);
            }
          }
          function popNextToCommonLevel(prev, next) {
            var parentNext = next.parent;
            if (parentNext === null) {
              throw new Error(
                "The depth must equal at least at zero before reaching the root. This is a bug in React."
              );
            }
            if (prev.depth === parentNext.depth) {
              popToNearestCommonAncestor(prev, parentNext);
            } else {
              popNextToCommonLevel(prev, parentNext);
            }
            pushNode(next);
          }
          function switchContext(newSnapshot) {
            var prev = currentActiveSnapshot;
            var next = newSnapshot;
            if (prev !== next) {
              if (prev === null) {
                pushAllNext(next);
              } else if (next === null) {
                popAllPrevious(prev);
              } else if (prev.depth === next.depth) {
                popToNearestCommonAncestor(prev, next);
              } else if (prev.depth > next.depth) {
                popPreviousToCommonLevel(prev, next);
              } else {
                popNextToCommonLevel(prev, next);
              }
              currentActiveSnapshot = next;
            }
          }
          function pushProvider(context, nextValue) {
            var prevValue;
            {
              prevValue = context._currentValue;
              context._currentValue = nextValue;
              {
                if (
                  context._currentRenderer !== void 0 &&
                  context._currentRenderer !== null &&
                  context._currentRenderer !== rendererSigil
                ) {
                  error(
                    "Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported."
                  );
                }
                context._currentRenderer = rendererSigil;
              }
            }
            var prevNode = currentActiveSnapshot;
            var newNode = {
              parent: prevNode,
              depth: prevNode === null ? 0 : prevNode.depth + 1,
              context,
              parentValue: prevValue,
              value: nextValue,
            };
            currentActiveSnapshot = newNode;
            return newNode;
          }
          function popProvider(context) {
            var prevSnapshot = currentActiveSnapshot;
            if (prevSnapshot === null) {
              throw new Error(
                "Tried to pop a Context at the root of the app. This is a bug in React."
              );
            }
            {
              if (prevSnapshot.context !== context) {
                error(
                  "The parent context is not the expected context. This is probably a bug in React."
                );
              }
            }
            {
              var value = prevSnapshot.parentValue;
              if (value === REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED) {
                prevSnapshot.context._currentValue =
                  prevSnapshot.context._defaultValue;
              } else {
                prevSnapshot.context._currentValue = value;
              }
              {
                if (
                  context._currentRenderer !== void 0 &&
                  context._currentRenderer !== null &&
                  context._currentRenderer !== rendererSigil
                ) {
                  error(
                    "Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported."
                  );
                }
                context._currentRenderer = rendererSigil;
              }
            }
            return (currentActiveSnapshot = prevSnapshot.parent);
          }
          function getActiveContext() {
            return currentActiveSnapshot;
          }
          function readContext(context) {
            var value = context._currentValue;
            return value;
          }
          function get(key) {
            return key._reactInternals;
          }
          function set(key, value) {
            key._reactInternals = value;
          }
          var didWarnAboutNoopUpdateForComponent = {};
          var didWarnAboutDeprecatedWillMount = {};
          var didWarnAboutUninitializedState;
          var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
          var didWarnAboutLegacyLifecyclesAndDerivedState;
          var didWarnAboutUndefinedDerivedState;
          var warnOnUndefinedDerivedState;
          var warnOnInvalidCallback;
          var didWarnAboutDirectlyAssigningPropsToState;
          var didWarnAboutContextTypeAndContextTypes;
          var didWarnAboutInvalidateContextType;
          {
            didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate =
              /* @__PURE__ */ new Set();
            didWarnAboutLegacyLifecyclesAndDerivedState =
              /* @__PURE__ */ new Set();
            didWarnAboutDirectlyAssigningPropsToState =
              /* @__PURE__ */ new Set();
            didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
            didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
            var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
            warnOnInvalidCallback = function (callback, callerName) {
              if (callback === null || typeof callback === "function") {
                return;
              }
              var key = callerName + "_" + callback;
              if (!didWarnOnInvalidCallback.has(key)) {
                didWarnOnInvalidCallback.add(key);
                error(
                  "%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.",
                  callerName,
                  callback
                );
              }
            };
            warnOnUndefinedDerivedState = function (type, partialState) {
              if (partialState === void 0) {
                var componentName =
                  getComponentNameFromType(type) || "Component";
                if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                  didWarnAboutUndefinedDerivedState.add(componentName);
                  error(
                    "%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.",
                    componentName
                  );
                }
              }
            };
          }
          function warnNoop(publicInstance, callerName) {
            {
              var _constructor = publicInstance.constructor;
              var componentName =
                (_constructor && getComponentNameFromType(_constructor)) ||
                "ReactClass";
              var warningKey = componentName + "." + callerName;
              if (didWarnAboutNoopUpdateForComponent[warningKey]) {
                return;
              }
              error(
                "%s(...): Can only update a mounting component. This usually means you called %s() outside componentWillMount() on the server. This is a no-op.\n\nPlease check the code for the %s component.",
                callerName,
                callerName,
                componentName
              );
              didWarnAboutNoopUpdateForComponent[warningKey] = true;
            }
          }
          var classComponentUpdater = {
            isMounted: function (inst) {
              return false;
            },
            enqueueSetState: function (inst, payload, callback) {
              var internals = get(inst);
              if (internals.queue === null) {
                warnNoop(inst, "setState");
              } else {
                internals.queue.push(payload);
                {
                  if (callback !== void 0 && callback !== null) {
                    warnOnInvalidCallback(callback, "setState");
                  }
                }
              }
            },
            enqueueReplaceState: function (inst, payload, callback) {
              var internals = get(inst);
              internals.replace = true;
              internals.queue = [payload];
              {
                if (callback !== void 0 && callback !== null) {
                  warnOnInvalidCallback(callback, "setState");
                }
              }
            },
            enqueueForceUpdate: function (inst, callback) {
              var internals = get(inst);
              if (internals.queue === null) {
                warnNoop(inst, "forceUpdate");
              } else {
                {
                  if (callback !== void 0 && callback !== null) {
                    warnOnInvalidCallback(callback, "setState");
                  }
                }
              }
            },
          };
          function applyDerivedStateFromProps(
            instance,
            ctor,
            getDerivedStateFromProps,
            prevState,
            nextProps
          ) {
            var partialState = getDerivedStateFromProps(nextProps, prevState);
            {
              warnOnUndefinedDerivedState(ctor, partialState);
            }
            var newState =
              partialState === null || partialState === void 0
                ? prevState
                : assign({}, prevState, partialState);
            return newState;
          }
          function constructClassInstance(ctor, props, maskedLegacyContext) {
            var context = emptyContextObject;
            var contextType = ctor.contextType;
            {
              if ("contextType" in ctor) {
                var isValid =
                  contextType === null ||
                  (contextType !== void 0 &&
                    contextType.$$typeof === REACT_CONTEXT_TYPE &&
                    contextType._context === void 0);
                if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                  didWarnAboutInvalidateContextType.add(ctor);
                  var addendum = "";
                  if (contextType === void 0) {
                    addendum =
                      " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                  } else if (typeof contextType !== "object") {
                    addendum =
                      " However, it is set to a " + typeof contextType + ".";
                  } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                    addendum =
                      " Did you accidentally pass the Context.Provider instead?";
                  } else if (contextType._context !== void 0) {
                    addendum =
                      " Did you accidentally pass the Context.Consumer instead?";
                  } else {
                    addendum =
                      " However, it is set to an object with keys {" +
                      Object.keys(contextType).join(", ") +
                      "}.";
                  }
                  error(
                    "%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s",
                    getComponentNameFromType(ctor) || "Component",
                    addendum
                  );
                }
              }
            }
            if (typeof contextType === "object" && contextType !== null) {
              context = readContext(contextType);
            } else {
              context = maskedLegacyContext;
            }
            var instance = new ctor(props, context);
            {
              if (
                typeof ctor.getDerivedStateFromProps === "function" &&
                (instance.state === null || instance.state === void 0)
              ) {
                var componentName =
                  getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutUninitializedState.has(componentName)) {
                  didWarnAboutUninitializedState.add(componentName);
                  error(
                    "`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.",
                    componentName,
                    instance.state === null ? "null" : "undefined",
                    componentName
                  );
                }
              }
              if (
                typeof ctor.getDerivedStateFromProps === "function" ||
                typeof instance.getSnapshotBeforeUpdate === "function"
              ) {
                var foundWillMountName = null;
                var foundWillReceivePropsName = null;
                var foundWillUpdateName = null;
                if (
                  typeof instance.componentWillMount === "function" &&
                  instance.componentWillMount.__suppressDeprecationWarning !==
                    true
                ) {
                  foundWillMountName = "componentWillMount";
                } else if (
                  typeof instance.UNSAFE_componentWillMount === "function"
                ) {
                  foundWillMountName = "UNSAFE_componentWillMount";
                }
                if (
                  typeof instance.componentWillReceiveProps === "function" &&
                  instance.componentWillReceiveProps
                    .__suppressDeprecationWarning !== true
                ) {
                  foundWillReceivePropsName = "componentWillReceiveProps";
                } else if (
                  typeof instance.UNSAFE_componentWillReceiveProps ===
                  "function"
                ) {
                  foundWillReceivePropsName =
                    "UNSAFE_componentWillReceiveProps";
                }
                if (
                  typeof instance.componentWillUpdate === "function" &&
                  instance.componentWillUpdate.__suppressDeprecationWarning !==
                    true
                ) {
                  foundWillUpdateName = "componentWillUpdate";
                } else if (
                  typeof instance.UNSAFE_componentWillUpdate === "function"
                ) {
                  foundWillUpdateName = "UNSAFE_componentWillUpdate";
                }
                if (
                  foundWillMountName !== null ||
                  foundWillReceivePropsName !== null ||
                  foundWillUpdateName !== null
                ) {
                  var _componentName =
                    getComponentNameFromType(ctor) || "Component";
                  var newApiName =
                    typeof ctor.getDerivedStateFromProps === "function"
                      ? "getDerivedStateFromProps()"
                      : "getSnapshotBeforeUpdate()";
                  if (
                    !didWarnAboutLegacyLifecyclesAndDerivedState.has(
                      _componentName
                    )
                  ) {
                    didWarnAboutLegacyLifecyclesAndDerivedState.add(
                      _componentName
                    );
                    error(
                      "Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles",
                      _componentName,
                      newApiName,
                      foundWillMountName !== null
                        ? "\n  " + foundWillMountName
                        : "",
                      foundWillReceivePropsName !== null
                        ? "\n  " + foundWillReceivePropsName
                        : "",
                      foundWillUpdateName !== null
                        ? "\n  " + foundWillUpdateName
                        : ""
                    );
                  }
                }
              }
            }
            return instance;
          }
          function checkClassInstance(instance, ctor, newProps) {
            {
              var name = getComponentNameFromType(ctor) || "Component";
              var renderPresent = instance.render;
              if (!renderPresent) {
                if (
                  ctor.prototype &&
                  typeof ctor.prototype.render === "function"
                ) {
                  error(
                    "%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?",
                    name
                  );
                } else {
                  error(
                    "%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.",
                    name
                  );
                }
              }
              if (
                instance.getInitialState &&
                !instance.getInitialState.isReactClassApproved &&
                !instance.state
              ) {
                error(
                  "getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?",
                  name
                );
              }
              if (
                instance.getDefaultProps &&
                !instance.getDefaultProps.isReactClassApproved
              ) {
                error(
                  "getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.",
                  name
                );
              }
              if (instance.propTypes) {
                error(
                  "propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.",
                  name
                );
              }
              if (instance.contextType) {
                error(
                  "contextType was defined as an instance property on %s. Use a static property to define contextType instead.",
                  name
                );
              }
              {
                if (instance.contextTypes) {
                  error(
                    "contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.",
                    name
                  );
                }
                if (
                  ctor.contextType &&
                  ctor.contextTypes &&
                  !didWarnAboutContextTypeAndContextTypes.has(ctor)
                ) {
                  didWarnAboutContextTypeAndContextTypes.add(ctor);
                  error(
                    "%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.",
                    name
                  );
                }
              }
              if (typeof instance.componentShouldUpdate === "function") {
                error(
                  "%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.",
                  name
                );
              }
              if (
                ctor.prototype &&
                ctor.prototype.isPureReactComponent &&
                typeof instance.shouldComponentUpdate !== "undefined"
              ) {
                error(
                  "%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.",
                  getComponentNameFromType(ctor) || "A pure component"
                );
              }
              if (typeof instance.componentDidUnmount === "function") {
                error(
                  "%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?",
                  name
                );
              }
              if (typeof instance.componentDidReceiveProps === "function") {
                error(
                  "%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().",
                  name
                );
              }
              if (typeof instance.componentWillRecieveProps === "function") {
                error(
                  "%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?",
                  name
                );
              }
              if (
                typeof instance.UNSAFE_componentWillRecieveProps === "function"
              ) {
                error(
                  "%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?",
                  name
                );
              }
              var hasMutatedProps = instance.props !== newProps;
              if (instance.props !== void 0 && hasMutatedProps) {
                error(
                  "%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.",
                  name,
                  name
                );
              }
              if (instance.defaultProps) {
                error(
                  "Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.",
                  name,
                  name
                );
              }
              if (
                typeof instance.getSnapshotBeforeUpdate === "function" &&
                typeof instance.componentDidUpdate !== "function" &&
                !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)
              ) {
                didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
                error(
                  "%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.",
                  getComponentNameFromType(ctor)
                );
              }
              if (typeof instance.getDerivedStateFromProps === "function") {
                error(
                  "%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.",
                  name
                );
              }
              if (typeof instance.getDerivedStateFromError === "function") {
                error(
                  "%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.",
                  name
                );
              }
              if (typeof ctor.getSnapshotBeforeUpdate === "function") {
                error(
                  "%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.",
                  name
                );
              }
              var _state = instance.state;
              if (_state && (typeof _state !== "object" || isArray(_state))) {
                error("%s.state: must be set to an object or null", name);
              }
              if (
                typeof instance.getChildContext === "function" &&
                typeof ctor.childContextTypes !== "object"
              ) {
                error(
                  "%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().",
                  name
                );
              }
            }
          }
          function callComponentWillMount(type, instance) {
            var oldState = instance.state;
            if (typeof instance.componentWillMount === "function") {
              {
                if (
                  instance.componentWillMount.__suppressDeprecationWarning !==
                  true
                ) {
                  var componentName =
                    getComponentNameFromType(type) || "Unknown";
                  if (!didWarnAboutDeprecatedWillMount[componentName]) {
                    warn(
                      "componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code from componentWillMount to componentDidMount (preferred in most cases) or the constructor.\n\nPlease update the following components: %s",
                      componentName
                    );
                    didWarnAboutDeprecatedWillMount[componentName] = true;
                  }
                }
              }
              instance.componentWillMount();
            }
            if (typeof instance.UNSAFE_componentWillMount === "function") {
              instance.UNSAFE_componentWillMount();
            }
            if (oldState !== instance.state) {
              {
                error(
                  "%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.",
                  getComponentNameFromType(type) || "Component"
                );
              }
              classComponentUpdater.enqueueReplaceState(
                instance,
                instance.state,
                null
              );
            }
          }
          function processUpdateQueue(
            internalInstance,
            inst,
            props,
            maskedLegacyContext
          ) {
            if (
              internalInstance.queue !== null &&
              internalInstance.queue.length > 0
            ) {
              var oldQueue = internalInstance.queue;
              var oldReplace = internalInstance.replace;
              internalInstance.queue = null;
              internalInstance.replace = false;
              if (oldReplace && oldQueue.length === 1) {
                inst.state = oldQueue[0];
              } else {
                var nextState = oldReplace ? oldQueue[0] : inst.state;
                var dontMutate = true;
                for (var i = oldReplace ? 1 : 0; i < oldQueue.length; i++) {
                  var partial = oldQueue[i];
                  var partialState =
                    typeof partial === "function"
                      ? partial.call(
                          inst,
                          nextState,
                          props,
                          maskedLegacyContext
                        )
                      : partial;
                  if (partialState != null) {
                    if (dontMutate) {
                      dontMutate = false;
                      nextState = assign({}, nextState, partialState);
                    } else {
                      assign(nextState, partialState);
                    }
                  }
                }
                inst.state = nextState;
              }
            } else {
              internalInstance.queue = null;
            }
          }
          function mountClassInstance(
            instance,
            ctor,
            newProps,
            maskedLegacyContext
          ) {
            {
              checkClassInstance(instance, ctor, newProps);
            }
            var initialState =
              instance.state !== void 0 ? instance.state : null;
            instance.updater = classComponentUpdater;
            instance.props = newProps;
            instance.state = initialState;
            var internalInstance = {
              queue: [],
              replace: false,
            };
            set(instance, internalInstance);
            var contextType = ctor.contextType;
            if (typeof contextType === "object" && contextType !== null) {
              instance.context = readContext(contextType);
            } else {
              instance.context = maskedLegacyContext;
            }
            {
              if (instance.state === newProps) {
                var componentName =
                  getComponentNameFromType(ctor) || "Component";
                if (
                  !didWarnAboutDirectlyAssigningPropsToState.has(componentName)
                ) {
                  didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                  error(
                    "%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.",
                    componentName
                  );
                }
              }
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === "function") {
              instance.state = applyDerivedStateFromProps(
                instance,
                ctor,
                getDerivedStateFromProps,
                initialState,
                newProps
              );
            }
            if (
              typeof ctor.getDerivedStateFromProps !== "function" &&
              typeof instance.getSnapshotBeforeUpdate !== "function" &&
              (typeof instance.UNSAFE_componentWillMount === "function" ||
                typeof instance.componentWillMount === "function")
            ) {
              callComponentWillMount(ctor, instance);
              processUpdateQueue(
                internalInstance,
                instance,
                newProps,
                maskedLegacyContext
              );
            }
          }
          var emptyTreeContext = {
            id: 1,
            overflow: "",
          };
          function getTreeId(context) {
            var overflow = context.overflow;
            var idWithLeadingBit = context.id;
            var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
            return id.toString(32) + overflow;
          }
          function pushTreeContext(baseContext, totalChildren, index) {
            var baseIdWithLeadingBit = baseContext.id;
            var baseOverflow = baseContext.overflow;
            var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
            var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
            var slot = index + 1;
            var length = getBitLength(totalChildren) + baseLength;
            if (length > 30) {
              var numberOfOverflowBits = baseLength - (baseLength % 5);
              var newOverflowBits = (1 << numberOfOverflowBits) - 1;
              var newOverflow = (baseId & newOverflowBits).toString(32);
              var restOfBaseId = baseId >> numberOfOverflowBits;
              var restOfBaseLength = baseLength - numberOfOverflowBits;
              var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
              var restOfNewBits = slot << restOfBaseLength;
              var id = restOfNewBits | restOfBaseId;
              var overflow = newOverflow + baseOverflow;
              return {
                id: (1 << restOfLength) | id,
                overflow,
              };
            } else {
              var newBits = slot << baseLength;
              var _id = newBits | baseId;
              var _overflow = baseOverflow;
              return {
                id: (1 << length) | _id,
                overflow: _overflow,
              };
            }
          }
          function getBitLength(number) {
            return 32 - clz32(number);
          }
          function getLeadingBit(id) {
            return 1 << (getBitLength(id) - 1);
          }
          var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
          var log = Math.log;
          var LN2 = Math.LN2;
          function clz32Fallback(x) {
            var asUint = x >>> 0;
            if (asUint === 0) {
              return 32;
            }
            return (31 - ((log(asUint) / LN2) | 0)) | 0;
          }
          function is(x, y) {
            return (
              (x === y && (x !== 0 || 1 / x === 1 / y)) || (x !== x && y !== y)
            );
          }
          var objectIs = typeof Object.is === "function" ? Object.is : is;
          var currentlyRenderingComponent = null;
          var currentlyRenderingTask = null;
          var firstWorkInProgressHook = null;
          var workInProgressHook = null;
          var isReRender = false;
          var didScheduleRenderPhaseUpdate = false;
          var localIdCounter = 0;
          var renderPhaseUpdates = null;
          var numberOfReRenders = 0;
          var RE_RENDER_LIMIT = 25;
          var isInHookUserCodeInDev = false;
          var currentHookNameInDev;
          function resolveCurrentlyRenderingComponent() {
            if (currentlyRenderingComponent === null) {
              throw new Error(
                "Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem."
              );
            }
            {
              if (isInHookUserCodeInDev) {
                error(
                  "Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks"
                );
              }
            }
            return currentlyRenderingComponent;
          }
          function areHookInputsEqual(nextDeps, prevDeps) {
            if (prevDeps === null) {
              {
                error(
                  "%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.",
                  currentHookNameInDev
                );
              }
              return false;
            }
            {
              if (nextDeps.length !== prevDeps.length) {
                error(
                  "The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s",
                  currentHookNameInDev,
                  "[" + nextDeps.join(", ") + "]",
                  "[" + prevDeps.join(", ") + "]"
                );
              }
            }
            for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
              if (objectIs(nextDeps[i], prevDeps[i])) {
                continue;
              }
              return false;
            }
            return true;
          }
          function createHook() {
            if (numberOfReRenders > 0) {
              throw new Error(
                "Rendered more hooks than during the previous render"
              );
            }
            return {
              memoizedState: null,
              queue: null,
              next: null,
            };
          }
          function createWorkInProgressHook() {
            if (workInProgressHook === null) {
              if (firstWorkInProgressHook === null) {
                isReRender = false;
                firstWorkInProgressHook = workInProgressHook = createHook();
              } else {
                isReRender = true;
                workInProgressHook = firstWorkInProgressHook;
              }
            } else {
              if (workInProgressHook.next === null) {
                isReRender = false;
                workInProgressHook = workInProgressHook.next = createHook();
              } else {
                isReRender = true;
                workInProgressHook = workInProgressHook.next;
              }
            }
            return workInProgressHook;
          }
          function prepareToUseHooks(task, componentIdentity) {
            currentlyRenderingComponent = componentIdentity;
            currentlyRenderingTask = task;
            {
              isInHookUserCodeInDev = false;
            }
            localIdCounter = 0;
          }
          function finishHooks(Component, props, children, refOrContext) {
            while (didScheduleRenderPhaseUpdate) {
              didScheduleRenderPhaseUpdate = false;
              localIdCounter = 0;
              numberOfReRenders += 1;
              workInProgressHook = null;
              children = Component(props, refOrContext);
            }
            resetHooksState();
            return children;
          }
          function checkDidRenderIdHook() {
            var didRenderIdHook = localIdCounter !== 0;
            return didRenderIdHook;
          }
          function resetHooksState() {
            {
              isInHookUserCodeInDev = false;
            }
            currentlyRenderingComponent = null;
            currentlyRenderingTask = null;
            didScheduleRenderPhaseUpdate = false;
            firstWorkInProgressHook = null;
            numberOfReRenders = 0;
            renderPhaseUpdates = null;
            workInProgressHook = null;
          }
          function readContext$1(context) {
            {
              if (isInHookUserCodeInDev) {
                error(
                  "Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo()."
                );
              }
            }
            return readContext(context);
          }
          function useContext(context) {
            {
              currentHookNameInDev = "useContext";
            }
            resolveCurrentlyRenderingComponent();
            return readContext(context);
          }
          function basicStateReducer(state, action) {
            return typeof action === "function" ? action(state) : action;
          }
          function useState(initialState) {
            {
              currentHookNameInDev = "useState";
            }
            return useReducer(basicStateReducer, initialState);
          }
          function useReducer(reducer, initialArg, init) {
            {
              if (reducer !== basicStateReducer) {
                currentHookNameInDev = "useReducer";
              }
            }
            currentlyRenderingComponent = resolveCurrentlyRenderingComponent();
            workInProgressHook = createWorkInProgressHook();
            if (isReRender) {
              var queue = workInProgressHook.queue;
              var dispatch = queue.dispatch;
              if (renderPhaseUpdates !== null) {
                var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);
                if (firstRenderPhaseUpdate !== void 0) {
                  renderPhaseUpdates.delete(queue);
                  var newState = workInProgressHook.memoizedState;
                  var update = firstRenderPhaseUpdate;
                  do {
                    var action = update.action;
                    {
                      isInHookUserCodeInDev = true;
                    }
                    newState = reducer(newState, action);
                    {
                      isInHookUserCodeInDev = false;
                    }
                    update = update.next;
                  } while (update !== null);
                  workInProgressHook.memoizedState = newState;
                  return [newState, dispatch];
                }
              }
              return [workInProgressHook.memoizedState, dispatch];
            } else {
              {
                isInHookUserCodeInDev = true;
              }
              var initialState;
              if (reducer === basicStateReducer) {
                initialState =
                  typeof initialArg === "function" ? initialArg() : initialArg;
              } else {
                initialState = init !== void 0 ? init(initialArg) : initialArg;
              }
              {
                isInHookUserCodeInDev = false;
              }
              workInProgressHook.memoizedState = initialState;
              var _queue = (workInProgressHook.queue = {
                last: null,
                dispatch: null,
              });
              var _dispatch = (_queue.dispatch = dispatchAction.bind(
                null,
                currentlyRenderingComponent,
                _queue
              ));
              return [workInProgressHook.memoizedState, _dispatch];
            }
          }
          function useMemo(nextCreate, deps) {
            currentlyRenderingComponent = resolveCurrentlyRenderingComponent();
            workInProgressHook = createWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            if (workInProgressHook !== null) {
              var prevState = workInProgressHook.memoizedState;
              if (prevState !== null) {
                if (nextDeps !== null) {
                  var prevDeps = prevState[1];
                  if (areHookInputsEqual(nextDeps, prevDeps)) {
                    return prevState[0];
                  }
                }
              }
            }
            {
              isInHookUserCodeInDev = true;
            }
            var nextValue = nextCreate();
            {
              isInHookUserCodeInDev = false;
            }
            workInProgressHook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function useRef(initialValue) {
            currentlyRenderingComponent = resolveCurrentlyRenderingComponent();
            workInProgressHook = createWorkInProgressHook();
            var previousRef = workInProgressHook.memoizedState;
            if (previousRef === null) {
              var ref = {
                current: initialValue,
              };
              {
                Object.seal(ref);
              }
              workInProgressHook.memoizedState = ref;
              return ref;
            } else {
              return previousRef;
            }
          }
          function useLayoutEffect(create, inputs) {
            {
              currentHookNameInDev = "useLayoutEffect";
              error(
                "useLayoutEffect does nothing on the server, because its effect cannot be encoded into the server renderer's output format. This will lead to a mismatch between the initial, non-hydrated UI and the intended UI. To avoid this, useLayoutEffect should only be used in components that render exclusively on the client. See https://reactjs.org/link/uselayouteffect-ssr for common fixes."
              );
            }
          }
          function dispatchAction(componentIdentity, queue, action) {
            if (numberOfReRenders >= RE_RENDER_LIMIT) {
              throw new Error(
                "Too many re-renders. React limits the number of renders to prevent an infinite loop."
              );
            }
            if (componentIdentity === currentlyRenderingComponent) {
              didScheduleRenderPhaseUpdate = true;
              var update = {
                action,
                next: null,
              };
              if (renderPhaseUpdates === null) {
                renderPhaseUpdates = /* @__PURE__ */ new Map();
              }
              var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);
              if (firstRenderPhaseUpdate === void 0) {
                renderPhaseUpdates.set(queue, update);
              } else {
                var lastRenderPhaseUpdate = firstRenderPhaseUpdate;
                while (lastRenderPhaseUpdate.next !== null) {
                  lastRenderPhaseUpdate = lastRenderPhaseUpdate.next;
                }
                lastRenderPhaseUpdate.next = update;
              }
            }
          }
          function useCallback(callback, deps) {
            return useMemo(function () {
              return callback;
            }, deps);
          }
          function useMutableSource(source, getSnapshot, subscribe) {
            resolveCurrentlyRenderingComponent();
            return getSnapshot(source._source);
          }
          function useSyncExternalStore(
            subscribe,
            getSnapshot,
            getServerSnapshot
          ) {
            if (getServerSnapshot === void 0) {
              throw new Error(
                "Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering."
              );
            }
            return getServerSnapshot();
          }
          function useDeferredValue(value) {
            resolveCurrentlyRenderingComponent();
            return value;
          }
          function unsupportedStartTransition() {
            throw new Error(
              "startTransition cannot be called during server rendering."
            );
          }
          function useTransition() {
            resolveCurrentlyRenderingComponent();
            return [false, unsupportedStartTransition];
          }
          function useId() {
            var task = currentlyRenderingTask;
            var treeId = getTreeId(task.treeContext);
            var responseState = currentResponseState;
            if (responseState === null) {
              throw new Error(
                "Invalid hook call. Hooks can only be called inside of the body of a function component."
              );
            }
            var localId = localIdCounter++;
            return makeId(responseState, treeId, localId);
          }
          function noop() {}
          var Dispatcher = {
            readContext: readContext$1,
            useContext,
            useMemo,
            useReducer,
            useRef,
            useState,
            useInsertionEffect: noop,
            useLayoutEffect,
            useCallback,
            useImperativeHandle: noop,
            useEffect: noop,
            useDebugValue: noop,
            useDeferredValue,
            useTransition,
            useId,
            useMutableSource,
            useSyncExternalStore,
          };
          var currentResponseState = null;
          function setCurrentResponseState(responseState) {
            currentResponseState = responseState;
          }
          function getStackByComponentStackNode(componentStack) {
            try {
              var info = "";
              var node = componentStack;
              do {
                switch (node.tag) {
                  case 0:
                    info += describeBuiltInComponentFrame(
                      node.type,
                      null,
                      null
                    );
                    break;
                  case 1:
                    info += describeFunctionComponentFrame(
                      node.type,
                      null,
                      null
                    );
                    break;
                  case 2:
                    info += describeClassComponentFrame(node.type, null, null);
                    break;
                }
                node = node.parent;
              } while (node);
              return info;
            } catch (x) {
              return "\nError generating stack: " + x.message + "\n" + x.stack;
            }
          }
          var ReactCurrentDispatcher$1 =
            ReactSharedInternals.ReactCurrentDispatcher;
          var ReactDebugCurrentFrame$1 =
            ReactSharedInternals.ReactDebugCurrentFrame;
          var PENDING = 0;
          var COMPLETED = 1;
          var FLUSHED = 2;
          var ABORTED = 3;
          var ERRORED = 4;
          var OPEN = 0;
          var CLOSING = 1;
          var CLOSED = 2;
          var DEFAULT_PROGRESSIVE_CHUNK_SIZE = 12800;
          function defaultErrorHandler(error2) {
            console["error"](error2);
            return null;
          }
          function noop$1() {}
          function createRequest(
            children,
            responseState,
            rootFormatContext,
            progressiveChunkSize,
            onError,
            onAllReady,
            onShellReady,
            onShellError,
            onFatalError
          ) {
            var pingedTasks = [];
            var abortSet = /* @__PURE__ */ new Set();
            var request = {
              destination: null,
              responseState,
              progressiveChunkSize:
                progressiveChunkSize === void 0
                  ? DEFAULT_PROGRESSIVE_CHUNK_SIZE
                  : progressiveChunkSize,
              status: OPEN,
              fatalError: null,
              nextSegmentId: 0,
              allPendingTasks: 0,
              pendingRootTasks: 0,
              completedRootSegment: null,
              abortableTasks: abortSet,
              pingedTasks,
              clientRenderedBoundaries: [],
              completedBoundaries: [],
              partialBoundaries: [],
              onError: onError === void 0 ? defaultErrorHandler : onError,
              onAllReady: onAllReady === void 0 ? noop$1 : onAllReady,
              onShellReady: onShellReady === void 0 ? noop$1 : onShellReady,
              onShellError: onShellError === void 0 ? noop$1 : onShellError,
              onFatalError: onFatalError === void 0 ? noop$1 : onFatalError,
            };
            var rootSegment = createPendingSegment(
              request,
              0,
              null,
              rootFormatContext,
              false,
              false
            );
            rootSegment.parentFlushed = true;
            var rootTask = createTask(
              request,
              children,
              null,
              rootSegment,
              abortSet,
              emptyContextObject,
              rootContextSnapshot,
              emptyTreeContext
            );
            pingedTasks.push(rootTask);
            return request;
          }
          function pingTask(request, task) {
            var pingedTasks = request.pingedTasks;
            pingedTasks.push(task);
            if (pingedTasks.length === 1) {
              scheduleWork(function () {
                return performWork(request);
              });
            }
          }
          function createSuspenseBoundary(request, fallbackAbortableTasks) {
            return {
              id: UNINITIALIZED_SUSPENSE_BOUNDARY_ID,
              rootSegmentID: -1,
              parentFlushed: false,
              pendingTasks: 0,
              forceClientRender: false,
              completedSegments: [],
              byteSize: 0,
              fallbackAbortableTasks,
              errorDigest: null,
            };
          }
          function createTask(
            request,
            node,
            blockedBoundary,
            blockedSegment,
            abortSet,
            legacyContext,
            context,
            treeContext
          ) {
            request.allPendingTasks++;
            if (blockedBoundary === null) {
              request.pendingRootTasks++;
            } else {
              blockedBoundary.pendingTasks++;
            }
            var task = {
              node,
              ping: function () {
                return pingTask(request, task);
              },
              blockedBoundary,
              blockedSegment,
              abortSet,
              legacyContext,
              context,
              treeContext,
            };
            {
              task.componentStack = null;
            }
            abortSet.add(task);
            return task;
          }
          function createPendingSegment(
            request,
            index,
            boundary,
            formatContext,
            lastPushedText,
            textEmbedded
          ) {
            return {
              status: PENDING,
              id: -1,
              index,
              parentFlushed: false,
              chunks: [],
              children: [],
              formatContext,
              boundary,
              lastPushedText,
              textEmbedded,
            };
          }
          var currentTaskInDEV = null;
          function getCurrentStackInDEV() {
            {
              if (
                currentTaskInDEV === null ||
                currentTaskInDEV.componentStack === null
              ) {
                return "";
              }
              return getStackByComponentStackNode(
                currentTaskInDEV.componentStack
              );
            }
          }
          function pushBuiltInComponentStackInDEV(task, type) {
            {
              task.componentStack = {
                tag: 0,
                parent: task.componentStack,
                type,
              };
            }
          }
          function pushFunctionComponentStackInDEV(task, type) {
            {
              task.componentStack = {
                tag: 1,
                parent: task.componentStack,
                type,
              };
            }
          }
          function pushClassComponentStackInDEV(task, type) {
            {
              task.componentStack = {
                tag: 2,
                parent: task.componentStack,
                type,
              };
            }
          }
          function popComponentStackInDEV(task) {
            {
              if (task.componentStack === null) {
                error(
                  "Unexpectedly popped too many stack frames. This is a bug in React."
                );
              } else {
                task.componentStack = task.componentStack.parent;
              }
            }
          }
          var lastBoundaryErrorComponentStackDev = null;
          function captureBoundaryErrorDetailsDev(boundary, error2) {
            {
              var errorMessage;
              if (typeof error2 === "string") {
                errorMessage = error2;
              } else if (error2 && typeof error2.message === "string") {
                errorMessage = error2.message;
              } else {
                errorMessage = String(error2);
              }
              var errorComponentStack =
                lastBoundaryErrorComponentStackDev || getCurrentStackInDEV();
              lastBoundaryErrorComponentStackDev = null;
              boundary.errorMessage = errorMessage;
              boundary.errorComponentStack = errorComponentStack;
            }
          }
          function logRecoverableError(request, error2) {
            var errorDigest = request.onError(error2);
            if (errorDigest != null && typeof errorDigest !== "string") {
              throw new Error(
                'onError returned something with a type other than "string". onError should return a string and may return null or undefined but must not return anything else. It received something of type "' +
                  typeof errorDigest +
                  '" instead'
              );
            }
            return errorDigest;
          }
          function fatalError(request, error2) {
            var onShellError = request.onShellError;
            onShellError(error2);
            var onFatalError = request.onFatalError;
            onFatalError(error2);
            if (request.destination !== null) {
              request.status = CLOSED;
              closeWithError(request.destination, error2);
            } else {
              request.status = CLOSING;
              request.fatalError = error2;
            }
          }
          function renderSuspenseBoundary(request, task, props) {
            pushBuiltInComponentStackInDEV(task, "Suspense");
            var parentBoundary = task.blockedBoundary;
            var parentSegment = task.blockedSegment;
            var fallback = props.fallback;
            var content = props.children;
            var fallbackAbortSet = /* @__PURE__ */ new Set();
            var newBoundary = createSuspenseBoundary(request, fallbackAbortSet);
            var insertionIndex = parentSegment.chunks.length;
            var boundarySegment = createPendingSegment(
              request,
              insertionIndex,
              newBoundary,
              parentSegment.formatContext,
              false,
              false
            );
            parentSegment.children.push(boundarySegment);
            parentSegment.lastPushedText = false;
            var contentRootSegment = createPendingSegment(
              request,
              0,
              null,
              parentSegment.formatContext,
              false,
              false
            );
            contentRootSegment.parentFlushed = true;
            task.blockedBoundary = newBoundary;
            task.blockedSegment = contentRootSegment;
            try {
              renderNode(request, task, content);
              pushSegmentFinale(
                contentRootSegment.chunks,
                request.responseState,
                contentRootSegment.lastPushedText,
                contentRootSegment.textEmbedded
              );
              contentRootSegment.status = COMPLETED;
              queueCompletedSegment(newBoundary, contentRootSegment);
              if (newBoundary.pendingTasks === 0) {
                popComponentStackInDEV(task);
                return;
              }
            } catch (error2) {
              contentRootSegment.status = ERRORED;
              newBoundary.forceClientRender = true;
              newBoundary.errorDigest = logRecoverableError(request, error2);
              {
                captureBoundaryErrorDetailsDev(newBoundary, error2);
              }
            } finally {
              task.blockedBoundary = parentBoundary;
              task.blockedSegment = parentSegment;
            }
            var suspendedFallbackTask = createTask(
              request,
              fallback,
              parentBoundary,
              boundarySegment,
              fallbackAbortSet,
              task.legacyContext,
              task.context,
              task.treeContext
            );
            {
              suspendedFallbackTask.componentStack = task.componentStack;
            }
            request.pingedTasks.push(suspendedFallbackTask);
            popComponentStackInDEV(task);
          }
          function renderHostElement(request, task, type, props) {
            pushBuiltInComponentStackInDEV(task, type);
            var segment = task.blockedSegment;
            var children = pushStartInstance(
              segment.chunks,
              type,
              props,
              request.responseState,
              segment.formatContext
            );
            segment.lastPushedText = false;
            var prevContext = segment.formatContext;
            segment.formatContext = getChildFormatContext(
              prevContext,
              type,
              props
            );
            renderNode(request, task, children);
            segment.formatContext = prevContext;
            pushEndInstance(segment.chunks, type);
            segment.lastPushedText = false;
            popComponentStackInDEV(task);
          }
          function shouldConstruct$1(Component) {
            return Component.prototype && Component.prototype.isReactComponent;
          }
          function renderWithHooks(request, task, Component, props, secondArg) {
            var componentIdentity = {};
            prepareToUseHooks(task, componentIdentity);
            var result = Component(props, secondArg);
            return finishHooks(Component, props, result, secondArg);
          }
          function finishClassComponent(
            request,
            task,
            instance,
            Component,
            props
          ) {
            var nextChildren = instance.render();
            {
              if (instance.props !== props) {
                if (!didWarnAboutReassigningProps) {
                  error(
                    "It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.",
                    getComponentNameFromType(Component) || "a component"
                  );
                }
                didWarnAboutReassigningProps = true;
              }
            }
            {
              var childContextTypes = Component.childContextTypes;
              if (childContextTypes !== null && childContextTypes !== void 0) {
                var previousContext = task.legacyContext;
                var mergedContext = processChildContext(
                  instance,
                  Component,
                  previousContext,
                  childContextTypes
                );
                task.legacyContext = mergedContext;
                renderNodeDestructive(request, task, nextChildren);
                task.legacyContext = previousContext;
                return;
              }
            }
            renderNodeDestructive(request, task, nextChildren);
          }
          function renderClassComponent(request, task, Component, props) {
            pushClassComponentStackInDEV(task, Component);
            var maskedContext = getMaskedContext(Component, task.legacyContext);
            var instance = constructClassInstance(
              Component,
              props,
              maskedContext
            );
            mountClassInstance(instance, Component, props, maskedContext);
            finishClassComponent(request, task, instance, Component, props);
            popComponentStackInDEV(task);
          }
          var didWarnAboutBadClass = {};
          var didWarnAboutModulePatternComponent = {};
          var didWarnAboutContextTypeOnFunctionComponent = {};
          var didWarnAboutGetDerivedStateOnFunctionComponent = {};
          var didWarnAboutReassigningProps = false;
          var didWarnAboutGenerators = false;
          var didWarnAboutMaps = false;
          var hasWarnedAboutUsingContextAsConsumer = false;
          function renderIndeterminateComponent(
            request,
            task,
            Component,
            props
          ) {
            var legacyContext;
            {
              legacyContext = getMaskedContext(Component, task.legacyContext);
            }
            pushFunctionComponentStackInDEV(task, Component);
            {
              if (
                Component.prototype &&
                typeof Component.prototype.render === "function"
              ) {
                var componentName =
                  getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutBadClass[componentName]) {
                  error(
                    "The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.",
                    componentName,
                    componentName
                  );
                  didWarnAboutBadClass[componentName] = true;
                }
              }
            }
            var value = renderWithHooks(
              request,
              task,
              Component,
              props,
              legacyContext
            );
            var hasId = checkDidRenderIdHook();
            {
              if (
                typeof value === "object" &&
                value !== null &&
                typeof value.render === "function" &&
                value.$$typeof === void 0
              ) {
                var _componentName =
                  getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName]) {
                  error(
                    "The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.",
                    _componentName,
                    _componentName,
                    _componentName
                  );
                  didWarnAboutModulePatternComponent[_componentName] = true;
                }
              }
            }
            if (
              typeof value === "object" &&
              value !== null &&
              typeof value.render === "function" &&
              value.$$typeof === void 0
            ) {
              {
                var _componentName2 =
                  getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName2]) {
                  error(
                    "The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.",
                    _componentName2,
                    _componentName2,
                    _componentName2
                  );
                  didWarnAboutModulePatternComponent[_componentName2] = true;
                }
              }
              mountClassInstance(value, Component, props, legacyContext);
              finishClassComponent(request, task, value, Component, props);
            } else {
              {
                validateFunctionComponentInDev(Component);
              }
              if (hasId) {
                var prevTreeContext = task.treeContext;
                var totalChildren = 1;
                var index = 0;
                task.treeContext = pushTreeContext(
                  prevTreeContext,
                  totalChildren,
                  index
                );
                try {
                  renderNodeDestructive(request, task, value);
                } finally {
                  task.treeContext = prevTreeContext;
                }
              } else {
                renderNodeDestructive(request, task, value);
              }
            }
            popComponentStackInDEV(task);
          }
          function validateFunctionComponentInDev(Component) {
            {
              if (Component) {
                if (Component.childContextTypes) {
                  error(
                    "%s(...): childContextTypes cannot be defined on a function component.",
                    Component.displayName || Component.name || "Component"
                  );
                }
              }
              if (typeof Component.getDerivedStateFromProps === "function") {
                var _componentName3 =
                  getComponentNameFromType(Component) || "Unknown";
                if (
                  !didWarnAboutGetDerivedStateOnFunctionComponent[
                    _componentName3
                  ]
                ) {
                  error(
                    "%s: Function components do not support getDerivedStateFromProps.",
                    _componentName3
                  );
                  didWarnAboutGetDerivedStateOnFunctionComponent[
                    _componentName3
                  ] = true;
                }
              }
              if (
                typeof Component.contextType === "object" &&
                Component.contextType !== null
              ) {
                var _componentName4 =
                  getComponentNameFromType(Component) || "Unknown";
                if (
                  !didWarnAboutContextTypeOnFunctionComponent[_componentName4]
                ) {
                  error(
                    "%s: Function components do not support contextType.",
                    _componentName4
                  );
                  didWarnAboutContextTypeOnFunctionComponent[
                    _componentName4
                  ] = true;
                }
              }
            }
          }
          function resolveDefaultProps(Component, baseProps) {
            if (Component && Component.defaultProps) {
              var props = assign({}, baseProps);
              var defaultProps = Component.defaultProps;
              for (var propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
              return props;
            }
            return baseProps;
          }
          function renderForwardRef(request, task, type, props, ref) {
            pushFunctionComponentStackInDEV(task, type.render);
            var children = renderWithHooks(
              request,
              task,
              type.render,
              props,
              ref
            );
            var hasId = checkDidRenderIdHook();
            if (hasId) {
              var prevTreeContext = task.treeContext;
              var totalChildren = 1;
              var index = 0;
              task.treeContext = pushTreeContext(
                prevTreeContext,
                totalChildren,
                index
              );
              try {
                renderNodeDestructive(request, task, children);
              } finally {
                task.treeContext = prevTreeContext;
              }
            } else {
              renderNodeDestructive(request, task, children);
            }
            popComponentStackInDEV(task);
          }
          function renderMemo(request, task, type, props, ref) {
            var innerType = type.type;
            var resolvedProps = resolveDefaultProps(innerType, props);
            renderElement(request, task, innerType, resolvedProps, ref);
          }
          function renderContextConsumer(request, task, context, props) {
            {
              if (context._context === void 0) {
                if (context !== context.Consumer) {
                  if (!hasWarnedAboutUsingContextAsConsumer) {
                    hasWarnedAboutUsingContextAsConsumer = true;
                    error(
                      "Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?"
                    );
                  }
                }
              } else {
                context = context._context;
              }
            }
            var render = props.children;
            {
              if (typeof render !== "function") {
                error(
                  "A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it."
                );
              }
            }
            var newValue = readContext(context);
            var newChildren = render(newValue);
            renderNodeDestructive(request, task, newChildren);
          }
          function renderContextProvider(request, task, type, props) {
            var context = type._context;
            var value = props.value;
            var children = props.children;
            var prevSnapshot;
            {
              prevSnapshot = task.context;
            }
            task.context = pushProvider(context, value);
            renderNodeDestructive(request, task, children);
            task.context = popProvider(context);
            {
              if (prevSnapshot !== task.context) {
                error(
                  "Popping the context provider did not return back to the original snapshot. This is a bug in React."
                );
              }
            }
          }
          function renderLazyComponent(
            request,
            task,
            lazyComponent,
            props,
            ref
          ) {
            pushBuiltInComponentStackInDEV(task, "Lazy");
            var payload = lazyComponent._payload;
            var init = lazyComponent._init;
            var Component = init(payload);
            var resolvedProps = resolveDefaultProps(Component, props);
            renderElement(request, task, Component, resolvedProps, ref);
            popComponentStackInDEV(task);
          }
          function renderElement(request, task, type, props, ref) {
            if (typeof type === "function") {
              if (shouldConstruct$1(type)) {
                renderClassComponent(request, task, type, props);
                return;
              } else {
                renderIndeterminateComponent(request, task, type, props);
                return;
              }
            }
            if (typeof type === "string") {
              renderHostElement(request, task, type, props);
              return;
            }
            switch (type) {
              case REACT_LEGACY_HIDDEN_TYPE:
              case REACT_DEBUG_TRACING_MODE_TYPE:
              case REACT_STRICT_MODE_TYPE:
              case REACT_PROFILER_TYPE:
              case REACT_FRAGMENT_TYPE: {
                renderNodeDestructive(request, task, props.children);
                return;
              }
              case REACT_SUSPENSE_LIST_TYPE: {
                pushBuiltInComponentStackInDEV(task, "SuspenseList");
                renderNodeDestructive(request, task, props.children);
                popComponentStackInDEV(task);
                return;
              }
              case REACT_SCOPE_TYPE: {
                throw new Error(
                  "ReactDOMServer does not yet support scope components."
                );
              }
              case REACT_SUSPENSE_TYPE: {
                {
                  renderSuspenseBoundary(request, task, props);
                }
                return;
              }
            }
            if (typeof type === "object" && type !== null) {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE: {
                  renderForwardRef(request, task, type, props, ref);
                  return;
                }
                case REACT_MEMO_TYPE: {
                  renderMemo(request, task, type, props, ref);
                  return;
                }
                case REACT_PROVIDER_TYPE: {
                  renderContextProvider(request, task, type, props);
                  return;
                }
                case REACT_CONTEXT_TYPE: {
                  renderContextConsumer(request, task, type, props);
                  return;
                }
                case REACT_LAZY_TYPE: {
                  renderLazyComponent(request, task, type, props);
                  return;
                }
              }
            }
            var info = "";
            {
              if (
                type === void 0 ||
                (typeof type === "object" &&
                  type !== null &&
                  Object.keys(type).length === 0)
              ) {
                info +=
                  " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
            }
            throw new Error(
              "Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " +
                ("but got: " + (type == null ? type : typeof type) + "." + info)
            );
          }
          function validateIterable(iterable, iteratorFn) {
            {
              if (
                typeof Symbol === "function" &&
                iterable[Symbol.toStringTag] === "Generator"
              ) {
                if (!didWarnAboutGenerators) {
                  error(
                    "Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers."
                  );
                }
                didWarnAboutGenerators = true;
              }
              if (iterable.entries === iteratorFn) {
                if (!didWarnAboutMaps) {
                  error(
                    "Using Maps as children is not supported. Use an array of keyed ReactElements instead."
                  );
                }
                didWarnAboutMaps = true;
              }
            }
          }
          function renderNodeDestructive(request, task, node) {
            {
              try {
                return renderNodeDestructiveImpl(request, task, node);
              } catch (x) {
                if (
                  typeof x === "object" &&
                  x !== null &&
                  typeof x.then === "function"
                );
                else {
                  lastBoundaryErrorComponentStackDev =
                    lastBoundaryErrorComponentStackDev !== null
                      ? lastBoundaryErrorComponentStackDev
                      : getCurrentStackInDEV();
                }
                throw x;
              }
            }
          }
          function renderNodeDestructiveImpl(request, task, node) {
            task.node = node;
            if (typeof node === "object" && node !== null) {
              switch (node.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  var element = node;
                  var type = element.type;
                  var props = element.props;
                  var ref = element.ref;
                  renderElement(request, task, type, props, ref);
                  return;
                }
                case REACT_PORTAL_TYPE:
                  throw new Error(
                    "Portals are not currently supported by the server renderer. Render them conditionally so that they only appear on the client render."
                  );
                case REACT_LAZY_TYPE: {
                  var lazyNode = node;
                  var payload = lazyNode._payload;
                  var init = lazyNode._init;
                  var resolvedNode;
                  {
                    try {
                      resolvedNode = init(payload);
                    } catch (x) {
                      if (
                        typeof x === "object" &&
                        x !== null &&
                        typeof x.then === "function"
                      ) {
                        pushBuiltInComponentStackInDEV(task, "Lazy");
                      }
                      throw x;
                    }
                  }
                  renderNodeDestructive(request, task, resolvedNode);
                  return;
                }
              }
              if (isArray(node)) {
                renderChildrenArray(request, task, node);
                return;
              }
              var iteratorFn = getIteratorFn(node);
              if (iteratorFn) {
                {
                  validateIterable(node, iteratorFn);
                }
                var iterator = iteratorFn.call(node);
                if (iterator) {
                  var step = iterator.next();
                  if (!step.done) {
                    var children = [];
                    do {
                      children.push(step.value);
                      step = iterator.next();
                    } while (!step.done);
                    renderChildrenArray(request, task, children);
                    return;
                  }
                  return;
                }
              }
              var childString = Object.prototype.toString.call(node);
              throw new Error(
                "Objects are not valid as a React child (found: " +
                  (childString === "[object Object]"
                    ? "object with keys {" + Object.keys(node).join(", ") + "}"
                    : childString) +
                  "). If you meant to render a collection of children, use an array instead."
              );
            }
            if (typeof node === "string") {
              var segment = task.blockedSegment;
              segment.lastPushedText = pushTextInstance(
                task.blockedSegment.chunks,
                node,
                request.responseState,
                segment.lastPushedText
              );
              return;
            }
            if (typeof node === "number") {
              var _segment = task.blockedSegment;
              _segment.lastPushedText = pushTextInstance(
                task.blockedSegment.chunks,
                "" + node,
                request.responseState,
                _segment.lastPushedText
              );
              return;
            }
            {
              if (typeof node === "function") {
                error(
                  "Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it."
                );
              }
            }
          }
          function renderChildrenArray(request, task, children) {
            var totalChildren = children.length;
            for (var i = 0; i < totalChildren; i++) {
              var prevTreeContext = task.treeContext;
              task.treeContext = pushTreeContext(
                prevTreeContext,
                totalChildren,
                i
              );
              try {
                renderNode(request, task, children[i]);
              } finally {
                task.treeContext = prevTreeContext;
              }
            }
          }
          function spawnNewSuspendedTask(request, task, x) {
            var segment = task.blockedSegment;
            var insertionIndex = segment.chunks.length;
            var newSegment = createPendingSegment(
              request,
              insertionIndex,
              null,
              segment.formatContext,
              segment.lastPushedText,
              true
            );
            segment.children.push(newSegment);
            segment.lastPushedText = false;
            var newTask = createTask(
              request,
              task.node,
              task.blockedBoundary,
              newSegment,
              task.abortSet,
              task.legacyContext,
              task.context,
              task.treeContext
            );
            {
              if (task.componentStack !== null) {
                newTask.componentStack = task.componentStack.parent;
              }
            }
            var ping = newTask.ping;
            x.then(ping, ping);
          }
          function renderNode(request, task, node) {
            var previousFormatContext = task.blockedSegment.formatContext;
            var previousLegacyContext = task.legacyContext;
            var previousContext = task.context;
            var previousComponentStack = null;
            {
              previousComponentStack = task.componentStack;
            }
            try {
              return renderNodeDestructive(request, task, node);
            } catch (x) {
              resetHooksState();
              if (
                typeof x === "object" &&
                x !== null &&
                typeof x.then === "function"
              ) {
                spawnNewSuspendedTask(request, task, x);
                task.blockedSegment.formatContext = previousFormatContext;
                task.legacyContext = previousLegacyContext;
                task.context = previousContext;
                switchContext(previousContext);
                {
                  task.componentStack = previousComponentStack;
                }
                return;
              } else {
                task.blockedSegment.formatContext = previousFormatContext;
                task.legacyContext = previousLegacyContext;
                task.context = previousContext;
                switchContext(previousContext);
                {
                  task.componentStack = previousComponentStack;
                }
                throw x;
              }
            }
          }
          function erroredTask(request, boundary, segment, error2) {
            var errorDigest = logRecoverableError(request, error2);
            if (boundary === null) {
              fatalError(request, error2);
            } else {
              boundary.pendingTasks--;
              if (!boundary.forceClientRender) {
                boundary.forceClientRender = true;
                boundary.errorDigest = errorDigest;
                {
                  captureBoundaryErrorDetailsDev(boundary, error2);
                }
                if (boundary.parentFlushed) {
                  request.clientRenderedBoundaries.push(boundary);
                }
              }
            }
            request.allPendingTasks--;
            if (request.allPendingTasks === 0) {
              var onAllReady = request.onAllReady;
              onAllReady();
            }
          }
          function abortTaskSoft(task) {
            var request = this;
            var boundary = task.blockedBoundary;
            var segment = task.blockedSegment;
            segment.status = ABORTED;
            finishedTask(request, boundary, segment);
          }
          function abortTask(task, request, reason) {
            var boundary = task.blockedBoundary;
            var segment = task.blockedSegment;
            segment.status = ABORTED;
            if (boundary === null) {
              request.allPendingTasks--;
              if (request.status !== CLOSED) {
                request.status = CLOSED;
                if (request.destination !== null) {
                  close(request.destination);
                }
              }
            } else {
              boundary.pendingTasks--;
              if (!boundary.forceClientRender) {
                boundary.forceClientRender = true;
                var _error =
                  reason === void 0
                    ? new Error(
                        "The render was aborted by the server without a reason."
                      )
                    : reason;
                boundary.errorDigest = request.onError(_error);
                {
                  var errorPrefix =
                    "The server did not finish this Suspense boundary: ";
                  if (_error && typeof _error.message === "string") {
                    _error = errorPrefix + _error.message;
                  } else {
                    _error = errorPrefix + String(_error);
                  }
                  var previousTaskInDev = currentTaskInDEV;
                  currentTaskInDEV = task;
                  try {
                    captureBoundaryErrorDetailsDev(boundary, _error);
                  } finally {
                    currentTaskInDEV = previousTaskInDev;
                  }
                }
                if (boundary.parentFlushed) {
                  request.clientRenderedBoundaries.push(boundary);
                }
              }
              boundary.fallbackAbortableTasks.forEach(function (fallbackTask) {
                return abortTask(fallbackTask, request, reason);
              });
              boundary.fallbackAbortableTasks.clear();
              request.allPendingTasks--;
              if (request.allPendingTasks === 0) {
                var onAllReady = request.onAllReady;
                onAllReady();
              }
            }
          }
          function queueCompletedSegment(boundary, segment) {
            if (
              segment.chunks.length === 0 &&
              segment.children.length === 1 &&
              segment.children[0].boundary === null
            ) {
              var childSegment = segment.children[0];
              childSegment.id = segment.id;
              childSegment.parentFlushed = true;
              if (childSegment.status === COMPLETED) {
                queueCompletedSegment(boundary, childSegment);
              }
            } else {
              var completedSegments = boundary.completedSegments;
              completedSegments.push(segment);
            }
          }
          function finishedTask(request, boundary, segment) {
            if (boundary === null) {
              if (segment.parentFlushed) {
                if (request.completedRootSegment !== null) {
                  throw new Error(
                    "There can only be one root segment. This is a bug in React."
                  );
                }
                request.completedRootSegment = segment;
              }
              request.pendingRootTasks--;
              if (request.pendingRootTasks === 0) {
                request.onShellError = noop$1;
                var onShellReady = request.onShellReady;
                onShellReady();
              }
            } else {
              boundary.pendingTasks--;
              if (boundary.forceClientRender);
              else if (boundary.pendingTasks === 0) {
                if (segment.parentFlushed) {
                  if (segment.status === COMPLETED) {
                    queueCompletedSegment(boundary, segment);
                  }
                }
                if (boundary.parentFlushed) {
                  request.completedBoundaries.push(boundary);
                }
                boundary.fallbackAbortableTasks.forEach(abortTaskSoft, request);
                boundary.fallbackAbortableTasks.clear();
              } else {
                if (segment.parentFlushed) {
                  if (segment.status === COMPLETED) {
                    queueCompletedSegment(boundary, segment);
                    var completedSegments = boundary.completedSegments;
                    if (completedSegments.length === 1) {
                      if (boundary.parentFlushed) {
                        request.partialBoundaries.push(boundary);
                      }
                    }
                  }
                }
              }
            }
            request.allPendingTasks--;
            if (request.allPendingTasks === 0) {
              var onAllReady = request.onAllReady;
              onAllReady();
            }
          }
          function retryTask(request, task) {
            var segment = task.blockedSegment;
            if (segment.status !== PENDING) {
              return;
            }
            switchContext(task.context);
            var prevTaskInDEV = null;
            {
              prevTaskInDEV = currentTaskInDEV;
              currentTaskInDEV = task;
            }
            try {
              renderNodeDestructive(request, task, task.node);
              pushSegmentFinale(
                segment.chunks,
                request.responseState,
                segment.lastPushedText,
                segment.textEmbedded
              );
              task.abortSet.delete(task);
              segment.status = COMPLETED;
              finishedTask(request, task.blockedBoundary, segment);
            } catch (x) {
              resetHooksState();
              if (
                typeof x === "object" &&
                x !== null &&
                typeof x.then === "function"
              ) {
                var ping = task.ping;
                x.then(ping, ping);
              } else {
                task.abortSet.delete(task);
                segment.status = ERRORED;
                erroredTask(request, task.blockedBoundary, segment, x);
              }
            } finally {
              {
                currentTaskInDEV = prevTaskInDEV;
              }
            }
          }
          function performWork(request) {
            if (request.status === CLOSED) {
              return;
            }
            var prevContext = getActiveContext();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = Dispatcher;
            var prevGetCurrentStackImpl;
            {
              prevGetCurrentStackImpl =
                ReactDebugCurrentFrame$1.getCurrentStack;
              ReactDebugCurrentFrame$1.getCurrentStack = getCurrentStackInDEV;
            }
            var prevResponseState = currentResponseState;
            setCurrentResponseState(request.responseState);
            try {
              var pingedTasks = request.pingedTasks;
              var i;
              for (i = 0; i < pingedTasks.length; i++) {
                var task = pingedTasks[i];
                retryTask(request, task);
              }
              pingedTasks.splice(0, i);
              if (request.destination !== null) {
                flushCompletedQueues(request, request.destination);
              }
            } catch (error2) {
              logRecoverableError(request, error2);
              fatalError(request, error2);
            } finally {
              setCurrentResponseState(prevResponseState);
              ReactCurrentDispatcher$1.current = prevDispatcher;
              {
                ReactDebugCurrentFrame$1.getCurrentStack =
                  prevGetCurrentStackImpl;
              }
              if (prevDispatcher === Dispatcher) {
                switchContext(prevContext);
              }
            }
          }
          function flushSubtree(request, destination, segment) {
            segment.parentFlushed = true;
            switch (segment.status) {
              case PENDING: {
                var segmentID = (segment.id = request.nextSegmentId++);
                segment.lastPushedText = false;
                segment.textEmbedded = false;
                return writePlaceholder(
                  destination,
                  request.responseState,
                  segmentID
                );
              }
              case COMPLETED: {
                segment.status = FLUSHED;
                var r = true;
                var chunks = segment.chunks;
                var chunkIdx = 0;
                var children = segment.children;
                for (var childIdx = 0; childIdx < children.length; childIdx++) {
                  var nextChild = children[childIdx];
                  for (; chunkIdx < nextChild.index; chunkIdx++) {
                    writeChunk(destination, chunks[chunkIdx]);
                  }
                  r = flushSegment(request, destination, nextChild);
                }
                for (; chunkIdx < chunks.length - 1; chunkIdx++) {
                  writeChunk(destination, chunks[chunkIdx]);
                }
                if (chunkIdx < chunks.length) {
                  r = writeChunkAndReturn(destination, chunks[chunkIdx]);
                }
                return r;
              }
              default: {
                throw new Error(
                  "Aborted, errored or already flushed boundaries should not be flushed again. This is a bug in React."
                );
              }
            }
          }
          function flushSegment(request, destination, segment) {
            var boundary = segment.boundary;
            if (boundary === null) {
              return flushSubtree(request, destination, segment);
            }
            boundary.parentFlushed = true;
            if (boundary.forceClientRender) {
              writeStartClientRenderedSuspenseBoundary(
                destination,
                request.responseState,
                boundary.errorDigest,
                boundary.errorMessage,
                boundary.errorComponentStack
              );
              flushSubtree(request, destination, segment);
              return writeEndClientRenderedSuspenseBoundary(
                destination,
                request.responseState
              );
            } else if (boundary.pendingTasks > 0) {
              boundary.rootSegmentID = request.nextSegmentId++;
              if (boundary.completedSegments.length > 0) {
                request.partialBoundaries.push(boundary);
              }
              var id = (boundary.id = assignSuspenseBoundaryID(
                request.responseState
              ));
              writeStartPendingSuspenseBoundary(
                destination,
                request.responseState,
                id
              );
              flushSubtree(request, destination, segment);
              return writeEndPendingSuspenseBoundary(
                destination,
                request.responseState
              );
            } else if (boundary.byteSize > request.progressiveChunkSize) {
              boundary.rootSegmentID = request.nextSegmentId++;
              request.completedBoundaries.push(boundary);
              writeStartPendingSuspenseBoundary(
                destination,
                request.responseState,
                boundary.id
              );
              flushSubtree(request, destination, segment);
              return writeEndPendingSuspenseBoundary(
                destination,
                request.responseState
              );
            } else {
              writeStartCompletedSuspenseBoundary(
                destination,
                request.responseState
              );
              var completedSegments = boundary.completedSegments;
              if (completedSegments.length !== 1) {
                throw new Error(
                  "A previously unvisited boundary must have exactly one root segment. This is a bug in React."
                );
              }
              var contentSegment = completedSegments[0];
              flushSegment(request, destination, contentSegment);
              return writeEndCompletedSuspenseBoundary(
                destination,
                request.responseState
              );
            }
          }
          function flushClientRenderedBoundary(request, destination, boundary) {
            return writeClientRenderBoundaryInstruction(
              destination,
              request.responseState,
              boundary.id,
              boundary.errorDigest,
              boundary.errorMessage,
              boundary.errorComponentStack
            );
          }
          function flushSegmentContainer(request, destination, segment) {
            writeStartSegment(
              destination,
              request.responseState,
              segment.formatContext,
              segment.id
            );
            flushSegment(request, destination, segment);
            return writeEndSegment(destination, segment.formatContext);
          }
          function flushCompletedBoundary(request, destination, boundary) {
            var completedSegments = boundary.completedSegments;
            var i = 0;
            for (; i < completedSegments.length; i++) {
              var segment = completedSegments[i];
              flushPartiallyCompletedSegment(
                request,
                destination,
                boundary,
                segment
              );
            }
            completedSegments.length = 0;
            return writeCompletedBoundaryInstruction(
              destination,
              request.responseState,
              boundary.id,
              boundary.rootSegmentID
            );
          }
          function flushPartialBoundary(request, destination, boundary) {
            var completedSegments = boundary.completedSegments;
            var i = 0;
            for (; i < completedSegments.length; i++) {
              var segment = completedSegments[i];
              if (
                !flushPartiallyCompletedSegment(
                  request,
                  destination,
                  boundary,
                  segment
                )
              ) {
                i++;
                completedSegments.splice(0, i);
                return false;
              }
            }
            completedSegments.splice(0, i);
            return true;
          }
          function flushPartiallyCompletedSegment(
            request,
            destination,
            boundary,
            segment
          ) {
            if (segment.status === FLUSHED) {
              return true;
            }
            var segmentID = segment.id;
            if (segmentID === -1) {
              var rootSegmentID = (segment.id = boundary.rootSegmentID);
              if (rootSegmentID === -1) {
                throw new Error(
                  "A root segment ID must have been assigned by now. This is a bug in React."
                );
              }
              return flushSegmentContainer(request, destination, segment);
            } else {
              flushSegmentContainer(request, destination, segment);
              return writeCompletedSegmentInstruction(
                destination,
                request.responseState,
                segmentID
              );
            }
          }
          function flushCompletedQueues(request, destination) {
            beginWriting();
            try {
              var completedRootSegment = request.completedRootSegment;
              if (
                completedRootSegment !== null &&
                request.pendingRootTasks === 0
              ) {
                flushSegment(request, destination, completedRootSegment);
                request.completedRootSegment = null;
                writeCompletedRoot(destination, request.responseState);
              }
              var clientRenderedBoundaries = request.clientRenderedBoundaries;
              var i;
              for (i = 0; i < clientRenderedBoundaries.length; i++) {
                var boundary = clientRenderedBoundaries[i];
                if (
                  !flushClientRenderedBoundary(request, destination, boundary)
                ) {
                  request.destination = null;
                  i++;
                  clientRenderedBoundaries.splice(0, i);
                  return;
                }
              }
              clientRenderedBoundaries.splice(0, i);
              var completedBoundaries = request.completedBoundaries;
              for (i = 0; i < completedBoundaries.length; i++) {
                var _boundary = completedBoundaries[i];
                if (!flushCompletedBoundary(request, destination, _boundary)) {
                  request.destination = null;
                  i++;
                  completedBoundaries.splice(0, i);
                  return;
                }
              }
              completedBoundaries.splice(0, i);
              completeWriting(destination);
              beginWriting(destination);
              var partialBoundaries = request.partialBoundaries;
              for (i = 0; i < partialBoundaries.length; i++) {
                var _boundary2 = partialBoundaries[i];
                if (!flushPartialBoundary(request, destination, _boundary2)) {
                  request.destination = null;
                  i++;
                  partialBoundaries.splice(0, i);
                  return;
                }
              }
              partialBoundaries.splice(0, i);
              var largeBoundaries = request.completedBoundaries;
              for (i = 0; i < largeBoundaries.length; i++) {
                var _boundary3 = largeBoundaries[i];
                if (!flushCompletedBoundary(request, destination, _boundary3)) {
                  request.destination = null;
                  i++;
                  largeBoundaries.splice(0, i);
                  return;
                }
              }
              largeBoundaries.splice(0, i);
            } finally {
              completeWriting(destination);
              flushBuffered(destination);
              if (
                request.allPendingTasks === 0 &&
                request.pingedTasks.length === 0 &&
                request.clientRenderedBoundaries.length === 0 &&
                request.completedBoundaries.length === 0
              ) {
                {
                  if (request.abortableTasks.size !== 0) {
                    error(
                      "There was still abortable task at the root when we closed. This is a bug in React."
                    );
                  }
                }
                close(destination);
              }
            }
          }
          function startWork(request) {
            scheduleWork(function () {
              return performWork(request);
            });
          }
          function startFlowing(request, destination) {
            if (request.status === CLOSING) {
              request.status = CLOSED;
              closeWithError(destination, request.fatalError);
              return;
            }
            if (request.status === CLOSED) {
              return;
            }
            if (request.destination !== null) {
              return;
            }
            request.destination = destination;
            try {
              flushCompletedQueues(request, destination);
            } catch (error2) {
              logRecoverableError(request, error2);
              fatalError(request, error2);
            }
          }
          function abort(request, reason) {
            try {
              var abortableTasks = request.abortableTasks;
              abortableTasks.forEach(function (task) {
                return abortTask(task, request, reason);
              });
              abortableTasks.clear();
              if (request.destination !== null) {
                flushCompletedQueues(request, request.destination);
              }
            } catch (error2) {
              logRecoverableError(request, error2);
              fatalError(request, error2);
            }
          }
          function createDrainHandler(destination, request) {
            return function () {
              return startFlowing(request, destination);
            };
          }
          function createAbortHandler(request, reason) {
            return function () {
              return abort(request, reason);
            };
          }
          function createRequestImpl(children, options) {
            return createRequest(
              children,
              createResponseState(
                options ? options.identifierPrefix : void 0,
                options ? options.nonce : void 0,
                options ? options.bootstrapScriptContent : void 0,
                options ? options.bootstrapScripts : void 0,
                options ? options.bootstrapModules : void 0
              ),
              createRootFormatContext(options ? options.namespaceURI : void 0),
              options ? options.progressiveChunkSize : void 0,
              options ? options.onError : void 0,
              options ? options.onAllReady : void 0,
              options ? options.onShellReady : void 0,
              options ? options.onShellError : void 0,
              void 0
            );
          }
          function renderToPipeableStream(children, options) {
            var request = createRequestImpl(children, options);
            var hasStartedFlowing = false;
            startWork(request);
            return {
              pipe: function (destination) {
                if (hasStartedFlowing) {
                  throw new Error(
                    "React currently only supports piping to one writable stream."
                  );
                }
                hasStartedFlowing = true;
                startFlowing(request, destination);
                destination.on(
                  "drain",
                  createDrainHandler(destination, request)
                );
                destination.on(
                  "error",
                  createAbortHandler(
                    request,
                    new Error(
                      "The destination stream errored while writing data."
                    )
                  )
                );
                destination.on(
                  "close",
                  createAbortHandler(
                    request,
                    new Error("The destination stream closed early.")
                  )
                );
                return destination;
              },
              abort: function (reason) {
                abort(request, reason);
              },
            };
          }
          exports.renderToPipeableStream = renderToPipeableStream;
          exports.version = ReactVersion;
        })();
      }
    },
  });

  // node_modules/react-dom/server.node.js
  var require_server_node = __commonJS({
    "node_modules/react-dom/server.node.js"(exports) {
      "use strict";
      init_process_shim();
      var l;
      var s;
      if (process.env.NODE_ENV === "production") {
        l = require_react_dom_server_legacy_node_production_min();
        s = require_react_dom_server_node_production_min();
      } else {
        l = require_react_dom_server_legacy_node_development();
        s = require_react_dom_server_node_development();
      }
      exports.version = l.version;
      exports.renderToString = l.renderToString;
      exports.renderToStaticMarkup = l.renderToStaticMarkup;
      exports.renderToNodeStream = l.renderToNodeStream;
      exports.renderToStaticNodeStream = l.renderToStaticNodeStream;
      exports.renderToPipeableStream = s.renderToPipeableStream;
    },
  });

  // node_modules/react-dom/server.js
  var require_server = __commonJS({
    "node_modules/react-dom/server.js"(exports, module) {
      "use strict";
      init_process_shim();
      module.exports = require_server_node();
    },
  });

  // ../../samples/fullstack/react-ssr/node/build/fix/kotlin-kotlin-stdlib-js-ir.js
  var require_kotlin_kotlin_stdlib_js_ir = __commonJS({
    "../../samples/fullstack/react-ssr/node/build/fix/kotlin-kotlin-stdlib-js-ir.js"(
      exports,
      module
    ) {
      init_process_shim();
      (function (root, factory) {
        if (typeof define === "function" && define.amd)
          define(["exports"], factory);
        else if (typeof exports === "object") factory(module.exports);
        else
          root["kotlin-kotlin-stdlib-js-ir"] = factory(
            typeof this["kotlin-kotlin-stdlib-js-ir"] === "undefined"
              ? {}
              : this["kotlin-kotlin-stdlib-js-ir"]
          );
      })(exports, function (_) {
        "use strict";
        Long.prototype = Object.create(Number_0.prototype);
        Long.prototype.constructor = Long;
        Exception.prototype = Object.create(Error.prototype);
        Exception.prototype.constructor = Exception;
        RuntimeException.prototype = Object.create(Exception.prototype);
        RuntimeException.prototype.constructor = RuntimeException;
        IllegalArgumentException.prototype = Object.create(
          RuntimeException.prototype
        );
        IllegalArgumentException.prototype.constructor =
          IllegalArgumentException;
        NoSuchElementException.prototype = Object.create(
          RuntimeException.prototype
        );
        NoSuchElementException.prototype.constructor = NoSuchElementException;
        ClassCastException.prototype = Object.create(
          RuntimeException.prototype
        );
        ClassCastException.prototype.constructor = ClassCastException;
        function isEmpty(_this__u8e3s4) {
          return _this__u8e3s4.length === 0;
        }
        function single(_this__u8e3s4) {
          var tmp0_subject = _this__u8e3s4.length;
          var tmp;
          switch (tmp0_subject) {
            case 0:
              throw NoSuchElementException_init_$Create$("Array is empty.");
            case 1:
              tmp = _this__u8e3s4[0];
              break;
            default:
              throw IllegalArgumentException_init_$Create$(
                "Array has more than one element."
              );
          }
          return tmp;
        }
        function contract(builder) {}
        function apply(_this__u8e3s4, block) {
          {
          }
          block(_this__u8e3s4);
          return _this__u8e3s4;
        }
        function Comparable() {}
        Comparable.$metadata$ = interfaceMeta("Comparable");
        function Number_0() {}
        Number_0.$metadata$ = classMeta("Number");
        function Unit() {
          Unit_instance = this;
        }
        Unit.$metadata$ = objectMeta("Unit");
        var Unit_instance;
        function Unit_getInstance() {
          if (Unit_instance == null) new Unit();
          return Unit_instance;
        }
        function asDynamic(_this__u8e3s4) {
          return _this__u8e3s4;
        }
        function unsafeCastDynamic(_this__u8e3s4) {
          return _this__u8e3s4;
        }
        function unsafeCast(_this__u8e3s4) {
          var tmp$ret$0;
          {
            tmp$ret$0 = _this__u8e3s4;
          }
          return tmp$ret$0;
        }
        function Enum() {}
        Enum.prototype.d = function () {
          return this.b_1;
        };
        Enum.prototype.e = function () {
          return this.c_1;
        };
        Enum.prototype.f = function (other) {
          return compareTo(this.c_1, other.c_1);
        };
        Enum.prototype.equals = function (other) {
          return this === other;
        };
        Enum.prototype.hashCode = function () {
          return identityHashCode(this);
        };
        Enum.prototype.toString = function () {
          return this.b_1;
        };
        Enum.$metadata$ = classMeta("Enum", [Comparable]);
        function arrayOf(elements) {
          var tmp$ret$1;
          {
            var tmp$ret$0;
            {
              tmp$ret$0 = elements;
            }
            tmp$ret$1 = tmp$ret$0;
          }
          return tmp$ret$1;
        }
        function compareTo(a, b) {
          var tmp0_subject = typeof a;
          var tmp;
          switch (tmp0_subject) {
            case "number":
              var tmp_0;
              if (typeof b === "number") {
                tmp_0 = doubleCompareTo(a, b);
              } else {
                if (b instanceof Long) {
                  tmp_0 = doubleCompareTo(a, b.i());
                } else {
                  tmp_0 = primitiveCompareTo(a, b);
                }
              }
              tmp = tmp_0;
              break;
            case "string":
            case "boolean":
              tmp = primitiveCompareTo(a, b);
              break;
            default:
              tmp = compareToDoNotIntrinsicify(a, b);
              break;
          }
          return tmp;
        }
        function doubleCompareTo(a, b) {
          var tmp;
          if (a < b) {
            tmp = -1;
          } else if (a > b) {
            tmp = 1;
          } else if (a === b) {
            var tmp_0;
            if (a !== 0) {
              tmp_0 = 0;
            } else {
              var tmp$ret$0;
              {
                tmp$ret$0 = 1;
              }
              var ia = tmp$ret$0 / a;
              var tmp_1;
              var tmp$ret$1;
              {
                tmp$ret$1 = 1;
              }
              if (ia === tmp$ret$1 / b) {
                tmp_1 = 0;
              } else {
                if (ia < 0) {
                  tmp_1 = -1;
                } else {
                  tmp_1 = 1;
                }
              }
              tmp_0 = tmp_1;
            }
            tmp = tmp_0;
          } else if (a !== a) {
            tmp = b !== b ? 0 : 1;
          } else {
            tmp = -1;
          }
          return tmp;
        }
        function primitiveCompareTo(a, b) {
          return a < b ? -1 : a > b ? 1 : 0;
        }
        function compareToDoNotIntrinsicify(a, b) {
          return a.a(b);
        }
        function identityHashCode(obj) {
          return getObjectHashCode(obj);
        }
        function getObjectHashCode(obj) {
          if (!jsIn("kotlinHashCodeValue$", obj)) {
            var hash = jsBitwiseOr(Math.random() * 4294967296, 0);
            var descriptor = new Object();
            descriptor.value = hash;
            descriptor.enumerable = false;
            Object.defineProperty(obj, "kotlinHashCodeValue$", descriptor);
          }
          var tmp$ret$0;
          {
            var tmp0_unsafeCast = obj["kotlinHashCodeValue$"];
            tmp$ret$0 = tmp0_unsafeCast;
          }
          return tmp$ret$0;
        }
        function captureStack(instance, constructorFunction) {
          if (Error.captureStackTrace != null) {
            Error.captureStackTrace(instance, constructorFunction);
          } else {
            var tmp$ret$0;
            {
              tmp$ret$0 = instance;
            }
            tmp$ret$0.stack = new Error().stack;
          }
        }
        function extendThrowable(this_, message, cause) {
          Error.call(this_);
          setPropertiesToThrowableInstance(this_, message, cause);
        }
        function setPropertiesToThrowableInstance(this_, message, cause) {
          if (!hasOwnPrototypeProperty(this_, "message")) {
            var tmp;
            if (message == null) {
              var tmp_0;
              if (!(message === null)) {
                var tmp0_safe_receiver = cause;
                var tmp1_elvis_lhs =
                  tmp0_safe_receiver == null
                    ? null
                    : tmp0_safe_receiver.toString();
                tmp_0 = tmp1_elvis_lhs == null ? void 0 : tmp1_elvis_lhs;
              } else {
                tmp_0 = void 0;
              }
              tmp = tmp_0;
            } else {
              tmp = message;
            }
            this_.message = tmp;
          }
          if (!hasOwnPrototypeProperty(this_, "cause")) {
            this_.cause = cause;
          }
          this_.name = Object.getPrototypeOf(this_).constructor.name;
        }
        function hasOwnPrototypeProperty(o, name) {
          var tmp$ret$0;
          {
            var tmp0_unsafeCast = Object.getPrototypeOf(o).hasOwnProperty(name);
            tmp$ret$0 = tmp0_unsafeCast;
          }
          return tmp$ret$0;
        }
        function THROW_CCE() {
          throw ClassCastException_init_$Create$();
        }
        function emptyArray() {
          return [];
        }
        function Companion() {
          Companion_instance = this;
          this.j_1 = new Long(0, -2147483648);
          this.k_1 = new Long(-1, 2147483647);
          this.l_1 = 8;
          this.m_1 = 64;
        }
        Companion.$metadata$ = objectMeta("Companion");
        var Companion_instance;
        function Companion_getInstance() {
          if (Companion_instance == null) new Companion();
          return Companion_instance;
        }
        function Long(low, high) {
          Companion_getInstance();
          Number_0.call(this);
          this.g_1 = low;
          this.h_1 = high;
        }
        Long.prototype.n = function (other) {
          return compare(this, other);
        };
        Long.prototype.a = function (other) {
          return this.n(other instanceof Long ? other : THROW_CCE());
        };
        Long.prototype.o = function (other) {
          return add(this, other);
        };
        Long.prototype.p = function () {
          return this.q().o(new Long(1, 0));
        };
        Long.prototype.q = function () {
          return new Long(~this.g_1, ~this.h_1);
        };
        Long.prototype.i = function () {
          return toNumber(this);
        };
        Long.prototype.valueOf = function () {
          return this.i();
        };
        Long.$metadata$ = classMeta(
          "Long",
          [Comparable],
          void 0,
          void 0,
          void 0,
          Number_0.prototype
        );
        var ZERO;
        var ONE;
        var NEG_ONE;
        var MAX_VALUE;
        var MIN_VALUE;
        var TWO_PWR_24_;
        function compare(_this__u8e3s4, other) {
          init_properties_longjs_kt_ttk8rv();
          if (equalsLong(_this__u8e3s4, other)) {
            return 0;
          }
          var thisNeg = isNegative(_this__u8e3s4);
          var otherNeg = isNegative(other);
          return (thisNeg ? !otherNeg : false)
            ? -1
            : (!thisNeg ? otherNeg : false)
            ? 1
            : isNegative(subtract(_this__u8e3s4, other))
            ? -1
            : 1;
        }
        function add(_this__u8e3s4, other) {
          init_properties_longjs_kt_ttk8rv();
          var a48 = (_this__u8e3s4.h_1 >>> 16) | 0;
          var a32 = _this__u8e3s4.h_1 & 65535;
          var a16 = (_this__u8e3s4.g_1 >>> 16) | 0;
          var a00 = _this__u8e3s4.g_1 & 65535;
          var b48 = (other.h_1 >>> 16) | 0;
          var b32 = other.h_1 & 65535;
          var b16 = (other.g_1 >>> 16) | 0;
          var b00 = other.g_1 & 65535;
          var c48 = 0;
          var c32 = 0;
          var c16 = 0;
          var c00 = 0;
          c00 = (c00 + ((a00 + b00) | 0)) | 0;
          c16 = (c16 + ((c00 >>> 16) | 0)) | 0;
          c00 = c00 & 65535;
          c16 = (c16 + ((a16 + b16) | 0)) | 0;
          c32 = (c32 + ((c16 >>> 16) | 0)) | 0;
          c16 = c16 & 65535;
          c32 = (c32 + ((a32 + b32) | 0)) | 0;
          c48 = (c48 + ((c32 >>> 16) | 0)) | 0;
          c32 = c32 & 65535;
          c48 = (c48 + ((a48 + b48) | 0)) | 0;
          c48 = c48 & 65535;
          return new Long((c16 << 16) | c00, (c48 << 16) | c32);
        }
        function subtract(_this__u8e3s4, other) {
          init_properties_longjs_kt_ttk8rv();
          return add(_this__u8e3s4, other.p());
        }
        function toNumber(_this__u8e3s4) {
          init_properties_longjs_kt_ttk8rv();
          return (
            _this__u8e3s4.h_1 * 4294967296 + getLowBitsUnsigned(_this__u8e3s4)
          );
        }
        function equalsLong(_this__u8e3s4, other) {
          init_properties_longjs_kt_ttk8rv();
          return _this__u8e3s4.h_1 === other.h_1
            ? _this__u8e3s4.g_1 === other.g_1
            : false;
        }
        function fromInt(value) {
          init_properties_longjs_kt_ttk8rv();
          return new Long(value, value < 0 ? -1 : 0);
        }
        function isNegative(_this__u8e3s4) {
          init_properties_longjs_kt_ttk8rv();
          return _this__u8e3s4.h_1 < 0;
        }
        function getLowBitsUnsigned(_this__u8e3s4) {
          init_properties_longjs_kt_ttk8rv();
          return _this__u8e3s4.g_1 >= 0
            ? _this__u8e3s4.g_1
            : 4294967296 + _this__u8e3s4.g_1;
        }
        var properties_initialized_longjs_kt_5aju7t;
        function init_properties_longjs_kt_ttk8rv() {
          if (properties_initialized_longjs_kt_5aju7t) {
          } else {
            properties_initialized_longjs_kt_5aju7t = true;
            ZERO = fromInt(0);
            ONE = fromInt(1);
            NEG_ONE = fromInt(-1);
            MAX_VALUE = new Long(-1, 2147483647);
            MIN_VALUE = new Long(0, -2147483648);
            TWO_PWR_24_ = fromInt(16777216);
          }
        }
        function classMeta(
          name,
          interfaces,
          associatedObjectKey,
          associatedObjects,
          suspendArity,
          fastPrototype
        ) {
          return createMetadata(
            "class",
            name,
            interfaces,
            associatedObjectKey,
            associatedObjects,
            suspendArity,
            fastPrototype
          );
        }
        function createMetadata(
          kind,
          name,
          interfaces,
          associatedObjectKey,
          associatedObjects,
          suspendArity,
          fastPrototype
        ) {
          return {
            kind,
            simpleName: name,
            interfaceId: kind === "interface" ? -1 : void 0,
            interfaces: interfaces || [],
            associatedObjectKey,
            associatedObjects,
            suspendArity,
            fastPrototype,
            $kClass$: void 0,
            interfacesCache: {
              isComplete:
                fastPrototype === void 0 &&
                (interfaces === void 0 || interfaces.length === 0),
              implementInterfaceMemo: {},
            },
          };
        }
        function interfaceMeta(
          name,
          interfaces,
          associatedObjectKey,
          associatedObjects,
          suspendArity
        ) {
          return createMetadata(
            "interface",
            name,
            interfaces,
            associatedObjectKey,
            associatedObjects,
            suspendArity,
            void 0
          );
        }
        function objectMeta(
          name,
          interfaces,
          associatedObjectKey,
          associatedObjects,
          suspendArity,
          fastPrototype
        ) {
          return createMetadata(
            "object",
            name,
            interfaces,
            associatedObjectKey,
            associatedObjects,
            suspendArity,
            fastPrototype
          );
        }
        function Exception_init_$Init$($this) {
          extendThrowable($this, void 0, void 0);
          Exception.call($this);
          return $this;
        }
        function Exception_init_$Init$_0(message, $this) {
          extendThrowable($this, message, void 0);
          Exception.call($this);
          return $this;
        }
        function Exception() {
          captureStack(this, Exception);
        }
        Exception.$metadata$ = classMeta(
          "Exception",
          void 0,
          void 0,
          void 0,
          void 0,
          Error.prototype
        );
        function IllegalArgumentException_init_$Init$(message, $this) {
          RuntimeException_init_$Init$_0(message, $this);
          IllegalArgumentException.call($this);
          return $this;
        }
        function IllegalArgumentException_init_$Create$(message) {
          var tmp = IllegalArgumentException_init_$Init$(
            message,
            Object.create(IllegalArgumentException.prototype)
          );
          captureStack(tmp, IllegalArgumentException_init_$Create$);
          return tmp;
        }
        function IllegalArgumentException() {
          captureStack(this, IllegalArgumentException);
        }
        IllegalArgumentException.$metadata$ = classMeta(
          "IllegalArgumentException",
          void 0,
          void 0,
          void 0,
          void 0,
          RuntimeException.prototype
        );
        function NoSuchElementException_init_$Init$(message, $this) {
          RuntimeException_init_$Init$_0(message, $this);
          NoSuchElementException.call($this);
          return $this;
        }
        function NoSuchElementException_init_$Create$(message) {
          var tmp = NoSuchElementException_init_$Init$(
            message,
            Object.create(NoSuchElementException.prototype)
          );
          captureStack(tmp, NoSuchElementException_init_$Create$);
          return tmp;
        }
        function NoSuchElementException() {
          captureStack(this, NoSuchElementException);
        }
        NoSuchElementException.$metadata$ = classMeta(
          "NoSuchElementException",
          void 0,
          void 0,
          void 0,
          void 0,
          RuntimeException.prototype
        );
        function RuntimeException_init_$Init$($this) {
          Exception_init_$Init$($this);
          RuntimeException.call($this);
          return $this;
        }
        function RuntimeException_init_$Init$_0(message, $this) {
          Exception_init_$Init$_0(message, $this);
          RuntimeException.call($this);
          return $this;
        }
        function RuntimeException() {
          captureStack(this, RuntimeException);
        }
        RuntimeException.$metadata$ = classMeta(
          "RuntimeException",
          void 0,
          void 0,
          void 0,
          void 0,
          Exception.prototype
        );
        function ClassCastException_init_$Init$($this) {
          RuntimeException_init_$Init$($this);
          ClassCastException.call($this);
          return $this;
        }
        function ClassCastException_init_$Create$() {
          var tmp = ClassCastException_init_$Init$(
            Object.create(ClassCastException.prototype)
          );
          captureStack(tmp, ClassCastException_init_$Create$);
          return tmp;
        }
        function ClassCastException() {
          captureStack(this, ClassCastException);
        }
        ClassCastException.$metadata$ = classMeta(
          "ClassCastException",
          void 0,
          void 0,
          void 0,
          void 0,
          RuntimeException.prototype
        );
        function jsIn(lhs_hack, rhs_hack) {
          var tmp$ret$0;
          {
            var tmp0_unsafeCast = lhs_hack in rhs_hack;
            tmp$ret$0 = tmp0_unsafeCast;
          }
          return tmp$ret$0;
        }
        function jsBitwiseOr(lhs_hack, rhs_hack) {
          var tmp$ret$0;
          {
            var tmp0_unsafeCast = lhs_hack | rhs_hack;
            tmp$ret$0 = tmp0_unsafeCast;
          }
          return tmp$ret$0;
        }
        function jsTypeOf(value_hack) {
          var tmp$ret$0;
          {
            var tmp0_unsafeCast = typeof value_hack;
            tmp$ret$0 = tmp0_unsafeCast;
          }
          return tmp$ret$0;
        }
        _.$_$ = _.$_$ || {};
        _.$_$.a = Unit_getInstance;
        _.$_$.b = single;
        _.$_$.c = classMeta;
        _.$_$.d = interfaceMeta;
        _.$_$.e = objectMeta;
        return _;
      });
    },
  });

  // ../../samples/fullstack/react-ssr/node/build/fix/kotlin-wrappers-kotlin-react-js-ir.js
  var require_kotlin_wrappers_kotlin_react_js_ir = __commonJS({
    "../../samples/fullstack/react-ssr/node/build/fix/kotlin-wrappers-kotlin-react-js-ir.js"(
      exports,
      module
    ) {
      init_process_shim();
      (function (root, factory) {
        if (typeof define === "function" && define.amd)
          define([
            "exports",
            "react",
            "./kotlin-kotlin-stdlib-js-ir.js",
          ], factory);
        else if (typeof exports === "object")
          factory(
            module.exports,
            require_react(),
            require_kotlin_kotlin_stdlib_js_ir()
          );
        else {
          if (typeof react === "undefined") {
            throw new Error(
              "Error loading module 'kotlin-wrappers-kotlin-react-js-ir'. Its dependency 'react' was not found. Please, check whether 'react' is loaded prior to 'kotlin-wrappers-kotlin-react-js-ir'."
            );
          }
          if (typeof this["kotlin-kotlin-stdlib-js-ir"] === "undefined") {
            throw new Error(
              "Error loading module 'kotlin-wrappers-kotlin-react-js-ir'. Its dependency 'kotlin-kotlin-stdlib-js-ir' was not found. Please, check whether 'kotlin-kotlin-stdlib-js-ir' is loaded prior to 'kotlin-wrappers-kotlin-react-js-ir'."
            );
          }
          root["kotlin-wrappers-kotlin-react-js-ir"] = factory(
            typeof this["kotlin-wrappers-kotlin-react-js-ir"] === "undefined"
              ? {}
              : this["kotlin-wrappers-kotlin-react-js-ir"],
            react,
            this["kotlin-kotlin-stdlib-js-ir"]
          );
        }
      })(exports, function (_, $module$react, kotlin_kotlin) {
        "use strict";
        var createElement = $module$react.createElement;
        var isValidElement = $module$react.isValidElement;
        var Fragment = $module$react.Fragment;
        var Unit_getInstance = kotlin_kotlin.$_$.a;
        var interfaceMeta = kotlin_kotlin.$_$.d;
        var classMeta = kotlin_kotlin.$_$.c;
        var single = kotlin_kotlin.$_$.b;
        function child(element) {
          var tmp$ret$1;
          {
            var tmp$ret$0;
            {
              tmp$ret$0 = this;
            }
            tmp$ret$1 = tmp$ret$0[get_CHILDREN()];
          }
          if (!(tmp$ret$1 == null)) {
            var tmp$ret$4;
            {
              var tmp$ret$3;
              {
                var tmp$ret$2;
                {
                  tmp$ret$2 = this;
                }
                tmp$ret$3 = tmp$ret$2[get_CHILDREN()];
              }
              var tmp0_asDynamic = tmp$ret$3;
              tmp$ret$4 = tmp0_asDynamic;
            }
            tmp$ret$4.push(element);
          } else {
            {
              var tmp$ret$7;
              {
                var tmp$ret$6;
                {
                  var tmp$ret$5;
                  {
                    tmp$ret$5 = [element];
                  }
                  tmp$ret$6 = tmp$ret$5;
                }
                tmp$ret$7 = tmp$ret$6;
              }
              var tmp1__set_children__edo2ot = tmp$ret$7;
              var tmp$ret$8;
              {
                tmp$ret$8 = this;
              }
              tmp$ret$8[get_CHILDREN()] = tmp1__set_children__edo2ot;
            }
          }
        }
        function unaryPlus(_this__u8e3s4) {
          this.t(_this__u8e3s4);
        }
        function unaryPlus_0(_this__u8e3s4) {
          var tmp$ret$2;
          {
            var tmp$ret$1;
            {
              var tmp$ret$0;
              {
                tmp$ret$0 = _this__u8e3s4;
              }
              tmp$ret$1 = tmp$ret$0;
            }
            tmp$ret$2 = tmp$ret$1;
          }
          this.u(tmp$ret$2);
        }
        function invoke(_this__u8e3s4, block) {
          this.u(create(_this__u8e3s4, block));
        }
        function get_CHILDREN() {
          init_properties_ChildrenBuilder_kt_7yrkko();
          return CHILDREN;
        }
        var CHILDREN;
        function ChildrenBuilder() {}
        ChildrenBuilder.$metadata$ = interfaceMeta("ChildrenBuilder");
        function set_children(_this__u8e3s4, value) {
          init_properties_ChildrenBuilder_kt_7yrkko();
          var tmp$ret$0;
          {
            tmp$ret$0 = _this__u8e3s4;
          }
          tmp$ret$0[get_CHILDREN()] = value;
        }
        function get_children(_this__u8e3s4) {
          init_properties_ChildrenBuilder_kt_7yrkko();
          var tmp$ret$0;
          {
            tmp$ret$0 = _this__u8e3s4;
          }
          return tmp$ret$0[get_CHILDREN()];
        }
        function ChildrenBuilderImpl() {}
        ChildrenBuilderImpl.$metadata$ = classMeta("ChildrenBuilderImpl", [
          ChildrenBuilder,
        ]);
        function createChildrenBuilder() {
          init_properties_ChildrenBuilder_kt_7yrkko();
          return new ChildrenBuilderImpl();
        }
        var properties_initialized_ChildrenBuilder_kt_gby2z0;
        function init_properties_ChildrenBuilder_kt_7yrkko() {
          if (properties_initialized_ChildrenBuilder_kt_gby2z0) {
          } else {
            properties_initialized_ChildrenBuilder_kt_gby2z0 = true;
            CHILDREN = Symbol("@@children");
          }
        }
        function FC(block) {
          var component = FC$lambda(block);
          var tmp$ret$1;
          {
            var tmp$ret$0;
            {
              tmp$ret$0 = component;
            }
            tmp$ret$1 = tmp$ret$0;
          }
          return tmp$ret$1;
        }
        function FC$lambda$lambda($block, $props) {
          return function ($this$createElementOrNull) {
            $block($this$createElementOrNull, $props);
            return Unit_getInstance();
          };
        }
        function FC$lambda($block) {
          return function (props) {
            return createElementOrNull(FC$lambda$lambda($block, props));
          };
        }
        function create(_this__u8e3s4, block) {
          var builder = createChildrenBuilder();
          var tmp$ret$2;
          {
            var tmp$ret$1;
            {
              var tmp$ret$0;
              {
                tmp$ret$0 = builder;
              }
              tmp$ret$1 = tmp$ret$0;
            }
            var tmp0_apply = tmp$ret$1;
            {
            }
            block(tmp0_apply);
            tmp$ret$2 = tmp0_apply;
          }
          var props = tmp$ret$2;
          var tmp$ret$4;
          {
            var tmp$ret$3;
            {
              tmp$ret$3 = builder;
            }
            tmp$ret$4 = tmp$ret$3[get_CHILDREN()];
          }
          var tmp0_elvis_lhs = tmp$ret$4;
          var tmp;
          if (tmp0_elvis_lhs == null) {
            var tmp$ret$5;
            {
              tmp$ret$5 = [];
            }
            tmp = tmp$ret$5;
          } else {
            tmp = tmp0_elvis_lhs;
          }
          var children = tmp;
          return createElement.apply(
            null,
            [_this__u8e3s4, props].concat([].slice.call(children.slice()))
          );
        }
        function createElementOrNull(block) {
          var tmp$ret$2;
          {
            var tmp$ret$0;
            {
              var tmp0_apply = createChildrenBuilder();
              {
              }
              block(tmp0_apply);
              tmp$ret$0 = tmp0_apply;
            }
            var tmp1__get_children__1krr81 = tmp$ret$0;
            var tmp$ret$1;
            {
              tmp$ret$1 = tmp1__get_children__1krr81;
            }
            tmp$ret$2 = tmp$ret$1[get_CHILDREN()];
          }
          var tmp0_elvis_lhs = tmp$ret$2;
          var tmp;
          if (tmp0_elvis_lhs == null) {
            return null;
          } else {
            tmp = tmp0_elvis_lhs;
          }
          var children = tmp;
          var tmp$ret$3;
          {
            tmp$ret$3 = children.length === 0;
          }
          if (tmp$ret$3) return null;
          if (children.length === 1) {
            var tmp1_elvis_lhs = single(children);
            var tmp_0;
            if (tmp1_elvis_lhs == null) {
              return null;
            } else {
              tmp_0 = tmp1_elvis_lhs;
            }
            var child2 = tmp_0;
            if (isValidElement(child2)) {
              var tmp$ret$5;
              {
                var tmp$ret$4;
                {
                  tmp$ret$4 = child2;
                }
                tmp$ret$5 = tmp$ret$4;
              }
              return tmp$ret$5;
            }
          }
          return createElement.apply(
            null,
            [Fragment, void 0].concat([].slice.call(children.slice()))
          );
        }
        ChildrenBuilderImpl.prototype.u = unaryPlus;
        ChildrenBuilderImpl.prototype.v = unaryPlus_0;
        ChildrenBuilderImpl.prototype.t = child;
        ChildrenBuilderImpl.prototype.w = invoke;
        _.$_$ = _.$_$ || {};
        _.$_$.a = FC;
        _.$_$.b = create;
        return _;
      });
    },
  });

  // ../../samples/fullstack/react-ssr/node/build/fix/kotlin-wrappers-kotlin-react-dom-js-ir.js
  var require_kotlin_wrappers_kotlin_react_dom_js_ir = __commonJS({
    "../../samples/fullstack/react-ssr/node/build/fix/kotlin-wrappers-kotlin-react-dom-js-ir.js"(
      exports,
      module
    ) {
      init_process_shim();
      (function (root, factory) {
        if (typeof define === "function" && define.amd)
          define(["exports", "./kotlin-kotlin-stdlib-js-ir.js"], factory);
        else if (typeof exports === "object")
          factory(module.exports, require_kotlin_kotlin_stdlib_js_ir());
        else {
          if (typeof this["kotlin-kotlin-stdlib-js-ir"] === "undefined") {
            throw new Error(
              "Error loading module 'kotlin-wrappers-kotlin-react-dom-js-ir'. Its dependency 'kotlin-kotlin-stdlib-js-ir' was not found. Please, check whether 'kotlin-kotlin-stdlib-js-ir' is loaded prior to 'kotlin-wrappers-kotlin-react-dom-js-ir'."
            );
          }
          root["kotlin-wrappers-kotlin-react-dom-js-ir"] = factory(
            typeof this["kotlin-wrappers-kotlin-react-dom-js-ir"] ===
              "undefined"
              ? {}
              : this["kotlin-wrappers-kotlin-react-dom-js-ir"],
            this["kotlin-kotlin-stdlib-js-ir"]
          );
        }
      })(exports, function (_, kotlin_kotlin) {
        "use strict";
        var Unit_getInstance = kotlin_kotlin.$_$.a;
        var objectMeta = kotlin_kotlin.$_$.e;
        function ReactHTML() {
          ReactHTML_instance = this;
        }
        ReactHTML.prototype.x = function () {
          var tmp$ret$1;
          {
            var tmp$ret$0;
            {
              tmp$ret$0 = "div";
            }
            tmp$ret$1 = tmp$ret$0;
          }
          return tmp$ret$1;
        };
        ReactHTML.prototype.y = function () {
          var tmp$ret$1;
          {
            var tmp$ret$0;
            {
              tmp$ret$0 = "strong";
            }
            tmp$ret$1 = tmp$ret$0;
          }
          return tmp$ret$1;
        };
        ReactHTML.$metadata$ = objectMeta("ReactHTML");
        var ReactHTML_instance;
        function ReactHTML_getInstance() {
          if (ReactHTML_instance == null) new ReactHTML();
          return ReactHTML_instance;
        }
        _.$_$ = _.$_$ || {};
        _.$_$.a = ReactHTML_getInstance;
        return _;
      });
    },
  });

  // ../../samples/fullstack/react-ssr/node/build/fix/elide-frontend.js
  var require_elide_frontend = __commonJS({
    "../../samples/fullstack/react-ssr/node/build/fix/elide-frontend.js"(
      exports,
      module
    ) {
      init_process_shim();
      (function (root, factory) {
        if (typeof define === "function" && define.amd)
          define([
            "exports",
            "./kotlin-kotlin-stdlib-js-ir.js",
            "./kotlin-wrappers-kotlin-react-dom-js-ir.js",
            "./kotlin-wrappers-kotlin-react-js-ir.js",
          ], factory);
        else if (typeof exports === "object")
          factory(
            module.exports,
            require_kotlin_kotlin_stdlib_js_ir(),
            require_kotlin_wrappers_kotlin_react_dom_js_ir(),
            require_kotlin_wrappers_kotlin_react_js_ir()
          );
        else {
          if (typeof this["kotlin-kotlin-stdlib-js-ir"] === "undefined") {
            throw new Error(
              "Error loading module 'elide-frontend'. Its dependency 'kotlin-kotlin-stdlib-js-ir' was not found. Please, check whether 'kotlin-kotlin-stdlib-js-ir' is loaded prior to 'elide-frontend'."
            );
          }
          if (
            typeof this["kotlin-wrappers-kotlin-react-dom-js-ir"] ===
            "undefined"
          ) {
            throw new Error(
              "Error loading module 'elide-frontend'. Its dependency 'kotlin-wrappers-kotlin-react-dom-js-ir' was not found. Please, check whether 'kotlin-wrappers-kotlin-react-dom-js-ir' is loaded prior to 'elide-frontend'."
            );
          }
          if (
            typeof this["kotlin-wrappers-kotlin-react-js-ir"] === "undefined"
          ) {
            throw new Error(
              "Error loading module 'elide-frontend'. Its dependency 'kotlin-wrappers-kotlin-react-js-ir' was not found. Please, check whether 'kotlin-wrappers-kotlin-react-js-ir' is loaded prior to 'elide-frontend'."
            );
          }
          root["elide-frontend"] = factory(
            typeof this["elide-frontend"] === "undefined"
              ? {}
              : this["elide-frontend"],
            this["kotlin-kotlin-stdlib-js-ir"],
            this["kotlin-wrappers-kotlin-react-dom-js-ir"],
            this["kotlin-wrappers-kotlin-react-js-ir"]
          );
        }
      })(
        exports,
        function (
          _,
          kotlin_kotlin,
          kotlin_org_jetbrains_kotlin_wrappers_kotlin_react_dom,
          kotlin_org_jetbrains_kotlin_wrappers_kotlin_react
        ) {
          "use strict";
          var Unit_getInstance = kotlin_kotlin.$_$.a;
          var ReactHTML_getInstance =
            kotlin_org_jetbrains_kotlin_wrappers_kotlin_react_dom.$_$.a;
          var FC = kotlin_org_jetbrains_kotlin_wrappers_kotlin_react.$_$.a;
          function get_SampleApp() {
            init_properties_SampleApp_kt_a2k1a5();
            return SampleApp;
          }
          var SampleApp;
          function SampleApp$lambda$lambda$lambda($props) {
            return function ($this$invoke) {
              $this$invoke.v($props.message);
              return Unit_getInstance();
            };
          }
          function SampleApp$lambda$lambda($props) {
            return function ($this$invoke) {
              var tmp$ret$2;
              {
                var tmp0__get_strong__9w4w86 = ReactHTML_getInstance();
                var tmp$ret$1;
                {
                  var tmp$ret$0;
                  {
                    tmp$ret$0 = "strong";
                  }
                  tmp$ret$1 = tmp$ret$0;
                }
                tmp$ret$2 = tmp$ret$1;
              }
              var tmp = tmp$ret$2;
              $this$invoke.w(tmp, SampleApp$lambda$lambda$lambda($props));
              return Unit_getInstance();
            };
          }
          function SampleApp$lambda() {
            return function ($this$FC, props) {
              var tmp$ret$2;
              {
                var tmp0__get_div__2k2o9m = ReactHTML_getInstance();
                var tmp$ret$1;
                {
                  var tmp$ret$0;
                  {
                    tmp$ret$0 = "div";
                  }
                  tmp$ret$1 = tmp$ret$0;
                }
                tmp$ret$2 = tmp$ret$1;
              }
              var tmp = tmp$ret$2;
              $this$FC.w(tmp, SampleApp$lambda$lambda(props));
              return Unit_getInstance();
            };
          }
          var properties_initialized_SampleApp_kt_qvmw2h;
          function init_properties_SampleApp_kt_a2k1a5() {
            if (properties_initialized_SampleApp_kt_qvmw2h) {
            } else {
              properties_initialized_SampleApp_kt_qvmw2h = true;
              SampleApp = FC(SampleApp$lambda());
            }
          }
          _.$_$ = _.$_$ || {};
          _.$_$.a = get_SampleApp;
          return _;
        }
      );
    },
  });

  // ../../samples/fullstack/react-ssr/node/build/fix/ssr.js
  var require_ssr = __commonJS({
    "../../samples/fullstack/react-ssr/node/build/fix/ssr.js"(exports, module) {
      init_process_shim();
      (function (root, factory) {
        if (typeof define === "function" && define.amd)
          define([
            "exports",
            "react",
            "react-dom/server",
            "./kotlin-wrappers-kotlin-react-js-ir.js",
            "./kotlin-kotlin-stdlib-js-ir.js",
            "./elide-frontend.js",
          ], factory);
        else if (typeof exports === "object")
          factory(
            module.exports,
            require_react(),
            require_server(),
            require_kotlin_wrappers_kotlin_react_js_ir(),
            require_kotlin_kotlin_stdlib_js_ir(),
            require_elide_frontend()
          );
        else {
          if (typeof react === "undefined") {
            throw new Error(
              "Error loading module 'elide-node'. Its dependency 'react' was not found. Please, check whether 'react' is loaded prior to 'elide-node'."
            );
          }
          if (typeof this["react-dom/server"] === "undefined") {
            throw new Error(
              "Error loading module 'elide-node'. Its dependency 'react-dom/server' was not found. Please, check whether 'react-dom/server' is loaded prior to 'elide-node'."
            );
          }
          if (
            typeof this["kotlin-wrappers-kotlin-react-js-ir"] === "undefined"
          ) {
            throw new Error(
              "Error loading module 'elide-node'. Its dependency 'kotlin-wrappers-kotlin-react-js-ir' was not found. Please, check whether 'kotlin-wrappers-kotlin-react-js-ir' is loaded prior to 'elide-node'."
            );
          }
          if (typeof this["kotlin-kotlin-stdlib-js-ir"] === "undefined") {
            throw new Error(
              "Error loading module 'elide-node'. Its dependency 'kotlin-kotlin-stdlib-js-ir' was not found. Please, check whether 'kotlin-kotlin-stdlib-js-ir' is loaded prior to 'elide-node'."
            );
          }
          if (typeof this["elide-frontend"] === "undefined") {
            throw new Error(
              "Error loading module 'elide-node'. Its dependency 'elide-frontend' was not found. Please, check whether 'elide-frontend' is loaded prior to 'elide-node'."
            );
          }
          root["elide-node"] = factory(
            typeof this["elide-node"] === "undefined" ? {} : this["elide-node"],
            react,
            this["react-dom/server"],
            this["kotlin-wrappers-kotlin-react-js-ir"],
            this["kotlin-kotlin-stdlib-js-ir"],
            this["elide-frontend"]
          );
        }
      })(
        exports,
        function (
          _,
          $module$react,
          $module$react_dom_server_qoxnzi,
          kotlin_org_jetbrains_kotlin_wrappers_kotlin_react,
          kotlin_kotlin,
          kotlin_elide_samples_fullstack_react_ssr_frontend
        ) {
          "use strict";
          var Fragment = $module$react.Fragment;
          var renderToString = $module$react_dom_server_qoxnzi.renderToString;
          var create = kotlin_org_jetbrains_kotlin_wrappers_kotlin_react.$_$.b;
          var Unit_getInstance = kotlin_kotlin.$_$.a;
          var get_SampleApp =
            kotlin_elide_samples_fullstack_react_ssr_frontend.$_$.a;
          function renderContent() {
            var tmp = Fragment;
            return renderToString(create(tmp, renderContent$lambda()));
          }
          function renderContent$lambda$lambda() {
            return function ($this$invoke) {
              $this$invoke.message = "Hello, React SSR!";
              return Unit_getInstance();
            };
          }
          function renderContent$lambda() {
            return function ($this$create) {
              var tmp = get_SampleApp();
              $this$create.w(tmp, renderContent$lambda$lambda());
              return Unit_getInstance();
            };
          }
          function $jsExportAll$(_2) {
            _2.renderContent = renderContent;
          }
          $jsExportAll$(_);
          return _;
        }
      );
    },
  });
  return require_ssr();
})();
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
/**
 * @license React
 * react-dom-server-legacy.node.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license React
 * react-dom-server-legacy.node.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license React
 * react-dom-server.node.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license React
 * react-dom-server.node.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license React
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license React
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * Invoke the user's `renderContent` entrypoint function after setting up runtime state.
 */
function embeddedExecute() {
  // noinspection JSUnresolvedFunction,JSUnresolvedVariable
  return embedded.renderContent;
}
embeddedExecute();
