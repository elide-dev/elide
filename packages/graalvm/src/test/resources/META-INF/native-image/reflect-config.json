[
{
  "name":"[B"
},
{
  "name":"[C"
},
{
  "name":"[D"
},
{
  "name":"[F"
},
{
  "name":"[I"
},
{
  "name":"[J"
},
{
  "name":"[Ljava.lang.Object;"
},
{
  "name":"[Ljava.lang.String;"
},
{
  "name":"[Ljavax.management.openmbean.CompositeData;"
},
{
  "name":"[Lsun.security.pkcs.SignerInfo;"
},
{
  "name":"[S"
},
{
  "name":"[Z"
},
{
  "name":"android.os.Build"
},
{
  "name":"android.os.Build$VERSION"
},
{
  "name":"apple.security.AppleProvider",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"ch.qos.logback.classic.encoder.PatternLayoutEncoder",
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"ch.qos.logback.classic.joran.SerializedModelConfigurator",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"ch.qos.logback.classic.pattern.DateConverter",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"ch.qos.logback.classic.pattern.LevelConverter",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"ch.qos.logback.classic.pattern.LineSeparatorConverter",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"ch.qos.logback.classic.pattern.LoggerConverter",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"ch.qos.logback.classic.pattern.MessageConverter",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"ch.qos.logback.classic.pattern.ThreadConverter",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"ch.qos.logback.classic.pattern.color.HighlightingCompositeConverter",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"ch.qos.logback.classic.spi.LogbackServiceProvider"
},
{
  "name":"ch.qos.logback.classic.util.DefaultJoranConfigurator",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"ch.qos.logback.core.ConsoleAppender",
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"setTarget","parameterTypes":["java.lang.String"] }]
},
{
  "name":"ch.qos.logback.core.OutputStreamAppender",
  "methods":[{"name":"setEncoder","parameterTypes":["ch.qos.logback.core.encoder.Encoder"] }]
},
{
  "name":"ch.qos.logback.core.encoder.Encoder",
  "methods":[{"name":"valueOf","parameterTypes":["java.lang.String"] }]
},
{
  "name":"ch.qos.logback.core.encoder.LayoutWrappingEncoder",
  "methods":[{"name":"setParent","parameterTypes":["ch.qos.logback.core.spi.ContextAware"] }]
},
{
  "name":"ch.qos.logback.core.pattern.PatternLayoutEncoderBase",
  "methods":[{"name":"setPattern","parameterTypes":["java.lang.String"] }]
},
{
  "name":"ch.qos.logback.core.pattern.color.CyanCompositeConverter",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"ch.qos.logback.core.pattern.color.MagentaCompositeConverter",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"ch.qos.logback.core.pattern.color.WhiteCompositeConverter",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"ch.qos.logback.core.spi.ContextAware",
  "methods":[{"name":"valueOf","parameterTypes":["java.lang.String"] }]
},
{
  "name":"com.fasterxml.jackson.databind.ext.Java7SupportImpl",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"com.google.common.jimfs.SystemJimfsFileSystemProvider",
  "methods":[{"name":"removeFileSystemRunnable","parameterTypes":["java.net.URI"] }]
},
{
  "name":"com.google.common.util.concurrent.AbstractFuture",
  "fields":[{"name":"listeners"}, {"name":"value"}, {"name":"waiters"}]
},
{
  "name":"com.google.common.util.concurrent.AbstractFuture$Waiter",
  "fields":[{"name":"next"}, {"name":"thread"}]
},
{
  "name":"com.google.protobuf.ExtensionRegistry",
  "methods":[{"name":"getEmptyRegistry","parameterTypes":[] }]
},
{
  "name":"com.google.protobuf.Timestamp",
  "methods":[{"name":"getNanos","parameterTypes":[] }, {"name":"getSeconds","parameterTypes":[] }, {"name":"newBuilder","parameterTypes":[] }]
},
{
  "name":"com.google.protobuf.Timestamp$Builder",
  "methods":[{"name":"clearNanos","parameterTypes":[] }, {"name":"clearSeconds","parameterTypes":[] }, {"name":"getNanos","parameterTypes":[] }, {"name":"getSeconds","parameterTypes":[] }, {"name":"setNanos","parameterTypes":["int"] }, {"name":"setSeconds","parameterTypes":["long"] }]
},
{
  "name":"com.intellij.rt.coverage.instrumentation.Instrumentator",
  "methods":[{"name":"premain","parameterTypes":["java.lang.String","java.lang.instrument.Instrumentation"] }]
},
{
  "name":"com.intellij.rt.coverage.main.CoveragePremain",
  "methods":[{"name":"premain","parameterTypes":["java.lang.String","java.lang.instrument.Instrumentation"] }]
},
{
  "name":"com.sun.jna.CallbackProxy",
  "methods":[{"name":"callback","parameterTypes":["java.lang.Object[]"] }]
},
{
  "name":"com.sun.jna.NativeLong",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"com.sun.jna.platform.mac.CoreFoundation$CFAllocatorRef",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"com.sun.jna.platform.mac.CoreFoundation$CFArrayRef",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"com.sun.jna.platform.mac.CoreFoundation$CFDataRef",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"com.sun.jna.platform.mac.CoreFoundation$CFIndex",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"com.sun.jna.platform.mac.CoreFoundation$CFMutableDictionaryRef",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"com.sun.jna.platform.mac.CoreFoundation$CFStringRef",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"com.sun.jna.platform.mac.CoreFoundation$CFTypeID",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"com.sun.jna.platform.mac.CoreFoundation$CFTypeRef",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"com.sun.jna.platform.mac.IOKit$IOIterator",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"com.sun.jna.platform.mac.IOKit$IORegistryEntry",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"com.sun.jna.platform.mac.SystemB",
  "allPublicFields":true
},
{
  "name":"com.sun.jna.platform.mac.SystemB$IFdata",
  "allDeclaredFields":true,
  "queryAllPublicConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"com.sun.jna.platform.mac.SystemB$IFdata64",
  "allDeclaredFields":true,
  "queryAllPublicConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"com.sun.jna.platform.mac.SystemB$IFmsgHdr",
  "allDeclaredFields":true
},
{
  "name":"com.sun.jna.platform.mac.SystemB$IFmsgHdr2",
  "allDeclaredFields":true
},
{
  "name":"com.sun.jna.platform.mac.SystemB$Timeval",
  "allDeclaredFields":true,
  "queryAllPublicConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"com.sun.jna.platform.unix.LibCAPI$size_t",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"com.sun.jna.ptr.IntByReference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"com.sun.jna.ptr.PointerByReference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"com.sun.management.GarbageCollectorMXBean",
  "queryAllPublicMethods":true
},
{
  "name":"com.sun.management.GcInfo",
  "queryAllPublicMethods":true
},
{
  "name":"com.sun.management.HotSpotDiagnosticMXBean",
  "queryAllPublicMethods":true
},
{
  "name":"com.sun.management.ThreadMXBean",
  "queryAllPublicMethods":true
},
{
  "name":"com.sun.management.UnixOperatingSystemMXBean",
  "queryAllPublicMethods":true
},
{
  "name":"com.sun.management.VMOption",
  "queryAllPublicMethods":true
},
{
  "name":"com.sun.management.internal.GarbageCollectorExtImpl",
  "queryAllPublicConstructors":true
},
{
  "name":"com.sun.management.internal.HotSpotDiagnostic",
  "queryAllPublicConstructors":true
},
{
  "name":"com.sun.management.internal.HotSpotThreadImpl",
  "queryAllPublicConstructors":true
},
{
  "name":"com.sun.management.internal.OperatingSystemImpl",
  "queryAllPublicConstructors":true
},
{
  "name":"com.sun.org.apache.xerces.internal.jaxp.SAXParserFactoryImpl",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.core.ContextTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testCustomEvaluator","parameterTypes":[] }, {"name":"testCustomParser","parameterTypes":[] }, {"name":"testEnableLanguage","parameterTypes":[] }, {"name":"testExecute","parameterTypes":[] }, {"name":"testIntrinsicBindings","parameterTypes":[] }, {"name":"testIntrinsicBindingsJs","parameterTypes":[] }, {"name":"testIntrinsicBindingsPy","parameterTypes":[] }]
},
{
  "name":"elide.runtime.core.ContextTest$JavaScript"
},
{
  "name":"elide.runtime.core.ContextTest$Python"
},
{
  "name":"elide.runtime.core.EngineFactoryTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testEngineFactory","parameterTypes":[] }]
},
{
  "name":"elide.runtime.core.HostPlatformTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testDetectArch","parameterTypes":[] }, {"name":"testDetectOS","parameterTypes":[] }, {"name":"testDetectPlatform","parameterTypes":[] }]
},
{
  "name":"elide.runtime.core.HostPlatformTest$Companion"
},
{
  "name":"elide.runtime.core.LifecycleEventsTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testEvents","parameterTypes":[] }]
},
{
  "name":"elide.runtime.core.LifecycleEventsTest$InstrumentedLifecyclePlugin"
},
{
  "name":"elide.runtime.core.MockEnginePlugin"
},
{
  "name":"elide.runtime.core.VersionTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testCompareVersions","parameterTypes":[] }, {"name":"testParseInvalidVersion","parameterTypes":[] }, {"name":"testParseValidVersion","parameterTypes":[] }, {"name":"testVersionInRange","parameterTypes":[] }]
},
{
  "name":"elide.runtime.core.internals.graalvm.GraalVMContext"
},
{
  "name":"elide.runtime.core.internals.graalvm.GraalVMEngine"
},
{
  "name":"elide.runtime.core.internals.graalvm.GraalVMRuntimeTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testResolveVersion","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.PolyglotScriptTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"basicPolyglotInlineTest","parameterTypes":[] }, {"name":"basicPolyglotSourceCallableArgTest","parameterTypes":[] }, {"name":"basicPolyglotSourceCallableTest","parameterTypes":[] }, {"name":"basicPolyglotSourceTest","parameterTypes":[] }, {"name":"testEvaluateEmbeddedScriptHarness","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.cfg.$GuestIOConfiguration$Intercepted$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.cfg.$GuestVMConfiguration$Intercepted$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.cfg.$GuestVMEEConfig$Intercepted$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.cfg.$GuestVMEESandboxConfig$Intercepted$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.cfg.$GuestVMInspectConfig$Intercepted$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.cfg.$JsRuntimeConfig$Intercepted$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.cfg.$JsRuntimeConfig$JsEsmConfig$Intercepted$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.cfg.$JsRuntimeConfig$JsNpmConfig$Intercepted$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.$IntrinsicsManager$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.$IntrinsicsManagerTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.$IntrinsicsManagerTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.AbstractDualTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.AbstractDualTest$Companion",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.AbstractDualTest$DualTestExecutionProxy"
},
{
  "name":"elide.runtime.gvm.internals.AbstractDualTest$GuestTestContext"
},
{
  "name":"elide.runtime.gvm.internals.AbstractDualTest$GuestTestExecution"
},
{
  "name":"elide.runtime.gvm.internals.AbstractDualTest$TestAssertion",
  "allDeclaredClasses":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.AbstractDualTest$TestContext",
  "allDeclaredClasses":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.AbstractDualTest$TestResultContext",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.AbstractIntrinsicTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"testInstall","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.IntrinsicsManagerTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testInjectable","parameterTypes":[] }, {"name":"testResolveIntrinsics","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.$BuiltinIntrinsicsResolver$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.$ServiceIntrinsicsResolver$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.base64.$Base64Intrinsic$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.base64.$JsBase64IntrinsicTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.base64.$JsBase64IntrinsicTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.base64.JsBase64IntrinsicTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testCodec","parameterTypes":["java.lang.String","java.lang.String","java.lang.String"] }, {"name":"testDecode","parameterTypes":[] }, {"name":"testEncode","parameterTypes":[] }, {"name":"testEncodeDecode","parameterTypes":[] }, {"name":"testGuestDecode","parameterTypes":[] }, {"name":"testGuestDecodeStd","parameterTypes":[] }, {"name":"testGuestEncode","parameterTypes":[] }, {"name":"testGuestEncodeStd","parameterTypes":[] }, {"name":"testInjectable","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.console.$ConsoleIntrinsic$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.console.$JsConsoleIntrinsicTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.console.$JsConsoleIntrinsicTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.console.JsConsoleIntrinsicTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"mockLogger","parameterTypes":[] }, {"name":"testConsole","parameterTypes":["elide.runtime.LogLevel","java.lang.String"] }, {"name":"testConsoleError","parameterTypes":[] }, {"name":"testConsoleFormatGuestTypes","parameterTypes":[] }, {"name":"testConsoleFormatTemporal","parameterTypes":[] }, {"name":"testConsoleFormatValue","parameterTypes":[] }, {"name":"testConsoleInfo","parameterTypes":[] }, {"name":"testConsoleLog","parameterTypes":[] }, {"name":"testConsoleWarn","parameterTypes":[] }, {"name":"testInjectable","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.console.JsConsoleIntrinsicTest$WhenMappings"
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.crypto.$WebCryptoIntrinsic$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.crypto.$WebCryptoIntrinsicTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.crypto.$WebCryptoIntrinsicTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.crypto.$WebCryptoKey$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.crypto.WebCryptoIntrinsic",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[
    {"name": "randomUUID", "parameterType": []},
    {"name": "getRandomValues", "parameterType": ["java.lang.Object"]}
  ]
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.crypto.WebCryptoIntrinsicTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testRandomUUID","parameterTypes":[] }, {"name":"testRandomValuesAsGuestValue","parameterTypes":[] }, {"name":"testRandomValuesAsGuestValueInvalid","parameterTypes":[] }, {"name":"testRandomValuesGuestInt16Array","parameterTypes":[] }, {"name":"testRandomValuesGuestInt8Array","parameterTypes":[] }, {"name":"testRandomValuesGuestUInt32Array","parameterTypes":[] }, {"name":"testRandomValuesGuestUInt8Array","parameterTypes":[] }, {"name":"testRandomValuesHost","parameterTypes":[] }, {"name":"testRandomValuesNonArray","parameterTypes":[] }, {"name":"testRandomValuesNonNumericArray","parameterTypes":[] }, {"name":"testRandomValuesNullArray","parameterTypes":[] }, {"name":"testRandomValuesTooBigGuest","parameterTypes":[] }, {"name":"testRandomValuesTooBigHost","parameterTypes":[] }, {"name":"testSubtleCryptoAvailable","parameterTypes":[] }, {"name":"testUUIDParseError","parameterTypes":[] }, {"name":"testUUIDValueCopy","parameterTypes":[] }, {"name":"testUUIDValueFromJava","parameterTypes":[] }, {"name":"testUUIDValueFromString","parameterTypes":[] }, {"name":"testUUIDValueGetChar","parameterTypes":[] }, {"name":"testUUIDValueLength","parameterTypes":[] }, {"name":"testUUIDValueRandom","parameterTypes":[] }, {"name":"testUUIDValueRandomUnique","parameterTypes":[] }, {"name":"testUUIDValueSubstring","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.fetch.$FetchIntrinsic$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.fetch.$FetchIntrinsicTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.fetch.$FetchIntrinsicTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.fetch.FetchIntrinsicTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testInjectable","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.stream.$CoreStreamsIntrinsic$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.struct.map.$JsConcurrentMapTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.struct.map.$JsConcurrentMapTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.struct.map.$JsConcurrentSortedMapTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.struct.map.$JsConcurrentSortedMapTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.struct.map.$JsMapTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.struct.map.$JsMapTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.struct.map.$JsMultiMapTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.struct.map.$JsMultiMapTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.struct.map.$JsMutableMapTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.struct.map.$JsMutableMapTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.struct.map.$JsMutableMultiMapTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.struct.map.$JsMutableMultiMapTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.struct.map.$JsSortedMapTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.struct.map.$JsSortedMapTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.struct.map.AbstractJsMapTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"mapTests","parameterTypes":[] }, {"name":"testCreateEmpty","parameterTypes":[] }, {"name":"testCreateFromIterableEntries","parameterTypes":[] }, {"name":"testCreateFromIterableJsEntries","parameterTypes":[] }, {"name":"testCreateFromIterablePairs","parameterTypes":[] }, {"name":"testCreateFromJSMapEntries","parameterTypes":[] }, {"name":"testCreateFromMap","parameterTypes":[] }, {"name":"testCreateFromMapEntries","parameterTypes":[] }, {"name":"testCreateFromPairs","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.struct.map.JsConcurrentMapTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testBasicConstructor","parameterTypes":[] }, {"name":"testPresizedConstructor","parameterTypes":[] }, {"name":"testSpawnFromMap","parameterTypes":[] }, {"name":"testToString","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.struct.map.JsConcurrentSortedMapTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testBasicConstructor","parameterTypes":[] }, {"name":"testSpawn","parameterTypes":[] }, {"name":"testToString","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.struct.map.JsMapTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testBasicConstructor","parameterTypes":[] }, {"name":"testMapEntry","parameterTypes":[] }, {"name":"testPresizedConstructor","parameterTypes":[] }, {"name":"testSpawnMapDirect","parameterTypes":[] }, {"name":"testToString","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.struct.map.JsMultiMapTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testBasicConstructor","parameterTypes":[] }, {"name":"testPresizedConstructor","parameterTypes":[] }, {"name":"testSpawnMap","parameterTypes":[] }, {"name":"testToString","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.struct.map.JsMutableMapTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testBasicConstructor","parameterTypes":[] }, {"name":"testPresizedConstructor","parameterTypes":[] }, {"name":"testSpawnMapDirect","parameterTypes":[] }, {"name":"testToString","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.struct.map.JsMutableMultiMapTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testBasicConstructor","parameterTypes":[] }, {"name":"testPresizedConstructor","parameterTypes":[] }, {"name":"testSpawnMap","parameterTypes":[] }, {"name":"testToString","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.struct.map.JsSortedMapTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testBasicConstructor","parameterTypes":[] }, {"name":"testComparator","parameterTypes":[] }, {"name":"testSpawn","parameterTypes":[] }, {"name":"testToString","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.typed.$UUIDValueTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.typed.UUIDValueTest",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.url.$URLComplianceTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.url.$URLComplianceTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.url.$URLIntrinsic$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.url.$URLIntrinsicTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.url.$URLIntrinsicTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.url.$URLSearchParamsIntrinsic$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.url.$URLSearchParamsIntrinsicTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.url.$URLSearchParamsIntrinsicTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.url.URLComplianceTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"web platform compliance","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.url.URLComplianceTest$Companion",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.url.URLComplianceTest$URLParseTestCase",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.url.URLComplianceTest$URLParseTestCase$Companion",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.url.URLIntrinsicTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testConstructFromString","parameterTypes":[] }, {"name":"testConstructFromURL","parameterTypes":[] }, {"name":"testConstructGuest","parameterTypes":[] }, {"name":"testConstructInvalid","parameterTypes":[] }, {"name":"testConstructProtocolRelative","parameterTypes":[] }, {"name":"testInjectable","parameterTypes":[] }, {"name":"testURLEquals","parameterTypes":["java.lang.String","java.lang.String","java.lang.String","boolean","java.lang.String"] }, {"name":"testURLEqualsGuest","parameterTypes":["java.lang.String","java.lang.String","java.lang.String","boolean","java.lang.String"] }, {"name":"testURLFromJavaURL","parameterTypes":[] }, {"name":"testURLHash","parameterTypes":["java.lang.String","java.lang.String"] }, {"name":"testURLHashInvalid","parameterTypes":[] }, {"name":"testURLHashMutability","parameterTypes":[] }, {"name":"testURLHashMutabilitySideEffects","parameterTypes":[] }, {"name":"testURLHashcode","parameterTypes":[] }, {"name":"testURLHost","parameterTypes":["java.lang.String","java.lang.String"] }, {"name":"testURLHostMutability","parameterTypes":[] }, {"name":"testURLHostname","parameterTypes":["java.lang.String","java.lang.String"] }, {"name":"testURLHostnameMutability","parameterTypes":[] }, {"name":"testURLHref","parameterTypes":["java.lang.String","java.lang.String"] }, {"name":"testURLHrefMutability","parameterTypes":[] }, {"name":"testURLImmutability","parameterTypes":[] }, {"name":"testURLOriginNotSupported","parameterTypes":[] }, {"name":"testURLPathname","parameterTypes":["java.lang.String","java.lang.String"] }, {"name":"testURLPathnameInvalid","parameterTypes":[] }, {"name":"testURLPathnameMutability","parameterTypes":[] }, {"name":"testURLPort","parameterTypes":["java.lang.String","java.lang.String"] }, {"name":"testURLPortMutability","parameterTypes":[] }, {"name":"testURLProtocol","parameterTypes":["java.lang.String","java.lang.String"] }, {"name":"testURLProtocolMutability","parameterTypes":[] }, {"name":"testURLQuery","parameterTypes":["java.lang.String","java.lang.String"] }, {"name":"testURLQueryInvalid","parameterTypes":[] }, {"name":"testURLQueryMutability","parameterTypes":[] }, {"name":"testURLSort","parameterTypes":[] }, {"name":"testURLSortedHashmap","parameterTypes":[] }, {"name":"testURLSortedSet","parameterTypes":[] }, {"name":"testURLStrings","parameterTypes":["java.lang.String","java.lang.String"] }, {"name":"testURLSymbolPresentGlobally","parameterTypes":[] }, {"name":"testURLToJSON","parameterTypes":[] }, {"name":"testURLUserPassword","parameterTypes":["java.lang.String","java.lang.String"] }, {"name":"testURLUsername","parameterTypes":["java.lang.String","java.lang.String"] }, {"name":"testURLUsernameInvalid","parameterTypes":[] }, {"name":"testURLUsernamePasswordMutability","parameterTypes":[] }, {"name":"testURLUsernamePasswordSplice","parameterTypes":[] }, {"name":"testURLValueFailUndeterminedUpdate","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.url.URLSearchParamsIntrinsicTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"URLSearchParameter(String) constructor tests","parameterTypes":["java.lang.String","int","int"] }, {"name":"URLSearchParameter(String) malformed parse tests","parameterTypes":["java.lang.String","int","int"] }, {"name":"URLSearchParameter(String) well-formed parse tests","parameterTypes":["java.lang.String","int","int"] }, {"name":"testBasicMergeFoldQueryParams","parameterTypes":[] }, {"name":"testBasicParseToMultimap","parameterTypes":[] }, {"name":"testBasicParseToMultimapGuest","parameterTypes":[] }, {"name":"testBuildParamMapFromGuestString","parameterTypes":[] }, {"name":"testBuildParamMapFromHostString","parameterTypes":[] }, {"name":"testGetAllInvalidKeyShouldThrow","parameterTypes":[] }, {"name":"testGetAllNullKeyShouldThrow","parameterTypes":[] }, {"name":"testGetInvalidKeyShouldThrow","parameterTypes":[] }, {"name":"testGetNullKeyShouldThrow","parameterTypes":[] }, {"name":"testGuestMultimap","parameterTypes":[] }, {"name":"testHasInvalidKeyShouldThrow","parameterTypes":[] }, {"name":"testHasNullKeyShouldThrow","parameterTypes":[] }, {"name":"testHostImmutableToString","parameterTypes":[] }, {"name":"testHostMultimap","parameterTypes":[] }, {"name":"testHostMutableToString","parameterTypes":[] }, {"name":"testInjectable","parameterTypes":[] }, {"name":"testInvalidConstructor","parameterTypes":[] }, {"name":"testInvalidKeysShouldThrow","parameterTypes":[] }, {"name":"testMultiParamMergeFold","parameterTypes":[] }, {"name":"testNullConstructor","parameterTypes":[] }, {"name":"testParseDiscardsNonUtf8Chars","parameterTypes":[] }, {"name":"testParseImmutableFromString","parameterTypes":[] }, {"name":"testParseMutableFromString","parameterTypes":[] }, {"name":"testSortDoesNotThrow","parameterTypes":[] }, {"name":"testURLSearchParamsSymbolPresentGlobally","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.webstreams.$ReadableStreamIntrinsic$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.$JsInvocationBindingsTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.$JsInvocationBindingsTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.js.$JsTimerExecutorProviderImpl$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.$JsTimerExecutorProviderImpl$Provide0$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.$JsTimersIntrinsic$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.$JsTimersIntrinsic$Provide0$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.$JsTimersTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.$JsTimersTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.js.$JsTimersTest$JsTimerExecutorProviderTesting$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.$JsTimersTest$JsTimerExecutorProviderTesting$Provide0$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.AbstractJsIntrinsicTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.js.AbstractJsIntrinsicTest$CaptureAssertion",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"apply","parameterTypes": ["java.lang.Object"] }]
},
{
  "name":"elide.runtime.gvm.internals.js.AbstractJsIntrinsicTest$Companion",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.js.AbstractJsIntrinsicTest$JsAssertion",
  "allDeclaredClasses":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.js.JsInvocationBindingsTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testBindingFailsIfExotic","parameterTypes":[] }, {"name":"testBindingFailsIfExoticDefault","parameterTypes":[] }, {"name":"testBindingFailsIfExoticNonFunction","parameterTypes":[] }, {"name":"testBindingServerFailsIfNotAsync","parameterTypes":[] }, {"name":"testBindingServerFailsIfNotDefault","parameterTypes":[] }, {"name":"testBindingsRenderKotlinJSStyle","parameterTypes":[] }, {"name":"testBindingsResolveAsyncFunction","parameterTypes":[] }, {"name":"testBindingsResolveCompound","parameterTypes":[] }, {"name":"testBindingsResolveFunction","parameterTypes":[] }, {"name":"testBindingsResolveRender","parameterTypes":[] }, {"name":"testBindingsResolveServer","parameterTypes":[] }, {"name":"testEvaluateExportDefault","parameterTypes":[] }, {"name":"testEvaluateExportFetch","parameterTypes":[] }, {"name":"testEvaluateExportFn","parameterTypes":[] }, {"name":"testEvaluateExportNamedFn","parameterTypes":[] }, {"name":"testEvaluateExports","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.JsTimerExecutorProvider",
  "allDeclaredClasses":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.js.JsTimersIntrinsic",
  "fields":[{"name":"execProvider"}]
},
{
  "name":"elide.runtime.gvm.internals.js.JsTimersTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"test setInterval() cancel after run","parameterTypes":[] }, {"name":"test setInterval() cancel before run","parameterTypes":[] }, {"name":"test setInterval() with 10ms delay","parameterTypes":[] }, {"name":"test setTimeout() cancel after run","parameterTypes":[] }, {"name":"test setTimeout() cancel before run","parameterTypes":[] }, {"name":"test setTimeout() with 0-delay","parameterTypes":[] }, {"name":"test setTimeout() with 100ms delay","parameterTypes":[] }, {"name":"test setTimeout() with 10ms delay","parameterTypes":[] }, {"name":"test setTimeout() with 1s delay","parameterTypes":[] }, {"name":"test setTimeout() with 250ms delay","parameterTypes":[] }, {"name":"testInjectable","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.JsTimersTest$JsTimerExecutorProviderTesting",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.js.node.$NodeAssertStrictTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.node.$NodeAssertStrictTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.js.node.$NodeAssertTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.node.$NodeAssertTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.js.node.$NodeBufferTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.node.$NodeBufferTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.js.node.$NodeChildProcessTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.node.$NodeChildProcessTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.js.node.$NodeClusterTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.node.$NodeClusterTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.js.node.$NodeConsoleTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.node.$NodeConsoleTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.js.node.$NodeCryptoTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.node.$NodeCryptoTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.js.node.$NodeDatagramTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.node.$NodeDatagramTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.js.node.$NodeDiagnosticsChannelTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.node.$NodeDiagnosticsChannelTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.js.node.$NodeDnsPromisesTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.node.$NodeDnsPromisesTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.js.node.$NodeDnsTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.node.$NodeDnsTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.js.node.$NodeDomainTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.node.$NodeDomainTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.js.node.$NodeEventsTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.node.$NodeEventsTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.js.node.$NodeFsPromisesTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.node.$NodeFsPromisesTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.js.node.$NodeFsTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.node.$NodeFsTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.js.node.$NodeHttp2Test$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.node.$NodeHttp2Test$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.js.node.$NodeHttpTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.node.$NodeHttpTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.js.node.$NodeHttpsTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.node.$NodeHttpsTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.js.node.$NodeInspectorPromisesTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.node.$NodeInspectorPromisesTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.js.node.$NodeInspectorTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.node.$NodeInspectorTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.js.node.$NodeModuleTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.node.$NodeModuleTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.js.node.$NodeNetTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.node.$NodeNetTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.js.node.$NodeOsTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.node.$NodeOsTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.js.node.$NodePathTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.node.$NodePathTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.js.node.$NodePerfHooksTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.node.$NodePerfHooksTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.js.node.$NodeProcessTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.node.$NodeProcessTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.js.node.$NodeQuerystringTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.node.$NodeQuerystringTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.js.node.$NodeReadlinePromisesTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.node.$NodeReadlinePromisesTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.js.node.$NodeReadlineTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.node.$NodeReadlineTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.js.node.$NodeStreamConsumersTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.node.$NodeStreamConsumersTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.js.node.$NodeStreamPromisesTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.node.$NodeStreamPromisesTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.js.node.$NodeStreamTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.node.$NodeStreamTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.js.node.$NodeStreamWebTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.node.$NodeStreamWebTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.js.node.$NodeStringDecoderTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.node.$NodeStringDecoderTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.js.node.$NodeTestTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.node.$NodeTestTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.js.node.$NodeURLTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.node.$NodeURLTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.js.node.$NodeWorkerTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.node.$NodeWorkerTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.js.node.$NodeZlibTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.node.$NodeZlibTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.js.node.NodeAssertStrictTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testInjectable","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.node.NodeAssertTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":["elide.runtime.intrinsics.js.node.AssertAPI"] }, {"name":"assert() passing guest tests","parameterTypes":[] }, {"name":"assert() rejected guest tests","parameterTypes":[] }, {"name":"assert() should behave as expected for falsy cases","parameterTypes":[] }, {"name":"assert() should behave as expected for guest falsy cases","parameterTypes":[] }, {"name":"assert() should behave as expected for guest truthy cases","parameterTypes":[] }, {"name":"assert() should behave as expected for truthy cases","parameterTypes":[] }, {"name":"doesNotMatch() should behave correctly with RegExp","parameterTypes":[] }, {"name":"doesNotMatch() should behave correctly with literal regex","parameterTypes":[] }, {"name":"doesNotThrow() should behave correctly","parameterTypes":[] }, {"name":"equal() guest testing - fail cases","parameterTypes":[] }, {"name":"equal() guest testing - pass cases","parameterTypes":[] }, {"name":"equal() range testing","parameterTypes":[] }, {"name":"equal() should fail correctly with guest types","parameterTypes":[] }, {"name":"equal() should fail correctly with host types","parameterTypes":[] }, {"name":"equal() should pass correctly with guest types","parameterTypes":[] }, {"name":"equal() should pass correctly with host types","parameterTypes":[] }, {"name":"equal() should pass correctly with mixed types","parameterTypes":[] }, {"name":"fail() should behave correctly","parameterTypes":[] }, {"name":"ifError() should properly detect error types","parameterTypes":[] }, {"name":"match() should behave correctly with RegExp","parameterTypes":[] }, {"name":"match() should behave correctly with literal regex","parameterTypes":[] }, {"name":"notOk() should behave as expected for falsy cases","parameterTypes":[] }, {"name":"notOk() should behave as expected for guest truthy cases","parameterTypes":[] }, {"name":"notOk() should behave as expected for truthy cases","parameterTypes":[] }, {"name":"ok() passing guest tests","parameterTypes":[] }, {"name":"ok() rejected guest tests","parameterTypes":[] }, {"name":"ok() should behave as expected for falsy cases","parameterTypes":[] }, {"name":"ok() should behave as expected for guest falsy cases","parameterTypes":[] }, {"name":"ok() should behave as expected for guest truthy cases","parameterTypes":[] }, {"name":"ok() should behave as expected for truthy cases","parameterTypes":[] }, {"name":"ok() should work for falsy guest values","parameterTypes":[] }, {"name":"ok() should work for falsy host values","parameterTypes":[] }, {"name":"ok() should work for proxy arrays","parameterTypes":[] }, {"name":"ok() should work for proxy maps","parameterTypes":[] }, {"name":"ok() should work for proxy objects","parameterTypes":[] }, {"name":"strict() should fail correctly with guest types","parameterTypes":[] }, {"name":"strict() should fail correctly with host types","parameterTypes":[] }, {"name":"strict() should pass correctly with guest types","parameterTypes":[] }, {"name":"strict() should pass correctly with host types","parameterTypes":[] }, {"name":"testInjectable","parameterTypes":[] }, {"name":"throws() should behave correctly","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.node.NodeBufferTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testEmptyBuffers","parameterTypes":[] }, {"name":"testInjectable","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.node.NodeChildProcessTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testInjectable","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.node.NodeClusterTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testInjectable","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.node.NodeConsoleTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testInjectable","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.node.NodeCryptoTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testInjectable","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.node.NodeDatagramTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testInjectable","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.node.NodeDiagnosticsChannelTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testInjectable","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.node.NodeDnsPromisesTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testInjectable","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.node.NodeDnsTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testInjectable","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.node.NodeDomainTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testInjectable","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.node.NodeEventsTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":["elide.runtime.intrinsics.js.node.EventsAPI"] }, {"name":"testCannotDispatchIfStopImmediate","parameterTypes":[] }, {"name":"testCustomEvent","parameterTypes":[] }, {"name":"testCustomEventMembers","parameterTypes":[] }, {"name":"testCustomEventPreventDefault","parameterTypes":[] }, {"name":"testCustomEventStopPropagation","parameterTypes":[] }, {"name":"testCustomEventStopPropagationImmediate","parameterTypes":[] }, {"name":"testCustomEventTarget","parameterTypes":[] }, {"name":"testCustomEventTimestamp","parameterTypes":[] }, {"name":"testCustomEventTrusted","parameterTypes":[] }, {"name":"testDefaultMaxListeners","parameterTypes":[] }, {"name":"testEmptyComposedPath","parameterTypes":[] }, {"name":"testEventsApiSingleton","parameterTypes":[] }, {"name":"testGetEventListenersForEmitter","parameterTypes":[] }, {"name":"testGetMaxListenersForEmitter","parameterTypes":[] }, {"name":"testInjectable","parameterTypes":[] }, {"name":"testSetDefaultMaxListeners","parameterTypes":[] }, {"name":"testSetGlobalDefaultMaxListeners","parameterTypes":[] }, {"name":"testSetMaxListenersForEmitter","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.node.NodeFsPromisesTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testInjectable","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.node.NodeFsTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"access() with text file","parameterTypes":[] }, {"name":"accessSync() with text file","parameterTypes":[] }, {"name":"exists() with directory","parameterTypes":[] }, {"name":"exists() with text file","parameterTypes":[] }, {"name":"existsSync() with directory","parameterTypes":[] }, {"name":"existsSync() with text file","parameterTypes":[] }, {"name":"mkdir() with valid directory name","parameterTypes":[] }, {"name":"mkdirSync() with valid directory name","parameterTypes":[] }, {"name":"readFile() with text file","parameterTypes":[] }, {"name":"readFileSync() with text file","parameterTypes":[] }, {"name":"testInjectable","parameterTypes":[] }, {"name":"writeFile() with valid file and host bytearray","parameterTypes":[] }, {"name":"writeFile() with valid file and string as data","parameterTypes":[] }, {"name":"writeFile() with valid file and string as string","parameterTypes":[] }, {"name":"writeFileSync() with valid file and host bytearray","parameterTypes":[] }, {"name":"writeFileSync() with valid file and string as data","parameterTypes":[] }, {"name":"writeFileSync() with valid file and string as string","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.node.NodeHttp2Test",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testInjectable","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.node.NodeHttpTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testInjectable","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.node.NodeHttpsTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testInjectable","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.node.NodeInspectorPromisesTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testInjectable","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.node.NodeInspectorTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testInjectable","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.node.NodeModuleTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testInjectable","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.node.NodeNetTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testInjectable","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.node.NodeOsTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"api compliance","parameterTypes":[] }, {"name":"os EOL should return expected value for current host","parameterTypes":[] }, {"name":"os arch() should return expected value for current host","parameterTypes":[] }, {"name":"os availableParallelism() should return expected value for current host","parameterTypes":[] }, {"name":"os cpus() should return expected value for current host","parameterTypes":[] }, {"name":"os devNull should return expected value for current host","parameterTypes":[] }, {"name":"os endianness() should return expected value for current host","parameterTypes":[] }, {"name":"os freemem() should return expected value for current host","parameterTypes":[] }, {"name":"os getPriority() should not fail even if stubbed","parameterTypes":[] }, {"name":"os getPriority(pid) should not fail even if stubbed","parameterTypes":[] }, {"name":"os homedir() should return expected value for current host","parameterTypes":[] }, {"name":"os hostname() should return expected value for current host","parameterTypes":[] }, {"name":"os networkInterfaces() should return expected value for current host","parameterTypes":[] }, {"name":"os platform() should resolve properly given each os name","parameterTypes":["java.lang.String","java.lang.String"] }, {"name":"os platform() should return expected value for current host","parameterTypes":[] }, {"name":"os release() should return expected value for current host","parameterTypes":[] }, {"name":"os setPriority(0, 0) should not fail even if stubbed","parameterTypes":[] }, {"name":"os tmpdir() should return expected value for current host","parameterTypes":[] }, {"name":"os totalmem() should return expected value for current host","parameterTypes":[] }, {"name":"os type() should resolve properly given each os name","parameterTypes":["java.lang.String","java.lang.String"] }, {"name":"os type() should return expected value for current host","parameterTypes":[] }, {"name":"os uptime() should return expected value for current host","parameterTypes":[] }, {"name":"os version() should return expected value for current host","parameterTypes":[] }, {"name":"testInjectable","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.node.NodePathTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"asking the posix path factory to parse windows paths should error","parameterTypes":[] }, {"name":"asking the windows path factory to parse posix paths should error","parameterTypes":[] }, {"name":"basename","parameterTypes":["java.lang.String","java.lang.String"] }, {"name":"basename conformance with node","parameterTypes":[] }, {"name":"basename should accept kotlin paths","parameterTypes":[] }, {"name":"basename should accept strings","parameterTypes":[] }, {"name":"delimiter conformance with node (posix)","parameterTypes":[] }, {"name":"delimiter conformance with node (win32)","parameterTypes":[] }, {"name":"delimiter length should be 1 for posix","parameterTypes":[] }, {"name":"delimiter length should be 1 for win32","parameterTypes":[] }, {"name":"delimiter should be valid for posix","parameterTypes":[] }, {"name":"delimiter should be valid for win32","parameterTypes":[] }, {"name":"dirname","parameterTypes":["java.lang.String","java.lang.String"] }, {"name":"dirname should accept kotlin paths","parameterTypes":[] }, {"name":"dirname should accept strings","parameterTypes":[] }, {"name":"explicitly posix path tools","parameterTypes":[] }, {"name":"explicitly win32 path tools","parameterTypes":[] }, {"name":"extname conformance with node","parameterTypes":[] }, {"name":"extname should accept strings","parameterTypes":[] }, {"name":"extname should kotlin paths","parameterTypes":[] }, {"name":"format conformance with node","parameterTypes":[] }, {"name":"format with invalid types should fail","parameterTypes":[] }, {"name":"isAbsolute conformance with node (posix)","parameterTypes":[] }, {"name":"isAbsolute conformance with node (win32)","parameterTypes":[] }, {"name":"join","parameterTypes":["java.lang.String","java.lang.String","java.lang.String"] }, {"name":"join conformance with node (absolute, posix)","parameterTypes":[] }, {"name":"join conformance with node (absolute, posix, strings)","parameterTypes":[] }, {"name":"join conformance with node (absolute, win32)","parameterTypes":[] }, {"name":"join conformance with node (relative, posix)","parameterTypes":[] }, {"name":"join conformance with node (relative, win32)","parameterTypes":[] }, {"name":"join should accept kotlin paths","parameterTypes":[] }, {"name":"join should accept parsed paths","parameterTypes":[] }, {"name":"join should accept strings","parameterTypes":[] }, {"name":"join should work for posix-style paths","parameterTypes":[] }, {"name":"join should work for windows-style paths","parameterTypes":[] }, {"name":"normalize","parameterTypes":["java.lang.String","java.lang.String"] }, {"name":"normalize conformance with node","parameterTypes":[] }, {"name":"normalize conformance with node (absolute, posix)","parameterTypes":[] }, {"name":"normalize conformance with node (absolute, win32)","parameterTypes":[] }, {"name":"normalize conformance with node (relative, posix)","parameterTypes":[] }, {"name":"normalize conformance with node (relative, win32)","parameterTypes":[] }, {"name":"parse conformance with node","parameterTypes":[] }, {"name":"parsed path equals should behave reasonably","parameterTypes":[] }, {"name":"parsed path hashCode should behave reasonably","parameterTypes":[] }, {"name":"parsed paths should be comparable as strings","parameterTypes":[] }, {"name":"parsed paths should behave like strings","parameterTypes":[] }, {"name":"parsing paths should work from javascript","parameterTypes":[] }, {"name":"path api should conform for posix paths","parameterTypes":[] }, {"name":"path api should conform for windows paths","parameterTypes":[] }, {"name":"path equals should be lenient (jvm)","parameterTypes":[] }, {"name":"path factory should accept java paths","parameterTypes":[] }, {"name":"path factory should accept kotlin paths","parameterTypes":[] }, {"name":"path factory should accept string paths","parameterTypes":[] }, {"name":"path format should be able to render dir-only paths (non-root)","parameterTypes":[] }, {"name":"path format should be able to render dir-only paths (root)","parameterTypes":[] }, {"name":"path format should be able to render name-only paths (non-root)","parameterTypes":[] }, {"name":"path format should be able to render name-only paths (root)","parameterTypes":[] }, {"name":"path format should be tolerant of nulls (base)","parameterTypes":[] }, {"name":"path format should be tolerant of nulls (dir)","parameterTypes":[] }, {"name":"path format should be tolerant of nulls (ext)","parameterTypes":[] }, {"name":"path format should be tolerant of nulls (ext, with parent)","parameterTypes":[] }, {"name":"path format should be tolerant of nulls (name)","parameterTypes":[] }, {"name":"path format should be tolerant of nulls (name, with parent)","parameterTypes":[] }, {"name":"path format should be tolerant of nulls (root)","parameterTypes":[] }, {"name":"path format should be tolerant of nulls (root, with parent)","parameterTypes":[] }, {"name":"path format should ignore name and ext if base is present","parameterTypes":[] }, {"name":"path format should yield expected path (absolute dir)","parameterTypes":[] }, {"name":"path format should yield expected path (absolute file)","parameterTypes":[] }, {"name":"path format should yield expected path (relative dir)","parameterTypes":[] }, {"name":"path format should yield expected path (relative file)","parameterTypes":[] }, {"name":"path module intrinsic should be present","parameterTypes":[] }, {"name":"path module should not be present in globals by default","parameterTypes":[] }, {"name":"path parse should yield path object (absolute dir)","parameterTypes":[] }, {"name":"path parse should yield path object (absolute file)","parameterTypes":[] }, {"name":"path parse should yield path object (relative dir)","parameterTypes":[] }, {"name":"path parse should yield path object (relative file)","parameterTypes":[] }, {"name":"path styles should properly recognize absolute paths","parameterTypes":[] }, {"name":"path utils should default to posix","parameterTypes":[] }, {"name":"path utils should properly recognize os","parameterTypes":[] }, {"name":"pathbuf factory should accept java paths","parameterTypes":[] }, {"name":"pathbuf factory should accept kotlin paths","parameterTypes":[] }, {"name":"pathbuf factory should accept string paths","parameterTypes":[] }, {"name":"paths should be copyable","parameterTypes":[] }, {"name":"relative conformance with node","parameterTypes":[] }, {"name":"resolve conformance with node","parameterTypes":[] }, {"name":"sep conformance with node (posix)","parameterTypes":[] }, {"name":"sep conformance with node (win32)","parameterTypes":[] }, {"name":"separator length should be 1 for posix","parameterTypes":[] }, {"name":"separator length should be 1 for win32","parameterTypes":[] }, {"name":"separator should be valid for posix","parameterTypes":[] }, {"name":"separator should be valid for win32","parameterTypes":[] }, {"name":"should be able to convert path intrinsic to java path","parameterTypes":[] }, {"name":"should be able to convert path intrinsic to kotlin path","parameterTypes":[] }, {"name":"should be able to create the path module","parameterTypes":[] }, {"name":"should be able to obtain os-explicit path utilities","parameterTypes":[] }, {"name":"should be able to obtain the path module lazily","parameterTypes":[] }, {"name":"should be able to parse absolute posix-style paths","parameterTypes":[] }, {"name":"should be able to parse absolute windows-style paths","parameterTypes":[] }, {"name":"should be able to parse posix-style paths","parameterTypes":[] }, {"name":"should be able to parse relative unix-style paths","parameterTypes":[] }, {"name":"should be able to parse relative windows-style paths","parameterTypes":[] }, {"name":"should be able to parse windows-style paths","parameterTypes":[] }, {"name":"testInjectable","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.node.NodePathTest$TestPaths"
},
{
  "name":"elide.runtime.gvm.internals.js.node.NodePathTest$TestPaths$Companion",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.js.node.NodePerfHooksTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testInjectable","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.node.NodeProcessTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"arch should match host arch by default","parameterTypes":[] }, {"name":"cwd should match host cwd by default","parameterTypes":[] }, {"name":"host arch property should not be null","parameterTypes":[] }, {"name":"host argv property should not be null","parameterTypes":[] }, {"name":"host argv should be empty by default","parameterTypes":[] }, {"name":"host cwd property should not be null","parameterTypes":[] }, {"name":"host env property should not be null","parameterTypes":[] }, {"name":"host env should have full host environment","parameterTypes":[] }, {"name":"host pid property should not be null","parameterTypes":[] }, {"name":"host platform property should not be null","parameterTypes":[] }, {"name":"pid should match host pid by default","parameterTypes":[] }, {"name":"platform should match host platform by default","parameterTypes":[] }, {"name":"stubbed arch property should not be null","parameterTypes":[] }, {"name":"stubbed arch should be host arch","parameterTypes":[] }, {"name":"stubbed argv property should not be null","parameterTypes":[] }, {"name":"stubbed argv should be empty by default","parameterTypes":[] }, {"name":"stubbed cwd property should be empty","parameterTypes":[] }, {"name":"stubbed cwd property should not be null","parameterTypes":[] }, {"name":"stubbed env property should not be null","parameterTypes":[] }, {"name":"stubbed env should be empty by default","parameterTypes":[] }, {"name":"stubbed exit should not exit the vm","parameterTypes":[] }, {"name":"stubbed pid property should be -1","parameterTypes":[] }, {"name":"stubbed pid property should not be null","parameterTypes":[] }, {"name":"stubbed platform property should not be null","parameterTypes":[] }, {"name":"stubbed platform should be host platform","parameterTypes":[] }, {"name":"testInjectable","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.node.NodeQuerystringTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testInjectable","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.node.NodeReadlinePromisesTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testInjectable","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.node.NodeReadlineTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testInjectable","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.node.NodeStreamConsumersTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testInjectable","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.node.NodeStreamPromisesTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testInjectable","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.node.NodeStreamTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"Readable - consume data as an encoded string","parameterTypes":[] }, {"name":"Readable - consume data as an encoded string with explicit size","parameterTypes":[] }, {"name":"Readable - consume data as events","parameterTypes":[] }, {"name":"Readable - consume data as raw bytes","parameterTypes":[] }, {"name":"Readable - consume data as raw bytes with explicit size","parameterTypes":[] }, {"name":"Writable - write data as raw bytes","parameterTypes":[] }, {"name":"testInjectable","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.node.NodeStreamWebTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testInjectable","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.node.NodeStringDecoderTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testInjectable","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.node.NodeTestTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testInjectable","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.node.NodeURLTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testInjectable","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.node.NodeWorkerTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testInjectable","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.node.NodeZlibTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testInjectable","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.node.asserts.$NodeAssertModule$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.node.asserts.$NodeAssertModule$Provide0$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.node.asserts.$NodeAssertStrictModule$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.node.asserts.$NodeAssertStrictModule$Provide0$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.node.buffer.$NodeBufferIntrinsic$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.node.buffer.$NodeBufferModule$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.node.buffer.$NodeBufferModuleFacade$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.node.childProcess.$NodeChildProcessModule$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.node.childProcess.$NodeChildProcessModule$Provide$graalvm0$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.node.cluster.$NodeClusterModule$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.node.cluster.$NodeClusterModule$Provide$graalvm0$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.node.console.$NodeConsoleModule$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.node.console.$NodeConsoleModule$Provide$graalvm0$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.node.crypto.$NodeCryptoModule$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.node.crypto.$NodeCryptoModule$Provide$graalvm0$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.node.dgram.$NodeDatagramModule$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.node.dgram.$NodeDatagramModule$Provide$graalvm0$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.node.diagnostics.$NodeDiagnosticsChannelModule$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.node.diagnostics.$NodeDiagnosticsChannelModule$Provide$graalvm0$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.node.dns.$NodeDNSModule$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.node.dns.$NodeDNSModule$Provide$graalvm0$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.node.dns.$NodeDNSPromisesModule$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.node.dns.$NodeDNSPromisesModule$Provide$graalvm0$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.node.domain.$NodeDomainModule$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.node.domain.$NodeDomainModule$Provide$graalvm0$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.node.events.$NodeEventsModule$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.node.events.$NodeEventsModule$Provide0$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.node.events.$NodeEventsModuleFacade$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.node.events.EventAware",
  "allDeclaredClasses":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.node.fs.$NodeFilesystemModule$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.node.fs.$NodeFilesystemModule$ProvidePromises1$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.node.fs.$NodeFilesystemModule$ProvideStd0$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.node.http.$NodeHttpModule$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.node.http.$NodeHttpModule$Provide$graalvm0$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.node.http2.$NodeHttp2Module$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.node.http2.$NodeHttp2Module$Provide$graalvm0$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.node.https.$NodeHttpsModule$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.node.https.$NodeHttpsModule$Provide$graalvm0$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.node.inspector.$NodeInspectorModule$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.node.inspector.$NodeInspectorPromisesModule$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.node.module.$NodeModulesModule$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.node.module.$NodeModulesModule$Provide$graalvm0$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.node.net.$NodeNetworkModule$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.node.net.$NodeNetworkModule$Provide$graalvm0$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.node.os.$NodeOperatingSystemModule$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.node.os.$NodeOperatingSystemModule$Provide0$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.node.path.$NodePathsModule$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.node.perfHooks.$NodePerformanceHooksModule$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.node.perfHooks.$NodePerformanceHooksModule$Provide$graalvm0$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.node.process.$NodeProcessModule$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.node.process.$NodeProcessModule$Provide0$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.node.querystring.$NodeQuerystringModule$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.node.querystring.$NodeQuerystringModule$Provide$graalvm0$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.node.readline.$NodeReadlineModule$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.node.readline.$NodeReadlineModule$Provide$graalvm0$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.node.readline.$NodeReadlinePromisesModule$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.node.readline.$NodeReadlinePromisesModule$Provide$graalvm0$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.node.stream.$NodeStreamConsumersModule$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.node.stream.$NodeStreamConsumersModule$Provide$graalvm0$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.node.stream.$NodeStreamModule$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.node.stream.$NodeStreamModule$Provide$graalvm0$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.node.stream.$NodeStreamPromisesModule$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.node.stream.$NodeStreamPromisesModule$Provide$graalvm0$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.node.stream.$NodeStreamWebModule$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.node.stream.$NodeStreamWebModule$Provide$graalvm0$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.node.stringDecoder.$NodeStringDecoderModule$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.node.stringDecoder.$NodeStringDecoderModule$Provide$graalvm0$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.node.test.$NodeTestModule$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.node.test.$NodeTestModule$Provide$graalvm0$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.node.url.$NodeURLModule$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.node.url.$NodeURLModule$Provide$graalvm0$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.node.worker.$NodeWorkerModule$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.node.worker.$NodeWorkerModule$Provide$graalvm0$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.node.zlib.$NodeZlibModule$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.node.zlib.$NodeZlibModule$Provide$graalvm0$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.vfs.$EmbeddedGuestVFSImpl$EmbeddedVFSConfigurationFactory$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.vfs.$EmbeddedGuestVFSImpl$EmbeddedVFSConfigurationFactory$Spawn$graalvm0$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.vfs.$EmbeddedVFSConfigTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.vfs.$EmbeddedVFSConfigTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.vfs.$EmbeddedVFSTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.vfs.$EmbeddedVFSTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.vfs.$GuestVFSPolicy$Intercepted$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.vfs.$HostVFSConfigTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.vfs.$HostVFSConfigTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.vfs.$HostVFSImpl$HostVFSConfigurationFactory$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.vfs.$HostVFSImpl$HostVFSConfigurationFactory$Spawn$graalvm0$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.vfs.$HostVFSTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.vfs.$HostVFSTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.vfs.AbstractVFSTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"testAccessCheckReadOnly","parameterTypes":[] }, {"name":"testAccessCheckWritable","parameterTypes":[] }, {"name":"testAcquireBuilder","parameterTypes":[] }, {"name":"testCreateConfigured","parameterTypes":[] }, {"name":"testCreateEmpty","parameterTypes":[] }, {"name":"testPolicyReadOnly","parameterTypes":[] }, {"name":"testPolicyWritable","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.vfs.EmbeddedVFSConfigTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testExpectedImpl","parameterTypes":[] }, {"name":"testInjectable","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.vfs.EmbeddedVFSTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testBundleFromTarball","parameterTypes":[] }, {"name":"testBundleFromTarballDeferred","parameterTypes":[] }, {"name":"testBundleFromTarballDirs","parameterTypes":[] }, {"name":"testBundleFromTarballGzip","parameterTypes":[] }, {"name":"testBundleFromTarballGzipDirs","parameterTypes":[] }, {"name":"testWriteFileToVFS","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.vfs.HostVFSConfigTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testExpectedImpl","parameterTypes":[] }, {"name":"testInjectable","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.vfs.HostVFSTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.vfs.HybridVfsTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testReadFromEmbeddedBundles","parameterTypes":[] }, {"name":"testReadFromHost","parameterTypes":[] }, {"name":"testReadWithGenericPath","parameterTypes":[] }, {"name":"testWrite","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.js.AbstractJsTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.js.AbstractJsTest$JsDualTestExecutionProxy"
},
{
  "name":"elide.runtime.gvm.js.AbstractJsTest$JsTestContext"
},
{
  "name":"elide.runtime.gvm.js.node.$NodeEventAwareTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.js.node.$NodeEventAwareTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.js.node.AbstractJsModuleTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.js.node.NodeEventAwareTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testCapturePhaseListener","parameterTypes":[] }, {"name":"testCustomEventDetail","parameterTypes":[] }, {"name":"testDispatchAfterRemove","parameterTypes":[] }, {"name":"testDispatchAfterRemoveAll","parameterTypes":[] }, {"name":"testDispatchAfterRemoveAllByName","parameterTypes":[] }, {"name":"testDispatchAfterRemoveAllByNameIncludesCapture","parameterTypes":[] }, {"name":"testDispatchAfterRemoveAllByNameUnknown","parameterTypes":[] }, {"name":"testDispatchAfterRemoveAllIncludesCapture","parameterTypes":[] }, {"name":"testDispatchEmpty","parameterTypes":[] }, {"name":"testDispatchEmptyUnknown","parameterTypes":[] }, {"name":"testDispatchSameEvent","parameterTypes":[] }, {"name":"testEventListenerExceptionsShouldBeSuppressed","parameterTypes":[] }, {"name":"testEventNames","parameterTypes":[] }, {"name":"testEventWithBlankNameCausesError","parameterTypes":[] }, {"name":"testEventWithEmptyNameCausesError","parameterTypes":[] }, {"name":"testEventsApiAsProxyObject","parameterTypes":[] }, {"name":"testImplementEventAwareEmitter","parameterTypes":[] }, {"name":"testImplementEventAwareTarget","parameterTypes":[] }, {"name":"testListenerCount","parameterTypes":[] }, {"name":"testListenerCountRemoval","parameterTypes":[] }, {"name":"testListenerEvents","parameterTypes":[] }, {"name":"testMaxListeners","parameterTypes":[] }, {"name":"testOnceListener","parameterTypes":[] }, {"name":"testPrependListener","parameterTypes":[] }, {"name":"testSetErrorMonitor","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.js.node.NodeEventAwareTest$ExampleEventAware",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.js.node.NodeEventAwareTest$ExampleRegisteredEvents",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.js.node.NodeModuleConformanceTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"node api - require(mod) prefixed should specify expected members","parameterTypes":[] }, {"name":"node api - require(mod) should specify expected members","parameterTypes":[] }, {"name":"should be able to import builtin module","parameterTypes":[] }, {"name":"should be able to import builtin module (node prefix)","parameterTypes":[] }, {"name":"should be able to load module from guest context","parameterTypes":[] }, {"name":"should be able to require() builtin module","parameterTypes":[] }, {"name":"should be able to require() builtin module (node prefix)","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.js.node.NodeModuleConformanceTest$Companion",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.js.node.NodeModuleConformanceTest$ConformanceTestExecutionProxy"
},
{
  "name":"elide.runtime.gvm.js.polyfills.$JsAbortControllerTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.js.polyfills.$JsAbortControllerTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.js.polyfills.$JsBufferTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.js.polyfills.$JsBufferTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.js.polyfills.$JsEventTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.js.polyfills.$JsEventTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.js.polyfills.JsAbortControllerTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testAbortControllerPresent","parameterTypes":[] }, {"name":"testAbortSignalPresent","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.js.polyfills.JsBufferTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testBufferPresent","parameterTypes":[] }, {"name":"testTextDecoderPresent","parameterTypes":[] }, {"name":"testTextEncoderPresent","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.js.polyfills.JsEventTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testEventTargetPresent","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.js.vfs.$JsImportEmbeddedTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.js.vfs.$JsImportEmbeddedTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.js.vfs.$JsImportHostTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.js.vfs.$JsImportHostTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.js.vfs.$JsRequireEmbeddedTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.js.vfs.$JsRequireEmbeddedTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.js.vfs.$JsRequireHostTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.js.vfs.$JsRequireHostTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.js.vfs.JsImportEmbeddedTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testImportEmbeddedFs","parameterTypes":[] }, {"name":"testImportEmbeddedFsNested","parameterTypes":[] }, {"name":"testImportEmbeddedFsNpmModules","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.js.vfs.JsImportHostTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testImportHostFs","parameterTypes":[] }, {"name":"testImportHostFsNpmModules","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.js.vfs.JsRequireEmbeddedTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testRequireEmbeddedFs","parameterTypes":[] }, {"name":"testRequireEmbeddedFsNested","parameterTypes":[] }, {"name":"testRequireEmbeddedFsNpmModules","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.js.vfs.JsRequireHostTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testRequireHostFs","parameterTypes":[] }, {"name":"testRequireHostFsNested","parameterTypes":[] }, {"name":"testRequireHostFsNpmModules","parameterTypes":[] }]
},
{
  "name":"elide.runtime.intrinsics.js.$JsErrorTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.intrinsics.js.$JsErrorTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.intrinsics.js.$JsIteratorTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.intrinsics.js.$JsIteratorTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.intrinsics.js.JsErrorTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testErrorBridgePresence","parameterTypes":[] }, {"name":"testTypeError","parameterTypes":[] }, {"name":"testTypeErrorConstructor","parameterTypes":[] }, {"name":"testTypeErrorMethodPresence","parameterTypes":[] }, {"name":"testTypeErrorPresence","parameterTypes":[] }, {"name":"testValueError","parameterTypes":[] }, {"name":"testValueErrorConstructor","parameterTypes":[] }, {"name":"testValueErrorMethodPresence","parameterTypes":[] }, {"name":"testValueErrorPresence","parameterTypes":[] }]
},
{
  "name":"elide.runtime.intrinsics.js.JsIteratorTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testGuestIterator","parameterTypes":[] }, {"name":"testGuestIteratorManual","parameterTypes":[] }, {"name":"testIteratorReturn","parameterTypes":[] }, {"name":"testIteratorThrow","parameterTypes":[] }, {"name":"testJsIterator","parameterTypes":[] }, {"name":"testManualIterator","parameterTypes":[] }]
},
{
  "name":"elide.runtime.intrinsics.js.MultiMapLike"
},
{
  "name":"elide.runtime.intrinsics.js.MutableURLSearchParams"
},
{
  "name":"elide.runtime.intrinsics.js.URLSearchParams"
},
{
  "name":"elide.runtime.intrinsics.js.err.AbstractJsException"
},
{
  "name":"elide.runtime.intrinsics.js.err.Error"
},
{
  "name":"elide.runtime.intrinsics.js.err.Stacktrace"
},
{
  "name":"elide.runtime.intrinsics.js.err.TypeError",
  "fields":[{"name":"Factory"}]
},
{
  "name":"elide.runtime.intrinsics.js.err.TypeError$Factory"
},
{
  "name":"elide.runtime.intrinsics.js.err.ValueError",
  "fields":[{"name":"Factory"}]
},
{
  "name":"elide.runtime.intrinsics.js.err.ValueError$Factory"
},
{
  "name":"elide.runtime.intrinsics.js.node.WritableFilesystemAPI"
},
{
  "name":"elide.runtime.intrinsics.js.node.events.Event"
},
{
  "name":"elide.runtime.intrinsics.js.node.events.EventEmitter",
  "allDeclaredClasses":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.intrinsics.js.node.events.EventEmitterOrTarget",
  "allDeclaredClasses":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.intrinsics.js.node.events.EventTarget",
  "allDeclaredClasses":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.intrinsics.js.node.path.Path"
},
{
  "name":"elide.runtime.plugins.AbstractLanguagePluginTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testResolveLanguageResources","parameterTypes":[] }]
},
{
  "name":"elide.runtime.plugins.js.JsCoreModulesTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testCoreModulePresentCjs","parameterTypes":["java.lang.String"] }, {"name":"testCoreModulePresentEsm","parameterTypes":["java.lang.String"] }, {"name":"testCoreModulePresentNodePrefixCjs","parameterTypes":["java.lang.String"] }, {"name":"testCoreModulePresentNodePrefixEsm","parameterTypes":["java.lang.String"] }]
},
{
  "name":"elide.runtime.plugins.js.JsPluginTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testEmbeddedCjs","parameterTypes":[] }, {"name":"testEmbeddedEsm","parameterTypes":[] }, {"name":"testExecution","parameterTypes":[] }]
},
{
  "name":"io.micronaut.aop.internal.InterceptorRegistryBean",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.buffer.netty.$DefaultByteBufAllocatorConfiguration$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.buffer.netty.$NettyByteBufferFactory$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.context.AbstractBeanContextConditional",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"io.micronaut.context.AbstractExecutableMethodsDefinition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"io.micronaut.context.AbstractInitializableBeanDefinition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"io.micronaut.context.AbstractInitializableBeanDefinitionAndReference",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"io.micronaut.context.BeanContextConfigurable",
  "allDeclaredClasses":true,
  "queryAllPublicMethods":true
},
{
  "name":"io.micronaut.context.EnvironmentConfigurable",
  "allDeclaredClasses":true,
  "queryAllPublicMethods":true
},
{
  "name":"io.micronaut.context.annotation.DefaultScope",
  "queryAllPublicMethods":true
},
{
  "name":"io.micronaut.context.annotation.Executable",
  "queryAllPublicMethods":true
},
{
  "name":"io.micronaut.context.annotation.Factory",
  "queryAllPublicMethods":true
},
{
  "name":"io.micronaut.context.annotation.Prototype"
},
{
  "name":"io.micronaut.context.annotation.Requires",
  "queryAllPublicMethods":true
},
{
  "name":"io.micronaut.context.env.PropertiesPropertySourceLoader",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.context.env.yaml.YamlPropertySourceLoader",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.context.event.ApplicationEventPublisherFactory",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.context.propagation.instrument.execution.$ExecutorServiceInstrumenter$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.core.annotation.AnnotationMetadata",
  "allDeclaredClasses":true,
  "queryAllPublicMethods":true
},
{
  "name":"io.micronaut.core.annotation.AnnotationMetadataDelegate",
  "allDeclaredClasses":true,
  "queryAllPublicMethods":true
},
{
  "name":"io.micronaut.core.annotation.AnnotationMetadataProvider",
  "allDeclaredClasses":true,
  "queryAllPublicMethods":true
},
{
  "name":"io.micronaut.core.annotation.AnnotationSource",
  "allDeclaredClasses":true,
  "queryAllPublicMethods":true
},
{
  "name":"io.micronaut.core.async.converters.ReactiveTypeConverterRegistrar",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.core.beans.BeanInfo",
  "allDeclaredClasses":true,
  "queryAllPublicMethods":true
},
{
  "name":"io.micronaut.core.naming.Named",
  "allDeclaredClasses":true,
  "queryAllPublicMethods":true
},
{
  "name":"io.micronaut.core.order.Ordered",
  "allDeclaredClasses":true,
  "queryAllPublicMethods":true
},
{
  "name":"io.micronaut.core.type.ArgumentCoercible",
  "allDeclaredClasses":true,
  "queryAllPublicMethods":true
},
{
  "name":"io.micronaut.discovery.$DefaultCompositeDiscoveryClient$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.discovery.$DefaultServiceInstanceIdGenerator$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.discovery.cloud.digitalocean.$DigitalOceanMetadataConfiguration$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.discovery.cloud.digitalocean.$DigitalOceanMetadataResolver$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.discovery.config.$DefaultCompositeConfigurationClient$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.health.$DefaultCurrentHealthStatus$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.health.$HeartbeatConfiguration$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.health.$HeartbeatTask$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.HttpTypeConverterRegistrar",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.bind.$DefaultRequestBinderRegistry$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.bind.binders.$DefaultBodyAnnotationBinder$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.body.$CharSequenceBodyWriter$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.body.$ConversionTextPlainHandler$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.body.$DefaultMessageBodyHandlerRegistry$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.body.$RawMessageBodyHandlerRegistry$RawByteArrayHandler$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.body.$RawMessageBodyHandlerRegistry$RawByteBufferHandler$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.body.$RawMessageBodyHandlerRegistry$RawStringHandler$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.body.$TextPlainHandler$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.body.$TextStreamBodyWriter$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.body.$WritableBodyWriter$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.client.$BeanConfiguration",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.client.$DefaultHttpClientConfiguration$DefaultConnectionPoolConfiguration$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.client.$DefaultHttpClientConfiguration$DefaultWebSocketCompressionConfiguration$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.client.$DefaultHttpClientConfiguration$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.client.$DefaultLoadBalancerResolver$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.client.$ServiceHttpClientConfiguration$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.client.$ServiceHttpClientConfiguration$ServiceConnectionPoolConfiguration$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.client.$ServiceHttpClientConfiguration$ServiceSslClientConfiguration$DefaultKeyConfiguration$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.client.$ServiceHttpClientConfiguration$ServiceSslClientConfiguration$DefaultKeyStoreConfiguration$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.client.$ServiceHttpClientConfiguration$ServiceSslClientConfiguration$DefaultTrustStoreConfiguration$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.client.$ServiceHttpClientConfiguration$ServiceSslClientConfiguration$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.client.$ServiceHttpClientConfiguration$ServiceWebSocketCompressionConfiguration$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.client.$ServiceHttpClientFactory$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.client.$ServiceHttpClientFactory$HealthCheckStarter1$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.client.$ServiceHttpClientFactory$ServiceInstanceList0$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.client.bind.$DefaultHttpClientBinderRegistry$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.client.filter.$DefaultHttpClientFilterResolver$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.client.interceptor.$HttpClientIntroductionAdvice$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.client.interceptor.configuration.$DefaultClientVersioningConfiguration$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.client.interceptor.configuration.$NamedClientVersioningConfiguration$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.client.loadbalance.$DiscoveryClientLoadBalancerFactory$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.client.loadbalance.$ServiceInstanceListLoadBalancerFactory$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.client.loadbalance.LoadBalancerConverters",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.client.netty.$DefaultNettyHttpClientRegistry$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.client.netty.$DefaultNettyHttpClientRegistry$HttpClient0$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.client.netty.ssl.$NettyClientSslBuilder$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.codec.$CodecConfiguration$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.converters.$HttpConverterRegistrar$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.converters.SharedHttpConvertersRegistrar",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.expression.$RequestConditionContext$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.netty.body.$ByteBufRawMessageBodyHandler$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.netty.body.$NettyJsonHandler$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.netty.body.$NettyJsonStreamHandler$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.netty.body.$NettyTextPlainHandler$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.netty.body.$NettyWritableBodyWriter$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.netty.channel.$DefaultEventLoopGroupConfiguration$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.netty.channel.$DefaultEventLoopGroupFactory$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.netty.channel.$DefaultEventLoopGroupRegistry$DefaultEventLoopGroup1$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.netty.channel.$DefaultEventLoopGroupRegistry$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.netty.channel.$DefaultEventLoopGroupRegistry$EventLoopGroup0$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.netty.channel.$EpollEventLoopGroupFactory$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.netty.channel.$IoUringEventLoopGroupFactory$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.netty.channel.$KQueueEventLoopGroupFactory$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.netty.channel.$NettyThreadFactory$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.netty.channel.$NettyThreadFactory$NettyThreadFactory0$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.netty.channel.$NioEventLoopGroupFactory$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.netty.channel.converters.$DefaultChannelOptionFactory$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.netty.channel.converters.$EpollChannelOptionFactory$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.netty.channel.converters.$KQueueChannelOptionFactory$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.netty.configuration.$NettyGlobalConfiguration$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.netty.websocket.$NettyServerWebSocketBroadcaster$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.netty.websocket.$WebSocketMessageEncoder$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.resource.$ResourceLoaderFactory$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.resource.$ResourceLoaderFactory$FileSystemResourceLoader1$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.resource.$ResourceLoaderFactory$GetClassPathResourceLoader0$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.resource.$ResourceLoaderFactory$ResourceResolver2$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.$CoroutineHelper$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.$HttpServerConfiguration$CorsConfiguration$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.$HttpServerConfiguration$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.$HttpServerConfiguration$HostResolutionConfiguration$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.$HttpServerConfiguration$HttpLocaleResolutionConfigurationProperties$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.$HttpServerConfiguration$MultipartConfiguration$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.$OptionsFilter$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.$RouteExecutor$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.HttpServerTypeConvertersRegistrar",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.binding.$BasicAuthArgumentBinder$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.binding.$LocaleArgumentBinder$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.binding.$RequestArgumentSatisfier$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.codec.$TextStreamCodec$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.cors.$CorsFilter$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.exceptions.$BufferLengthExceededHandler$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.exceptions.$ContentLengthExceededHandler$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.exceptions.$ConversionErrorHandler$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.exceptions.$DuplicateRouteHandler$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.exceptions.$HttpStatusHandler$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.exceptions.$JacksonExceptionHandler$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.exceptions.$JsonExceptionHandler$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.exceptions.$URISyntaxHandler$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.exceptions.$UnsatisfiedArgumentHandler$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.exceptions.$UnsatisfiedRouteHandler$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.exceptions.response.$HateoasErrorResponseProcessor$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.util.$DefaultHttpClientAddressResolver$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.util.$DefaultHttpHostResolver$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.util.locale.$CompositeHttpLocaleResolver$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.util.locale.$CookieLocaleResolver$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.util.locale.$HttpFixedLocaleResolver$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.util.locale.$HttpLocalizedMessageSource$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.util.locale.$HttpLocalizedMessageSource$Definition$Intercepted$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.util.locale.$RequestLocaleResolver$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.websocket.$ServerWebSocketProcessor$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.ssl.$ClientSslConfiguration$DefaultKeyConfiguration$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.ssl.$ClientSslConfiguration$DefaultKeyStoreConfiguration$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.ssl.$ClientSslConfiguration$DefaultTrustStoreConfiguration$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.ssl.$ClientSslConfiguration$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.ssl.$DefaultSslConfiguration$DefaultKeyConfiguration$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.ssl.$DefaultSslConfiguration$DefaultKeyStoreConfiguration$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.ssl.$DefaultSslConfiguration$DefaultTrustStoreConfiguration$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.ssl.$DefaultSslConfiguration$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.ssl.$ServerSslConfiguration$DefaultKeyConfiguration$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.ssl.$ServerSslConfiguration$DefaultKeyStoreConfiguration$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.ssl.$ServerSslConfiguration$DefaultTrustStoreConfiguration$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.ssl.$ServerSslConfiguration$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.util.$OutgoingHttpRequestProcessorImpl$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.inject.BeanContextConditional",
  "allDeclaredClasses":true,
  "queryAllPublicMethods":true
},
{
  "name":"io.micronaut.inject.BeanDefinition",
  "allDeclaredClasses":true,
  "queryAllPublicMethods":true
},
{
  "name":"io.micronaut.inject.BeanDefinitionReference",
  "allDeclaredClasses":true,
  "queryAllPublicMethods":true
},
{
  "name":"io.micronaut.inject.BeanType",
  "allDeclaredClasses":true,
  "queryAllPublicMethods":true
},
{
  "name":"io.micronaut.inject.ExecutableMethodsDefinition",
  "allDeclaredClasses":true,
  "queryAllPublicMethods":true
},
{
  "name":"io.micronaut.inject.InjectableBeanDefinition",
  "allDeclaredClasses":true,
  "queryAllPublicMethods":true
},
{
  "name":"io.micronaut.inject.InstantiatableBeanDefinition",
  "allDeclaredClasses":true,
  "queryAllPublicMethods":true
},
{
  "name":"io.micronaut.inject.QualifiedBeanType",
  "allDeclaredClasses":true,
  "queryAllPublicMethods":true
},
{
  "name":"io.micronaut.inject.annotation.AnnotationConvertersRegistrar",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.inject.provider.BeanProviderDefinition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.inject.provider.JakartaProviderBeanDefinition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.inject.provider.JavaxProviderBeanDefinition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.jackson.$BeanConfiguration",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.jackson.$JacksonConfiguration$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.jackson.$ObjectMapperFactory$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.jackson.$ObjectMapperFactory$JsonFactory0$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.jackson.$ObjectMapperFactory$ObjectMapper1$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.jackson.codec.$JsonMediaTypeCodec$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.jackson.codec.$JsonStreamMediaTypeCodec$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.jackson.core.env.CloudFoundryVcapApplicationPropertySourceLoader",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.jackson.core.env.CloudFoundryVcapServicesPropertySourceLoader",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.jackson.core.env.EnvJsonPropertySourceLoader",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.jackson.core.env.JsonPropertySourceLoader",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.jackson.databind.$DatabindPropertyBinderExceptionHandler$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.jackson.databind.$JacksonDatabindMapper$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.jackson.databind.convert.$JacksonConverterRegistrar$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.jackson.modules.$BeanIntrospectionModule$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.jackson.serialize.$ConvertibleMultiValuesSerializer$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.jackson.serialize.$ConvertibleValuesSerializer$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.jackson.serialize.$JacksonObjectSerializer$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.jackson.serialize.$JsonNodeDeserializer$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.jackson.serialize.$JsonNodeSerializer$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.jackson.serialize.$OptionalValuesSerializer$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.jackson.serialize.$ResourceModule$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.jackson.serialize.$ResourceSerializerModifier$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.jackson.validation.$ValidationJacksonDeserializationPreInstantiateCallback$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.json.$JsonObjectSerializer$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.json.bind.$JsonBeanPropertyBinder$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.json.body.$JsonMessageHandler$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.json.codec.$JsonMediaTypeCodec$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.json.codec.$JsonStreamMediaTypeCodec$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.json.convert.$JsonConverterRegistrar$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.logging.$PropertiesLoggingLevelsConfigurer$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.logging.LoggingConverterRegistrar",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.logging.impl.$Log4jLoggingSystem$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.logging.impl.$LogbackLoggingSystem$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.retry.intercept.$DefaultRetryInterceptor$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.retry.intercept.$RecoveryInterceptor$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.runtime.$ApplicationConfiguration$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.runtime.$ApplicationConfiguration$InstanceConfiguration$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.runtime.beans.$MapperIntroduction$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.runtime.beans.$MapperMethodProcessor$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.runtime.context.$CompositeMessageSource$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.runtime.context.env.$ConfigurationIntroductionAdvice$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.runtime.context.scope.$ThreadLocalCustomScope$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.runtime.context.scope.refresh.$RefreshInterceptor$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.runtime.context.scope.refresh.$RefreshScope$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.runtime.converters.time.TimeConverterRegistrar",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.runtime.http.codec.$MediaTypeCodecRegistryFactory$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.runtime.http.codec.$MediaTypeCodecRegistryFactory$MediaTypeCodecRegistry0$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.runtime.http.codec.$TextPlainCodec$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.runtime.http.scope.$RequestCustomScope$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.runtime.server.watch.event.$FileWatchRestartListener$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.scheduling.$DefaultTaskExceptionHandler$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.scheduling.$ScheduledExecutorTaskScheduler$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.scheduling.async.$AsyncInterceptor$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.scheduling.executor.$DefaultExecutorSelector$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.scheduling.executor.$DefaultThreadFactory$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.scheduling.executor.$DefaultThreadFactory$ThreadFactory0$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.scheduling.executor.$ExecutorFactory$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.scheduling.executor.$ExecutorFactory$EventLoopGroupThreadFactory0$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.scheduling.executor.$ExecutorFactory$ExecutorService1$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.scheduling.executor.$IOExecutorServiceConfig$Blocking2$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.scheduling.executor.$IOExecutorServiceConfig$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.scheduling.executor.$IOExecutorServiceConfig$Io0$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.scheduling.executor.$IOExecutorServiceConfig$Virtual1$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.scheduling.executor.$ScheduledExecutorServiceConfig$Configuration0$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.scheduling.executor.$ScheduledExecutorServiceConfig$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.scheduling.executor.$UserExecutorConfiguration$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.scheduling.io.watch.$DefaultWatchThread$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.scheduling.io.watch.$FileWatchConfiguration$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.scheduling.io.watch.$WatchServiceFactory$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.scheduling.io.watch.$WatchServiceFactory$WatchService0$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.scheduling.processor.$ScheduledMethodProcessor$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.test.extensions.junit5.MicronautJunit5Extension",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.test.extensions.junit5.annotation.MicronautTest",
  "queryAllPublicMethods":true
},
{
  "name":"io.micronaut.test.support.TestPropertyProvider",
  "allPublicFields":true,
  "allDeclaredClasses":true,
  "queryAllPublicMethods":true
},
{
  "name":"io.micronaut.test.support.server.$TestEmbeddedServer$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.test.support.server.$TestExecutableEmbeddedServer$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.test.support.sql.$ConnectionFactoryHandler$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.test.support.sql.$DataSourceSqlHandler$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.test.support.sql.$DelegatingDataSourceSqlHandler$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.web.router.$AnnotatedFilterRouteBuilder$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.web.router.$AnnotatedMethodRouteBuilder$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.web.router.$DefaultRouter$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.web.router.$ServerFilterRouteBuilder$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.web.router.naming.$HyphenatedUriNamingStrategy$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.web.router.resource.$StaticResourceConfiguration$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.web.router.resource.$StaticResourceResolverFactory$Build0$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.web.router.resource.$StaticResourceResolverFactory$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.web.router.version.$ConfigurationDefaultVersionProvider$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.web.router.version.$RouteVersionFilter$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.web.router.version.$RoutesVersioningConfiguration$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.web.router.version.$VersionAwareRouterListener$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.web.router.version.resolution.$HeaderVersionResolver$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.web.router.version.resolution.$HeaderVersionResolverConfiguration$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.web.router.version.resolution.$ParameterVersionResolver$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.web.router.version.resolution.$ParameterVersionResolverConfiguration$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.websocket.interceptor.$ClientWebSocketInterceptor$Definition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.netty.channel.DefaultFileRegion"
},
{
  "name":"io.netty.channel.unix.PeerCredentials"
},
{
  "name":"io.netty.util.AbstractReferenceCounted",
  "fields":[{"name":"refCnt"}]
},
{
  "name":"jakarta.inject.Inject",
  "queryAllPublicMethods":true
},
{
  "name":"java.io.Closeable",
  "allDeclaredClasses":true,
  "queryAllPublicMethods":true
},
{
  "name":"java.io.FileDescriptor"
},
{
  "name":"java.io.FilePermission"
},
{
  "name":"java.io.ObjectInputStream"
},
{
  "name":"java.io.ObjectOutputStream"
},
{
  "name":"java.io.PrintStream"
},
{
  "name":"java.io.PrintWriter"
},
{
  "name":"java.io.Serializable",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true
},
{
  "name":"java.lang.AutoCloseable",
  "allDeclaredClasses":true,
  "queryAllPublicMethods":true
},
{
  "name":"java.lang.Boolean",
  "fields":[{"name":"TYPE"}]
},
{
  "name":"java.lang.Byte",
  "fields":[{"name":"TYPE"}]
},
{
  "name":"java.lang.Character",
  "fields":[{"name":"TYPE"}]
},
{
  "name":"java.lang.Class",
  "methods":[{"name":"getModule","parameterTypes":[] }, {"name":"getPermittedSubclasses","parameterTypes":[] }, {"name":"getRecordComponents","parameterTypes":[] }, {"name":"isRecord","parameterTypes":[] }, {"name":"isSealed","parameterTypes":[] }]
},
{
  "name":"java.lang.ClassLoader",
  "fields":[{"name":"classLoaderValueMap"}]
},
{
  "name":"java.lang.ClassValue"
},
{
  "name":"java.lang.Deprecated",
  "queryAllPublicMethods":true
},
{
  "name":"java.lang.Double",
  "fields":[{"name":"TYPE"}]
},
{
  "name":"java.lang.Enum",
  "methods":[{"name":"name","parameterTypes":[] }]
},
{
  "name":"java.lang.Exception",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true
},
{
  "name":"java.lang.Float",
  "fields":[{"name":"TYPE"}]
},
{
  "name":"java.lang.FunctionalInterface",
  "queryAllPublicMethods":true
},
{
  "name":"java.lang.Integer",
  "fields":[{"name":"TYPE"}]
},
{
  "name":"java.lang.Long",
  "fields":[{"name":"TYPE"}]
},
{
  "name":"java.lang.Module",
  "methods":[{"name":"getDescriptor","parameterTypes":[] }]
},
{
  "name":"java.lang.Object",
  "allDeclaredFields":true,
  "methods":[{"name":"equals","parameterTypes":["java.lang.Object"] }, {"name":"hashCode","parameterTypes":[] }, {"name":"toString","parameterTypes":[] }]
},
{
  "name":"java.lang.RuntimeException",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true
},
{
  "name":"java.lang.RuntimePermission"
},
{
  "name":"java.lang.Short",
  "fields":[{"name":"TYPE"}]
},
{
  "name":"java.lang.StackTraceElement",
  "queryAllPublicMethods":true
},
{
  "name":"java.lang.String",
  "fields":[{"name":"TYPE"}]
},
{
  "name":"java.lang.Thread",
  "fields":[{"name":"threadLocalRandomProbe"}]
},
{
  "name":"java.lang.Throwable",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "methods":[{"name":"addSuppressed","parameterTypes":["java.lang.Throwable"] }]
},
{
  "name":"java.lang.Throwable$PrintStreamOrWriter"
},
{
  "name":"java.lang.Void",
  "fields":[{"name":"TYPE"}]
},
{
  "name":"java.lang.instrument.Instrumentation",
  "methods":[{"name":"addTransformer","parameterTypes":["java.lang.instrument.ClassFileTransformer","boolean"] }]
},
{
  "name":"java.lang.invoke.MethodHandle",
  "methods":[{"name":"bindTo","parameterTypes":["java.lang.Object"] }, {"name":"invokeWithArguments","parameterTypes":["java.lang.Object[]"] }]
},
{
  "name":"java.lang.invoke.MethodHandles",
  "methods":[{"name":"lookup","parameterTypes":[] }, {"name":"privateLookupIn","parameterTypes":["java.lang.Class","java.lang.invoke.MethodHandles$Lookup"] }]
},
{
  "name":"java.lang.invoke.MethodHandles$Lookup",
  "methods":[{"name":"findSpecial","parameterTypes":["java.lang.Class","java.lang.String","java.lang.invoke.MethodType","java.lang.Class"] }, {"name":"in","parameterTypes":["java.lang.Class"] }, {"name":"unreflectSpecial","parameterTypes":["java.lang.reflect.Method","java.lang.Class"] }]
},
{
  "name":"java.lang.invoke.MethodType",
  "methods":[{"name":"methodType","parameterTypes":["java.lang.Class","java.lang.Class[]"] }]
},
{
  "name":"java.lang.management.BufferPoolMXBean",
  "queryAllPublicMethods":true
},
{
  "name":"java.lang.management.ClassLoadingMXBean",
  "queryAllPublicMethods":true
},
{
  "name":"java.lang.management.CompilationMXBean",
  "queryAllPublicMethods":true
},
{
  "name":"java.lang.management.LockInfo",
  "queryAllPublicMethods":true
},
{
  "name":"java.lang.management.ManagementFactory",
  "methods":[{"name":"getRuntimeMXBean","parameterTypes":[] }]
},
{
  "name":"java.lang.management.ManagementPermission",
  "methods":[{"name":"<init>","parameterTypes":["java.lang.String"] }]
},
{
  "name":"java.lang.management.MemoryMXBean",
  "queryAllPublicMethods":true
},
{
  "name":"java.lang.management.MemoryManagerMXBean",
  "queryAllPublicMethods":true
},
{
  "name":"java.lang.management.MemoryPoolMXBean",
  "queryAllPublicMethods":true
},
{
  "name":"java.lang.management.MemoryUsage",
  "queryAllPublicMethods":true
},
{
  "name":"java.lang.management.MonitorInfo",
  "queryAllPublicMethods":true
},
{
  "name":"java.lang.management.PlatformLoggingMXBean",
  "queryAllPublicMethods":true,
  "methods":[{"name":"getLoggerLevel","parameterTypes":["java.lang.String"] }, {"name":"getLoggerNames","parameterTypes":[] }, {"name":"getParentLoggerName","parameterTypes":["java.lang.String"] }, {"name":"setLoggerLevel","parameterTypes":["java.lang.String","java.lang.String"] }]
},
{
  "name":"java.lang.management.RuntimeMXBean",
  "queryAllPublicMethods":true,
  "methods":[{"name":"getInputArguments","parameterTypes":[] }]
},
{
  "name":"java.lang.management.ThreadInfo",
  "queryAllPublicMethods":true
},
{
  "name":"java.lang.module.ModuleDescriptor",
  "methods":[{"name":"name","parameterTypes":[] }]
},
{
  "name":"java.lang.reflect.Executable",
  "methods":[{"name":"getParameters","parameterTypes":[] }]
},
{
  "name":"java.lang.reflect.Method",
  "methods":[{"name":"isDefault","parameterTypes":[] }, {"name":"isVarArgs","parameterTypes":[] }]
},
{
  "name":"java.lang.reflect.Parameter",
  "methods":[{"name":"getName","parameterTypes":[] }]
},
{
  "name":"java.math.BigDecimal"
},
{
  "name":"java.math.BigInteger"
},
{
  "name":"java.net.NetPermission"
},
{
  "name":"java.net.SocketPermission"
},
{
  "name":"java.net.URLPermission",
  "methods":[{"name":"<init>","parameterTypes":["java.lang.String","java.lang.String"] }]
},
{
  "name":"java.nio.Bits",
  "methods":[{"name":"unaligned","parameterTypes":[] }]
},
{
  "name":"java.nio.Buffer",
  "fields":[{"name":"address"}]
},
{
  "name":"java.nio.ByteBuffer",
  "methods":[{"name":"alignedSlice","parameterTypes":["int"] }]
},
{
  "name":"java.nio.DirectByteBuffer",
  "methods":[{"name":"<init>","parameterTypes":["long","long"] }]
},
{
  "name":"java.nio.channels.FileChannel"
},
{
  "name":"java.security.AlgorithmParametersSpi"
},
{
  "name":"java.security.AllPermission"
},
{
  "name":"java.security.MessageDigestSpi"
},
{
  "name":"java.security.SecureRandomParameters"
},
{
  "name":"java.security.SecurityPermission"
},
{
  "name":"java.security.cert.PKIXRevocationChecker"
},
{
  "name":"java.security.interfaces.DSAPrivateKey"
},
{
  "name":"java.security.interfaces.DSAPublicKey"
},
{
  "name":"java.security.interfaces.RSAPrivateKey"
},
{
  "name":"java.security.interfaces.RSAPublicKey"
},
{
  "name":"java.security.spec.DSAParameterSpec"
},
{
  "name":"java.util.Date"
},
{
  "name":"java.util.HashSet"
},
{
  "name":"java.util.LinkedHashSet"
},
{
  "name":"java.util.Locale",
  "allDeclaredClasses":true,
  "methods":[{"name":"getDefault","parameterTypes":["java.util.Locale$Category"] }, {"name":"setDefault","parameterTypes":["java.util.Locale$Category","java.util.Locale"] }]
},
{
  "name":"java.util.Locale$Category"
},
{
  "name":"java.util.PropertyPermission",
  "methods":[{"name":"<init>","parameterTypes":["java.lang.String","java.lang.String"] }]
},
{
  "name":"java.util.concurrent.ArrayBlockingQueue"
},
{
  "name":"java.util.concurrent.ForkJoinTask",
  "fields":[{"name":"aux"}, {"name":"status"}]
},
{
  "name":"java.util.concurrent.ScheduledThreadPoolExecutor",
  "methods":[{"name":"setRemoveOnCancelPolicy","parameterTypes":["boolean"] }]
},
{
  "name":"java.util.concurrent.atomic.AtomicBoolean",
  "fields":[{"name":"value"}]
},
{
  "name":"java.util.concurrent.atomic.AtomicReference",
  "fields":[{"name":"value"}]
},
{
  "name":"java.util.concurrent.atomic.Striped64",
  "fields":[{"name":"base"}, {"name":"cellsBusy"}]
},
{
  "name":"java.util.concurrent.locks.AbstractOwnableSynchronizer"
},
{
  "name":"java.util.concurrent.locks.AbstractQueuedSynchronizer"
},
{
  "name":"java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject"
},
{
  "name":"java.util.concurrent.locks.ReentrantLock"
},
{
  "name":"java.util.concurrent.locks.ReentrantLock$NonfairSync"
},
{
  "name":"java.util.concurrent.locks.ReentrantLock$Sync"
},
{
  "name":"java.util.function.Consumer",
  "queryAllPublicMethods":true
},
{
  "name":"java.util.function.Function",
  "allDeclaredClasses":true,
  "queryAllPublicMethods":true
},
{
  "name":"java.util.function.Supplier",
  "allPublicFields":true,
  "allDeclaredClasses":true,
  "queryAllPublicMethods":true
},
{
  "name":"java.util.logging.LogManager",
  "methods":[{"name":"getLoggingMXBean","parameterTypes":[] }]
},
{
  "name":"java.util.logging.LoggingMXBean",
  "queryAllPublicMethods":true
},
{
  "name":"javax.management.MBeanOperationInfo",
  "queryAllPublicMethods":true,
  "methods":[{"name":"getSignature","parameterTypes":[] }]
},
{
  "name":"javax.management.MBeanServerBuilder",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"javax.management.ObjectName"
},
{
  "name":"javax.management.StandardEmitterMBean",
  "methods":[{"name":"cacheMBeanInfo","parameterTypes":["javax.management.MBeanInfo"] }, {"name":"getCachedMBeanInfo","parameterTypes":[] }, {"name":"getMBeanInfo","parameterTypes":[] }]
},
{
  "name":"javax.management.openmbean.CompositeData"
},
{
  "name":"javax.management.openmbean.OpenMBeanOperationInfoSupport"
},
{
  "name":"javax.management.openmbean.TabularData"
},
{
  "name":"javax.security.auth.x500.X500Principal",
  "fields":[{"name":"thisX500Name"}],
  "methods":[{"name":"<init>","parameterTypes":["sun.security.x509.X500Name"] }]
},
{
  "name":"javax.smartcardio.CardPermission"
},
{
  "name":"jdk.internal.jrtfs.JrtFileSystemProvider"
},
{
  "name":"jdk.internal.misc.Unsafe",
  "methods":[{"name":"getUnsafe","parameterTypes":[] }]
},
{
  "name":"jdk.management.jfr.ConfigurationInfo",
  "queryAllPublicMethods":true
},
{
  "name":"jdk.management.jfr.EventTypeInfo",
  "queryAllPublicMethods":true
},
{
  "name":"jdk.management.jfr.FlightRecorderMXBean",
  "queryAllPublicMethods":true
},
{
  "name":"jdk.management.jfr.FlightRecorderMXBeanImpl",
  "queryAllPublicConstructors":true,
  "methods":[{"name":"cacheMBeanInfo","parameterTypes":["javax.management.MBeanInfo"] }, {"name":"getCachedMBeanInfo","parameterTypes":[] }, {"name":"getMBeanInfo","parameterTypes":[] }, {"name":"getNotificationInfo","parameterTypes":[] }]
},
{
  "name":"jdk.management.jfr.RecordingInfo",
  "queryAllPublicMethods":true
},
{
  "name":"jdk.management.jfr.SettingDescriptorInfo",
  "queryAllPublicMethods":true
},
{
  "name":"kotlin.Any"
},
{
  "name":"kotlin.Array"
},
{
  "name":"kotlin.Boolean"
},
{
  "name":"kotlin.ByteArray"
},
{
  "name":"kotlin.Int"
},
{
  "name":"kotlin.Metadata",
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"bv","parameterTypes":[] }, {"name":"d1","parameterTypes":[] }, {"name":"d2","parameterTypes":[] }, {"name":"k","parameterTypes":[] }, {"name":"mv","parameterTypes":[] }, {"name":"pn","parameterTypes":[] }, {"name":"xi","parameterTypes":[] }, {"name":"xs","parameterTypes":[] }]
},
{
  "name":"kotlin.RuntimeException"
},
{
  "name":"kotlin.SafePublicationLazyImpl",
  "fields":[{"name":"_value"}]
},
{
  "name":"kotlin.String"
},
{
  "name":"kotlin.Throwable"
},
{
  "name":"kotlin.Unit"
},
{
  "name":"kotlin.annotation.MustBeDocumented",
  "queryAllPublicMethods":true
},
{
  "name":"kotlin.annotation.Retention",
  "queryAllPublicMethods":true
},
{
  "name":"kotlin.annotation.Target",
  "queryAllPublicMethods":true
},
{
  "name":"kotlin.collections.List"
},
{
  "name":"kotlin.collections.MutableList"
},
{
  "name":"kotlin.collections.MutableSet"
},
{
  "name":"kotlin.collections.Set"
},
{
  "name":"kotlin.coroutines.jvm.internal.BaseContinuationImpl"
},
{
  "name":"kotlin.jvm.internal.DefaultConstructorMarker"
},
{
  "name":"kotlin.reflect.jvm.internal.ReflectionFactoryImpl",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"kotlin.reflect.jvm.internal.impl.load.java.ErasedOverridabilityCondition"
},
{
  "name":"kotlin.reflect.jvm.internal.impl.load.java.FieldOverridabilityCondition"
},
{
  "name":"kotlin.reflect.jvm.internal.impl.load.java.JavaIncompatibilityRulesOverridabilityCondition"
},
{
  "name":"kotlin.reflect.jvm.internal.impl.resolve.scopes.DescriptorKindFilter",
  "allPublicFields":true
},
{
  "name":"kotlin.reflect.jvm.internal.impl.serialization.deserialization.builtins.BuiltInsLoaderImpl"
},
{
  "name":"kotlin.test.junit5.JUnit5Contributor"
},
{
  "name":"kotlinx.atomicfu.AtomicLong",
  "fields":[{"name":"value"}]
},
{
  "name":"kotlinx.coroutines.CancellableContinuationImpl",
  "fields":[{"name":"_decisionAndIndex$volatile"}, {"name":"_parentHandle$volatile"}, {"name":"_state$volatile"}]
},
{
  "name":"kotlinx.coroutines.CompletedExceptionally",
  "fields":[{"name":"_handled$volatile"}]
},
{
  "name":"kotlinx.coroutines.EventLoopImplBase",
  "fields":[{"name":"_delayed$volatile"}, {"name":"_isCompleted$volatile"}, {"name":"_queue$volatile"}]
},
{
  "name":"kotlinx.coroutines.InvokeOnCancelling",
  "fields":[{"name":"_invoked$volatile"}]
},
{
  "name":"kotlinx.coroutines.JobSupport",
  "fields":[{"name":"_parentHandle$volatile"}, {"name":"_state$volatile"}]
},
{
  "name":"kotlinx.coroutines.JobSupport$Finishing",
  "fields":[{"name":"_exceptionsHolder$volatile"}, {"name":"_isCompleting$volatile"}, {"name":"_rootCause$volatile"}]
},
{
  "name":"kotlinx.coroutines.channels.BufferedChannel",
  "fields":[{"name":"_closeCause$volatile"}, {"name":"bufferEnd$volatile"}, {"name":"bufferEndSegment$volatile"}, {"name":"closeHandler$volatile"}, {"name":"completedExpandBuffersAndPauseFlag$volatile"}, {"name":"receiveSegment$volatile"}, {"name":"receivers$volatile"}, {"name":"sendSegment$volatile"}, {"name":"sendersAndCloseStatus$volatile"}]
},
{
  "name":"kotlinx.coroutines.debug.internal.ByteBuddyDynamicAttach"
},
{
  "name":"kotlinx.coroutines.debug.internal.ConcurrentWeakMap",
  "fields":[{"name":"_size$volatile"}, {"name":"core$volatile"}]
},
{
  "name":"kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core",
  "fields":[{"name":"load$volatile"}]
},
{
  "name":"kotlinx.coroutines.debug.internal.DebugProbesImpl$DebugProbesImpl$VolatileWrapper$atomicfu$private",
  "fields":[{"name":"installations$volatile"}, {"name":"sequenceNumber$volatile"}]
},
{
  "name":"kotlinx.coroutines.internal.ConcurrentLinkedListNode",
  "fields":[{"name":"_next$volatile"}, {"name":"_prev$volatile"}]
},
{
  "name":"kotlinx.coroutines.internal.DispatchedContinuation",
  "fields":[{"name":"_reusableCancellableContinuation$volatile"}]
},
{
  "name":"kotlinx.coroutines.internal.LimitedDispatcher",
  "fields":[{"name":"runningWorkers$volatile"}]
},
{
  "name":"kotlinx.coroutines.internal.LockFreeLinkedListNode",
  "fields":[{"name":"_next$volatile"}, {"name":"_prev$volatile"}, {"name":"_removedRef$volatile"}]
},
{
  "name":"kotlinx.coroutines.internal.LockFreeTaskQueue",
  "fields":[{"name":"_cur$volatile"}]
},
{
  "name":"kotlinx.coroutines.internal.LockFreeTaskQueueCore",
  "fields":[{"name":"_next$volatile"}, {"name":"_state$volatile"}]
},
{
  "name":"kotlinx.coroutines.internal.Segment",
  "fields":[{"name":"cleanedAndPointers$volatile"}]
},
{
  "name":"kotlinx.coroutines.internal.StackTraceRecoveryKt"
},
{
  "name":"kotlinx.coroutines.internal.ThreadSafeHeap",
  "fields":[{"name":"_size$volatile"}]
},
{
  "name":"kotlinx.coroutines.scheduling.CoroutineScheduler",
  "fields":[{"name":"_isTerminated$volatile"}, {"name":"controlState$volatile"}, {"name":"parkedWorkersStack$volatile"}]
},
{
  "name":"kotlinx.coroutines.test.TestBuildersKt__TestBuildersKt$runTest$2$1$workRunner$1",
  "fields":[{"name":"label"}]
},
{
  "name":"kotlinx.coroutines.test.TestCoroutineScheduler",
  "fields":[{"name":"count$volatile"}]
},
{
  "name":"kotlinx.coroutines.test.internal.ExceptionCollectorAsService"
},
{
  "name":"kotlinx.coroutines.test.internal.TestMainDispatcher$NonConcurrentlyModifiable",
  "fields":[{"name":"_value$volatile"}, {"name":"exceptionWhenReading$volatile"}, {"name":"reader$volatile"}, {"name":"readers$volatile"}, {"name":"writer$volatile"}]
},
{
  "name":"kotlinx.coroutines.test.internal.TestMainDispatcherFactory",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"libcore.io.Memory"
},
{
  "name":"org.bouncycastle.jcajce.provider.asymmetric.COMPOSITE$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.asymmetric.CompositeSignatures$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.asymmetric.DH$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.asymmetric.DSA$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.asymmetric.DSTU4145$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.asymmetric.Dilithium$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.asymmetric.EC$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.asymmetric.ECGOST$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.asymmetric.EXTERNAL$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.asymmetric.EdEC$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.asymmetric.ElGamal$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.asymmetric.Falcon$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.asymmetric.GM$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.asymmetric.GOST$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.asymmetric.IES$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.asymmetric.LMS$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.asymmetric.NTRU$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.asymmetric.RSA$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.asymmetric.SPHINCSPlus$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.asymmetric.X509$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.digest.Blake2b$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.digest.Blake2s$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.digest.Blake3$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.digest.DSTU7564$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.digest.GOST3411$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.digest.Haraka$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.digest.Keccak$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.digest.MD2$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.digest.MD4$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.digest.MD5$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.digest.RIPEMD128$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.digest.RIPEMD160$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.digest.RIPEMD256$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.digest.RIPEMD320$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.digest.SHA1$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.digest.SHA224$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.digest.SHA256$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.digest.SHA3$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.digest.SHA384$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.digest.SHA512$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.digest.SM3$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.digest.Skein$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.digest.Tiger$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.digest.Whirlpool$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.drbg.DRBG$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.keystore.BC$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.keystore.BCFKS$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.keystore.PKCS12$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.symmetric.AES$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.symmetric.ARC4$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.symmetric.ARIA$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.symmetric.Blowfish$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.symmetric.CAST5$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.symmetric.CAST6$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.symmetric.Camellia$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.symmetric.ChaCha$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.symmetric.DES$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.symmetric.DESede$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.symmetric.DSTU7624$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.symmetric.GOST28147$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.symmetric.GOST3412_2015$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.symmetric.Grain128$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.symmetric.Grainv1$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.symmetric.HC128$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.symmetric.HC256$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.symmetric.IDEA$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.symmetric.Noekeon$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.symmetric.OpenSSLPBKDF$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.symmetric.PBEPBKDF1$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.symmetric.PBEPBKDF2$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.symmetric.PBEPKCS12$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.symmetric.Poly1305$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.symmetric.RC2$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.symmetric.RC5$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.symmetric.RC6$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.symmetric.Rijndael$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.symmetric.SCRYPT$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.symmetric.SEED$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.symmetric.SM4$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.symmetric.Salsa20$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.symmetric.Serpent$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.symmetric.Shacal2$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.symmetric.SipHash$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.symmetric.SipHash128$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.symmetric.Skipjack$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.symmetric.TEA$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.symmetric.TLSKDF$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.symmetric.Threefish$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.symmetric.Twofish$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.symmetric.VMPC$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.symmetric.VMPCKSA3$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.symmetric.XSalsa20$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.symmetric.XTEA$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.bouncycastle.jcajce.provider.symmetric.Zuc$Mappings",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.graalvm.home.impl.DefaultHomeFinder"
},
{
  "name":"org.graalvm.polyglot.io.IOHelper",
  "fields":[{"name":"ACCESS"}]
},
{
  "name":"org.graalvm.polyglot.management.Management",
  "fields":[{"name":"ACCESS"}]
},
{
  "name":"org.graalvm.polyglot.proxy.ProxyExecutable"
},
{
  "name":"org.graalvm.shadowed.com.ibm.icu.impl.TimeZoneNamesFactoryImpl",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"org.robolectric.Robolectric"
},
{
  "name":"oshi.jna.ByRef$CloseableSizeTByReference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"oshi.jna.Struct$CloseableTimeval",
  "allDeclaredFields":true
},
{
  "name":"oshi.jna.platform.mac.SystemConfiguration$SCNetworkInterfaceRef",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"sun.management.ClassLoadingImpl",
  "queryAllPublicConstructors":true
},
{
  "name":"sun.management.CompilationImpl",
  "queryAllPublicConstructors":true
},
{
  "name":"sun.management.ManagementFactoryHelper$1",
  "queryAllPublicConstructors":true
},
{
  "name":"sun.management.ManagementFactoryHelper$PlatformLoggingImpl",
  "queryAllPublicConstructors":true
},
{
  "name":"sun.management.MemoryImpl",
  "queryAllPublicConstructors":true
},
{
  "name":"sun.management.MemoryManagerImpl",
  "queryAllPublicConstructors":true
},
{
  "name":"sun.management.MemoryPoolImpl",
  "queryAllPublicConstructors":true
},
{
  "name":"sun.management.RuntimeImpl",
  "queryAllPublicConstructors":true
},
{
  "name":"sun.misc.Unsafe",
  "allDeclaredFields":true,
  "fields":[{"name":"theUnsafe"}],
  "methods":[{"name":"arrayBaseOffset","parameterTypes":["java.lang.Class"] }, {"name":"arrayIndexScale","parameterTypes":["java.lang.Class"] }, {"name":"copyMemory","parameterTypes":["long","long","long"] }, {"name":"copyMemory","parameterTypes":["java.lang.Object","long","java.lang.Object","long","long"] }, {"name":"getBoolean","parameterTypes":["java.lang.Object","long"] }, {"name":"getByte","parameterTypes":["long"] }, {"name":"getByte","parameterTypes":["java.lang.Object","long"] }, {"name":"getDouble","parameterTypes":["java.lang.Object","long"] }, {"name":"getFloat","parameterTypes":["java.lang.Object","long"] }, {"name":"getInt","parameterTypes":["long"] }, {"name":"getInt","parameterTypes":["java.lang.Object","long"] }, {"name":"getLong","parameterTypes":["long"] }, {"name":"getLong","parameterTypes":["java.lang.Object","long"] }, {"name":"getObject","parameterTypes":["java.lang.Object","long"] }, {"name":"invokeCleaner","parameterTypes":["java.nio.ByteBuffer"] }, {"name":"objectFieldOffset","parameterTypes":["java.lang.reflect.Field"] }, {"name":"putBoolean","parameterTypes":["java.lang.Object","long","boolean"] }, {"name":"putByte","parameterTypes":["long","byte"] }, {"name":"putByte","parameterTypes":["java.lang.Object","long","byte"] }, {"name":"putDouble","parameterTypes":["java.lang.Object","long","double"] }, {"name":"putFloat","parameterTypes":["java.lang.Object","long","float"] }, {"name":"putInt","parameterTypes":["long","int"] }, {"name":"putInt","parameterTypes":["java.lang.Object","long","int"] }, {"name":"putLong","parameterTypes":["long","long"] }, {"name":"putLong","parameterTypes":["java.lang.Object","long","long"] }, {"name":"putObject","parameterTypes":["java.lang.Object","long","java.lang.Object"] }, {"name":"storeFence","parameterTypes":[] }]
},
{
  "name":"sun.misc.VM"
},
{
  "name":"sun.security.provider.DSA$SHA256withDSA",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"sun.security.provider.DSAKeyFactory",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"sun.security.provider.DSAParameters",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"sun.security.provider.NativePRNG",
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"<init>","parameterTypes":["java.security.SecureRandomParameters"] }]
},
{
  "name":"sun.security.provider.NativePRNG$Blocking",
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"<init>","parameterTypes":["java.security.SecureRandomParameters"] }]
},
{
  "name":"sun.security.provider.NativePRNG$NonBlocking",
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"<init>","parameterTypes":["java.security.SecureRandomParameters"] }]
},
{
  "name":"sun.security.provider.SHA",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"sun.security.provider.SHA2$SHA256",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"sun.security.provider.X509Factory",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"sun.security.rsa.RSAKeyFactory$Legacy",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"sun.security.rsa.RSASignature$SHA256withRSA",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"sun.security.util.ObjectIdentifier"
},
{
  "name":"sun.security.x509.AuthorityInfoAccessExtension",
  "methods":[{"name":"<init>","parameterTypes":["java.lang.Boolean","java.lang.Object"] }]
},
{
  "name":"sun.security.x509.AuthorityKeyIdentifierExtension",
  "methods":[{"name":"<init>","parameterTypes":["java.lang.Boolean","java.lang.Object"] }]
},
{
  "name":"sun.security.x509.BasicConstraintsExtension",
  "methods":[{"name":"<init>","parameterTypes":["java.lang.Boolean","java.lang.Object"] }]
},
{
  "name":"sun.security.x509.CRLDistributionPointsExtension",
  "methods":[{"name":"<init>","parameterTypes":["java.lang.Boolean","java.lang.Object"] }]
},
{
  "name":"sun.security.x509.CertificateExtensions"
},
{
  "name":"sun.security.x509.CertificatePoliciesExtension",
  "methods":[{"name":"<init>","parameterTypes":["java.lang.Boolean","java.lang.Object"] }]
},
{
  "name":"sun.security.x509.ExtendedKeyUsageExtension",
  "methods":[{"name":"<init>","parameterTypes":["java.lang.Boolean","java.lang.Object"] }]
},
{
  "name":"sun.security.x509.KeyUsageExtension",
  "methods":[{"name":"<init>","parameterTypes":["java.lang.Boolean","java.lang.Object"] }]
},
{
  "name":"sun.security.x509.SubjectKeyIdentifierExtension",
  "methods":[{"name":"<init>","parameterTypes":["java.lang.Boolean","java.lang.Object"] }]
},
{
  "name":"tools.elide.data.Encoding",
  "methods":[{"name":"getValueDescriptor","parameterTypes":[] }, {"name":"valueOf","parameterTypes":["com.google.protobuf.Descriptors$EnumValueDescriptor"] }]
},
{
  "name":"tools.elide.vfs.File",
  "methods":[{"name":"getCompressed","parameterTypes":[] }, {"name":"getDefaultInstance","parameterTypes":[] }, {"name":"getEncoding","parameterTypes":[] }, {"name":"getEncodingValue","parameterTypes":[] }, {"name":"getFileTypeCase","parameterTypes":[] }, {"name":"getFingerprint","parameterTypes":[] }, {"name":"getKnown","parameterTypes":[] }, {"name":"getKnownValue","parameterTypes":[] }, {"name":"getMime","parameterTypes":[] }, {"name":"getMimeBytes","parameterTypes":[] }, {"name":"getModified","parameterTypes":[] }, {"name":"getName","parameterTypes":[] }, {"name":"getNameBytes","parameterTypes":[] }, {"name":"getOffset","parameterTypes":[] }, {"name":"getSize","parameterTypes":[] }, {"name":"getTail","parameterTypes":[] }, {"name":"hasFingerprint","parameterTypes":[] }, {"name":"hasModified","parameterTypes":[] }]
},
{
  "name":"tools.elide.vfs.File$Builder",
  "methods":[{"name":"clearCompressed","parameterTypes":[] }, {"name":"clearEncoding","parameterTypes":[] }, {"name":"clearFileType","parameterTypes":[] }, {"name":"clearFingerprint","parameterTypes":[] }, {"name":"clearKnown","parameterTypes":[] }, {"name":"clearMime","parameterTypes":[] }, {"name":"clearModified","parameterTypes":[] }, {"name":"clearName","parameterTypes":[] }, {"name":"clearOffset","parameterTypes":[] }, {"name":"clearSize","parameterTypes":[] }, {"name":"clearTail","parameterTypes":[] }, {"name":"getCompressed","parameterTypes":[] }, {"name":"getEncoding","parameterTypes":[] }, {"name":"getEncodingValue","parameterTypes":[] }, {"name":"getFileTypeCase","parameterTypes":[] }, {"name":"getFingerprint","parameterTypes":[] }, {"name":"getFingerprintBuilder","parameterTypes":[] }, {"name":"getKnown","parameterTypes":[] }, {"name":"getKnownValue","parameterTypes":[] }, {"name":"getMime","parameterTypes":[] }, {"name":"getModified","parameterTypes":[] }, {"name":"getModifiedBuilder","parameterTypes":[] }, {"name":"getName","parameterTypes":[] }, {"name":"getOffset","parameterTypes":[] }, {"name":"getSize","parameterTypes":[] }, {"name":"getTail","parameterTypes":[] }, {"name":"hasFingerprint","parameterTypes":[] }, {"name":"hasModified","parameterTypes":[] }, {"name":"setCompressed","parameterTypes":["long"] }, {"name":"setEncoding","parameterTypes":["tools.elide.data.Encoding"] }, {"name":"setEncodingValue","parameterTypes":["int"] }, {"name":"setFingerprint","parameterTypes":["tools.elide.vfs.File$FileFingerprint"] }, {"name":"setKnown","parameterTypes":["tools.elide.vfs.KnownMimeType"] }, {"name":"setKnownValue","parameterTypes":["int"] }, {"name":"setMime","parameterTypes":["java.lang.String"] }, {"name":"setMimeBytes","parameterTypes":["com.google.protobuf.ByteString"] }, {"name":"setModified","parameterTypes":["com.google.protobuf.Timestamp"] }, {"name":"setName","parameterTypes":["java.lang.String"] }, {"name":"setNameBytes","parameterTypes":["com.google.protobuf.ByteString"] }, {"name":"setOffset","parameterTypes":["long"] }, {"name":"setSize","parameterTypes":["long"] }, {"name":"setTail","parameterTypes":["long"] }]
},
{
  "name":"tools.elide.vfs.File$FileFingerprint",
  "methods":[{"name":"newBuilder","parameterTypes":[] }]
},
{
  "name":"tools.elide.vfs.KnownMimeType",
  "methods":[{"name":"getValueDescriptor","parameterTypes":[] }, {"name":"valueOf","parameterTypes":["com.google.protobuf.Descriptors$EnumValueDescriptor"] }]
}
]
