[
{
  "name":"[Lcom.fasterxml.jackson.databind.deser.BeanDeserializerModifier;"
},
{
  "name":"[Lcom.fasterxml.jackson.databind.deser.Deserializers;"
},
{
  "name":"[Lcom.fasterxml.jackson.databind.ser.BeanSerializerModifier;"
},
{
  "name":"[Lcom.fasterxml.jackson.databind.ser.Serializers;"
},
{
  "name":"[Lio.micronaut.http.HttpMethod;"
},
{
  "name":"[Ljava.lang.Object;"
},
{
  "name":"android.os.Build"
},
{
  "name":"ch.qos.logback.classic.encoder.PatternLayoutEncoder",
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"ch.qos.logback.core.helpers.NOPAppender",
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"ch.qos.logback.classic.pattern.DateConverter",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"ch.qos.logback.classic.pattern.LevelConverter",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"ch.qos.logback.classic.pattern.LineSeparatorConverter",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"ch.qos.logback.classic.pattern.LoggerConverter",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"ch.qos.logback.classic.pattern.MessageConverter",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"ch.qos.logback.classic.pattern.ThreadConverter",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"ch.qos.logback.classic.pattern.color.HighlightingCompositeConverter",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"ch.qos.logback.core.ConsoleAppender",
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"ch.qos.logback.core.OutputStreamAppender",
  "methods":[{"name":"setEncoder","parameterTypes":["ch.qos.logback.core.encoder.Encoder"] }]
},
{
  "name":"ch.qos.logback.core.encoder.Encoder",
  "methods":[{"name":"valueOf","parameterTypes":["java.lang.String"] }]
},
{
  "name":"ch.qos.logback.core.encoder.LayoutWrappingEncoder",
  "methods":[{"name":"setParent","parameterTypes":["ch.qos.logback.core.spi.ContextAware"] }]
},
{
  "name":"ch.qos.logback.core.pattern.PatternLayoutEncoderBase",
  "methods":[{"name":"setPattern","parameterTypes":["java.lang.String"] }]
},
{
  "name":"ch.qos.logback.core.pattern.color.CyanCompositeConverter",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"ch.qos.logback.core.pattern.color.MagentaCompositeConverter",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"ch.qos.logback.core.pattern.color.WhiteCompositeConverter",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"ch.qos.logback.core.spi.ContextAware",
  "methods":[{"name":"valueOf","parameterTypes":["java.lang.String"] }]
},
{
  "name":"com.fasterxml.jackson.databind.ext.Java7SupportImpl",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"com.google.common.jimfs.SystemJimfsFileSystemProvider",
  "methods":[{"name":"removeFileSystemRunnable","parameterTypes":["java.net.URI"] }]
},
{
  "name":"com.google.protobuf.ExtensionRegistry",
  "methods":[{"name":"getEmptyRegistry","parameterTypes":[] }]
},
{
  "name":"com.intellij.rt.coverage.instrumentation.Instrumentator",
  "methods":[{"name":"premain","parameterTypes":["java.lang.String","java.lang.instrument.Instrumentation"] }]
},
{
  "name":"com.intellij.rt.coverage.main.CoveragePremain",
  "methods":[{"name":"premain","parameterTypes":["java.lang.String","java.lang.instrument.Instrumentation"] }]
},
{
  "name":"com.lmax.disruptor.AbstractSequencer",
  "fields":[{"name":"gatingSequences"}]
},
{
  "name":"com.lmax.disruptor.Value",
  "fields":[{"name":"value"}]
},
{
  "name":"com.sun.org.apache.xerces.internal.jaxp.SAXParserFactoryImpl",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.$VMFacadeFactory$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.PolyglotScriptTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"basicPolyglotInlineTest","parameterTypes":[] }, {"name":"basicPolyglotSourceCallableArgTest","parameterTypes":[] }, {"name":"basicPolyglotSourceCallableTest","parameterTypes":[] }, {"name":"basicPolyglotSourceTest","parameterTypes":[] }, {"name":"testEvaluateEmbeddedScriptHarness","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.cfg.$GuestIOConfiguration$Intercepted$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.cfg.$GuestVMConfiguration$Intercepted$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.cfg.$GuestVMEEConfig$Intercepted$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.cfg.$GuestVMEESandboxConfig$Intercepted$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.cfg.$GuestVMInspectConfig$Intercepted$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.cfg.$JsRuntimeConfig$Intercepted$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.cfg.$JsRuntimeConfig$JsEsmConfig$Intercepted$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.cfg.$JsRuntimeConfig$JsNpmConfig$Intercepted$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.$GuestExecutorManager$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.$IntrinsicsManager$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.$IntrinsicsManagerTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.$IntrinsicsManagerTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.$IntrinsicsManagerTest$Definition$Reference",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.$NativeContextManagerTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.$NativeContextManagerTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.$NativeContextManagerTest$Definition$Reference",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.AbstractDualTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.AbstractDualTest$Companion",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.AbstractDualTest$GuestTestExecution"
},
{
  "name":"elide.runtime.gvm.internals.AbstractIntrinsicTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"testInstall","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.IntrinsicsManagerTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testInjectable","parameterTypes":[] }, {"name":"testResolveIntrinsics","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.NativeContextManagerTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testInjectable","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.context.$NativeContextManagerImpl$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.$BuiltinIntrinsicsResolver$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.$ServiceIntrinsicsResolver$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.base64.$Base64Intrinsic$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.base64.$JsBase64IntrinsicTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.base64.$JsBase64IntrinsicTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.base64.$JsBase64IntrinsicTest$Definition$Reference",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.base64.JsBase64IntrinsicTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testCodec","parameterTypes":["java.lang.String","java.lang.String","java.lang.String"] }, {"name":"testDecode","parameterTypes":[] }, {"name":"testEncode","parameterTypes":[] }, {"name":"testEncodeDecode","parameterTypes":[] }, {"name":"testGuestDecode","parameterTypes":[] }, {"name":"testGuestDecodeStd","parameterTypes":[] }, {"name":"testGuestEncode","parameterTypes":[] }, {"name":"testGuestEncodeStd","parameterTypes":[] }, {"name":"testInjectable","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.console.$ConsoleIntrinsic$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.console.$JsConsoleIntrinsicTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.console.$JsConsoleIntrinsicTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.console.$JsConsoleIntrinsicTest$Definition$Reference",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.console.JsConsoleIntrinsicTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"mockLogger","parameterTypes":[] }, {"name":"testConsole","parameterTypes":["elide.runtime.LogLevel","java.lang.String"] }, {"name":"testConsoleError","parameterTypes":[] }, {"name":"testConsoleFormatGuestTypes","parameterTypes":[] }, {"name":"testConsoleFormatTemporal","parameterTypes":[] }, {"name":"testConsoleFormatValue","parameterTypes":[] }, {"name":"testConsoleInfo","parameterTypes":[] }, {"name":"testConsoleLog","parameterTypes":[] }, {"name":"testConsoleWarn","parameterTypes":[] }, {"name":"testInjectable","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.console.JsConsoleIntrinsicTest$testConsole$1$WhenMappings"
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.console.JsConsoleIntrinsicTest$testConsole$2$WhenMappings"
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.crypto.$WebCryptoIntrinsic$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.crypto.$WebCryptoIntrinsicTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.crypto.$WebCryptoIntrinsicTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.crypto.$WebCryptoIntrinsicTest$Definition$Reference",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.crypto.$WebCryptoKey$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.crypto.WebCryptoIntrinsicTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testRandomUUID","parameterTypes":[] }, {"name":"testRandomValuesAsGuestValue","parameterTypes":[] }, {"name":"testRandomValuesAsGuestValueInvalid","parameterTypes":[] }, {"name":"testRandomValuesGuestInt16Array","parameterTypes":[] }, {"name":"testRandomValuesGuestInt8Array","parameterTypes":[] }, {"name":"testRandomValuesGuestUInt32Array","parameterTypes":[] }, {"name":"testRandomValuesGuestUInt8Array","parameterTypes":[] }, {"name":"testRandomValuesHost","parameterTypes":[] }, {"name":"testRandomValuesNonArray","parameterTypes":[] }, {"name":"testRandomValuesNonNumericArray","parameterTypes":[] }, {"name":"testRandomValuesNullArray","parameterTypes":[] }, {"name":"testRandomValuesTooBigGuest","parameterTypes":[] }, {"name":"testRandomValuesTooBigHost","parameterTypes":[] }, {"name":"testSubtleCryptoAvailable","parameterTypes":[] }, {"name":"testUUIDParseError","parameterTypes":[] }, {"name":"testUUIDValueCopy","parameterTypes":[] }, {"name":"testUUIDValueFromJava","parameterTypes":[] }, {"name":"testUUIDValueFromString","parameterTypes":[] }, {"name":"testUUIDValueGetChar","parameterTypes":[] }, {"name":"testUUIDValueLength","parameterTypes":[] }, {"name":"testUUIDValueRandom","parameterTypes":[] }, {"name":"testUUIDValueRandomUnique","parameterTypes":[] }, {"name":"testUUIDValueSubstring","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.express.$ExpressIntrinsic$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.express.$ExpressIntrinsicTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.express.$ExpressIntrinsicTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.express.$ExpressIntrinsicTest$Definition$Reference",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.express.ExpressAppIntrinsic"
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.express.ExpressIntrinsicTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testGuestCreateApp","parameterTypes":[] }, {"name":"testGuestRouteGet","parameterTypes":[] }, {"name":"testInjectableGuest","parameterTypes":[] }, {"name":"testRouteMapping","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.fetch.$FetchIntrinsic$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.fetch.$FetchIntrinsicTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.fetch.$FetchIntrinsicTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.fetch.$FetchIntrinsicTest$Definition$Reference",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.fetch.FetchIntrinsicTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testInjectable","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.stream.$CoreStreamsIntrinsic$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.struct.map.$JsConcurrentMapTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.struct.map.$JsConcurrentMapTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.struct.map.$JsConcurrentMapTest$Definition$Reference",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.struct.map.$JsConcurrentSortedMapTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.struct.map.$JsConcurrentSortedMapTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.struct.map.$JsConcurrentSortedMapTest$Definition$Reference",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.struct.map.$JsMapTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.struct.map.$JsMapTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.struct.map.$JsMapTest$Definition$Reference",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.struct.map.$JsMultiMapTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.struct.map.$JsMultiMapTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.struct.map.$JsMultiMapTest$Definition$Reference",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.struct.map.$JsMutableMapTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.struct.map.$JsMutableMapTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.struct.map.$JsMutableMapTest$Definition$Reference",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.struct.map.$JsMutableMultiMapTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.struct.map.$JsMutableMultiMapTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.struct.map.$JsMutableMultiMapTest$Definition$Reference",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.struct.map.$JsSortedMapTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.struct.map.$JsSortedMapTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.struct.map.$JsSortedMapTest$Definition$Reference",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.struct.map.AbstractJsMapTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"mapTests","parameterTypes":[] }, {"name":"testCreateEmpty","parameterTypes":[] }, {"name":"testCreateFromIterableEntries","parameterTypes":[] }, {"name":"testCreateFromIterableJsEntries","parameterTypes":[] }, {"name":"testCreateFromIterablePairs","parameterTypes":[] }, {"name":"testCreateFromJSMapEntries","parameterTypes":[] }, {"name":"testCreateFromMap","parameterTypes":[] }, {"name":"testCreateFromMapEntries","parameterTypes":[] }, {"name":"testCreateFromPairs","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.struct.map.JsConcurrentMapTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testBasicConstructor","parameterTypes":[] }, {"name":"testPresizedConstructor","parameterTypes":[] }, {"name":"testSpawnFromMap","parameterTypes":[] }, {"name":"testToString","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.struct.map.JsConcurrentSortedMapTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testBasicConstructor","parameterTypes":[] }, {"name":"testSpawn","parameterTypes":[] }, {"name":"testToString","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.struct.map.JsMapTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testBasicConstructor","parameterTypes":[] }, {"name":"testMapEntry","parameterTypes":[] }, {"name":"testPresizedConstructor","parameterTypes":[] }, {"name":"testSpawnMapDirect","parameterTypes":[] }, {"name":"testToString","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.struct.map.JsMultiMapTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testBasicConstructor","parameterTypes":[] }, {"name":"testPresizedConstructor","parameterTypes":[] }, {"name":"testSpawnMap","parameterTypes":[] }, {"name":"testToString","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.struct.map.JsMutableMapTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testBasicConstructor","parameterTypes":[] }, {"name":"testPresizedConstructor","parameterTypes":[] }, {"name":"testSpawnMapDirect","parameterTypes":[] }, {"name":"testToString","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.struct.map.JsMutableMultiMapTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testBasicConstructor","parameterTypes":[] }, {"name":"testPresizedConstructor","parameterTypes":[] }, {"name":"testSpawnMap","parameterTypes":[] }, {"name":"testToString","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.struct.map.JsSortedMapTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testBasicConstructor","parameterTypes":[] }, {"name":"testComparator","parameterTypes":[] }, {"name":"testSpawn","parameterTypes":[] }, {"name":"testToString","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.typed.$UUIDValueTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.typed.$UUIDValueTest$Definition$Reference",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.typed.UUIDValueTest",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.url.$URLComplianceTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.url.$URLComplianceTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.url.$URLComplianceTest$Definition$Reference",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.url.$URLIntrinsic$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.url.$URLIntrinsicTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.url.$URLIntrinsicTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.url.$URLIntrinsicTest$Definition$Reference",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.url.$URLSearchParamsIntrinsic$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.url.URLComplianceTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.url.URLComplianceTest$Companion",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.url.URLComplianceTest$URLParseTestCase",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.url.URLComplianceTest$URLParseTestCase$Companion",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.url.URLIntrinsicTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testConstructFromString","parameterTypes":[] }, {"name":"testConstructFromURL","parameterTypes":[] }, {"name":"testConstructGuest","parameterTypes":[] }, {"name":"testConstructInvalid","parameterTypes":[] }, {"name":"testConstructProtocolRelative","parameterTypes":[] }, {"name":"testInjectable","parameterTypes":[] }, {"name":"testURLEquals","parameterTypes":["java.lang.String","java.lang.String","java.lang.String","boolean","java.lang.String"] }, {"name":"testURLFromJavaURL","parameterTypes":[] }, {"name":"testURLHash","parameterTypes":["java.lang.String","java.lang.String"] }, {"name":"testURLHashInvalid","parameterTypes":[] }, {"name":"testURLHashMutability","parameterTypes":[] }, {"name":"testURLHashMutabilitySideEffects","parameterTypes":[] }, {"name":"testURLHashcode","parameterTypes":[] }, {"name":"testURLHost","parameterTypes":["java.lang.String","java.lang.String"] }, {"name":"testURLHostMutability","parameterTypes":[] }, {"name":"testURLHostname","parameterTypes":["java.lang.String","java.lang.String"] }, {"name":"testURLHostnameMutability","parameterTypes":[] }, {"name":"testURLHref","parameterTypes":["java.lang.String","java.lang.String"] }, {"name":"testURLHrefMutability","parameterTypes":[] }, {"name":"testURLImmutability","parameterTypes":[] }, {"name":"testURLOriginNotSupported","parameterTypes":[] }, {"name":"testURLPathname","parameterTypes":["java.lang.String","java.lang.String"] }, {"name":"testURLPathnameInvalid","parameterTypes":[] }, {"name":"testURLPathnameMutability","parameterTypes":[] }, {"name":"testURLPort","parameterTypes":["java.lang.String","java.lang.String"] }, {"name":"testURLPortMutability","parameterTypes":[] }, {"name":"testURLProtocol","parameterTypes":["java.lang.String","java.lang.String"] }, {"name":"testURLProtocolMutability","parameterTypes":[] }, {"name":"testURLQuery","parameterTypes":["java.lang.String","java.lang.String"] }, {"name":"testURLQueryInvalid","parameterTypes":[] }, {"name":"testURLQueryMutability","parameterTypes":[] }, {"name":"testURLSort","parameterTypes":[] }, {"name":"testURLSortedHashmap","parameterTypes":[] }, {"name":"testURLSortedSet","parameterTypes":[] }, {"name":"testURLStrings","parameterTypes":["java.lang.String","java.lang.String"] }, {"name":"testURLToJSON","parameterTypes":[] }, {"name":"testURLUserPassword","parameterTypes":["java.lang.String","java.lang.String"] }, {"name":"testURLUsername","parameterTypes":["java.lang.String","java.lang.String"] }, {"name":"testURLUsernameInvalid","parameterTypes":[] }, {"name":"testURLUsernamePasswordMutability","parameterTypes":[] }, {"name":"testURLUsernamePasswordSplice","parameterTypes":[] }, {"name":"testURLValueFailUndeterminedUpdate","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.intrinsics.js.webstreams.$ReadableStreamIntrinsic$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.$JsInvocationBindingsTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.js.$JsInvocationBindingsTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.js.$JsInvocationBindingsTest$Definition$Reference",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.$JsRuntime$Companion$JsRuntimeVFSConfigurator$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.$JsRuntime$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.$JsRuntimeTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.js.$JsRuntimeTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.js.$JsRuntimeTest$Definition$Reference",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.AbstractJsIntrinsicTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.js.AbstractJsIntrinsicTest$CaptureAssertion",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"apply","parameterTypes":["java.lang.Object"] }]
},
{
  "name":"elide.runtime.gvm.internals.js.AbstractJsIntrinsicTest$Companion",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.js.AbstractJsIntrinsicTest$DualTestExecutionProxy"
},
{
  "name":"elide.runtime.gvm.internals.js.AbstractJsIntrinsicTest$JsAssertion",
  "allDeclaredClasses":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.js.AbstractJsIntrinsicTest$TestAssertion",
  "allDeclaredClasses":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.js.AbstractJsIntrinsicTest$TestContext",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[
    {"name": "isNotNull","parameterTypes":[]},
    {"name": "isNotNull","parameterTypes":["java.lang.String"]},
    {"name":"shouldBeTrue","parameterTypes":["java.lang.String"]},
    {"name":"shouldBeTrue","parameterTypes":[]},
    {"name":"shouldBeFalse","parameterTypes":["java.lang.String"]},
    {"name":"shouldBeFalse","parameterTypes":[]},
    {"name":"isNotNull","parameterTypes":["java.lang.String"]},
    {"name":"isNotNull","parameterTypes":[]},
    {"name":"isNull","parameterTypes":["java.lang.String"]},
    {"name":"isNull","parameterTypes":[]},
    {"name":"isEqualTo","parameterTypes":["java.lang.Object"]},
    {"name":"isEqualTo","parameterTypes":["java.lang.Object", "java.lang.String"]},
    {"name":"isNotEqualTo","parameterTypes":["java.lang.Object"]},
    {"name":"isNotEqualTo","parameterTypes":["java.lang.Object", "java.lang.String"]},
    {"name":"fails","parameterTypes":[]},
    {"name":"fails","parameterTypes":["java.lang.String"]},
    {"name":"message","parameterTypes":["java.lang.String"]}
  ]
},
{
  "name":"elide.runtime.gvm.internals.js.AbstractJsIntrinsicTest$TestResultContext",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[
    {"name": "isNotNull","parameterTypes":[]},
    {"name": "isNotNull","parameterTypes":["java.lang.String"]},
    {"name":"shouldBeTrue","parameterTypes":["java.lang.String"]},
    {"name":"shouldBeTrue","parameterTypes":[]},
    {"name":"shouldBeFalse","parameterTypes":["java.lang.String"]},
    {"name":"shouldBeFalse","parameterTypes":[]},
    {"name":"isNotNull","parameterTypes":["java.lang.String"]},
    {"name":"isNotNull","parameterTypes":[]},
    {"name":"isNull","parameterTypes":["java.lang.String"]},
    {"name":"isNull","parameterTypes":[]},
    {"name":"isEqualTo","parameterTypes":["java.lang.Object"]},
    {"name":"isEqualTo","parameterTypes":["java.lang.Object", "java.lang.String"]},
    {"name":"isNotEqualTo","parameterTypes":["java.lang.Object"]},
    {"name":"isNotEqualTo","parameterTypes":["java.lang.Object", "java.lang.String"]},
    {"name":"fails","parameterTypes":[]},
    {"name":"fails","parameterTypes":["java.lang.String"]},
    {"name":"message","parameterTypes":["java.lang.String"]}
  ]
},
{
  "name":"elide.runtime.gvm.internals.js.JsInvocationBindingsTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testBindingFailsIfExotic","parameterTypes":[] }, {"name":"testBindingFailsIfExoticDefault","parameterTypes":[] }, {"name":"testBindingFailsIfExoticNonFunction","parameterTypes":[] }, {"name":"testBindingServerFailsIfNotAsync","parameterTypes":[] }, {"name":"testBindingServerFailsIfNotDefault","parameterTypes":[] }, {"name":"testBindingsRenderKotlinJSStyle","parameterTypes":[] }, {"name":"testBindingsResolveAsyncFunction","parameterTypes":[] }, {"name":"testBindingsResolveCompound","parameterTypes":[] }, {"name":"testBindingsResolveFunction","parameterTypes":[] }, {"name":"testBindingsResolveRender","parameterTypes":[] }, {"name":"testBindingsResolveServer","parameterTypes":[] }, {"name":"testEvaluateExportDefault","parameterTypes":[] }, {"name":"testEvaluateExportFetch","parameterTypes":[] }, {"name":"testEvaluateExportFn","parameterTypes":[] }, {"name":"testEvaluateExportNamedFn","parameterTypes":[] }, {"name":"testEvaluateExports","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.js.JsRuntimeTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testInjectable","parameterTypes":[] }, {"name":"testSingleton","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.vfs.$EmbeddedGuestVFSImpl$EmbeddedVFSConfigurationFactory$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.vfs.$EmbeddedGuestVFSImpl$EmbeddedVFSConfigurationFactory$Spawn$graalvm0$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.vfs.$EmbeddedVFSConfigTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.vfs.$EmbeddedVFSConfigTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.vfs.$EmbeddedVFSConfigTest$Definition$Reference",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.vfs.$EmbeddedVFSTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.vfs.$EmbeddedVFSTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.vfs.$EmbeddedVFSTest$Definition$Reference",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.vfs.$GuestVFSPolicy$Intercepted$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.vfs.$HostVFSConfigTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.vfs.$HostVFSConfigTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.vfs.$HostVFSConfigTest$Definition$Reference",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.vfs.$HostVFSImpl$HostVFSConfigurationFactory$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.vfs.$HostVFSImpl$HostVFSConfigurationFactory$Spawn$graalvm0$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.vfs.$HostVFSTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.vfs.$HostVFSTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.internals.vfs.$HostVFSTest$Definition$Reference",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.vfs.AbstractVFSTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"testAccessCheckReadOnly","parameterTypes":[] }, {"name":"testAccessCheckWritable","parameterTypes":[] }, {"name":"testAcquireBuilder","parameterTypes":[] }, {"name":"testCreateConfigured","parameterTypes":[] }, {"name":"testCreateEmpty","parameterTypes":[] }, {"name":"testPolicyReadOnly","parameterTypes":[] }, {"name":"testPolicyWritable","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.vfs.EmbeddedVFSConfigTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testExpectedImpl","parameterTypes":[] }, {"name":"testInjectable","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.vfs.EmbeddedVFSTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testBundleFromTarball","parameterTypes":[] }, {"name":"testBundleFromTarballDirs","parameterTypes":[] }, {"name":"testBundleFromTarballGzip","parameterTypes":[] }, {"name":"testBundleFromTarballGzipDirs","parameterTypes":[] }, {"name":"testWriteFileToVFS","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.vfs.HostVFSConfigTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testExpectedImpl","parameterTypes":[] }, {"name":"testInjectable","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.internals.vfs.HostVFSTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.js.AbstractJsTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.js.AbstractJsTest$DualTestExecutionProxy"
},
{
  "name":"elide.runtime.gvm.js.polyfills.$JsAbortControllerTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.js.polyfills.$JsAbortControllerTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.js.polyfills.$JsAbortControllerTest$Definition$Reference",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.js.polyfills.$JsBufferTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.js.polyfills.$JsBufferTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.js.polyfills.$JsBufferTest$Definition$Reference",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.js.polyfills.$JsEventTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.js.polyfills.$JsEventTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.js.polyfills.$JsEventTest$Definition$Reference",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.js.polyfills.JsAbortControllerTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testAbortControllerPresent","parameterTypes":[] }, {"name":"testAbortSignalPresent","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.js.polyfills.JsBufferTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testBufferPresent","parameterTypes":[] }, {"name":"testTextDecoderPresent","parameterTypes":[] }, {"name":"testTextEncoderPresent","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.js.polyfills.JsEventTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testEventTargetPresent","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.js.vfs.$JsImportEmbeddedTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.js.vfs.$JsImportEmbeddedTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.js.vfs.$JsImportEmbeddedTest$Definition$Reference",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.js.vfs.$JsImportHostTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.js.vfs.$JsImportHostTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.js.vfs.$JsImportHostTest$Definition$Reference",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.js.vfs.$JsRequireEmbeddedTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.js.vfs.$JsRequireEmbeddedTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.js.vfs.$JsRequireEmbeddedTest$Definition$Reference",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.js.vfs.$JsRequireHostTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.js.vfs.$JsRequireHostTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.gvm.js.vfs.$JsRequireHostTest$Definition$Reference",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.js.vfs.JsImportEmbeddedTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testImportEmbeddedFs","parameterTypes":[] }, {"name":"testImportEmbeddedFsNested","parameterTypes":[] }, {"name":"testImportEmbeddedFsNpmModules","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.js.vfs.JsImportHostTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testImportHostFs","parameterTypes":[] }, {"name":"testImportHostFsNested","parameterTypes":[] }, {"name":"testImportHostFsNpmModules","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.js.vfs.JsRequireEmbeddedTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testRequireEmbeddedFs","parameterTypes":[] }, {"name":"testRequireEmbeddedFsNested","parameterTypes":[] }, {"name":"testRequireEmbeddedFsNpmModules","parameterTypes":[] }]
},
{
  "name":"elide.runtime.gvm.js.vfs.JsRequireHostTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testRequireHostFs","parameterTypes":[] }, {"name":"testRequireHostFsNested","parameterTypes":[] }, {"name":"testRequireHostFsNpmModules","parameterTypes":[] }]
},
{
  "name":"elide.runtime.intrinsics.js.$JsErrorTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.intrinsics.js.$JsErrorTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.intrinsics.js.$JsErrorTest$Definition$Reference",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.intrinsics.js.$JsIteratorTest$Definition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.intrinsics.js.$JsIteratorTest$Definition$Exec",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"elide.runtime.intrinsics.js.$JsIteratorTest$Definition$Reference",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.runtime.intrinsics.js.JsErrorTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testErrorBridgePresence","parameterTypes":[] }, {"name":"testTypeError","parameterTypes":[] }, {"name":"testTypeErrorConstructor","parameterTypes":[] }, {"name":"testTypeErrorMethodPresence","parameterTypes":[] }, {"name":"testTypeErrorPresence","parameterTypes":[] }, {"name":"testValueError","parameterTypes":[] }, {"name":"testValueErrorConstructor","parameterTypes":[] }, {"name":"testValueErrorMethodPresence","parameterTypes":[] }, {"name":"testValueErrorPresence","parameterTypes":[] }]
},
{
  "name":"elide.runtime.intrinsics.js.JsIteratorTest",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "queryAllDeclaredConstructors":true,
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"testGuestIterator","parameterTypes":[] }, {"name":"testIteratorReturn","parameterTypes":[] }, {"name":"testIteratorThrow","parameterTypes":[] }, {"name":"testJsIterator","parameterTypes":[] }, {"name":"testManualIterator","parameterTypes":[] }]
},
{
  "name":"elide.runtime.intrinsics.js.err.AbstractJSException"
},
{
  "name":"elide.runtime.intrinsics.js.err.Error"
},
{
  "name":"elide.runtime.intrinsics.js.err.Stacktrace"
},
{
  "name":"elide.runtime.intrinsics.js.err.TypeError",
  "fields":[{"name":"Factory"}]
},
{
  "name":"elide.runtime.intrinsics.js.err.TypeError$Factory"
},
{
  "name":"elide.runtime.intrinsics.js.err.ValueError",
  "fields":[{"name":"Factory"}]
},
{
  "name":"elide.runtime.intrinsics.js.err.ValueError$Factory"
},
{
  "name":"elide.server.$Application$AppStartupListener$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.server.assets.$AssetController$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.server.assets.$ServerAssetIndex$AssetStartupListener$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.server.assets.$ServerAssetIndex$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.server.assets.$ServerAssetManager$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.server.assets.$ServerAssetManifestProvider$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.server.assets.$ServerAssetReader$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.server.assets.ServerAssetIndex$AssetStartupListener",
  "fields":[{"name":"beanContext"}]
},
{
  "name":"elide.server.cfg.$AssetConfig$Intercepted$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.server.cfg.$ServerConfig$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.server.cfg.ServerConfigurator",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.server.controller.builtin.$NotFoundController$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.server.controller.builtin.$ServerErrorController$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.server.http.$HeaderFinalizingFilter$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.server.http.$RequestContextFilter$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.server.runtime.$AppExecutor$DefaultExecutor$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"elide.server.runtime.jvm.$UncaughtExceptionHandler$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.methvin.watchservice.MacOSXListeningWatchService"
},
{
  "name":"io.micronaut.aop.internal.InterceptorRegistryBean",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.buffer.netty.$DefaultByteBufAllocatorConfiguration$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.buffer.netty.$NettyByteBufferFactory$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.context.AbstractBeanContextConditional",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"io.micronaut.context.AbstractExecutableMethodsDefinition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"io.micronaut.context.AbstractInitializableBeanDefinition",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"io.micronaut.context.AbstractInitializableBeanDefinitionReference",
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true
},
{
  "name":"io.micronaut.context.EnvironmentConfigurable",
  "allDeclaredClasses":true,
  "queryAllPublicMethods":true
},
{
  "name":"io.micronaut.context.annotation.DefaultScope",
  "queryAllPublicMethods":true
},
{
  "name":"io.micronaut.context.annotation.Executable",
  "queryAllPublicMethods":true
},
{
  "name":"io.micronaut.context.annotation.Factory",
  "queryAllPublicMethods":true
},
{
  "name":"io.micronaut.context.annotation.Prototype"
},
{
  "name":"io.micronaut.context.annotation.Requires",
  "queryAllPublicMethods":true
},
{
  "name":"io.micronaut.context.env.PropertiesPropertySourceLoader",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.context.env.yaml.YamlPropertySourceLoader",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.context.event.ApplicationEventPublisherFactory",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.core.annotation.AnnotationMetadata",
  "allDeclaredClasses":true,
  "queryAllPublicMethods":true
},
{
  "name":"io.micronaut.core.annotation.AnnotationMetadataDelegate",
  "allDeclaredClasses":true,
  "queryAllPublicMethods":true
},
{
  "name":"io.micronaut.core.annotation.AnnotationMetadataProvider",
  "allDeclaredClasses":true,
  "queryAllPublicMethods":true
},
{
  "name":"io.micronaut.core.annotation.AnnotationSource",
  "allDeclaredClasses":true,
  "queryAllPublicMethods":true
},
{
  "name":"io.micronaut.core.naming.Named",
  "allDeclaredClasses":true,
  "queryAllPublicMethods":true
},
{
  "name":"io.micronaut.core.type.ArgumentCoercible",
  "allDeclaredClasses":true,
  "queryAllPublicMethods":true
},
{
  "name":"io.micronaut.discovery.$DefaultCompositeDiscoveryClient$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.discovery.$DefaultServiceInstanceIdGenerator$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.discovery.cloud.digitalocean.$DigitalOceanMetadataConfiguration$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.discovery.cloud.digitalocean.$DigitalOceanMetadataResolver$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.discovery.config.$DefaultCompositeConfigurationClient$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.health.$DefaultCurrentHealthStatus$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.health.$HeartbeatConfiguration$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.health.$HeartbeatTask$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.MediaTypeConvertersRegistrar",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.bind.$DefaultRequestBinderRegistry$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.client.$BeanConfiguration",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.client.$DefaultHttpClientConfiguration$DefaultConnectionPoolConfiguration$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.client.$DefaultHttpClientConfiguration$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.client.$DefaultLoadBalancerResolver$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.client.$ServiceHttpClientConfiguration$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.client.$ServiceHttpClientConfiguration$ServiceConnectionPoolConfiguration$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.client.$ServiceHttpClientConfiguration$ServiceSslClientConfiguration$DefaultKeyConfiguration$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.client.$ServiceHttpClientConfiguration$ServiceSslClientConfiguration$DefaultKeyStoreConfiguration$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.client.$ServiceHttpClientConfiguration$ServiceSslClientConfiguration$DefaultTrustStoreConfiguration$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.client.$ServiceHttpClientConfiguration$ServiceSslClientConfiguration$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.client.$ServiceHttpClientFactory$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.client.$ServiceHttpClientFactory$HealthCheckStarter1$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.client.$ServiceHttpClientFactory$ServiceInstanceList0$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.client.bind.$DefaultHttpClientBinderRegistry$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.client.filter.$DefaultHttpClientFilterResolver$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.client.interceptor.$HttpClientIntroductionAdvice$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.client.interceptor.configuration.$DefaultClientVersioningConfiguration$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.client.interceptor.configuration.$NamedClientVersioningConfiguration$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.client.loadbalance.$DiscoveryClientLoadBalancerFactory$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.client.loadbalance.$LoadBalancerConverters$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.client.loadbalance.$ServiceInstanceListLoadBalancerFactory$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.client.netty.$DefaultNettyHttpClientRegistry$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.client.netty.$DefaultNettyHttpClientRegistry$HttpClient0$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.client.netty.ssl.$NettyClientSslBuilder$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.codec.$CodecConfiguration$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.converters.$HttpConverterRegistrar$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.cookie.$SameSiteConverter$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.netty.channel.$DefaultEventLoopGroupConfiguration$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.netty.channel.$DefaultEventLoopGroupFactory$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.netty.channel.$DefaultEventLoopGroupRegistry$DefaultEventLoopGroup1$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.netty.channel.$DefaultEventLoopGroupRegistry$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.netty.channel.$DefaultEventLoopGroupRegistry$EventLoopGroup0$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.netty.channel.$EpollEventLoopGroupFactory$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.netty.channel.$KQueueEventLoopGroupFactory$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.netty.channel.$NettyThreadFactory$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.netty.channel.$NettyThreadFactory$NettyThreadFactory0$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.netty.channel.$NioEventLoopGroupFactory$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.netty.channel.converters.$DefaultChannelOptionFactory$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.netty.channel.converters.$EpollChannelOptionFactory$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.netty.channel.converters.$KQueueChannelOptionFactory$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.netty.configuration.$NettyGlobalConfiguration$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.netty.websocket.$NettyServerWebSocketBroadcaster$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.netty.websocket.$WebSocketMessageEncoder$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.resource.$ResourceLoaderFactory$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.resource.$ResourceLoaderFactory$FileSystemResourceLoader1$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.resource.$ResourceLoaderFactory$GetClassPathResourceLoader0$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.resource.$ResourceLoaderFactory$ResourceResolver2$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.$CoroutineHelper$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.$HttpServerConfiguration$CorsConfiguration$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.$HttpServerConfiguration$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.$HttpServerConfiguration$HostResolutionConfiguration$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.$HttpServerConfiguration$HttpLocaleResolutionConfigurationProperties$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.$HttpServerConfiguration$MultipartConfiguration$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.$RouteExecutor$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.binding.$BasicAuthArgumentBinder$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.binding.$LocaleArgumentBinder$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.binding.$RequestArgumentSatisfier$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.codec.$TextStreamCodec$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.context.$ServerRequestContextInstrumentation$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.cors.$CorsFilter$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.cors.$CorsOriginConverter$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.exceptions.$ContentLengthExceededHandler$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.exceptions.$ConversionErrorHandler$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.exceptions.$DuplicateRouteHandler$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.exceptions.$HttpStatusHandler$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.exceptions.$JsonExceptionHandler$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.exceptions.$URISyntaxHandler$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.exceptions.$UnsatisfiedArgumentHandler$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.exceptions.$UnsatisfiedRouteHandler$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.exceptions.response.$HateoasErrorResponseProcessor$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.exceptions.response.$HateoasErrorResponseProcessorReplacement$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.netty.$DefaultHttpCompressionStrategy$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.netty.$DefaultHttpContentProcessorResolver$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.netty.$DefaultNettyEmbeddedServerFactory$BuildDefaultServer0$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.netty.$DefaultNettyEmbeddedServerFactory$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.netty.$FormDataHttpContentSubscriberFactory$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.netty.$NettyEmbeddedServerInstance$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.netty.$NettyRequestArgumentSatisfier$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.netty.NettyHttpServer$1"
},
{
  "name":"io.micronaut.http.server.netty.binders.$NettyBinderRegistrar$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.netty.binders.$PublisherBodyBinder$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.netty.configuration.$NettyHttpServerConfiguration$AccessLogger$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.netty.configuration.$NettyHttpServerConfiguration$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.netty.configuration.$NettyHttpServerConfiguration$FileTypeHandlerConfiguration$CacheControlConfiguration$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.netty.configuration.$NettyHttpServerConfiguration$FileTypeHandlerConfiguration$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.netty.configuration.$NettyHttpServerConfiguration$Http2Settings$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.netty.configuration.$NettyHttpServerConfiguration$NettyListenerConfiguration$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.netty.configuration.$NettyHttpServerConfiguration$Parent$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.netty.configuration.$NettyHttpServerConfiguration$Worker$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.netty.converters.$NettyConverters$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.netty.converters.NettyConvertersSpi",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.netty.handler.accesslog.element.BytesSentElementBuilder",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.netty.handler.accesslog.element.CookieElementBuilder",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.netty.handler.accesslog.element.DateTimeElementBuilder",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.netty.handler.accesslog.element.ElapseTimeElementBuilder",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.netty.handler.accesslog.element.HeaderElementBuilder",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.netty.handler.accesslog.element.LocalHostElementBuilder",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.netty.handler.accesslog.element.LocalIpElementBuilder",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.netty.handler.accesslog.element.LocalPortElementBuilder",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.netty.handler.accesslog.element.NotImplementedElementBuilder",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.netty.handler.accesslog.element.RemoteHostElementBuilder",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.netty.handler.accesslog.element.RemoteIpElementBuilder",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.netty.handler.accesslog.element.RequestLineElementBuilder",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.netty.handler.accesslog.element.RequestMethodElementBuilder",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.netty.handler.accesslog.element.RequestProtocolElementBuilder",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.netty.handler.accesslog.element.RequestUriElementBuilder",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.netty.handler.accesslog.element.ResponseCodeElementBuilder",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.netty.jackson.$JsonHttpContentSubscriberFactory$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.netty.jackson.$JsonViewMediaTypeCodecFactory$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.netty.jackson.$JsonViewServerFilter$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.netty.ssl.$CertificateProvidedSslBuilder$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.netty.ssl.$SelfSignedSslBuilder$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.netty.types.files.$FileTypeHandlerConfiguration$CacheControlConfiguration$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.netty.types.files.$FileTypeHandlerConfiguration$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.util.$DefaultHttpClientAddressResolver$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.util.$DefaultHttpHostResolver$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.util.locale.$CompositeHttpLocaleResolver$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.util.locale.$CookieLocaleResolver$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.util.locale.$HttpFixedLocaleResolver$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.util.locale.$HttpLocalizedMessageSource$Definition$Intercepted$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.util.locale.$HttpLocalizedMessageSource$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.util.locale.$RequestLocaleResolver$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.server.websocket.$ServerWebSocketProcessor$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.ssl.$ClientSslConfiguration$DefaultKeyConfiguration$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.ssl.$ClientSslConfiguration$DefaultKeyStoreConfiguration$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.ssl.$ClientSslConfiguration$DefaultTrustStoreConfiguration$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.ssl.$ClientSslConfiguration$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.ssl.$DefaultSslConfiguration$DefaultKeyConfiguration$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.ssl.$DefaultSslConfiguration$DefaultKeyStoreConfiguration$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.ssl.$DefaultSslConfiguration$DefaultTrustStoreConfiguration$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.ssl.$DefaultSslConfiguration$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.ssl.$ServerSslConfiguration$DefaultKeyConfiguration$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.ssl.$ServerSslConfiguration$DefaultKeyStoreConfiguration$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.ssl.$ServerSslConfiguration$DefaultTrustStoreConfiguration$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.ssl.$ServerSslConfiguration$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.http.util.$OutgoingHttpRequestProcessorImpl$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.inject.BeanContextConditional",
  "allDeclaredClasses":true,
  "queryAllPublicMethods":true
},
{
  "name":"io.micronaut.inject.BeanDefinition",
  "allDeclaredClasses":true,
  "queryAllPublicMethods":true
},
{
  "name":"io.micronaut.inject.BeanDefinitionReference",
  "allDeclaredClasses":true,
  "queryAllPublicMethods":true
},
{
  "name":"io.micronaut.inject.BeanFactory",
  "allDeclaredClasses":true,
  "queryAllPublicMethods":true
},
{
  "name":"io.micronaut.inject.BeanType",
  "allDeclaredClasses":true,
  "queryAllPublicMethods":true
},
{
  "name":"io.micronaut.inject.ExecutableMethodsDefinition",
  "allDeclaredClasses":true,
  "queryAllPublicMethods":true
},
{
  "name":"io.micronaut.inject.annotation.AnnotationConvertersRegistrar",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.inject.provider.BeanProviderDefinition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.inject.provider.JakartaProviderBeanDefinition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.inject.provider.JavaxProviderBeanDefinition",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.jackson.$BeanConfiguration",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.jackson.$JacksonConfiguration$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.jackson.$ObjectMapperFactory$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.jackson.$ObjectMapperFactory$JsonFactory0$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.jackson.$ObjectMapperFactory$ObjectMapper1$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.jackson.codec.$JsonMediaTypeCodec$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.jackson.codec.$JsonStreamMediaTypeCodec$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.jackson.core.env.CloudFoundryVcapApplicationPropertySourceLoader",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.jackson.core.env.CloudFoundryVcapServicesPropertySourceLoader",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.jackson.core.env.EnvJsonPropertySourceLoader",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.jackson.core.env.JsonPropertySourceLoader",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.jackson.databind.$DatabindPropertyBinderExceptionHandler$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.jackson.databind.$JacksonDatabindMapper$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.jackson.databind.convert.$JacksonConverterRegistrar$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.jackson.modules.$BeanIntrospectionModule$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.jackson.serialize.$ConvertibleMultiValuesSerializer$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.jackson.serialize.$ConvertibleValuesSerializer$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.jackson.serialize.$JacksonObjectSerializer$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.jackson.serialize.$JsonNodeDeserializer$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.jackson.serialize.$JsonNodeSerializer$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.jackson.serialize.$OptionalValuesSerializer$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.jackson.serialize.$ResourceModule$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.jackson.serialize.$ResourceSerializerModifier$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.json.$JsonObjectSerializer$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.json.bind.$JsonBeanPropertyBinder$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.json.codec.$JsonMediaTypeCodec$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.json.codec.$JsonStreamMediaTypeCodec$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.json.convert.$JsonConverterRegistrar$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.logging.$PropertiesLoggingLevelsConfigurer$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.logging.impl.$Log4jLoggingSystem$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.logging.impl.$LogbackLoggingSystem$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.management.endpoint.$BeanConfiguration",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.management.endpoint.$EndpointConfiguration$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.management.endpoint.$EndpointDefaultConfiguration$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.management.endpoint.$EndpointSensitivityProcessor$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.management.endpoint.$EndpointsFilter$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.management.endpoint.beans.$BeansEndpoint$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.management.endpoint.beans.impl.$DefaultBeanDefinitionData$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.management.endpoint.beans.impl.$DefaultBeanDefinitionDataCollector$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.management.endpoint.env.$EnvironmentEndpoint$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.management.endpoint.health.$HealthEndpoint$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.management.endpoint.health.$HealthEndpoint$StatusConfiguration$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.management.endpoint.health.filter.$HealthResultFilter$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.management.endpoint.info.$InfoEndpoint$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.management.endpoint.info.impl.$ReactiveInfoAggregator$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.management.endpoint.info.source.$BuildInfoSource$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.management.endpoint.info.source.$ConfigurationInfoSource$Definition$Intercepted$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.management.endpoint.info.source.$ConfigurationInfoSource$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.management.endpoint.info.source.$GitInfoSource$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.management.endpoint.loggers.$LoggersEndpoint$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.management.endpoint.loggers.impl.$DefaultLoggersManager$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.management.endpoint.loggers.impl.$Log4jLoggingSystem$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.management.endpoint.loggers.impl.$LogbackLoggingSystem$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.management.endpoint.processors.$DeleteEndpointRouteBuilder$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.management.endpoint.processors.$ReadEndpointRouteBuilder$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.management.endpoint.processors.$WriteEndpointRouteBuilder$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.management.endpoint.refresh.$RefreshEndpoint$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.management.endpoint.routes.$RoutesEndpoint$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.management.endpoint.routes.impl.$DefaultRouteData$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.management.endpoint.routes.impl.$DefaultRouteDataCollector$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.management.endpoint.stop.$ServerStopEndpoint$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.management.endpoint.threads.$ThreadDumpEndpoint$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.management.endpoint.threads.impl.$DefaultThreadInfoMapper$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.management.health.aggregator.$DefaultHealthAggregator$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.management.health.indicator.client.$ServiceHttpClientHealthIndicator$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.management.health.indicator.discovery.$DiscoveryClientHealthIndicator$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.management.health.indicator.discovery.$DiscoveryClientHealthIndicatorConfiguration$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.management.health.indicator.diskspace.$DiskSpaceIndicator$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.management.health.indicator.diskspace.$DiskSpaceIndicatorConfiguration$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.management.health.indicator.jdbc.$JdbcIndicator$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.management.health.indicator.service.$ServiceReadyHealthIndicator$ApplicationEventListener$onServerStarted2$Intercepted$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.management.health.indicator.service.$ServiceReadyHealthIndicator$ApplicationEventListener$onServiceStarted1$Intercepted$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.management.health.indicator.service.$ServiceReadyHealthIndicator$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.management.health.monitor.$HealthMonitorTask$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.protobuf.codec.$ExtensionRegistryFactory$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.protobuf.codec.$ExtensionRegistryFactory$ExtensionRegistry0$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.protobuf.codec.$ProtobufferCodec$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.protobuf.convert.$ByteBufToProtoMessageConverter$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.protobuf.convert.$ProtoMessageToByteBufConverter$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.reactive.flow.converters.$FlowConverterRegistrar$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.reactive.reactor.instrument.$ReactorInstrumentation$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.reactive.reactor.instrument.$ReactorInstrumentation$ReactorInstrumenterFactory$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.retry.intercept.$DefaultRetryInterceptor$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.retry.intercept.$RecoveryInterceptor$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.runtime.$ApplicationConfiguration$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.runtime.$ApplicationConfiguration$InstanceConfiguration$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.runtime.context.$CompositeMessageSource$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.runtime.context.env.$ConfigurationIntroductionAdvice$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.runtime.context.scope.$ThreadLocalCustomScope$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.runtime.context.scope.refresh.$RefreshInterceptor$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.runtime.context.scope.refresh.$RefreshScope$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.runtime.converters.reactive.$ReactiveTypeConverterRegistrar$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.runtime.converters.time.TimeConverterRegistrar",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.runtime.http.codec.$MediaTypeCodecRegistryFactory$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.runtime.http.codec.$MediaTypeCodecRegistryFactory$MediaTypeCodecRegistry0$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.runtime.http.codec.$TextPlainCodec$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.runtime.http.scope.$RequestCustomScope$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.runtime.server.watch.event.$FileWatchRestartListener$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.scheduling.$DefaultTaskExceptionHandler$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.scheduling.$ScheduledExecutorTaskScheduler$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.scheduling.async.$AsyncInterceptor$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.scheduling.executor.$DefaultExecutorSelector$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.scheduling.executor.$DefaultThreadFactory$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.scheduling.executor.$DefaultThreadFactory$ThreadFactory0$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.scheduling.executor.$ExecutorFactory$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.scheduling.executor.$ExecutorFactory$EventLoopGroupThreadFactory0$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.scheduling.executor.$ExecutorFactory$ExecutorService1$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.scheduling.executor.$IOExecutorServiceConfig$Configuration0$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.scheduling.executor.$IOExecutorServiceConfig$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.scheduling.executor.$ScheduledExecutorServiceConfig$Configuration0$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.scheduling.executor.$ScheduledExecutorServiceConfig$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.scheduling.executor.$UserExecutorConfiguration$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.scheduling.instrument.$ExecutorServiceInstrumenter$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.scheduling.io.watch.$DefaultWatchThread$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.scheduling.io.watch.$FileWatchConfiguration$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.scheduling.io.watch.$WatchServiceFactory$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.scheduling.io.watch.$WatchServiceFactory$WatchService0$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.scheduling.processor.$ScheduledMethodProcessor$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.test.extensions.junit5.MicronautJunit5Extension",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.test.extensions.junit5.annotation.MicronautTest",
  "queryAllPublicMethods":true
},
{
  "name":"io.micronaut.test.support.TestPropertyProvider",
  "allPublicFields":true,
  "allDeclaredClasses":true,
  "queryAllPublicMethods":true
},
{
  "name":"io.micronaut.test.support.server.$TestEmbeddedServer$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.test.support.server.$TestExecutableEmbeddedServer$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.web.router.$AnnotatedFilterRouteBuilder$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.web.router.$AnnotatedMethodRouteBuilder$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.web.router.$DefaultRouter$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.web.router.naming.$ConfigurableUriNamingStrategy$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.web.router.naming.$HyphenatedUriNamingStrategy$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.web.router.resource.$StaticResourceConfiguration$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.web.router.resource.$StaticResourceResolverFactory$Build0$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.web.router.resource.$StaticResourceResolverFactory$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.web.router.version.$ConfigurationDefaultVersionProvider$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.web.router.version.$RouteVersionFilter$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.web.router.version.$RoutesVersioningConfiguration$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.web.router.version.$VersionAwareRouterListener$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.web.router.version.resolution.$HeaderVersionResolver$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.web.router.version.resolution.$HeaderVersionResolverConfiguration$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.web.router.version.resolution.$ParameterVersionResolver$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.web.router.version.resolution.$ParameterVersionResolverConfiguration$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.micronaut.websocket.interceptor.$ClientWebSocketInterceptor$Definition$Reference",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"io.netty.bootstrap.ServerBootstrap$1"
},
{
  "name":"io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor",
  "methods":[{"name":"channelRead","parameterTypes":["io.netty.channel.ChannelHandlerContext","java.lang.Object"] }, {"name":"exceptionCaught","parameterTypes":["io.netty.channel.ChannelHandlerContext","java.lang.Throwable"] }]
},
{
  "name":"io.netty.buffer.AbstractByteBufAllocator",
  "queryAllDeclaredMethods":true
},
{
  "name":"io.netty.channel.AbstractChannelHandlerContext",
  "fields":[{"name":"handlerState"}]
},
{
  "name":"io.netty.channel.ChannelInboundHandlerAdapter",
  "methods":[{"name":"channelActive","parameterTypes":["io.netty.channel.ChannelHandlerContext"] }, {"name":"channelInactive","parameterTypes":["io.netty.channel.ChannelHandlerContext"] }, {"name":"channelRead","parameterTypes":["io.netty.channel.ChannelHandlerContext","java.lang.Object"] }, {"name":"channelReadComplete","parameterTypes":["io.netty.channel.ChannelHandlerContext"] }, {"name":"channelRegistered","parameterTypes":["io.netty.channel.ChannelHandlerContext"] }, {"name":"channelUnregistered","parameterTypes":["io.netty.channel.ChannelHandlerContext"] }, {"name":"channelWritabilityChanged","parameterTypes":["io.netty.channel.ChannelHandlerContext"] }, {"name":"userEventTriggered","parameterTypes":["io.netty.channel.ChannelHandlerContext","java.lang.Object"] }]
},
{
  "name":"io.netty.channel.ChannelInitializer",
  "methods":[{"name":"channelRegistered","parameterTypes":["io.netty.channel.ChannelHandlerContext"] }, {"name":"exceptionCaught","parameterTypes":["io.netty.channel.ChannelHandlerContext","java.lang.Throwable"] }]
},
{
  "name":"io.netty.channel.ChannelOutboundBuffer",
  "fields":[{"name":"totalPendingSize"}, {"name":"unwritable"}]
},
{
  "name":"io.netty.channel.DefaultChannelConfig",
  "fields":[{"name":"autoRead"}, {"name":"writeBufferWaterMark"}]
},
{
  "name":"io.netty.channel.DefaultChannelPipeline",
  "fields":[{"name":"estimatorHandle"}]
},
{
  "name":"io.netty.channel.DefaultChannelPipeline$HeadContext",
  "methods":[{"name":"bind","parameterTypes":["io.netty.channel.ChannelHandlerContext","java.net.SocketAddress","io.netty.channel.ChannelPromise"] }, {"name":"channelActive","parameterTypes":["io.netty.channel.ChannelHandlerContext"] }, {"name":"channelInactive","parameterTypes":["io.netty.channel.ChannelHandlerContext"] }, {"name":"channelRead","parameterTypes":["io.netty.channel.ChannelHandlerContext","java.lang.Object"] }, {"name":"channelReadComplete","parameterTypes":["io.netty.channel.ChannelHandlerContext"] }, {"name":"channelRegistered","parameterTypes":["io.netty.channel.ChannelHandlerContext"] }, {"name":"channelUnregistered","parameterTypes":["io.netty.channel.ChannelHandlerContext"] }, {"name":"channelWritabilityChanged","parameterTypes":["io.netty.channel.ChannelHandlerContext"] }, {"name":"close","parameterTypes":["io.netty.channel.ChannelHandlerContext","io.netty.channel.ChannelPromise"] }, {"name":"connect","parameterTypes":["io.netty.channel.ChannelHandlerContext","java.net.SocketAddress","java.net.SocketAddress","io.netty.channel.ChannelPromise"] }, {"name":"deregister","parameterTypes":["io.netty.channel.ChannelHandlerContext","io.netty.channel.ChannelPromise"] }, {"name":"disconnect","parameterTypes":["io.netty.channel.ChannelHandlerContext","io.netty.channel.ChannelPromise"] }, {"name":"exceptionCaught","parameterTypes":["io.netty.channel.ChannelHandlerContext","java.lang.Throwable"] }, {"name":"flush","parameterTypes":["io.netty.channel.ChannelHandlerContext"] }, {"name":"read","parameterTypes":["io.netty.channel.ChannelHandlerContext"] }, {"name":"userEventTriggered","parameterTypes":["io.netty.channel.ChannelHandlerContext","java.lang.Object"] }, {"name":"write","parameterTypes":["io.netty.channel.ChannelHandlerContext","java.lang.Object","io.netty.channel.ChannelPromise"] }]
},
{
  "name":"io.netty.channel.DefaultChannelPipeline$TailContext",
  "methods":[{"name":"channelActive","parameterTypes":["io.netty.channel.ChannelHandlerContext"] }, {"name":"channelInactive","parameterTypes":["io.netty.channel.ChannelHandlerContext"] }, {"name":"channelRead","parameterTypes":["io.netty.channel.ChannelHandlerContext","java.lang.Object"] }, {"name":"channelReadComplete","parameterTypes":["io.netty.channel.ChannelHandlerContext"] }, {"name":"channelRegistered","parameterTypes":["io.netty.channel.ChannelHandlerContext"] }, {"name":"channelUnregistered","parameterTypes":["io.netty.channel.ChannelHandlerContext"] }, {"name":"channelWritabilityChanged","parameterTypes":["io.netty.channel.ChannelHandlerContext"] }, {"name":"exceptionCaught","parameterTypes":["io.netty.channel.ChannelHandlerContext","java.lang.Throwable"] }, {"name":"userEventTriggered","parameterTypes":["io.netty.channel.ChannelHandlerContext","java.lang.Object"] }]
},
{
  "name":"io.netty.channel.DefaultFileRegion"
},
{
  "name":"io.netty.channel.epoll.NativeDatagramPacketArray$NativeDatagramPacket"
},
{
  "name":"io.netty.channel.unix.DatagramSocketAddress"
},
{
  "name":"io.netty.channel.unix.DomainDatagramSocketAddress"
},
{
  "name":"io.netty.channel.unix.FileDescriptor",
  "fields":[{"name":"state"}]
},
{
  "name":"io.netty.channel.unix.PeerCredentials"
},
{
  "name":"io.netty.util.AbstractReferenceCounted",
  "fields":[{"name":"refCnt"}]
},
{
  "name":"io.netty.util.DefaultAttributeMap",
  "fields":[{"name":"attributes"}]
},
{
  "name":"io.netty.util.concurrent.DefaultPromise",
  "fields":[{"name":"result"}]
},
{
  "name":"io.netty.util.concurrent.SingleThreadEventExecutor",
  "fields":[{"name":"state"}, {"name":"threadProperties"}]
},
{
  "name":"io.netty.util.internal.NativeLibraryUtil",
  "methods":[{"name":"loadLibrary","parameterTypes":["java.lang.String","boolean"] }]
},
{
  "name":"io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueueColdProducerFields",
  "fields":[{"name":"producerLimit"}]
},
{
  "name":"io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueueConsumerFields",
  "fields":[{"name":"consumerIndex"}]
},
{
  "name":"io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueueProducerFields",
  "fields":[{"name":"producerIndex"}]
},
{
  "name":"io.reactivex.Completable"
},
{
  "name":"io.reactivex.Maybe"
},
{
  "name":"io.reactivex.Observable"
},
{
  "name":"io.reactivex.Single"
},
{
  "name":"io.reactivex.rxjava3.core.Completable"
},
{
  "name":"io.reactivex.rxjava3.core.Flowable"
},
{
  "name":"io.reactivex.rxjava3.core.Maybe"
},
{
  "name":"io.reactivex.rxjava3.core.Observable"
},
{
  "name":"io.reactivex.rxjava3.core.Single"
},
{
  "name":"jakarta.inject.Inject",
  "queryAllPublicMethods":true
},
{
  "name":"java.io.FileDescriptor"
},
{
  "name":"java.io.FilePermission"
},
{
  "name":"java.io.IOException"
},
{
  "name":"java.io.ObjectInputStream"
},
{
  "name":"java.io.ObjectOutputStream"
},
{
  "name":"java.io.PrintStream"
},
{
  "name":"java.io.PrintWriter"
},
{
  "name":"java.io.Serializable",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true
},
{
  "name":"java.lang.Class",
  "methods":[{"name":"getPermittedSubclasses","parameterTypes":[] }, {"name":"getRecordComponents","parameterTypes":[] }, {"name":"isRecord","parameterTypes":[] }, {"name":"isSealed","parameterTypes":[] }]
},
{
  "name":"java.lang.ClassValue"
},
{
  "name":"java.lang.Enum"
},
{
  "name":"java.lang.Exception",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true
},
{
  "name":"java.lang.FunctionalInterface",
  "queryAllPublicMethods":true
},
{
  "name":"java.lang.Object"
},
{
  "name":"java.lang.OutOfMemoryError"
},
{
  "name":"java.lang.ProcessHandle",
  "methods":[{"name":"current","parameterTypes":[] }, {"name":"pid","parameterTypes":[] }]
},
{
  "name":"java.lang.RuntimeException",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true
},
{
  "name":"java.lang.RuntimePermission"
},
{
  "name":"java.lang.StackTraceElement"
},
{
  "name":"java.lang.Throwable",
  "allDeclaredFields":true,
  "allDeclaredClasses":true,
  "queryAllDeclaredMethods":true
},
{
  "name":"java.lang.Throwable$PrintStreamOrWriter"
},
{
  "name":"java.lang.instrument.Instrumentation",
  "methods":[{"name":"addTransformer","parameterTypes":["java.lang.instrument.ClassFileTransformer","boolean"] }]
},
{
  "name":"java.lang.invoke.MethodHandle"
},
{
  "name":"java.lang.management.ManagementFactory",
  "methods":[{"name":"getRuntimeMXBean","parameterTypes":[] }]
},
{
  "name":"java.lang.management.RuntimeMXBean",
  "methods":[{"name":"getInputArguments","parameterTypes":[] }]
},
{
  "name":"java.lang.management.ThreadInfo",
  "fields":[{"name":"virtual"}]
},
{
  "name":"java.lang.reflect.Executable",
  "methods":[{"name":"getParameters","parameterTypes":[] }]
},
{
  "name":"java.lang.reflect.Method"
},
{
  "name":"java.lang.reflect.Parameter",
  "methods":[{"name":"getName","parameterTypes":[] }]
},
{
  "name":"java.net.InetSocketAddress"
},
{
  "name":"java.net.NetPermission"
},
{
  "name":"java.net.PortUnreachableException"
},
{
  "name":"java.net.SocketPermission"
},
{
  "name":"java.net.URLPermission",
  "methods":[{"name":"<init>","parameterTypes":["java.lang.String","java.lang.String"] }]
},
{
  "name":"java.nio.Bits",
  "methods":[{"name":"unaligned","parameterTypes":[] }]
},
{
  "name":"java.nio.Buffer",
  "fields":[{"name":"address"}]
},
{
  "name":"java.nio.ByteBuffer",
  "methods":[{"name":"alignedSlice","parameterTypes":["int"] }]
},
{
  "name":"java.nio.DirectByteBuffer",
  "methods":[{"name":"<init>","parameterTypes":["long","int"] }]
},
{
  "name":"java.nio.channels.ClosedChannelException"
},
{
  "name":"java.nio.channels.FileChannel"
},
{
  "name":"java.nio.channels.spi.SelectorProvider",
  "methods":[{"name":"openServerSocketChannel","parameterTypes":["java.net.ProtocolFamily"] }]
},
{
  "name":"java.security.AllPermission"
},
{
  "name":"java.security.SecureRandomParameters"
},
{
  "name":"java.security.SecurityPermission"
},
{
  "name":"java.util.HashSet"
},
{
  "name":"java.util.LinkedHashSet"
},
{
  "name":"java.util.PropertyPermission"
},
{
  "name":"java.util.concurrent.ArrayBlockingQueue"
},
{
  "name":"java.util.concurrent.ForkJoinTask",
  "fields":[{"name":"aux"}, {"name":"status"}]
},
{
  "name":"java.util.concurrent.atomic.AtomicBoolean",
  "fields":[{"name":"value"}]
},
{
  "name":"java.util.concurrent.atomic.AtomicReference",
  "fields":[{"name":"value"}]
},
{
  "name":"java.util.concurrent.locks.AbstractOwnableSynchronizer"
},
{
  "name":"java.util.concurrent.locks.AbstractQueuedSynchronizer"
},
{
  "name":"java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject"
},
{
  "name":"java.util.concurrent.locks.ReentrantLock"
},
{
  "name":"java.util.concurrent.locks.ReentrantLock$NonfairSync"
},
{
  "name":"java.util.concurrent.locks.ReentrantLock$Sync"
},
{
  "name":"java.util.function.Consumer",
  "queryAllPublicMethods":true
},
{
  "name":"java.util.function.Function",
  "allDeclaredClasses":true,
  "queryAllPublicMethods":true
},
{
  "name":"java.util.function.Supplier",
  "allPublicFields":true,
  "allDeclaredClasses":true,
  "queryAllPublicMethods":true
},
{
  "name":"javax.smartcardio.CardPermission"
},
{
  "name":"jdk.internal.misc.Unsafe",
  "methods":[{"name":"getUnsafe","parameterTypes":[] }]
},
{
  "name":"kotlin.Any"
},
{
  "name":"kotlin.Array"
},
{
  "name":"kotlin.Boolean"
},
{
  "name":"kotlin.Int"
},
{
  "name":"kotlin.Metadata",
  "queryAllDeclaredMethods":true,
  "queryAllPublicMethods":true,
  "methods":[{"name":"bv","parameterTypes":[] }, {"name":"d1","parameterTypes":[] }, {"name":"d2","parameterTypes":[] }, {"name":"k","parameterTypes":[] }, {"name":"mv","parameterTypes":[] }, {"name":"pn","parameterTypes":[] }, {"name":"xi","parameterTypes":[] }, {"name":"xs","parameterTypes":[] }]
},
{
  "name":"kotlin.RuntimeException"
},
{
  "name":"kotlin.SafePublicationLazyImpl",
  "fields":[{"name":"_value"}]
},
{
  "name":"kotlin.String"
},
{
  "name":"kotlin.Throwable"
},
{
  "name":"kotlin.Unit"
},
{
  "name":"kotlin.annotation.MustBeDocumented",
  "queryAllPublicMethods":true
},
{
  "name":"kotlin.annotation.Retention",
  "queryAllPublicMethods":true
},
{
  "name":"kotlin.annotation.Target",
  "queryAllPublicMethods":true
},
{
  "name":"kotlin.collections.List"
},
{
  "name":"kotlin.collections.MutableList"
},
{
  "name":"kotlin.collections.MutableSet"
},
{
  "name":"kotlin.collections.Set"
},
{
  "name":"kotlin.jvm.internal.DefaultConstructorMarker"
},
{
  "name":"kotlin.reflect.jvm.internal.ReflectionFactoryImpl",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"kotlin.reflect.jvm.internal.impl.resolve.scopes.DescriptorKindFilter",
  "allPublicFields":true
},
{
  "name":"kotlinx.coroutines.EventLoopImplBase",
  "fields":[{"name":"_delayed"}, {"name":"_isCompleted"}, {"name":"_queue"}]
},
{
  "name":"kotlinx.coroutines.JobSupport",
  "fields":[{"name":"_parentHandle"}, {"name":"_state"}]
},
{
  "name":"kotlinx.coroutines.flow.Flow"
},
{
  "name":"kotlinx.coroutines.internal.DispatchedContinuation",
  "fields":[{"name":"_reusableCancellableContinuation"}]
},
{
  "name":"kotlinx.coroutines.internal.LimitedDispatcher",
  "fields":[{"name":"runningWorkers"}]
},
{
  "name":"kotlinx.coroutines.internal.LockFreeTaskQueue",
  "fields":[{"name":"_cur"}]
},
{
  "name":"kotlinx.coroutines.internal.LockFreeTaskQueueCore",
  "fields":[{"name":"_next"}, {"name":"_state"}]
},
{
  "name":"kotlinx.coroutines.reactor.ReactorContext"
},
{
  "name":"kotlinx.coroutines.scheduling.CoroutineScheduler",
  "fields":[{"name":"_isTerminated"}, {"name":"controlState"}, {"name":"parkedWorkersStack"}]
},
{
  "name":"kotlinx.coroutines.test.internal.TestMainDispatcher$NonConcurrentlyModifiable",
  "fields":[{"name":"_value"}, {"name":"exceptionWhenReading"}, {"name":"reader"}, {"name":"readers"}, {"name":"writer"}]
},
{
  "name":"kotlinx.coroutines.test.internal.TestMainDispatcherFactory",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"libcore.io.Memory"
},
{
  "name":"org.graalvm.polyglot.Engine",
  "methods":[{"name":"getImpl","parameterTypes":[] }]
},
{
  "name":"org.graalvm.polyglot.io.IOHelper"
},
{
  "name":"org.graalvm.polyglot.management.Management"
},
{
  "name":"org.robolectric.Robolectric"
},
{
  "name":"reactor.core.publisher.Flux"
},
{
  "name":"reactor.core.publisher.Mono"
},
{
  "name":"sun.misc.Unsafe",
  "fields":[{"name":"theUnsafe"}],
  "methods":[{"name":"copyMemory","parameterTypes":["java.lang.Object","long","java.lang.Object","long","long"] }, {"name":"getAndAddLong","parameterTypes":["java.lang.Object","long","long"] }, {"name":"getAndSetObject","parameterTypes":["java.lang.Object","long","java.lang.Object"] }, {"name":"invokeCleaner","parameterTypes":["java.nio.ByteBuffer"] }, {"name":"storeFence","parameterTypes":[] }]
},
{
  "name":"sun.misc.VM"
},
{
  "name":"sun.nio.ch.SelectorImpl",
  "fields":[{"name":"publicSelectedKeys"}, {"name":"selectedKeys"}]
},
{
  "name":"sun.security.provider.NativePRNG",
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"<init>","parameterTypes":["java.security.SecureRandomParameters"] }]
},
{
  "name":"sun.security.provider.NativePRNG$Blocking",
  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"<init>","parameterTypes":["java.security.SecureRandomParameters"] }]
},
{
  "name":"sun.security.provider.SHA",
  "methods":[{"name":"<init>","parameterTypes":[] }]
},
{
  "name":"sun.security.provider.SHA2$SHA256",
  "methods":[{"name":"<init>","parameterTypes":[] }]
}
]
