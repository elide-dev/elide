/*
 * Copyright (c) 2024-2025 Elide Technologies, Inc.
 *
 * Licensed under the MIT license (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 *   https://opensource.org/license/mit/
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under the License.
 */
package elide.runtime.localai

import java.util.stream.Stream
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.FlowCollector
import kotlinx.coroutines.flow.flow
import kotlinx.coroutines.flow.toList
import kotlin.streams.asSequence

/**
 * ## Inference Results
 *
 * Specifies the uniform API defined by each inference result container type. Inference containers can hold their
 * result data ahead of time, or buffer it as it arrives, or provide it to callers in chunked/streaming form.
 *
 * @property success Whether the operation succeeded.
 */
public sealed interface InferenceResults {
  /** Whether the operation succeeded. */
  public val success: Boolean

  /**
   * ### Inference Results (Error)
   *
   * Static result which indicates a failed inference operation; if possible, a message is specified.
   *
   * @property message Error message describing what caused inference to fail.
   */
  @JvmInline public value class Error internal constructor(private val msg: String) : InferenceResults {
    override val success: Boolean get() = false

    /** Error message which caused inference to fail. */
    public val message: String get() = msg
  }

  /**
   * ### Inference Results (Streamed)
   *
   * Streamed results of a local AI inference operation.
   *
   * @param stream Stream of tokens generated by the inference operation.
   */
  @JvmInline public value class Streamed internal constructor(public val stream: Stream<String>) : InferenceResults {
    override val success: Boolean get() = true

    /** Resulting token stream as a Kotlin sequence. */
    public val sequence: Sequence<String> get() = stream.asSequence()
  }

  /**
   * ### Inference Results (Suspending)
   *
   * Streamed results of a local AI inference operation.
   *
   * @param flow Flow of tokens generated by the inference operation.
   */
  @JvmInline public value class Suspending @PublishedApi internal constructor(
    private val flow: Flow<String>,
  ) : InferenceResults {
    override val success: Boolean get() = true

    /** Resulting token flow. */
    public fun asFlow(): Flow<String> = flow

    /** Collect the results into a collection. */
    public suspend fun collect(): Collection<String> = flow.toList()
  }

  /**
   * ### Inference Results (Synchronous)
   *
   * Synchronous results of a local AI inference operation.
   *
   * @param value The results buffered as a string.
   */
  @JvmInline public value class Sync internal constructor(public val value: Collection<String>) : InferenceResults {
    override val success: Boolean get() = true

    /** Resulting token stream as a Kotlin sequence. */
    public val sequence: Sequence<String> get() = value.asSequence()
  }

  /** Factories for inference results. */
  public companion object {
    /** @return Streamed inference results. */
    @JvmStatic
    public inline fun suspending(crossinline producer: suspend FlowCollector<String>.() -> Unit): Suspending {
      return flow<String> {
        producer()
      }.let {
        Suspending(it)
      }
    }

    /** @return Streamed inference results. */
    @JvmStatic public fun streamed(stream: Stream<String>): InferenceResults = Streamed(stream)

    /** @return Synchronous inference results [Collection] of [String]s. */
    @JvmStatic public fun of(value: Collection<String>): InferenceResults = Sync(value)

    /** @return Synchronous inference results from a [String]. */
    @JvmStatic public fun of(value: String): InferenceResults = Sync(listOf(value))
  }
}
