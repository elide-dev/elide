/*
 * Copyright Â© 2022, The Elide Framework Authors. All rights reserved.
 *
 * The Gust/Elide framework and tools, and all associated source or object computer code, except where otherwise noted,
 * are licensed under the Zero Prosperity license, which is enclosed in this repository, in the file LICENSE.txt. Use of
 * this code in object or source form requires and implies consent and agreement to that license in principle and
 * practice. Source or object code not listing this header, or unless specified otherwise, remain the property of
 * Elide LLC and its suppliers, if any. The intellectual and technical concepts contained herein are proprietary to
 * Elide LLC and its suppliers and may be covered by U.S. and Foreign Patents, or patents in process, and are protected
 * by trade secret and copyright law. Dissemination of this information, or reproduction of this material, in any form,
 * is strictly forbidden except in adherence with assigned license requirements.
 */

include "../../google/protobuf/duration.fbs";
include "../../google/protobuf/timestamp.fbs";
include "../base/language.fbs";
include "../crypto/crypto.fbs";
include "../data/data.fbs";
include "../page/media.fbs";
include "../page/page.fbs";
include "../page/semantic.fbs";
include "../structs/bloom.fbs";
include "../../webutil/html/types/html.fbs";

/*
 * Specifies structures used to define the notion of a "asset bundle," which holds configuration and inline data that,
 * together with server logic, enable automatic asset references and loading.
 */
namespace elide.assets;

// Enumerates supported asset manifest formats. These are all powered by Protocol Buffers' encoding tools. For maximum
// performance, use the binary format.
enum ManifestFormat : int {
  // The manifest format was unspecified or unrecognized; this value should not be used by regular code.
  MANIFEST_FORMAT_UNSPECIFIED = 0,

  // Specifies a binary-encoded asset manifest.
  BINARY = 1,

  // Specifies a JSON-encoded asset manifest.
  JSON = 2,

  // Specifies a text-encoded asset manifest.
  TEXT = 3,
}

// Defines the structure of an "asset bundle," which keeps track of frontend assets for an application. This manifest is
// generally consumed in binary-proto form by the backend systems running the app, so it can load frontend code and map
// module paths to annotations affixed to controllers.
//
// Assets enclosed in the asset manifest are referenced by their "module name," which is a dotted string path uniquely
// scoping a given stylesheet or script. The set of sources associated with the module name are loaded in order, with
// any applicable rewrite maps or other settings applying during output.
table AssetBundle {
  // Version of the tool that produced this manifest. This is used by the tool to understand which asset bundle features
  // are supported for a given tool version.
  version: uint;

  // Bundler settings that were active at the time the bundle was assembled, and some of which may extend to the runtime
  // use of the bundle to serve assets.
  settings: elide.assets.AssetBundle_.BundlerSettings;

  // Timestamp indicating when this asset manifest was generated. This may be used when calculating `ETags` or when
  // checking for updates to the asset bundle itself.
  generated: google.protobuf.Timestamp;

  // Raw bytes of a digest matching the algorithm for digests in file names, which represents a unique fingerprint of
  // the full asset bundle.
  digest: [ubyte];

  // Set of styles listed in this asset manifest. Like scripts, this is a map of dotted-path module names mapped to
  // their stylesheet sources and settings. Generally, the GSS module name is used for stylesheets.
  styles: [elide.assets.AssetBundle_.StylesEntry];

  // Set of scripts listed in this asset manifest. Like styles, this is a map of dotted-path module names mapped to
  // their script sources and settings. Generally, a Closure module name is used for scripts.
  scripts: [elide.assets.AssetBundle_.ScriptsEntry];

  // Generic assets which are mapped within this bundle.
  generic: [elide.assets.AssetBundle_.GenericEntry];

  // Inlined asset contents, which specify pre-compressed asset data corresponding to a given CSS or JavaScript code
  // bundle. The server may choose to serve this content rather than performing compression on-the-fly.
  asset: [elide.assets.AssetBundle_.AssetContent];
}

namespace elide.assets.AssetBundle_;

// Specifies settings related to cryptographic asset digestion. This includes the algorithm in use, and the length of
// the hash to take for the resulting token.
table DigestSettings {
  // Hash algorithm in use for asset digestion.
  algorithm: elide.crypto.HashAlgorithm;

  // Number of characters to pluck from the tail of the hash.
  tail: uint;

  // Number of rounds to perform. Defaults to `1`.
  rounds: uint;
}

// Specifies a map of style symbols (usually classes and/or IDs) that should be rewritten on the fly, and their target
// rewrite values. If a rewrite map is present and active, it is used during serving to line styles up with the DOM.
table RewriteMap {
  // File this rewrite map was originally loaded from.
  file: string;

  // Map of symbols to their rewritten values.
  map: [elide.assets.AssetBundle_.RewriteMap_.MapEntry];
}

namespace elide.assets.AssetBundle_.RewriteMap_;

// Rewrite map entry payload.
table MapEntry {
  // Key for the entry.
  key: string (key);

  // Value for the entry.
  value: string;
}

namespace elide.assets.AssetBundle_;

// Specifies settings which were active at the time the bundle was generated, and some of which may extend to the
// bundle's use at runtime.
table BundlerSettings {
  // Specifies whether minification was enabled, and/or should be enabled.
  minify: bool;

  // Specifies whether JavaScript pre-packing was enabled, and/or should be enabled.
  prepack: bool;

  // Specifies whether assets participating in style rewriting (not to be confused with minification).
  rewriting: bool;

  // Enabled compression algorithms. If this property is set, there may be compressed variants for each asset,
  // potentially depending on whether the compressed asset variant saved space over the wire.
  compression: [elide.data.CompressionMode];

  // Digest algorithm settings in use to calculate chunk tokens. These tokens are used to address pre-compressed asset
  // content, and are used to address assets dynamically from the server and frontend.
  digest_settings: elide.assets.AssetBundle_.DigestSettings;
}

// Specifies direct and transitive dependencies for a given asset bundle. This structure is used generically across
// asset types, and refers to dependencies using their asset token.
table AssetDependencies {
  // Tokens for direct dependencies.
  direct: [string];

  // Tokens for transitive dependencies.
  transitive: [string];

  // Bitmask filter calculated from the full set of a given asset's dependency tokens.
  mask: elide.structs.BloomFilter;
}

// Specifies a bundle of CSS code, containing one or more stylesheets to be included in an HTML page, and optionally
// one or more style symbol rewrite maps.
table StyleBundle {
  // Style module name/path.
  module: string;

  // Rewrite maps associated with this bundle, if applicable.
  rewrite_map: elide.assets.AssetBundle_.RewriteMap;

  // Specifies dependencies that must be loaded before this module, if any.
  dependencies: elide.assets.AssetBundle_.AssetDependencies;

  // Stylesheet sources associated with this bundle. Always non-empty.
  asset: [elide.assets.AssetBundle_.StyleBundle_.StyleAsset];

  // Whether this asset should be compressed when serving to end-users.
  compressable: bool;

  // Whether this asset should be considered cacheable.
  cacheable: bool;
}

namespace elide.assets.AssetBundle_.StyleBundle_;

// Describes the structure of an individual style asset, which is constituent to the bundle that holds it.
table StyleAsset {
  // Calculated token for this asset, including the asset's content digest.
  token: string;

  // Original name of the source file, if applicable.
  filename: string;

  // URL and DOM settings for this asset.
  stylesheet: elide.page.Context_.Styles_.Stylesheet;

  // Whether a renaming map is available for this stylesheet.
  renaming: bool;
}

namespace elide.assets.AssetBundle_;

// Specifies a bundle of JavaScript code, containing one or more script assets to be included in an HTML page, and
// optionally settings about how to embed the script.
table ScriptBundle {
  // Script module name/path.
  module: string;

  // Script code assets associated with this bundle. Always non-empty.
  asset: [elide.assets.AssetBundle_.ScriptBundle_.ScriptAsset];

  // Specifies dependencies that must be loaded before this module, if any.
  dependencies: elide.assets.AssetBundle_.AssetDependencies;

  // Whether this asset should be compressed when serving to end-users.
  compressable: bool;

  // Whether this asset should be considered cacheable.
  cacheable: bool;

  // Marked if this asset is external, in which case the described script should be referenced via a script tag.
  external: bool;
}

namespace elide.assets.AssetBundle_.ScriptBundle_;

// Describes the structure of an individual script asset, which is constituent to the bundle that holds it.
table ScriptAsset {
  // Calculated token for this asset, including the asset's content digest.
  token: string;

  // Original name of the source file, if applicable.
  filename: string;

  // URL and DOM settings for this asset.
  script: elide.page.Context_.Scripts_.JavaScript;
}

namespace elide.assets.AssetBundle_;

// Describes a generic asset bundle relating to a text asset, or some other generic asset which is otherwise not
// modeled by other available descriptors.
table GenericBundle {
  // Generic asset name/path.
  module: string;

  // Original name of the source file, as applicable.
  filename: string;

  // Hash token uniquely identifying the content in this module.
  token: string;

  // Specifies each variant of an asset's main content.
  variant: [elide.data.CompressedData];

  // Whether this asset should be compressed when serving to end-users.
  compressable: bool;

  // Whether this asset should be considered cacheable.
  cacheable: bool;

  // Marked if this asset is external, in which case the described stylesheet should be referenced via a link tag.
  external: bool;
}

// Specifies full contents for assets, in pre-compressed forms, to be served directly when a compressed representation
// is supported by the invoking browser. These payloads duplicate the original content, which is additionally enclosed
// in the JAR at the path described in this structure.
table AssetContent {
  // Module which this asset is a member of.
  module: string;

  // Original name of the source file.
  filename: string;

  // Hash token uniquely identifying the content in this module.
  token: string;

  // Specifies each variant of an asset's main content.
  variant: [elide.data.CompressedData];
}

// Map entry within the `styles` map of an asset bundle.
table StylesEntry {
  // Map key for the entry.
  key: string (key);

  // Map value for the entry.
  value: elide.assets.AssetBundle_.StyleBundle;
}

// Map entry within the `scripts` map of an asset bundle.
table ScriptsEntry {
  // Map key for the entry.
  key: string (key);

  // Map value for the entry.
  value: elide.assets.AssetBundle_.ScriptBundle;
}

// Map entry within the `generic` map of an asset bundle.
table GenericEntry {
  // Map key for the entry.
  key: string (key);

  // Map value for the entry.
  value: elide.assets.AssetBundle_.GenericBundle;
}
