/*
 * Copyright Â© 2022, The Elide Framework Authors. All rights reserved.
 *
 * The Gust/Elide framework and tools, and all associated source or object computer code, except where otherwise noted,
 * are licensed under the Zero Prosperity license, which is enclosed in this repository, in the file LICENSE.txt. Use of
 * this code in object or source form requires and implies consent and agreement to that license in principle and
 * practice. Source or object code not listing this header, or unless specified otherwise, remain the property of
 * Elide LLC and its suppliers, if any. The intellectual and technical concepts contained herein are proprietary to
 * Elide LLC and its suppliers and may be covered by U.S. and Foreign Patents, or patents in process, and are protected
 * by trade secret and copyright law. Dissemination of this information, or reproduction of this material, in any form,
 * is strictly forbidden except in adherence with assigned license requirements.
 */

include "../../google/protobuf/timestamp.fbs";
include "../crypto/crypto.fbs";
include "../data/data.fbs";

/*
 * Specifies structures used to define the notion of an "embedded" script asset in some foreign language, which can be
 * executed at runtime by Elide to fulfill user requests.
 */
namespace elide.assets;

// Enumerates languages which are supported for embedded scripting in Elide.
enum EmbeddedScriptLanguage : int {
  // The language is unknown or unspecified; regular code should not use this value.
  LANGUAGE_UNSPECIFIED = 0,

  // The language is a dialect of JavaScript.
  JS = 1,
}

namespace elide.assets.EmbeddedScriptMetadata_.JsScriptMetadata_;

// Enumerates supported JavaScript language levels.
enum JsLanguageLevel : int {
  // The language level is unknown or unspecified; regular code should not use this value.
  JS_LANGUAGE_LEVEL_DEFAULT = 0,

  // The language level is ES5.
  ES5 = 1,

  // The language level is ES6.
  ES6 = 2,

  // The language level is ES2017.
  ES2017 = 3,

  // The language level is ES2018.
  ES2018 = 4,

  // The language level is ES2019.
  ES2019 = 5,

  // The language level is ES2020.
  ES2020 = 6,

  // The language level is ES2021.
  ES2021 = 7,

  // The language level is ES2022.
  ES2022 = 8,
}

namespace elide.assets;

// Describes embedded script-level metadata which is enclosed with the asset spec for an embedded script.
table EmbeddedScriptMetadata {
  // Language-specific script metadata.
  metadata: elide.assets.EmbeddedScriptMetadata_.LanguageSpecificMetadata;
}

namespace elide.assets.EmbeddedScriptMetadata_;

// JavaScript-related metadata.
table JsScriptMetadata {
  // Describes the JavaScript language level for the embedded script.
  level: elide.assets.EmbeddedScriptMetadata_.JsScriptMetadata_.JsLanguageLevel;
}

// Language-specific script metadata.
table LanguageSpecificMetadata {
  // JavaScript-related metadata.
  javascript: elide.assets.EmbeddedScriptMetadata_.JsScriptMetadata;
}

namespace elide.assets;

// Describes a single embedded script asset, which is embedded within an Elide application. The script is enclosed
// within the protocol buffer record, along with a digest and various metadata.
table EmbeddedScript {
  // Module name / ID for this embedded script. Set at build time.
  module: string;

  // Filename, or some synthesized filename, for this script.
  filename: string;

  // Language of the embedded script, and expected interpreted language.
  language: elide.assets.EmbeddedScriptLanguage;

  // Embedded script-level metadata, including language-specific metadata.
  metadata: elide.assets.EmbeddedScriptMetadata;

  // Last-modified timestamp for the assets underlying this script.
  last_modified: google.protobuf.Timestamp;

  // Unique set of direct dependencies for this embedded script asset; expected to be other, compatible embedded
  // scripts (same language, same runtime level). Expressed as a `module` ID.
  direct_dependency: [string];

  // Unique transitive closure of all dependencies this module relies upon; expected to be other, compatible embedded
  // scripts (same language, same runtime level). Expressed as a `module` ID.
  transitive_dependency: [string];

  // Describes the raw data for the script content itself, plus a digest of the data for verification purposes; the
  // digest payload additionally specifies the algorithm used.
  script: elide.data.DataContainerRef;

  // Source-map file path for the embedded script, if generated as an external file.
  sourcemap: elide.data.DataContainerRef;
}
