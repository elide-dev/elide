/*
 * Copyright Â© 2022, The Elide Framework Authors. All rights reserved.
 *
 * The Gust/Elide framework and tools, and all associated source or object computer code, except where otherwise noted,
 * are licensed under the Zero Prosperity license, which is enclosed in this repository, in the file LICENSE.txt. Use of
 * this code in object or source form requires and implies consent and agreement to that license in principle and
 * practice. Source or object code not listing this header, or unless specified otherwise, remain the property of
 * Elide LLC and its suppliers, if any. The intellectual and technical concepts contained herein are proprietary to
 * Elide LLC and its suppliers and may be covered by U.S. and Foreign Patents, or patents in process, and are protected
 * by trade secret and copyright law. Dissemination of this information, or reproduction of this material, in any form,
 * is strictly forbidden except in adherence with assigned license requirements.
 */

/*
 * Specifies common structures which are used to control Elide instances via the Elide Host Control API; these messages
 * live outside the borders of version control, so much retain backwards compatibility as they evolve.
 */
syntax = "proto3";
package elide.host;

import "elide/app/config.proto";
import "elide/machine/machine.proto";
import "elide/meta/guest.proto";
import "elide/meta/syntax.proto";
import "elide/net/ip.proto";
import "elide/net/protocol.proto";
import "elide/std/logging.proto";
import "google/protobuf/timestamp.proto";

option optimize_for = SPEED;
option cc_enable_arenas = true;
option java_multiple_files = true;
option java_string_check_utf8 = true;
option php_class_prefix = "ELD";
option swift_prefix = "Elide";
option objc_class_prefix = "ELD";
option java_package = "tools.elide.call";
option csharp_namespace = "Elide.Call";
option go_package = "github.com/elide-tools/elide/control;control";

// Enumerates statuses/states a host system may inhabit.
enum HostStatus {
  // The host's status is unknown, or otherwise unrecognized by this version of the protocol.
  HOST_STATUS_UNKNOWN = 0;
}

// Enumerates standard/known host capabilities.
enum HostCapability {
  // Unknown or unrecognized host capability; should not be used by regular code.
  HOST_CAPABILITY_UNKNOWN = 0;
}

// Specifies a suite of capabilities for a given host system.
message HostCapabilities {
  // Specifies capabilities supported by this host system.
  repeated HostCapabilities capability = 1;
}

// Specifies known information about a host's networking configuration.
message HostNetworking {
  // Capacity for this host's network interfaces, expressed in gigabits.
  uint32 capacity = 1;

  // IP addresses assigned to the host.
  repeated elide.net.IpAddress address = 2;
}

// Top-level record which describes host system information.
message HostSystem {
  // Unique hostname or identifying name for this host system.
  string name = 1;

  // Display name for this host system, if available/applicable.
  string display_name = 2;

  // Describes information about the underlying machine.
  elide.machine.Machine machine = 3;

  // Discovered or declared capabilities for this host system.
  HostCapabilities capabilities = 4;

  // Specifies host networking information.
  HostNetworking networking = 5;
}

// Specifies a `HostSystem` record with active state.
message ActiveHostSystem {
  // Specifies the current host status.
  HostStatus status = 1;

  // Specifies the subject host system.
  HostSystem host = 2;

  // Last update timestamp.
  google.protobuf.Timestamp as_of = 3;
}

// Specifies VM-level configuration, which is applied at different levels of the VM lifecycle and configuration.
message VMConfiguration {
  // Defines the structure of a VM flag value.
  message VMFlag {
    // Name or string for this flag.
    string flag = 1;

    // Flag value to provide.
    oneof value {
      // Boolean value for the flag; `true` indicates activation.
      bool bool = 2;

      // String literal value for the flag.
      string string = 3;
    }
  }

  // Specifies VM runtime flags.
  repeated VMFlag flag = 1;
}

// Host-level configuration for guest VMs and engine settings.
message EngineConfiguration {
  // Enabled guest languages.
  repeated elide.meta.GuestLanguage language = 1;

  // General configuration for guest VMs.
  elide.meta.GeneralLanguageSettings general = 2;

  // Guest-specific configuration, associated with each language.
  repeated elide.meta.GuestSettingsStanza settings = 3;

  // Enable caching for this engine.
  bool caching = 4;

  // Flags for the guest VM environment.
  VMConfiguration gvm = 5;

  // Flags for the host VM environment.
  VMConfiguration hvm = 6;
}

// Informs the runtime configuration about various host identity parameters.
message HostIdentity {
  // Hostname of the machine.
  string hostname = 1;

  // Datacenter name/assigned label.
  string datacenter = 2;

  // Regional label or name.
  string region = 3;

  // Vendor for the host or host software.
  string vendor = 4;

  // Tag or model for the host or host software.
  string tag = 5;

  // "Agent" name or value; this is a free-form string which can be used to identify the host software.
  string agent = 6;
}

// Describes logging configurations for the runtime.
message LoggingConfiguration {
  // Default logging settings.
  elide.std.LoggingSettings root = 1;

  // Assigned or created handlers.
  repeated elide.std.LogHandler handler = 2;

  // Settings specific to named loggers.
  repeated elide.std.Logger logger = 3;
}

// Enumerates supported types of server listeners.
enum ListenerType {
  // Unrecognized or unknown listener type. This value should not be used from regular code.
  UNRECOGNIZED_LISTENER_TYPE = 0;

  // HTTP v1.1 listener, in plaintext.
  HTTP_PLAINTEXT = 1;

  // HTTP v1.1/v2/v3 listener, wrapped in TLS.
  HTTP2_TLS = 2;

  // Raw TCP listener.
  TCP_PLAINTEXT = 3;

  // TCP listener, wrapped in TLS.
  TCP_TLS = 4;
}

// Describes listener configurations for the main runtime server.
message ListenerConfiguration {
  // Describes the structure of a port/address-based listener.
  message PortListener {
    // IP address; if not provided, all addresses are used.
    elide.net.IpAddress address = 1;

    // Layer 4 protocols to support through this listener.
    repeated elide.net.Layer4Protocol protocol = 2;

    // Port for this listener.
    uint32 port = 3;
  }

  // Describes the structure of a socket-based listener.
  message SocketListener {
    // Path to the socket.
    string path = 1;

    // Whether this socket is symbolic or abstract (where supported).
    bool symbolic = 2;
  }

  // Describes general settings which can apply to any listener.
  message ListenerSettings {
    // Whether to enable TLS, where applicable.
    bool tls = 1;
  }

  // Describes the type of listener in use.
  ListenerType type = 1;

  // Describes type-specific listener settings.
  oneof listener {
    // Describes a port-based listener.
    PortListener port = 2;

    // Describes a socket-based listener.
    SocketListener socket = 3;
  }

  // General settings for this listener.
  ListenerSettings settings = 4;
}

// Describes a payload of configuration, provided by the host application to an embedded instance of Elide; this message
// is used to configure the runtime early in the boot process.
message HostConfiguration {
  // Identity information about the hosting system.
  HostIdentity host = 1;

  // Engine-level configuration for this instance.
  EngineConfiguration engine = 2;

  // Configuration for runtime logging.
  LoggingConfiguration logging = 3;

  // Listeners to apply to this host. If empty, only native calls are accepted.
  repeated ListenerConfiguration listener = 4;

  // Generic host configuration payloads.
  repeated elide.app.AppConfigurationSuite config = 5;

  // Default suite of configurations applied to hosted applications.
  repeated elide.app.AppConfigurationSuite defaults = 6;
}
