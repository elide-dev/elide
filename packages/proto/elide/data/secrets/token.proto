/*
 * Copyright Â© 2022, The Elide Framework Authors. All rights reserved.
 *
 * The Gust/Elide framework and tools, and all associated source or object computer code, except where otherwise noted,
 * are licensed under the Zero Prosperity license, which is enclosed in this repository, in the file LICENSE.txt. Use of
 * this code in object or source form requires and implies consent and agreement to that license in principle and
 * practice. Source or object code not listing this header, or unless specified otherwise, remain the property of
 * Elide LLC and its suppliers, if any. The intellectual and technical concepts contained herein are proprietary to
 * Elide LLC and its suppliers and may be covered by U.S. and Foreign Patents, or patents in process, and are protected
 * by trade secret and copyright law. Dissemination of this information, or reproduction of this material, in any form,
 * is strictly forbidden except in adherence with assigned license requirements.
 */

// buf:lint:ignore FIELD_LOWER_SNAKE_CASE

/*
 * Specifies structures which secret tokens of various kinds; the runtime tools to deal with these tokens are specially
 * designed to be as secure as possible (for example, redaction is applied to these values in logs).
 */
syntax = "proto3";
package elide.data.secrets;

option optimize_for = CODE_SIZE;
option cc_enable_arenas = true;
option java_multiple_files = true;
option java_string_check_utf8 = true;
option php_class_prefix = "ELDS";
option swift_prefix = "Elide";
option objc_class_prefix = "ELDS";
option java_package = "tools.elide.data.secrets";
option csharp_namespace = "Elide.Data.Secrets";
option go_package = "github.com/elide-tools/elide/data/secrets;token";

import "elide/data/encoding.proto";
import "elide/data/data.proto";
import "elide/model/model.proto";


// Coming soon.
//
message Token {
  // Carries the actual value for a secure token.
  message TokenValue {
    // Inner token value data container.
    // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
    elide.data.DataContainer __inner_value__ = 1 [(elide.model.sensitive) = true];

    // Specifies the encoding of data held as the token value.
    elide.data.Encoding encoding = 2;
  }

  // Specifies the data for the token.
  TokenValue value = 1 [(elide.model.internal) = true];

  // Optionally specifies a fingerprint for the enclosed data.
  elide.data.DataFingerprint fingerprint = 2;
}
