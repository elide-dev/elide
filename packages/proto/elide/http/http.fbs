/*
 * Copyright Â© 2022, The Elide Framework Authors. All rights reserved.
 *
 * The Gust/Elide framework and tools, and all associated source or object computer code, except where otherwise noted,
 * are licensed under the Zero Prosperity license, which is enclosed in this repository, in the file LICENSE.txt. Use of
 * this code in object or source form requires and implies consent and agreement to that license in principle and
 * practice. Source or object code not listing this header, or unless specified otherwise, remain the property of
 * Elide LLC and its suppliers, if any. The intellectual and technical concepts contained herein are proprietary to
 * Elide LLC and its suppliers and may be covered by U.S. and Foreign Patents, or patents in process, and are protected
 * by trade secret and copyright law. Dissemination of this information, or reproduction of this material, in any form,
 * is strictly forbidden except in adherence with assigned license requirements.
 */

include "../crypto/tls.fbs";
include "./data/encoding.fbs";

/*
 * Specifies common HTTP protocol structures which are used throughout the Elide framework; in particular, these records
 * are used to express fetch interactions over the Elide Invocation API.
 */
namespace elide.http;

// Specifies information about the active HTTP connection.
table ConnectionInfo {
  // Specifies the remote address of the connection.
  remote_address: string;

  // Specifies the local address of the connection.
  local_address: string;

  // Specifies the remote port of the connection.
  remote_port: int;

  // Specifies the local port of the connection.
  local_port: int;
}

// HTTP versions known to this protocol.
enum HttpVersion : int {
  // Unspecified HTTP version; this indicates a forward-incompatible value and should not be used by regular code.
  UNSPECIFIED_HTTP_VERSION = 0,

  // HTTP 1.0.
  HTTP_1_0 = 1,

  // HTTP 1.1.
  HTTP_1_1 = 2,

  // HTTP 2.0.
  HTTP_2_0 = 3,

  // HTTP 3.0.
  HTTP_3_0 = 4,
}

// HTTP request method.
enum HttpMethod : int {
  // Unspecified HTTP method; this indicates a forward-incompatible value and should not be used by regular code.
  UNSPECIFIED_METHOD = 0,

  // HTTP GET.
  GET = 1,

  // HTTP POST.
  POST = 2,

  // HTTP PUT.
  PUT = 3,

  // HTTP DELETE.
  DELETE = 4,

  // HTTP PATCH.
  PATCH = 5,

  // HTTP HEAD.
  HEAD = 6,

  // HTTP OPTIONS.
  OPTIONS = 7,

  // HTTP TRACE.
  TRACE = 8,

  // HTTP CONNECT.
  CONNECT = 9,
}

// HTTP header.
table HttpHeader {
  // Specifies the HTTP header name.
  name: string;

  // Specifies the HTTP header value.
  value: string;
}

// HTTP headers.
table HttpHeaders {
  // Specifies the HTTP headers constituent to the request or response.
  headers: [HttpHeader];
}

// Specifies a chunk of body bytes.
table ByteChunk {
  // Specifies the chunk of bytes.
  bytes: [ubyte];
}

// Describes HTTP body parameters for a request or response payload.
table HttpBody {
  // Whether an HTTP body is present.
  present: bool;

  // Size of the HTTP body, in bytes.
  size: uint64;

  // Content type declared for this payload, if available.
  type: string;

  // Content chunks which constitute this payload; fixed-size responses have only one chunk.
  content: [ByteChunk];
}

// Specifies a custom HTTP method.
table CustomHttpMethod {
  // Specifies the HTTP method name.
  name: string;
}

// Specifies the HTTP method in standard or custom form, for an HTTP request.
union HttpMethodSpec { HttpMethod, CustomHttpMethod }

// Informational structure describing a version-agnostic HTTP request.
table HttpRequestInfo {
  // Specifies the HTTP method.
  method: HttpMethodSpec;

  // Specifies the HTTP request path.
  path: string;

  // Specifies "search" (query) parameters for this URL.
  search: string;

  // Specifies the HTTP headers constituent to the request.
  headers: HttpHeaders;
}

// Enumerates known HTTP authorization types.
enum HttpAuthorizationType : int {
  // Exotic or unknown HTTP authorization type; this indicates a forward-incompatible value and should not be used by
  // regular application code.
  HTTP_AUTHORIZATION_UNKNOWN = 0,

  // HTTP Basic authorization.
  BASIC = 1,

  // HTTP Digest authorization.
  DIGEST = 2,

  // HTTP Bearer authorization.
  BEARER = 3,
}

// Specifies a string value for authorization.
table TokenValue {
  // Specifies the token value.
  token: string;
}

// Specifies an HTTP username and password pair.
table UsernamePassword {
  // Specifies the HTTP authorization username-equivalent field.
  username: string;

  // Specifies the HTTP authorization password-equivalent field.
  password: string;
}

// Specifies a custom or exotic HTTP authorization type.
table CustomHttpAuthorizationType {
  // Specifies the custom HTTP authorization type.
  type: string;
}

// Specifies an HTTP authorization type.
union HttpAuthorizationTypeSpec { HttpAuthorizationType, CustomHttpAuthorizationType }

// Specifies the HTTP authorization value.
union HttpAuthorizationValue { TokenValue, UsernamePassword }

// Specifies HTTP authorization metadata, detected from a request (as applicable).
table HttpAuthorization {
  // Specifies a realm value, as applicable.
  realm: string;

  // Specifies the scheme for authorization.
  scheme: HttpAuthorizationTypeSpec;

  // Specifies the HTTP authorization value.
  value: HttpAuthorizationValue;
}

// Specifies authorization info returned in an HTTP response header.
table HttpAuthorizationInfo {
  // Encoded authorization info returned as part of a response.
  info: string;
}

// Specifies request metadata provided by an active HTTP edge proxy, as applicable.
table HttpEdgeInfo {
  // Specifies the HTTP edge proxy's IP address.
  ip: string;

  // Specifies the edge proxy datacenter or point-of-presence.
  datacenter: string;

  // Specifies the edge proxy datacenter's region or locale.
  region: string;
}

// Specifies metadata relating to proxied HTTP requests.
table ProxyMetadata {
  // Forwarded client in front of this machine.
  forwarded_for: string;

  // Forwarded host in front of this machine.
  forwarded_host: string;

  // Forwarded protocol in front of this machine.
  forwarded_proto: string;

  // Proxy authorization for a given interaction or connection.
  authorization: HttpAuthorization;
}

// Specifies transport-related HTTP connection or interaction metadata.
table TransportMetadata {
  // Specifies information about the underlying TCP connection.
  connection: ConnectionInfo;

  // Information relating to TLS (Transport Layer Security) for this connection.
  tls: elide.crypto.TlsConnectionInfo;
}

// Informational structure describing metadata known for a given HTTP interaction or cycle.
table HttpCommonMetadata {
  // Specifies the HTTP version.
  version: HttpVersion;

  // Metadata related to HTTP transport.
  transport: TransportMetadata;

  // Encoding for this HTTP payload/interaction.
  encoding: elide.data.Encoding;
}

// HTTP request-specific metadata.
table HttpRequestMetadata {
  // Specifies metadata common to both requests and responses.
  common: HttpCommonMetadata;

  // Metadata related to HTTP proxying.
  proxy: ProxyMetadata;

  // HTTP primary authorization present on this request, as applicable.
  authorization: HttpAuthorization;

  // Specifies request metadata provided by an active HTTP edge proxy, as applicable.
  edge: HttpEdgeInfo;
}

// HTTP response-specific metadata.
table HttpResponseMetadata {
  // Specifies metadata common to both requests and responses.
  common: HttpCommonMetadata;

  // Specifies authorization info metadata to include in the response.
  authorization_info: HttpAuthorizationInfo;
}

// HTTP request structure.
table HttpRequest {
  // Specifies metadata known or available about the HTTP request.
  metadata: HttpRequestMetadata;

  // Specifies the HTTP method.
  method: HttpMethodSpec;

  // Specifies the HTTP request path.
  path: string;

  // Query/search parameters attached to the URI.
  search: string;

  // Specifies the HTTP headers constituent to the request.
  headers: HttpHeaders;

  // Body payload, if specified/available.
  body: HttpBody;
}

// Enumerates HTTP status codes known to this protocol.
enum HttpStatus : int {
  // Unspecified HTTP status; this indicates a forward-incompatible value and should not be used by regular code.
  HTTP_STATUS_UNSPECIFIED = 0,

  // HTTP 100 Continue.
  CONTINUE = 100,

  // HTTP 200 Okay.
  OK = 200,

  // HTTP 201 Created.
  CREATED = 201,

  // HTTP 202 Accepted.
  ACCEPTED = 202,

  // HTTP 203 Non-Authoritative Information.
  NON_AUTHORITATIVE_INFORMATION = 203,

  // HTTP 204 No Content.
  NO_CONTENT = 204,

  // HTTP 205 Reset Content.
  RESET_CONTENT = 205,

  // HTTP 206 Partial Content.
  PARTIAL_CONTENT = 206,

  // HTTP 300 Multiple Choices.
  MULTIPLE_CHOICES = 300,

  // HTTP 301 Moved Permanently.
  MOVED_PERMANENTLY = 301,

  // HTTP 302 Found.
  FOUND = 302,

  // HTTP 303 See Other.
  SEE_OTHER = 303,

  // HTTP 304 Not Modified.
  NOT_MODIFIED = 304,

  // HTTP 305 Use Proxy.
  USE_PROXY = 305,

  // HTTP 307 Temporary Redirect.
  TEMPORARY_REDIRECT = 307,

  // HTTP 400 Bad Request.
  BAD_REQUEST = 400,

  // HTTP 401 Unauthorized.
  UNAUTHORIZED = 401,

  // HTTP 402 Payment Required.
  PAYMENT_REQUIRED = 402,

  // HTTP 403 Forbidden.
  FORBIDDEN = 403,

  // HTTP 404 Not Found.
  NOT_FOUND = 404,

  // HTTP 405 Method Not Allowed.
  METHOD_NOT_ALLOWED = 405,

  // HTTP 406 Not Acceptable.
  NOT_ACCEPTABLE = 406,

  // HTTP 407 Proxy Authentication Required.
  PROXY_AUTHENTICATION_REQUIRED = 407,

  // HTTP 408 Request Timeout.
  REQUEST_TIMEOUT = 408,

  // HTTP 409 Conflict.
  CONFLICT = 409,

  // HTTP 410 Gone.
  GONE = 410,

  // HTTP 411 Length Required.
  LENGTH_REQUIRED = 411,

  // HTTP 412 Precondition Failed.
  PRECONDITION_FAILED = 412,

  // HTTP 413 Request Entity Too Large.
  REQUEST_ENTITY_TOO_LARGE = 413,

  // HTTP 414 Request-URI Too Long.
  REQUEST_URI_TOO_LONG = 414,

  // HTTP 415 Unsupported Media Type.
  UNSUPPORTED_MEDIA_TYPE = 415,

  // HTTP 416 Requested Range Not Satisfiable.
  REQUESTED_RANGE_NOT_SATISFIABLE = 416,

  // HTTP 417 Expectation Failed.
  EXPECTATION_FAILED = 417,

  // HTTP 500 Internal Server Error.
  INTERNAL_SERVER_ERROR = 500,

  // HTTP 501 Not Implemented.
  NOT_IMPLEMENTED = 501,

  // HTTP 502 Bad Gateway.
  BAD_GATEWAY = 502,

  // HTTP 503 Service Unavailable.
  SERVICE_UNAVAILABLE = 503,

  // HTTP 504 Gateway Timeout.
  GATEWAY_TIMEOUT = 504,

  // HTTP 505 HTTP Version Not Supported.
  HTTP_VERSION_NOT_SUPPORTED = 505,

  // HTTP 511 Network Authentication Required.
  NETWORK_AUTHENTICATION_REQUIRED = 511,

  // HTTP 520 Unknown Error.
  UNKNOWN_ERROR = 520,
}

// Specifies a custom HTTP response status.
table CustomHttpStatus {
  // Specifies the HTTP status code.
  code: int;

  // Specifies the HTTP status message.
  message: string;
}

// Specifies the HTTP status in standard or custom form, for an HTTP response.
union HttpStatusSpec { HttpStatus, CustomHttpStatus }

// HTTP response structure.
table HttpResponse {
  // Specifies metadata known or available about the HTTP request.
  metadata: HttpResponseMetadata;

  // Specifies the HTTP status.
  status: HttpStatusSpec;

  // Specifies the HTTP headers constituent to the response.
  headers: HttpHeaders;

  // Body payload, if specified/available.
  body: HttpBody;

  // Specifies the HTTP trailers constituent to the response.
  headers: HttpTrailers;
}

// HTTP request and response cycle.
table HttpCycle {
  // Specifies the HTTP request.
  request: HttpRequest;

  // Specifies the HTTP response.
  response: HttpResponse;
}
