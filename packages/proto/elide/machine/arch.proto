/*
 * Copyright Â© 2022, The Elide Framework Authors. All rights reserved.
 *
 * The Gust/Elide framework and tools, and all associated source or object computer code, except where otherwise noted,
 * are licensed under the Zero Prosperity license, which is enclosed in this repository, in the file LICENSE.txt. Use of
 * this code in object or source form requires and implies consent and agreement to that license in principle and
 * practice. Source or object code not listing this header, or unless specified otherwise, remain the property of
 * Elide LLC and its suppliers, if any. The intellectual and technical concepts contained herein are proprietary to
 * Elide LLC and its suppliers and may be covered by U.S. and Foreign Patents, or patents in process, and are protected
 * by trade secret and copyright law. Dissemination of this information, or reproduction of this material, in any form,
 * is strictly forbidden except in adherence with assigned license requirements.
 */

syntax = "proto3";
package elide.machine;

option optimize_for = SPEED;
option cc_enable_arenas = true;
option java_multiple_files = true;
option java_string_check_utf8 = true;
option php_class_prefix = "ELDM";
option swift_prefix = "ElideMachine";
option objc_class_prefix = "ELDM";
option java_package = "tools.elide.machine";
option csharp_namespace = "Elide.Machine";
option go_package = "github.com/elide-tools/elide/machine";

// Enumerates known architecture families.
enum ArchFamily {
  // The architecture family is unknown, unrecognized, or backwards-incompatible.
  ARCH_FAMILY_UNKNOWN = 0;

  // The x86 family of architectures.
  X86 = 1;

  // The ARM family of architectures.
  ARM = 2;
}

// Enumerates known architectures.
enum Architecture {
  // The architecture is unknown, unrecognized, or backwards-incompatible.
  ARCHITECTURE_UNKNOWN = 0;

  // The x86 architecture (generic).
  X86_64 = 100;

  // The x86 architecture (v2).
  X86_64_V2 = 102;

  // The x86 architecture (v3).
  X86_64_V3 = 103;

  // The x86 architecture (v4).
  X86_64_V4 = 104;

  // ARM64 architecture (generic).
  ARM64 = 200;
}

// Enumerates extended instruction set features which may be detected or known to be supported on a given architecture.
enum ArchFeature {
  // The architecture feature is unknown, unrecognized, or backwards-incompatible.
  FEATURE_UNKNOWN = 0;

  // The architecture supports the SSE instruction set.
  SSE = 1;

  // The architecture supports the SSE2 instruction set.
  SSE2 = 2;

  // The architecture supports the SSE3 instruction set.
  SSE3 = 3;

  // The architecture supports the SSE4.1 instruction set.
  SSE4_1 = 4;

  // The architecture supports the SSE4.2 instruction set.
  SSE4_2 = 5;

  // The architecture supports the AVX instruction set.
  AVX = 6;

  // The architecture supports the AVX2 instruction set.
  AVX2 = 7;

  // The architecture supports the AVX512 instruction set.
  AVX512 = 8;

  // The architecture supports the NEON instruction set.
  NEON = 9;
}

// Describes architecture type and version information, along with extended support flags.
message ArchitectureInfo {
  // The family of the CPU architecture.
  ArchFamily family = 1;

  // The CPU architecture.
  Architecture arch = 2;

  // Vendor reported for the CPU.
  string vendor = 3;

  // Features detected (or known to be supported) for this architecture; optional field.
  repeated ArchFeature feature = 4;

  // Custom feature strings associated with this architecture or detected for support; optional field.
  repeated string custom_feature = 5;
}
