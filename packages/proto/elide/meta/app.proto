/*
 * Copyright Â© 2022, The Elide Framework Authors. All rights reserved.
 *
 * The Gust/Elide framework and tools, and all associated source or object computer code, except where otherwise noted,
 * are licensed under the Zero Prosperity license, which is enclosed in this repository, in the file LICENSE.txt. Use of
 * this code in object or source form requires and implies consent and agreement to that license in principle and
 * practice. Source or object code not listing this header, or unless specified otherwise, remain the property of
 * Elide LLC and its suppliers, if any. The intellectual and technical concepts contained herein are proprietary to
 * Elide LLC and its suppliers and may be covered by U.S. and Foreign Patents, or patents in process, and are protected
 * by trade secret and copyright law. Dissemination of this information, or reproduction of this material, in any form,
 * is strictly forbidden except in adherence with assigned license requirements.
 */

/*
 * Specifies Elide application configuration, which is embedded at build-time.
 */
syntax = "proto3";
package elide.meta;

option optimize_for = SPEED;
option cc_enable_arenas = true;
option java_multiple_files = true;
option java_string_check_utf8 = true;
option php_class_prefix = "ELD";
option swift_prefix = "Elide";
option objc_class_prefix = "ELD";
option java_package = "tools.elide.meta";
option csharp_namespace = "Elide.Meta";

import "google/protobuf/timestamp.proto";
import "elide/meta/syntax.proto";
import "elide/meta/guest.proto";


// Enumerates standard types of endpoints.
enum EndpointType {
  // Unspecified endpoint type.
  ENDPOINT_TYPE_UNSPECIFIED = 0;

  // Page endpoint type. Typically returns HTML and references assets.
  PAGE = 1;

  // Asset endpoint type. Typically used for CSS, JS, images.
  ASSET = 2;

  // API endpoint type. Typically returns JSON.
  API = 3;
}

// Enumerates supported/known HTTP methods for app endpoints.
enum EndpointMethods {
  // HTTP GET.
  GET = 0;

  // HTTP POST.
  POST = 1;

  // HTTP PUT.
  PUT = 2;

  // HTTP PATCH.
  PATCH = 3;

  // HTTP DELETE.
  DELETE = 5;
}

// Options which apply to a particular application endpoint.
message EndpointOptions {
  // Whether this endpoint requires stateful considerations.
  bool stateful = 1;

  // Whether this endpoint can be pre-compiled in an SSG context.
  bool precompilable = 2;
}

// Specifies information about a single endpoint which is part of an application.
message Endpoint {
  // Tag generated for an endpoint.
  string tag = 1;

  // Name given to an endpoint, if applicable; this parameter considers the method name as well as the handler name.
  optional string name = 2;

  // Type of endpoint detected or configured for this payload.
  EndpointType type = 3;

  // URL base for this endpoint (controller).
  string base = 4;

  // URL tail for this endpoint (method).
  optional string tail = 5;

  // Types accepted by this method.
  repeated string consumes = 6;

  // Types produced by this method.
  repeated string produces = 7;

  // HTTP methods supported by this endpoint.
  repeated EndpointMethods method = 8;

  // Options which apply to this endpoint.
  EndpointOptions options = 9;

  // Fully qualified path to the implementation class.
  string impl = 10;

  // Member function bound to this route on `impl`.
  string member = 11;

  // Value of the `name` parameter for the parent handler, if known.
  optional string handler = 12;
}

// Specifies build-time info which is enclosed in an application binary.
message BuildInfo {
  // Timestamp indicating when a build took place.
  google.protobuf.Timestamp stamp = 1;
}

// Specifies guest VM requirements for a given Elide application.
message GuestVM {
  // Syntax set enabled for this application, if any.
  repeated GuestLanguage language = 1;

  // Settings for each enabled guest language.
  GuestConfiguration config = 2;
}

// Info regarding an Elide application.
message AppInfo {
  // Version string of the application.
  string version = 1;

  // Name of the application, if known.
  optional string name = 2;

  // Map of endpoint tags to their info payloads for this application.
  map<string, Endpoint> endpoints = 3;
}

// Main application manifest for an app powered by Elide; carries info about the build that produced a given app binary,
// and application configuration.
message AppManifest {
  // App info/configuration.
  AppInfo app = 1;

  // Build info/configuration.
  BuildInfo build = 2;

  // Guest VM settings.
  GuestVM guest = 3;
}
