/*
 * Copyright Â© 2022, The Elide Framework Authors. All rights reserved.
 *
 * The Gust/Elide framework and tools, and all associated source or object computer code, except where otherwise noted,
 * are licensed under the Zero Prosperity license, which is enclosed in this repository, in the file LICENSE.txt. Use of
 * this code in object or source form requires and implies consent and agreement to that license in principle and
 * practice. Source or object code not listing this header, or unless specified otherwise, remain the property of
 * Elide LLC and its suppliers, if any. The intellectual and technical concepts contained herein are proprietary to
 * Elide LLC and its suppliers and may be covered by U.S. and Foreign Patents, or patents in process, and are protected
 * by trade secret and copyright law. Dissemination of this information, or reproduction of this material, in any form,
 * is strictly forbidden except in adherence with assigned license requirements.
 */

/**
 * Defines models related to semantic page metadata, which define such structure as the type/role of the page itself,
 * the organization it belongs to, and so on.
 */
syntax = "proto3";
package elide.page;

option optimize_for = SPEED;
option cc_enable_arenas = true;
option java_multiple_files = true;
option java_string_check_utf8 = true;
option java_outer_classname = "WebSemantics";
option php_class_prefix = "ELD";
option swift_prefix = "Elide";
option objc_class_prefix = "ELD";
option java_package = "tools.elide.page";
option csharp_namespace = "Elide.Page";
option go_package = "github.com/elide-tools/elide/page";

import "elide/page/media.proto";


// Enumerates known semantic types, which are further mapped to their implementation types in each
// semantic expression framework by implementing code.
enum Kind {
  // Default content kind: generic web page or web application.
  WEB_PAGE = 0;

  // Master products view: listing of multiple products. Produces impression events in analytics
  // for each section or product displayed to the user.
  MASTER = 1;

  // Detail product view: information about a single product or product group. Produces view events
  // in analytics for each product or product group displayed to the user.
  DETAIL = 2;
}


// Enumerates semantic metadata formats that are supported for rendering into the page.
enum Format {
  // Specifies generic metadata tags as a metadata format.
  GENERIC = 0;

  // Specifies OpenGraph tags as a metadata format.
  OPENGRAPH = 1;

  // Specifies JSON-LD as a metadata format.
  JSON_LD = 2;
}

// Defines the structure of top-level metadata with regard to semantic content, attached to a given
// web page for emission in meta tags in various formats.
message SemanticMetadata {
  // Defines the "kind" of content contained on a given page.
  Kind kind = 1;

  // Formats to render semantic metadata in.
  repeated Format format = 2;

  // Describes page-level semantic media.
  repeated MediaAsset media = 3;

  // Payloads describing the semantic metadata attached.
  oneof payload {
    // Semantic metadata content.
    string content = 4;
  }
}
