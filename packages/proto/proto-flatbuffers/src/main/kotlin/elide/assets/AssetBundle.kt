// automatically generated by the FlatBuffers compiler, do not modify

package elide.assets

import com.google.flatbuffers.Constants
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.Table
import java.nio.ByteBuffer
import java.nio.ByteOrder

@Suppress("unused")
class AssetBundle : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : AssetBundle {
        __init(_i, _bb)
        return this
    }
    val version : UInt
        get() {
            val o = __offset(4)
            return if(o != 0) bb.getInt(o + bb_pos).toUInt() else 0u
        }
    val settings : elide.assets.AssetBundle_.BundlerSettings? get() = settings(elide.assets.AssetBundle_.BundlerSettings())
    fun settings(obj: elide.assets.AssetBundle_.BundlerSettings) : elide.assets.AssetBundle_.BundlerSettings? {
        val o = __offset(6)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    val generated : google.protobuf.Timestamp? get() = generated(google.protobuf.Timestamp())
    fun generated(obj: google.protobuf.Timestamp) : google.protobuf.Timestamp? {
        val o = __offset(8)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    fun digest(j: Int) : UByte {
        val o = __offset(10)
        return if (o != 0) {
            bb.get(__vector(o) + j * 1).toUByte()
        } else {
            0u
        }
    }
    val digestLength : Int
        get() {
            val o = __offset(10); return if (o != 0) __vector_len(o) else 0
        }
    val digestAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun digestInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    fun styles(j: Int) : elide.assets.AssetBundle_.StylesEntry? = styles(elide.assets.AssetBundle_.StylesEntry(), j)
    fun styles(obj: elide.assets.AssetBundle_.StylesEntry, j: Int) : elide.assets.AssetBundle_.StylesEntry? {
        val o = __offset(12)
        return if (o != 0) {
            obj.__assign(__indirect(__vector(o) + j * 4), bb)
        } else {
            null
        }
    }
    val stylesLength : Int
        get() {
            val o = __offset(12); return if (o != 0) __vector_len(o) else 0
        }
    fun stylesByKey(key: String) : elide.assets.AssetBundle_.StylesEntry? {
        val o = __offset(12)
        return if (o != 0) {
            elide.assets.AssetBundle_.StylesEntry.__lookup_by_key(null, __vector(o), key, bb)
        } else {
            null
        }
    }
    fun stylesByKey(obj: elide.assets.AssetBundle_.StylesEntry, key: String) : elide.assets.AssetBundle_.StylesEntry? {
        val o = __offset(12)
        return if (o != 0) {
            elide.assets.AssetBundle_.StylesEntry.__lookup_by_key(obj, __vector(o), key, bb)
        } else {
            null
        }
    }
    fun scripts(j: Int) : elide.assets.AssetBundle_.ScriptsEntry? = scripts(elide.assets.AssetBundle_.ScriptsEntry(), j)
    fun scripts(obj: elide.assets.AssetBundle_.ScriptsEntry, j: Int) : elide.assets.AssetBundle_.ScriptsEntry? {
        val o = __offset(14)
        return if (o != 0) {
            obj.__assign(__indirect(__vector(o) + j * 4), bb)
        } else {
            null
        }
    }
    val scriptsLength : Int
        get() {
            val o = __offset(14); return if (o != 0) __vector_len(o) else 0
        }
    fun scriptsByKey(key: String) : elide.assets.AssetBundle_.ScriptsEntry? {
        val o = __offset(14)
        return if (o != 0) {
            elide.assets.AssetBundle_.ScriptsEntry.__lookup_by_key(null, __vector(o), key, bb)
        } else {
            null
        }
    }
    fun scriptsByKey(obj: elide.assets.AssetBundle_.ScriptsEntry, key: String) : elide.assets.AssetBundle_.ScriptsEntry? {
        val o = __offset(14)
        return if (o != 0) {
            elide.assets.AssetBundle_.ScriptsEntry.__lookup_by_key(obj, __vector(o), key, bb)
        } else {
            null
        }
    }
    fun generic(j: Int) : elide.assets.AssetBundle_.GenericEntry? = generic(elide.assets.AssetBundle_.GenericEntry(), j)
    fun generic(obj: elide.assets.AssetBundle_.GenericEntry, j: Int) : elide.assets.AssetBundle_.GenericEntry? {
        val o = __offset(16)
        return if (o != 0) {
            obj.__assign(__indirect(__vector(o) + j * 4), bb)
        } else {
            null
        }
    }
    val genericLength : Int
        get() {
            val o = __offset(16); return if (o != 0) __vector_len(o) else 0
        }
    fun genericByKey(key: String) : elide.assets.AssetBundle_.GenericEntry? {
        val o = __offset(16)
        return if (o != 0) {
            elide.assets.AssetBundle_.GenericEntry.__lookup_by_key(null, __vector(o), key, bb)
        } else {
            null
        }
    }
    fun genericByKey(obj: elide.assets.AssetBundle_.GenericEntry, key: String) : elide.assets.AssetBundle_.GenericEntry? {
        val o = __offset(16)
        return if (o != 0) {
            elide.assets.AssetBundle_.GenericEntry.__lookup_by_key(obj, __vector(o), key, bb)
        } else {
            null
        }
    }
    fun asset(j: Int) : elide.assets.AssetBundle_.AssetContent? = asset(elide.assets.AssetBundle_.AssetContent(), j)
    fun asset(obj: elide.assets.AssetBundle_.AssetContent, j: Int) : elide.assets.AssetBundle_.AssetContent? {
        val o = __offset(18)
        return if (o != 0) {
            obj.__assign(__indirect(__vector(o) + j * 4), bb)
        } else {
            null
        }
    }
    val assetLength : Int
        get() {
            val o = __offset(18); return if (o != 0) __vector_len(o) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_22_12_06()
        fun getRootAsAssetBundle(_bb: ByteBuffer): AssetBundle = getRootAsAssetBundle(_bb, AssetBundle())
        fun getRootAsAssetBundle(_bb: ByteBuffer, obj: AssetBundle): AssetBundle {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createAssetBundle(builder: FlatBufferBuilder, version: UInt, settingsOffset: Int, generatedOffset: Int, digestOffset: Int, stylesOffset: Int, scriptsOffset: Int, genericOffset: Int, assetOffset: Int) : Int {
            builder.startTable(8)
            addAsset(builder, assetOffset)
            addGeneric(builder, genericOffset)
            addScripts(builder, scriptsOffset)
            addStyles(builder, stylesOffset)
            addDigest(builder, digestOffset)
            addGenerated(builder, generatedOffset)
            addSettings(builder, settingsOffset)
            addVersion(builder, version)
            return endAssetBundle(builder)
        }
        fun startAssetBundle(builder: FlatBufferBuilder) = builder.startTable(8)
        fun addVersion(builder: FlatBufferBuilder, version: UInt) = builder.addInt(0, version.toInt(), 0)
        fun addSettings(builder: FlatBufferBuilder, settings: Int) = builder.addOffset(1, settings, 0)
        fun addGenerated(builder: FlatBufferBuilder, generated: Int) = builder.addOffset(2, generated, 0)
        fun addDigest(builder: FlatBufferBuilder, digest: Int) = builder.addOffset(3, digest, 0)
        fun createDigestVector(builder: FlatBufferBuilder, data: UByteArray) : Int {
            builder.startVector(1, data.size, 1)
            for (i in data.size - 1 downTo 0) {
                builder.addByte(data[i].toByte())
            }
            return builder.endVector()
        }
        fun startDigestVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(1, numElems, 1)
        fun addStyles(builder: FlatBufferBuilder, styles: Int) = builder.addOffset(4, styles, 0)
        fun createStylesVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startStylesVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addScripts(builder: FlatBufferBuilder, scripts: Int) = builder.addOffset(5, scripts, 0)
        fun createScriptsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startScriptsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addGeneric(builder: FlatBufferBuilder, generic: Int) = builder.addOffset(6, generic, 0)
        fun createGenericVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startGenericVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addAsset(builder: FlatBufferBuilder, asset: Int) = builder.addOffset(7, asset, 0)
        fun createAssetVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startAssetVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun endAssetBundle(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
