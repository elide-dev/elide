/*
 * Copyright (c) 2024 Elide Technologies, Inc.
 *
 * Licensed under the MIT license (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 *   https://opensource.org/license/mit/
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under the License.
 */

// automatically generated by the FlatBuffers compiler, do not modify

package elide.assets.AssetBundle_

import com.google.flatbuffers.Constants
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.Table
import java.nio.ByteBuffer
import java.nio.ByteOrder

@Suppress("unused")
class AssetDependencies : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : AssetDependencies {
        __init(_i, _bb)
        return this
    }
    fun direct(j: Int) : String? {
        val o = __offset(4)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val directLength : Int
        get() {
            val o = __offset(4); return if (o != 0) __vector_len(o) else 0
        }
    fun transitive(j: Int) : String? {
        val o = __offset(6)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val transitiveLength : Int
        get() {
            val o = __offset(6); return if (o != 0) __vector_len(o) else 0
        }
    val mask : elide.structs.BloomFilter? get() = mask(elide.structs.BloomFilter())
    fun mask(obj: elide.structs.BloomFilter) : elide.structs.BloomFilter? {
        val o = __offset(8)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_22_12_06()
        fun getRootAsAssetDependencies(_bb: ByteBuffer): AssetDependencies = getRootAsAssetDependencies(_bb, AssetDependencies())
        fun getRootAsAssetDependencies(_bb: ByteBuffer, obj: AssetDependencies): AssetDependencies {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createAssetDependencies(builder: FlatBufferBuilder, directOffset: Int, transitiveOffset: Int, maskOffset: Int) : Int {
            builder.startTable(3)
            addMask(builder, maskOffset)
            addTransitive(builder, transitiveOffset)
            addDirect(builder, directOffset)
            return endAssetDependencies(builder)
        }
        fun startAssetDependencies(builder: FlatBufferBuilder) = builder.startTable(3)
        fun addDirect(builder: FlatBufferBuilder, direct: Int) = builder.addOffset(0, direct, 0)
        fun createDirectVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startDirectVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addTransitive(builder: FlatBufferBuilder, transitive: Int) = builder.addOffset(1, transitive, 0)
        fun createTransitiveVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startTransitiveVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addMask(builder: FlatBufferBuilder, mask: Int) = builder.addOffset(2, mask, 0)
        fun endAssetDependencies(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
