// automatically generated by the FlatBuffers compiler, do not modify

package elide.assets.AssetBundle_

import com.google.flatbuffers.Constants
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.Table
import java.nio.ByteBuffer
import java.nio.ByteOrder

@Suppress("unused")
class GenericBundle : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : GenericBundle {
        __init(_i, _bb)
        return this
    }
    val module : String?
        get() {
            val o = __offset(4)
            return if (o != 0) __string(o + bb_pos) else null
        }
    val moduleAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun moduleInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    val filename : String?
        get() {
            val o = __offset(6)
            return if (o != 0) __string(o + bb_pos) else null
        }
    val filenameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun filenameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    val token : String?
        get() {
            val o = __offset(8)
            return if (o != 0) __string(o + bb_pos) else null
        }
    val tokenAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun tokenInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    fun variant(j: Int) : elide.data.CompressedData? = variant(elide.data.CompressedData(), j)
    fun variant(obj: elide.data.CompressedData, j: Int) : elide.data.CompressedData? {
        val o = __offset(10)
        return if (o != 0) {
            obj.__assign(__indirect(__vector(o) + j * 4), bb)
        } else {
            null
        }
    }
    val variantLength : Int
        get() {
            val o = __offset(10); return if (o != 0) __vector_len(o) else 0
        }
    val compressable : Boolean
        get() {
            val o = __offset(12)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    val cacheable : Boolean
        get() {
            val o = __offset(14)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    val external : Boolean
        get() {
            val o = __offset(16)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_22_12_06()
        fun getRootAsGenericBundle(_bb: ByteBuffer): GenericBundle = getRootAsGenericBundle(_bb, GenericBundle())
        fun getRootAsGenericBundle(_bb: ByteBuffer, obj: GenericBundle): GenericBundle {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createGenericBundle(builder: FlatBufferBuilder, moduleOffset: Int, filenameOffset: Int, tokenOffset: Int, variantOffset: Int, compressable: Boolean, cacheable: Boolean, external: Boolean) : Int {
            builder.startTable(7)
            addVariant(builder, variantOffset)
            addToken(builder, tokenOffset)
            addFilename(builder, filenameOffset)
            addModule(builder, moduleOffset)
            addExternal(builder, external)
            addCacheable(builder, cacheable)
            addCompressable(builder, compressable)
            return endGenericBundle(builder)
        }
        fun startGenericBundle(builder: FlatBufferBuilder) = builder.startTable(7)
        fun addModule(builder: FlatBufferBuilder, module: Int) = builder.addOffset(0, module, 0)
        fun addFilename(builder: FlatBufferBuilder, filename: Int) = builder.addOffset(1, filename, 0)
        fun addToken(builder: FlatBufferBuilder, token: Int) = builder.addOffset(2, token, 0)
        fun addVariant(builder: FlatBufferBuilder, variant: Int) = builder.addOffset(3, variant, 0)
        fun createVariantVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startVariantVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addCompressable(builder: FlatBufferBuilder, compressable: Boolean) = builder.addBoolean(4, compressable, false)
        fun addCacheable(builder: FlatBufferBuilder, cacheable: Boolean) = builder.addBoolean(5, cacheable, false)
        fun addExternal(builder: FlatBufferBuilder, external: Boolean) = builder.addBoolean(6, external, false)
        fun endGenericBundle(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
