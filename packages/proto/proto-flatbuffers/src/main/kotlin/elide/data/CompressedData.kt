// automatically generated by the FlatBuffers compiler, do not modify

package elide.data

import com.google.flatbuffers.Constants
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.Table
import java.nio.ByteBuffer
import java.nio.ByteOrder

@Suppress("unused")
class CompressedData : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : CompressedData {
        __init(_i, _bb)
        return this
    }
    val compression : Int
        get() {
            val o = __offset(4)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    val data : elide.data.DataContainer? get() = data(elide.data.DataContainer())
    fun data(obj: elide.data.DataContainer) : elide.data.DataContainer? {
        val o = __offset(6)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    val size : ULong
        get() {
            val o = __offset(8)
            return if(o != 0) bb.getLong(o + bb_pos).toULong() else 0UL
        }
    fun integrity(j: Int) : elide.data.DataFingerprint? = integrity(elide.data.DataFingerprint(), j)
    fun integrity(obj: elide.data.DataFingerprint, j: Int) : elide.data.DataFingerprint? {
        val o = __offset(10)
        return if (o != 0) {
            obj.__assign(__indirect(__vector(o) + j * 4), bb)
        } else {
            null
        }
    }
    val integrityLength : Int
        get() {
            val o = __offset(10); return if (o != 0) __vector_len(o) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_22_12_06()
        fun getRootAsCompressedData(_bb: ByteBuffer): CompressedData = getRootAsCompressedData(_bb, CompressedData())
        fun getRootAsCompressedData(_bb: ByteBuffer, obj: CompressedData): CompressedData {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createCompressedData(builder: FlatBufferBuilder, compression: Int, dataOffset: Int, size: ULong, integrityOffset: Int) : Int {
            builder.startTable(4)
            addSize(builder, size)
            addIntegrity(builder, integrityOffset)
            addData(builder, dataOffset)
            addCompression(builder, compression)
            return endCompressedData(builder)
        }
        fun startCompressedData(builder: FlatBufferBuilder) = builder.startTable(4)
        fun addCompression(builder: FlatBufferBuilder, compression: Int) = builder.addInt(0, compression, 0)
        fun addData(builder: FlatBufferBuilder, data: Int) = builder.addOffset(1, data, 0)
        fun addSize(builder: FlatBufferBuilder, size: ULong) = builder.addLong(2, size.toLong(), 0)
        fun addIntegrity(builder: FlatBufferBuilder, integrity: Int) = builder.addOffset(3, integrity, 0)
        fun createIntegrityVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startIntegrityVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun endCompressedData(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
