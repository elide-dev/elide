// automatically generated by the FlatBuffers compiler, do not modify

package elide.data.secrets

import com.google.flatbuffers.Constants
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.Table
import java.nio.ByteBuffer
import java.nio.ByteOrder

@Suppress("unused")
class Token : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : Token {
        __init(_i, _bb)
        return this
    }
    val value : elide.data.secrets.Token_.TokenValue? get() = value(elide.data.secrets.Token_.TokenValue())
    fun value(obj: elide.data.secrets.Token_.TokenValue) : elide.data.secrets.Token_.TokenValue? {
        val o = __offset(4)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    val fingerprint : elide.data.DataFingerprint? get() = fingerprint(elide.data.DataFingerprint())
    fun fingerprint(obj: elide.data.DataFingerprint) : elide.data.DataFingerprint? {
        val o = __offset(6)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_22_12_06()
        fun getRootAsToken(_bb: ByteBuffer): Token = getRootAsToken(_bb, Token())
        fun getRootAsToken(_bb: ByteBuffer, obj: Token): Token {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createToken(builder: FlatBufferBuilder, valueOffset: Int, fingerprintOffset: Int) : Int {
            builder.startTable(2)
            addFingerprint(builder, fingerprintOffset)
            addValue(builder, valueOffset)
            return endToken(builder)
        }
        fun startToken(builder: FlatBufferBuilder) = builder.startTable(2)
        fun addValue(builder: FlatBufferBuilder, value: Int) = builder.addOffset(0, value, 0)
        fun addFingerprint(builder: FlatBufferBuilder, fingerprint: Int) = builder.addOffset(1, fingerprint, 0)
        fun endToken(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
