/*
 * Copyright (c) 2024 Elide Technologies, Inc.
 *
 * Licensed under the MIT license (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 *   https://opensource.org/license/mit/
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under the License.
 */

// automatically generated by the FlatBuffers compiler, do not modify

package elide.meta

import com.google.flatbuffers.Constants
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.Table
import java.nio.ByteBuffer
import java.nio.ByteOrder

@Suppress("unused")
class Endpoint : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : Endpoint {
        __init(_i, _bb)
        return this
    }
    val tag : String?
        get() {
            val o = __offset(4)
            return if (o != 0) __string(o + bb_pos) else null
        }
    val tagAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun tagInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    val name : String?
        get() {
            val o = __offset(6)
            return if (o != 0) __string(o + bb_pos) else null
        }
    val nameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun nameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    val type : Int
        get() {
            val o = __offset(8)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    val base : String?
        get() {
            val o = __offset(10)
            return if (o != 0) __string(o + bb_pos) else null
        }
    val baseAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun baseInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    val tail : String?
        get() {
            val o = __offset(12)
            return if (o != 0) __string(o + bb_pos) else null
        }
    val tailAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun tailInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    fun consumes(j: Int) : String? {
        val o = __offset(14)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val consumesLength : Int
        get() {
            val o = __offset(14); return if (o != 0) __vector_len(o) else 0
        }
    fun produces(j: Int) : String? {
        val o = __offset(16)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val producesLength : Int
        get() {
            val o = __offset(16); return if (o != 0) __vector_len(o) else 0
        }
    fun method(j: Int) : Int {
        val o = __offset(18)
        return if (o != 0) {
            bb.getInt(__vector(o) + j * 4)
        } else {
            0
        }
    }
    val methodLength : Int
        get() {
            val o = __offset(18); return if (o != 0) __vector_len(o) else 0
        }
    val methodAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 4)
    fun methodInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 4)
    val options : elide.meta.EndpointOptions? get() = options(elide.meta.EndpointOptions())
    fun options(obj: elide.meta.EndpointOptions) : elide.meta.EndpointOptions? {
        val o = __offset(20)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    val impl : String?
        get() {
            val o = __offset(22)
            return if (o != 0) __string(o + bb_pos) else null
        }
    val implAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(22, 1)
    fun implInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 22, 1)
    val member : String?
        get() {
            val o = __offset(24)
            return if (o != 0) __string(o + bb_pos) else null
        }
    val memberAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(24, 1)
    fun memberInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 24, 1)
    val handler : String?
        get() {
            val o = __offset(26)
            return if (o != 0) __string(o + bb_pos) else null
        }
    val handlerAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(26, 1)
    fun handlerInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 26, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_22_12_06()
        fun getRootAsEndpoint(_bb: ByteBuffer): Endpoint = getRootAsEndpoint(_bb, Endpoint())
        fun getRootAsEndpoint(_bb: ByteBuffer, obj: Endpoint): Endpoint {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createEndpoint(builder: FlatBufferBuilder, tagOffset: Int, nameOffset: Int, type: Int, baseOffset: Int, tailOffset: Int, consumesOffset: Int, producesOffset: Int, methodOffset: Int, optionsOffset: Int, implOffset: Int, memberOffset: Int, handlerOffset: Int) : Int {
            builder.startTable(12)
            addHandler(builder, handlerOffset)
            addMember(builder, memberOffset)
            addImpl(builder, implOffset)
            addOptions(builder, optionsOffset)
            addMethod(builder, methodOffset)
            addProduces(builder, producesOffset)
            addConsumes(builder, consumesOffset)
            addTail(builder, tailOffset)
            addBase(builder, baseOffset)
            addType(builder, type)
            addName(builder, nameOffset)
            addTag(builder, tagOffset)
            return endEndpoint(builder)
        }
        fun startEndpoint(builder: FlatBufferBuilder) = builder.startTable(12)
        fun addTag(builder: FlatBufferBuilder, tag: Int) = builder.addOffset(0, tag, 0)
        fun addName(builder: FlatBufferBuilder, name: Int) = builder.addOffset(1, name, 0)
        fun addType(builder: FlatBufferBuilder, type: Int) = builder.addInt(2, type, 0)
        fun addBase(builder: FlatBufferBuilder, base: Int) = builder.addOffset(3, base, 0)
        fun addTail(builder: FlatBufferBuilder, tail: Int) = builder.addOffset(4, tail, 0)
        fun addConsumes(builder: FlatBufferBuilder, consumes: Int) = builder.addOffset(5, consumes, 0)
        fun createConsumesVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startConsumesVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addProduces(builder: FlatBufferBuilder, produces: Int) = builder.addOffset(6, produces, 0)
        fun createProducesVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startProducesVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addMethod(builder: FlatBufferBuilder, method: Int) = builder.addOffset(7, method, 0)
        fun createMethodVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addInt(data[i])
            }
            return builder.endVector()
        }
        fun startMethodVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addOptions(builder: FlatBufferBuilder, options: Int) = builder.addOffset(8, options, 0)
        fun addImpl(builder: FlatBufferBuilder, impl: Int) = builder.addOffset(9, impl, 0)
        fun addMember(builder: FlatBufferBuilder, member: Int) = builder.addOffset(10, member, 0)
        fun addHandler(builder: FlatBufferBuilder, handler: Int) = builder.addOffset(11, handler, 0)
        fun endEndpoint(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
