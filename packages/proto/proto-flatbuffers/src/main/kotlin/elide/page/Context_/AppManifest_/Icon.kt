/*
 * Copyright (c) 2024 Elide Technologies, Inc.
 *
 * Licensed under the MIT license (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 *   https://opensource.org/license/mit/
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under the License.
 */

// automatically generated by the FlatBuffers compiler, do not modify

package elide.page.Context_.AppManifest_

import com.google.flatbuffers.Constants
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.Table
import java.nio.ByteBuffer
import java.nio.ByteOrder

@Suppress("unused")
class Icon : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : Icon {
        __init(_i, _bb)
        return this
    }
    val src : webutil.html.types.TrustedResourceUrlProto? get() = src(webutil.html.types.TrustedResourceUrlProto())
    fun src(obj: webutil.html.types.TrustedResourceUrlProto) : webutil.html.types.TrustedResourceUrlProto? {
        val o = __offset(4)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    fun size(j: Int) : UInt {
        val o = __offset(6)
        return if (o != 0) {
            bb.getInt(__vector(o) + j * 4).toUInt()
        } else {
            0u
        }
    }
    val sizeLength : Int
        get() {
            val o = __offset(6); return if (o != 0) __vector_len(o) else 0
        }
    val sizeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 4)
    fun sizeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 4)
    val mimeType : String?
        get() {
            val o = __offset(8)
            return if (o != 0) __string(o + bb_pos) else null
        }
    val mimeTypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun mimeTypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_22_12_06()
        fun getRootAsIcon(_bb: ByteBuffer): Icon = getRootAsIcon(_bb, Icon())
        fun getRootAsIcon(_bb: ByteBuffer, obj: Icon): Icon {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createIcon(builder: FlatBufferBuilder, srcOffset: Int, sizeOffset: Int, mimeTypeOffset: Int) : Int {
            builder.startTable(3)
            addMimeType(builder, mimeTypeOffset)
            addSize(builder, sizeOffset)
            addSrc(builder, srcOffset)
            return endIcon(builder)
        }
        fun startIcon(builder: FlatBufferBuilder) = builder.startTable(3)
        fun addSrc(builder: FlatBufferBuilder, src: Int) = builder.addOffset(0, src, 0)
        fun addSize(builder: FlatBufferBuilder, size: Int) = builder.addOffset(1, size, 0)
        fun createSizeVector(builder: FlatBufferBuilder, data: UIntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addInt(data[i].toInt())
            }
            return builder.endVector()
        }
        fun startSizeVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addMimeType(builder: FlatBufferBuilder, mimeType: Int) = builder.addOffset(2, mimeType, 0)
        fun endIcon(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
