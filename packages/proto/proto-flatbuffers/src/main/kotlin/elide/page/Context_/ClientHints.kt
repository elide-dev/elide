/*
 * Copyright (c) 2023 Elide Ventures, LLC.
 *
 * Licensed under the MIT license (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 *   https://opensource.org/license/mit/
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under the License.
 */

// automatically generated by the FlatBuffers compiler, do not modify

package elide.page.Context_

import com.google.flatbuffers.Constants
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.Table
import java.nio.ByteBuffer
import java.nio.ByteOrder

@Suppress("unused")
class ClientHints : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : ClientHints {
        __init(_i, _bb)
        return this
    }
    fun supported(j: Int) : Int {
        val o = __offset(4)
        return if (o != 0) {
            bb.getInt(__vector(o) + j * 4)
        } else {
            0
        }
    }
    val supportedLength : Int
        get() {
            val o = __offset(4); return if (o != 0) __vector_len(o) else 0
        }
    val supportedAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 4)
    fun supportedInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 4)
    fun indicated(j: Int) : Int {
        val o = __offset(6)
        return if (o != 0) {
            bb.getInt(__vector(o) + j * 4)
        } else {
            0
        }
    }
    val indicatedLength : Int
        get() {
            val o = __offset(6); return if (o != 0) __vector_len(o) else 0
        }
    val indicatedAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 4)
    fun indicatedInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 4)
    val lifetime : ULong
        get() {
            val o = __offset(8)
            return if(o != 0) bb.getLong(o + bb_pos).toULong() else 0UL
        }
    val width : UInt
        get() {
            val o = __offset(10)
            return if(o != 0) bb.getInt(o + bb_pos).toUInt() else 0u
        }
    val viewportWidth : UInt
        get() {
            val o = __offset(12)
            return if(o != 0) bb.getInt(o + bb_pos).toUInt() else 0u
        }
    val devicePixelRatio : UInt
        get() {
            val o = __offset(14)
            return if(o != 0) bb.getInt(o + bb_pos).toUInt() else 0u
        }
    val roundTripTime : UInt
        get() {
            val o = __offset(16)
            return if(o != 0) bb.getInt(o + bb_pos).toUInt() else 0u
        }
    val downlink : Float
        get() {
            val o = __offset(18)
            return if(o != 0) bb.getFloat(o + bb_pos) else 0.0f
        }
    val effectiveConnectionType : Int
        get() {
            val o = __offset(20)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    val saveData : Boolean
        get() {
            val o = __offset(22)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    val deviceMemory : Float
        get() {
            val o = __offset(24)
            return if(o != 0) bb.getFloat(o + bb_pos) else 0.0f
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_22_12_06()
        fun getRootAsClientHints(_bb: ByteBuffer): ClientHints = getRootAsClientHints(_bb, ClientHints())
        fun getRootAsClientHints(_bb: ByteBuffer, obj: ClientHints): ClientHints {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createClientHints(builder: FlatBufferBuilder, supportedOffset: Int, indicatedOffset: Int, lifetime: ULong, width: UInt, viewportWidth: UInt, devicePixelRatio: UInt, roundTripTime: UInt, downlink: Float, effectiveConnectionType: Int, saveData: Boolean, deviceMemory: Float) : Int {
            builder.startTable(11)
            addLifetime(builder, lifetime)
            addDeviceMemory(builder, deviceMemory)
            addEffectiveConnectionType(builder, effectiveConnectionType)
            addDownlink(builder, downlink)
            addRoundTripTime(builder, roundTripTime)
            addDevicePixelRatio(builder, devicePixelRatio)
            addViewportWidth(builder, viewportWidth)
            addWidth(builder, width)
            addIndicated(builder, indicatedOffset)
            addSupported(builder, supportedOffset)
            addSaveData(builder, saveData)
            return endClientHints(builder)
        }
        fun startClientHints(builder: FlatBufferBuilder) = builder.startTable(11)
        fun addSupported(builder: FlatBufferBuilder, supported: Int) = builder.addOffset(0, supported, 0)
        fun createSupportedVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addInt(data[i])
            }
            return builder.endVector()
        }
        fun startSupportedVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addIndicated(builder: FlatBufferBuilder, indicated: Int) = builder.addOffset(1, indicated, 0)
        fun createIndicatedVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addInt(data[i])
            }
            return builder.endVector()
        }
        fun startIndicatedVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addLifetime(builder: FlatBufferBuilder, lifetime: ULong) = builder.addLong(2, lifetime.toLong(), 0)
        fun addWidth(builder: FlatBufferBuilder, width: UInt) = builder.addInt(3, width.toInt(), 0)
        fun addViewportWidth(builder: FlatBufferBuilder, viewportWidth: UInt) = builder.addInt(4, viewportWidth.toInt(), 0)
        fun addDevicePixelRatio(builder: FlatBufferBuilder, devicePixelRatio: UInt) = builder.addInt(5, devicePixelRatio.toInt(), 0)
        fun addRoundTripTime(builder: FlatBufferBuilder, roundTripTime: UInt) = builder.addInt(6, roundTripTime.toInt(), 0)
        fun addDownlink(builder: FlatBufferBuilder, downlink: Float) = builder.addFloat(7, downlink, 0.0)
        fun addEffectiveConnectionType(builder: FlatBufferBuilder, effectiveConnectionType: Int) = builder.addInt(8, effectiveConnectionType, 0)
        fun addSaveData(builder: FlatBufferBuilder, saveData: Boolean) = builder.addBoolean(9, saveData, false)
        fun addDeviceMemory(builder: FlatBufferBuilder, deviceMemory: Float) = builder.addFloat(10, deviceMemory, 0.0)
        fun endClientHints(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
