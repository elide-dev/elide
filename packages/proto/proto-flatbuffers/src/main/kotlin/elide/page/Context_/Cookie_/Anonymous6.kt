/*
 * Copyright (c) 2024 Elide Technologies, Inc.
 *
 * Licensed under the MIT license (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 *   https://opensource.org/license/mit/
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under the License.
 */

// automatically generated by the FlatBuffers compiler, do not modify

package elide.page.Context_.Cookie_

import com.google.flatbuffers.Constants
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.Table
import java.nio.ByteBuffer
import java.nio.ByteOrder

@Suppress("unused")
class Anonymous6 : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : Anonymous6 {
        __init(_i, _bb)
        return this
    }
    val immediateExpire : Boolean
        get() {
            val o = __offset(4)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    val absoluteExpire : google.protobuf.Timestamp? get() = absoluteExpire(google.protobuf.Timestamp())
    fun absoluteExpire(obj: google.protobuf.Timestamp) : google.protobuf.Timestamp? {
        val o = __offset(6)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    val relativeExpire : google.protobuf.Duration? get() = relativeExpire(google.protobuf.Duration())
    fun relativeExpire(obj: google.protobuf.Duration) : google.protobuf.Duration? {
        val o = __offset(8)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    val noExpire : Boolean
        get() {
            val o = __offset(10)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_22_12_06()
        fun getRootAsAnonymous6(_bb: ByteBuffer): Anonymous6 = getRootAsAnonymous6(_bb, Anonymous6())
        fun getRootAsAnonymous6(_bb: ByteBuffer, obj: Anonymous6): Anonymous6 {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createAnonymous6(builder: FlatBufferBuilder, immediateExpire: Boolean, absoluteExpireOffset: Int, relativeExpireOffset: Int, noExpire: Boolean) : Int {
            builder.startTable(4)
            addRelativeExpire(builder, relativeExpireOffset)
            addAbsoluteExpire(builder, absoluteExpireOffset)
            addNoExpire(builder, noExpire)
            addImmediateExpire(builder, immediateExpire)
            return endAnonymous6(builder)
        }
        fun startAnonymous6(builder: FlatBufferBuilder) = builder.startTable(4)
        fun addImmediateExpire(builder: FlatBufferBuilder, immediateExpire: Boolean) = builder.addBoolean(0, immediateExpire, false)
        fun addAbsoluteExpire(builder: FlatBufferBuilder, absoluteExpire: Int) = builder.addOffset(1, absoluteExpire, 0)
        fun addRelativeExpire(builder: FlatBufferBuilder, relativeExpire: Int) = builder.addOffset(2, relativeExpire, 0)
        fun addNoExpire(builder: FlatBufferBuilder, noExpire: Boolean) = builder.addBoolean(3, noExpire, false)
        fun endAnonymous6(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
