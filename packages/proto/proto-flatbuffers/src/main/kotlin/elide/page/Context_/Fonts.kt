/*
 * Copyright (c) 2024 Elide Technologies, Inc.
 *
 * Licensed under the MIT license (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 *   https://opensource.org/license/mit/
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under the License.
 */

// automatically generated by the FlatBuffers compiler, do not modify

package elide.page.Context_

import com.google.flatbuffers.Constants
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.Table
import java.nio.ByteBuffer
import java.nio.ByteOrder

@Suppress("unused")
class Fonts : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : Fonts {
        __init(_i, _bb)
        return this
    }
    fun package_(j: Int) : elide.page.Context_.Fonts_.FontPackage? = package_(elide.page.Context_.Fonts_.FontPackage(), j)
    fun package_(obj: elide.page.Context_.Fonts_.FontPackage, j: Int) : elide.page.Context_.Fonts_.FontPackage? {
        val o = __offset(4)
        return if (o != 0) {
            obj.__assign(__indirect(__vector(o) + j * 4), bb)
        } else {
            null
        }
    }
    val package_Length : Int
        get() {
            val o = __offset(4); return if (o != 0) __vector_len(o) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_22_12_06()
        fun getRootAsFonts(_bb: ByteBuffer): Fonts = getRootAsFonts(_bb, Fonts())
        fun getRootAsFonts(_bb: ByteBuffer, obj: Fonts): Fonts {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createFonts(builder: FlatBufferBuilder, package_Offset: Int) : Int {
            builder.startTable(1)
            addPackage_(builder, package_Offset)
            return endFonts(builder)
        }
        fun startFonts(builder: FlatBufferBuilder) = builder.startTable(1)
        fun addPackage_(builder: FlatBufferBuilder, package_: Int) = builder.addOffset(0, package_, 0)
        fun createPackageVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startPackageVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun endFonts(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
