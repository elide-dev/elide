/*
 * Copyright (c) 2024 Elide Technologies, Inc.
 *
 * Licensed under the MIT license (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 *   https://opensource.org/license/mit/
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under the License.
 */

// automatically generated by the FlatBuffers compiler, do not modify

package elide.page.Context_.Fonts_

import com.google.flatbuffers.Constants
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.Table
import java.nio.ByteBuffer
import java.nio.ByteOrder

@Suppress("unused")
class FontReference : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : FontReference {
        __init(_i, _bb)
        return this
    }
    val type : Int
        get() {
            val o = __offset(4)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    val format : Int
        get() {
            val o = __offset(6)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    val name : String?
        get() {
            val o = __offset(8)
            return if (o != 0) __string(o + bb_pos) else null
        }
    val nameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun nameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    val weight : String?
        get() {
            val o = __offset(10)
            return if (o != 0) __string(o + bb_pos) else null
        }
    val weightAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun weightInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    val variant : String?
        get() {
            val o = __offset(12)
            return if (o != 0) __string(o + bb_pos) else null
        }
    val variantAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun variantInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    val uri : webutil.html.types.TrustedResourceUrlProto? get() = uri(webutil.html.types.TrustedResourceUrlProto())
    fun uri(obj: webutil.html.types.TrustedResourceUrlProto) : webutil.html.types.TrustedResourceUrlProto? {
        val o = __offset(14)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    val prefetch : Boolean
        get() {
            val o = __offset(16)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    val preload : Boolean
        get() {
            val o = __offset(18)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    val push : Boolean
        get() {
            val o = __offset(20)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_22_12_06()
        fun getRootAsFontReference(_bb: ByteBuffer): FontReference = getRootAsFontReference(_bb, FontReference())
        fun getRootAsFontReference(_bb: ByteBuffer, obj: FontReference): FontReference {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createFontReference(builder: FlatBufferBuilder, type: Int, format: Int, nameOffset: Int, weightOffset: Int, variantOffset: Int, uriOffset: Int, prefetch: Boolean, preload: Boolean, push: Boolean) : Int {
            builder.startTable(9)
            addUri(builder, uriOffset)
            addVariant(builder, variantOffset)
            addWeight(builder, weightOffset)
            addName(builder, nameOffset)
            addFormat(builder, format)
            addType(builder, type)
            addPush(builder, push)
            addPreload(builder, preload)
            addPrefetch(builder, prefetch)
            return endFontReference(builder)
        }
        fun startFontReference(builder: FlatBufferBuilder) = builder.startTable(9)
        fun addType(builder: FlatBufferBuilder, type: Int) = builder.addInt(0, type, 0)
        fun addFormat(builder: FlatBufferBuilder, format: Int) = builder.addInt(1, format, 0)
        fun addName(builder: FlatBufferBuilder, name: Int) = builder.addOffset(2, name, 0)
        fun addWeight(builder: FlatBufferBuilder, weight: Int) = builder.addOffset(3, weight, 0)
        fun addVariant(builder: FlatBufferBuilder, variant: Int) = builder.addOffset(4, variant, 0)
        fun addUri(builder: FlatBufferBuilder, uri: Int) = builder.addOffset(5, uri, 0)
        fun addPrefetch(builder: FlatBufferBuilder, prefetch: Boolean) = builder.addBoolean(6, prefetch, false)
        fun addPreload(builder: FlatBufferBuilder, preload: Boolean) = builder.addBoolean(7, preload, false)
        fun addPush(builder: FlatBufferBuilder, push: Boolean) = builder.addBoolean(8, push, false)
        fun endFontReference(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
