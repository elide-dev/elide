/*
 * Copyright (c) 2024 Elide Technologies, Inc.
 *
 * Licensed under the MIT license (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 *   https://opensource.org/license/mit/
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under the License.
 */

// automatically generated by the FlatBuffers compiler, do not modify

package elide.page.Context_

import com.google.flatbuffers.Constants
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.Table
import java.nio.ByteBuffer
import java.nio.ByteOrder

@Suppress("unused")
class Metadata : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : Metadata {
        __init(_i, _bb)
        return this
    }
    val title : String?
        get() {
            val o = __offset(4)
            return if (o != 0) __string(o + bb_pos) else null
        }
    val titleAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun titleInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    val description : String?
        get() {
            val o = __offset(6)
            return if (o != 0) __string(o + bb_pos) else null
        }
    val descriptionAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun descriptionInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    fun keyword(j: Int) : String? {
        val o = __offset(8)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val keywordLength : Int
        get() {
            val o = __offset(8); return if (o != 0) __vector_len(o) else 0
        }
    val semantic : elide.page.SemanticMetadata? get() = semantic(elide.page.SemanticMetadata())
    fun semantic(obj: elide.page.SemanticMetadata) : elide.page.SemanticMetadata? {
        val o = __offset(10)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    val viewport : String?
        get() {
            val o = __offset(12)
            return if (o != 0) __string(o + bb_pos) else null
        }
    val viewportAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun viewportInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    val manifest : webutil.html.types.TrustedResourceUrlProto? get() = manifest(webutil.html.types.TrustedResourceUrlProto())
    fun manifest(obj: webutil.html.types.TrustedResourceUrlProto) : webutil.html.types.TrustedResourceUrlProto? {
        val o = __offset(14)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    val theme : String?
        get() {
            val o = __offset(16)
            return if (o != 0) __string(o + bb_pos) else null
        }
    val themeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun themeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    val touchIcon : String?
        get() {
            val o = __offset(18)
            return if (o != 0) __string(o + bb_pos) else null
        }
    val touchIconAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun touchIconInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    val startupImage : String?
        get() {
            val o = __offset(20)
            return if (o != 0) __string(o + bb_pos) else null
        }
    val startupImageAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(20, 1)
    fun startupImageInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 20, 1)
    fun link(j: Int) : elide.page.Context_.PageLink? = link(elide.page.Context_.PageLink(), j)
    fun link(obj: elide.page.Context_.PageLink, j: Int) : elide.page.Context_.PageLink? {
        val o = __offset(22)
        return if (o != 0) {
            obj.__assign(__indirect(__vector(o) + j * 4), bb)
        } else {
            null
        }
    }
    val linkLength : Int
        get() {
            val o = __offset(22); return if (o != 0) __vector_len(o) else 0
        }
    val language : elide.base.LanguageSpec? get() = language(elide.base.LanguageSpec())
    fun language(obj: elide.base.LanguageSpec) : elide.base.LanguageSpec? {
        val o = __offset(24)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    val gtmId : String?
        get() {
            val o = __offset(26)
            return if (o != 0) __string(o + bb_pos) else null
        }
    val gtmIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(26, 1)
    fun gtmIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 26, 1)
    val fbAppId : String?
        get() {
            val o = __offset(28)
            return if (o != 0) __string(o + bb_pos) else null
        }
    val fbAppIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(28, 1)
    fun fbAppIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 28, 1)
    val openGraph : elide.page.Context_.Metadata_.OpenGraph? get() = openGraph(elide.page.Context_.Metadata_.OpenGraph())
    fun openGraph(obj: elide.page.Context_.Metadata_.OpenGraph) : elide.page.Context_.Metadata_.OpenGraph? {
        val o = __offset(30)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    val robots : String?
        get() {
            val o = __offset(32)
            return if (o != 0) __string(o + bb_pos) else null
        }
    val robotsAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(32, 1)
    fun robotsInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 32, 1)
    val colorScheme : String?
        get() {
            val o = __offset(34)
            return if (o != 0) __string(o + bb_pos) else null
        }
    val colorSchemeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(34, 1)
    fun colorSchemeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 34, 1)
    fun prefix(j: Int) : elide.page.Context_.RDFPrefix? = prefix(elide.page.Context_.RDFPrefix(), j)
    fun prefix(obj: elide.page.Context_.RDFPrefix, j: Int) : elide.page.Context_.RDFPrefix? {
        val o = __offset(36)
        return if (o != 0) {
            obj.__assign(__indirect(__vector(o) + j * 4), bb)
        } else {
            null
        }
    }
    val prefixLength : Int
        get() {
            val o = __offset(36); return if (o != 0) __vector_len(o) else 0
        }
    val googlebot : String?
        get() {
            val o = __offset(38)
            return if (o != 0) __string(o + bb_pos) else null
        }
    val googlebotAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(38, 1)
    fun googlebotInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 38, 1)
    val rating : String?
        get() {
            val o = __offset(40)
            return if (o != 0) __string(o + bb_pos) else null
        }
    val ratingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(40, 1)
    fun ratingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 40, 1)
    val delegatePackage : String?
        get() {
            val o = __offset(42)
            return if (o != 0) __string(o + bb_pos) else null
        }
    val delegatePackageAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(42, 1)
    fun delegatePackageInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 42, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_22_12_06()
        fun getRootAsMetadata(_bb: ByteBuffer): Metadata = getRootAsMetadata(_bb, Metadata())
        fun getRootAsMetadata(_bb: ByteBuffer, obj: Metadata): Metadata {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createMetadata(builder: FlatBufferBuilder, titleOffset: Int, descriptionOffset: Int, keywordOffset: Int, semanticOffset: Int, viewportOffset: Int, manifestOffset: Int, themeOffset: Int, touchIconOffset: Int, startupImageOffset: Int, linkOffset: Int, languageOffset: Int, gtmIdOffset: Int, fbAppIdOffset: Int, openGraphOffset: Int, robotsOffset: Int, colorSchemeOffset: Int, prefixOffset: Int, googlebotOffset: Int, ratingOffset: Int, delegatePackageOffset: Int) : Int {
            builder.startTable(20)
            addDelegatePackage(builder, delegatePackageOffset)
            addRating(builder, ratingOffset)
            addGooglebot(builder, googlebotOffset)
            addPrefix(builder, prefixOffset)
            addColorScheme(builder, colorSchemeOffset)
            addRobots(builder, robotsOffset)
            addOpenGraph(builder, openGraphOffset)
            addFbAppId(builder, fbAppIdOffset)
            addGtmId(builder, gtmIdOffset)
            addLanguage(builder, languageOffset)
            addLink(builder, linkOffset)
            addStartupImage(builder, startupImageOffset)
            addTouchIcon(builder, touchIconOffset)
            addTheme(builder, themeOffset)
            addManifest(builder, manifestOffset)
            addViewport(builder, viewportOffset)
            addSemantic(builder, semanticOffset)
            addKeyword(builder, keywordOffset)
            addDescription(builder, descriptionOffset)
            addTitle(builder, titleOffset)
            return endMetadata(builder)
        }
        fun startMetadata(builder: FlatBufferBuilder) = builder.startTable(20)
        fun addTitle(builder: FlatBufferBuilder, title: Int) = builder.addOffset(0, title, 0)
        fun addDescription(builder: FlatBufferBuilder, description: Int) = builder.addOffset(1, description, 0)
        fun addKeyword(builder: FlatBufferBuilder, keyword: Int) = builder.addOffset(2, keyword, 0)
        fun createKeywordVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startKeywordVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addSemantic(builder: FlatBufferBuilder, semantic: Int) = builder.addOffset(3, semantic, 0)
        fun addViewport(builder: FlatBufferBuilder, viewport: Int) = builder.addOffset(4, viewport, 0)
        fun addManifest(builder: FlatBufferBuilder, manifest: Int) = builder.addOffset(5, manifest, 0)
        fun addTheme(builder: FlatBufferBuilder, theme: Int) = builder.addOffset(6, theme, 0)
        fun addTouchIcon(builder: FlatBufferBuilder, touchIcon: Int) = builder.addOffset(7, touchIcon, 0)
        fun addStartupImage(builder: FlatBufferBuilder, startupImage: Int) = builder.addOffset(8, startupImage, 0)
        fun addLink(builder: FlatBufferBuilder, link: Int) = builder.addOffset(9, link, 0)
        fun createLinkVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startLinkVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addLanguage(builder: FlatBufferBuilder, language: Int) = builder.addOffset(10, language, 0)
        fun addGtmId(builder: FlatBufferBuilder, gtmId: Int) = builder.addOffset(11, gtmId, 0)
        fun addFbAppId(builder: FlatBufferBuilder, fbAppId: Int) = builder.addOffset(12, fbAppId, 0)
        fun addOpenGraph(builder: FlatBufferBuilder, openGraph: Int) = builder.addOffset(13, openGraph, 0)
        fun addRobots(builder: FlatBufferBuilder, robots: Int) = builder.addOffset(14, robots, 0)
        fun addColorScheme(builder: FlatBufferBuilder, colorScheme: Int) = builder.addOffset(15, colorScheme, 0)
        fun addPrefix(builder: FlatBufferBuilder, prefix: Int) = builder.addOffset(16, prefix, 0)
        fun createPrefixVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startPrefixVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addGooglebot(builder: FlatBufferBuilder, googlebot: Int) = builder.addOffset(17, googlebot, 0)
        fun addRating(builder: FlatBufferBuilder, rating: Int) = builder.addOffset(18, rating, 0)
        fun addDelegatePackage(builder: FlatBufferBuilder, delegatePackage: Int) = builder.addOffset(19, delegatePackage, 0)
        fun endMetadata(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
