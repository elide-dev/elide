/*
 * Copyright (c) 2023 Elide Ventures, LLC.
 *
 * Licensed under the MIT license (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 *   https://opensource.org/license/mit/
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under the License.
 */

// automatically generated by the FlatBuffers compiler, do not modify

package elide.page.Context_.Metadata_.OpenGraph_

import com.google.flatbuffers.Constants
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.Table
import java.nio.ByteBuffer
import java.nio.ByteOrder

@Suppress("unused")
class OpenGraphImage : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : OpenGraphImage {
        __init(_i, _bb)
        return this
    }
    val uri : String?
        get() {
            val o = __offset(4)
            return if (o != 0) __string(o + bb_pos) else null
        }
    val uriAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun uriInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    val width : UInt
        get() {
            val o = __offset(6)
            return if(o != 0) bb.getInt(o + bb_pos).toUInt() else 0u
        }
    val height : UInt
        get() {
            val o = __offset(8)
            return if(o != 0) bb.getInt(o + bb_pos).toUInt() else 0u
        }
    val type : String?
        get() {
            val o = __offset(10)
            return if (o != 0) __string(o + bb_pos) else null
        }
    val typeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun typeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_22_12_06()
        fun getRootAsOpenGraphImage(_bb: ByteBuffer): OpenGraphImage = getRootAsOpenGraphImage(_bb, OpenGraphImage())
        fun getRootAsOpenGraphImage(_bb: ByteBuffer, obj: OpenGraphImage): OpenGraphImage {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createOpenGraphImage(builder: FlatBufferBuilder, uriOffset: Int, width: UInt, height: UInt, typeOffset: Int) : Int {
            builder.startTable(4)
            addType(builder, typeOffset)
            addHeight(builder, height)
            addWidth(builder, width)
            addUri(builder, uriOffset)
            return endOpenGraphImage(builder)
        }
        fun startOpenGraphImage(builder: FlatBufferBuilder) = builder.startTable(4)
        fun addUri(builder: FlatBufferBuilder, uri: Int) = builder.addOffset(0, uri, 0)
        fun addWidth(builder: FlatBufferBuilder, width: UInt) = builder.addInt(1, width.toInt(), 0)
        fun addHeight(builder: FlatBufferBuilder, height: UInt) = builder.addInt(2, height.toInt(), 0)
        fun addType(builder: FlatBufferBuilder, type: Int) = builder.addOffset(3, type, 0)
        fun endOpenGraphImage(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
