// automatically generated by the FlatBuffers compiler, do not modify

package elide.page.Context_.Metadata_

import com.google.flatbuffers.Constants
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.Table
import java.nio.ByteBuffer
import java.nio.ByteOrder

@Suppress("unused")
class Twitter : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : Twitter {
        __init(_i, _bb)
        return this
    }
    val siteName : String?
        get() {
            val o = __offset(4)
            return if (o != 0) __string(o + bb_pos) else null
        }
    val siteNameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun siteNameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    val title : String?
        get() {
            val o = __offset(6)
            return if (o != 0) __string(o + bb_pos) else null
        }
    val titleAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun titleInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    val description : String?
        get() {
            val o = __offset(8)
            return if (o != 0) __string(o + bb_pos) else null
        }
    val descriptionAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun descriptionInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    val locale : elide.base.LanguageSpec? get() = locale(elide.base.LanguageSpec())
    fun locale(obj: elide.base.LanguageSpec) : elide.base.LanguageSpec? {
        val o = __offset(10)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    val card : String?
        get() {
            val o = __offset(12)
            return if (o != 0) __string(o + bb_pos) else null
        }
    val cardAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun cardInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    val image : String?
        get() {
            val o = __offset(14)
            return if (o != 0) __string(o + bb_pos) else null
        }
    val imageAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun imageInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    val url : String?
        get() {
            val o = __offset(16)
            return if (o != 0) __string(o + bb_pos) else null
        }
    val urlAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun urlInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    val creator : String?
        get() {
            val o = __offset(18)
            return if (o != 0) __string(o + bb_pos) else null
        }
    val creatorAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun creatorInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_22_12_06()
        fun getRootAsTwitter(_bb: ByteBuffer): Twitter = getRootAsTwitter(_bb, Twitter())
        fun getRootAsTwitter(_bb: ByteBuffer, obj: Twitter): Twitter {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createTwitter(builder: FlatBufferBuilder, siteNameOffset: Int, titleOffset: Int, descriptionOffset: Int, localeOffset: Int, cardOffset: Int, imageOffset: Int, urlOffset: Int, creatorOffset: Int) : Int {
            builder.startTable(8)
            addCreator(builder, creatorOffset)
            addUrl(builder, urlOffset)
            addImage(builder, imageOffset)
            addCard(builder, cardOffset)
            addLocale(builder, localeOffset)
            addDescription(builder, descriptionOffset)
            addTitle(builder, titleOffset)
            addSiteName(builder, siteNameOffset)
            return endTwitter(builder)
        }
        fun startTwitter(builder: FlatBufferBuilder) = builder.startTable(8)
        fun addSiteName(builder: FlatBufferBuilder, siteName: Int) = builder.addOffset(0, siteName, 0)
        fun addTitle(builder: FlatBufferBuilder, title: Int) = builder.addOffset(1, title, 0)
        fun addDescription(builder: FlatBufferBuilder, description: Int) = builder.addOffset(2, description, 0)
        fun addLocale(builder: FlatBufferBuilder, locale: Int) = builder.addOffset(3, locale, 0)
        fun addCard(builder: FlatBufferBuilder, card: Int) = builder.addOffset(4, card, 0)
        fun addImage(builder: FlatBufferBuilder, image: Int) = builder.addOffset(5, image, 0)
        fun addUrl(builder: FlatBufferBuilder, url: Int) = builder.addOffset(6, url, 0)
        fun addCreator(builder: FlatBufferBuilder, creator: Int) = builder.addOffset(7, creator, 0)
        fun endTwitter(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
