/*
 * Copyright (c) 2023 Elide Ventures, LLC.
 *
 * Licensed under the MIT license (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 *   https://opensource.org/license/mit/
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under the License.
 */

// automatically generated by the FlatBuffers compiler, do not modify

package elide.page.Context_

import com.google.flatbuffers.Constants
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.Table
import java.nio.ByteBuffer
import java.nio.ByteOrder

@Suppress("unused")
class Scripts : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : Scripts {
        __init(_i, _bb)
        return this
    }
    val lifted : webutil.html.types.SafeScriptProto? get() = lifted(webutil.html.types.SafeScriptProto())
    fun lifted(obj: webutil.html.types.SafeScriptProto) : webutil.html.types.SafeScriptProto? {
        val o = __offset(4)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    fun link(j: Int) : elide.page.Context_.Scripts_.JavaScript? = link(elide.page.Context_.Scripts_.JavaScript(), j)
    fun link(obj: elide.page.Context_.Scripts_.JavaScript, j: Int) : elide.page.Context_.Scripts_.JavaScript? {
        val o = __offset(6)
        return if (o != 0) {
            obj.__assign(__indirect(__vector(o) + j * 4), bb)
        } else {
            null
        }
    }
    val linkLength : Int
        get() {
            val o = __offset(6); return if (o != 0) __vector_len(o) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_22_12_06()
        fun getRootAsScripts(_bb: ByteBuffer): Scripts = getRootAsScripts(_bb, Scripts())
        fun getRootAsScripts(_bb: ByteBuffer, obj: Scripts): Scripts {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createScripts(builder: FlatBufferBuilder, liftedOffset: Int, linkOffset: Int) : Int {
            builder.startTable(2)
            addLink(builder, linkOffset)
            addLifted(builder, liftedOffset)
            return endScripts(builder)
        }
        fun startScripts(builder: FlatBufferBuilder) = builder.startTable(2)
        fun addLifted(builder: FlatBufferBuilder, lifted: Int) = builder.addOffset(0, lifted, 0)
        fun addLink(builder: FlatBufferBuilder, link: Int) = builder.addOffset(1, link, 0)
        fun createLinkVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startLinkVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun endScripts(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
