/*
 * Copyright (c) 2024 Elide Technologies, Inc.
 *
 * Licensed under the MIT license (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 *   https://opensource.org/license/mit/
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under the License.
 */

// automatically generated by the FlatBuffers compiler, do not modify

package elide.page.MediaAsset_

import com.google.flatbuffers.Constants
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.Table
import java.nio.ByteBuffer
import java.nio.ByteOrder

@Suppress("unused")
class Anonymous1 : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : Anonymous1 {
        __init(_i, _bb)
        return this
    }
    val link : elide.page.MediaAsset_.Link? get() = link(elide.page.MediaAsset_.Link())
    fun link(obj: elide.page.MediaAsset_.Link) : elide.page.MediaAsset_.Link? {
        val o = __offset(4)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    val image : elide.page.MediaAsset_.Image? get() = image(elide.page.MediaAsset_.Image())
    fun image(obj: elide.page.MediaAsset_.Image) : elide.page.MediaAsset_.Image? {
        val o = __offset(6)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    val video : elide.page.MediaAsset_.Video? get() = video(elide.page.MediaAsset_.Video())
    fun video(obj: elide.page.MediaAsset_.Video) : elide.page.MediaAsset_.Video? {
        val o = __offset(8)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_22_12_06()
        fun getRootAsAnonymous1(_bb: ByteBuffer): Anonymous1 = getRootAsAnonymous1(_bb, Anonymous1())
        fun getRootAsAnonymous1(_bb: ByteBuffer, obj: Anonymous1): Anonymous1 {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createAnonymous1(builder: FlatBufferBuilder, linkOffset: Int, imageOffset: Int, videoOffset: Int) : Int {
            builder.startTable(3)
            addVideo(builder, videoOffset)
            addImage(builder, imageOffset)
            addLink(builder, linkOffset)
            return endAnonymous1(builder)
        }
        fun startAnonymous1(builder: FlatBufferBuilder) = builder.startTable(3)
        fun addLink(builder: FlatBufferBuilder, link: Int) = builder.addOffset(0, link, 0)
        fun addImage(builder: FlatBufferBuilder, image: Int) = builder.addOffset(1, image, 0)
        fun addVideo(builder: FlatBufferBuilder, video: Int) = builder.addOffset(2, video, 0)
        fun endAnonymous1(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
