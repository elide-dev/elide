/*
 * Copyright (c) 2024 Elide Technologies, Inc.
 *
 * Licensed under the MIT license (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 *   https://opensource.org/license/mit/
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under the License.
 */

// automatically generated by the FlatBuffers compiler, do not modify

package elide.page.MediaAsset_.Document_

@Suppress("unused")
class DocumentType private constructor() {
    companion object {
        const val GENERICDOCUMENT: Int = 0
        const val TEXTPLAIN: Int = 1
        const val TEXTRICH: Int = 2
        const val TEXTMARKDOWN: Int = 3
        const val TEXTHTML: Int = 4
        const val TEXTCSV: Int = 5
        const val PDF: Int = 6
        const val WORDDOC: Int = 7
        const val WORDDOCX: Int = 8
        val names : Array<String> = arrayOf("GENERIC_DOCUMENT", "TEXT_PLAIN", "TEXT_RICH", "TEXT_MARKDOWN", "TEXT_HTML", "TEXT_CSV", "PDF", "WORD_DOC", "WORD_DOCX")
        fun name(e: Int) : String = names[e]
    }
}
