// automatically generated by the FlatBuffers compiler, do not modify

package elide.vfs

import java.nio.*
import kotlin.math.sign
import com.google.flatbuffers.*

@Suppress("unused")
class GuestVFSPolicy : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : GuestVFSPolicy {
        __init(_i, _bb)
        return this
    }
    val policy : elide.vfs.GuestVFSPolicy_.PolicySetting? get() = policy(elide.vfs.GuestVFSPolicy_.PolicySetting())
    fun policy(obj: elide.vfs.GuestVFSPolicy_.PolicySetting) : elide.vfs.GuestVFSPolicy_.PolicySetting? {
        val o = __offset(4)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_22_12_06()
        fun getRootAsGuestVFSPolicy(_bb: ByteBuffer): GuestVFSPolicy = getRootAsGuestVFSPolicy(_bb, GuestVFSPolicy())
        fun getRootAsGuestVFSPolicy(_bb: ByteBuffer, obj: GuestVFSPolicy): GuestVFSPolicy {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createGuestVFSPolicy(builder: FlatBufferBuilder, policyOffset: Int) : Int {
            builder.startTable(1)
            addPolicy(builder, policyOffset)
            return endGuestVFSPolicy(builder)
        }
        fun startGuestVFSPolicy(builder: FlatBufferBuilder) = builder.startTable(1)
        fun addPolicy(builder: FlatBufferBuilder, policy: Int) = builder.addOffset(0, policy, 0)
        fun endGuestVFSPolicy(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
