/*
 * Copyright (c) 2023 Elide Ventures, LLC.
 *
 * Licensed under the MIT license (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 *   https://opensource.org/license/mit/
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under the License.
 */

// automatically generated by the FlatBuffers compiler, do not modify

package elide.vfs.GuestVFSPolicy_

import com.google.flatbuffers.Constants
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.Table
import java.nio.ByteBuffer
import java.nio.ByteOrder

@Suppress("unused")
class PolicySetting : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : PolicySetting {
        __init(_i, _bb)
        return this
    }
    val allowAll : Boolean
        get() {
            val o = __offset(4)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    val guest : elide.vfs.GuestVFSPolicy_.VirtualIOPolicy? get() = guest(elide.vfs.GuestVFSPolicy_.VirtualIOPolicy())
    fun guest(obj: elide.vfs.GuestVFSPolicy_.VirtualIOPolicy) : elide.vfs.GuestVFSPolicy_.VirtualIOPolicy? {
        val o = __offset(6)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    val host : elide.vfs.GuestVFSPolicy_.HostIOPolicy? get() = host(elide.vfs.GuestVFSPolicy_.HostIOPolicy())
    fun host(obj: elide.vfs.GuestVFSPolicy_.HostIOPolicy) : elide.vfs.GuestVFSPolicy_.HostIOPolicy? {
        val o = __offset(8)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    val combined : elide.vfs.GuestVFSPolicy_.CombinedIOPolicy? get() = combined(elide.vfs.GuestVFSPolicy_.CombinedIOPolicy())
    fun combined(obj: elide.vfs.GuestVFSPolicy_.CombinedIOPolicy) : elide.vfs.GuestVFSPolicy_.CombinedIOPolicy? {
        val o = __offset(10)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_22_12_06()
        fun getRootAsPolicySetting(_bb: ByteBuffer): PolicySetting = getRootAsPolicySetting(_bb, PolicySetting())
        fun getRootAsPolicySetting(_bb: ByteBuffer, obj: PolicySetting): PolicySetting {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createPolicySetting(builder: FlatBufferBuilder, allowAll: Boolean, guestOffset: Int, hostOffset: Int, combinedOffset: Int) : Int {
            builder.startTable(4)
            addCombined(builder, combinedOffset)
            addHost(builder, hostOffset)
            addGuest(builder, guestOffset)
            addAllowAll(builder, allowAll)
            return endPolicySetting(builder)
        }
        fun startPolicySetting(builder: FlatBufferBuilder) = builder.startTable(4)
        fun addAllowAll(builder: FlatBufferBuilder, allowAll: Boolean) = builder.addBoolean(0, allowAll, false)
        fun addGuest(builder: FlatBufferBuilder, guest: Int) = builder.addOffset(1, guest, 0)
        fun addHost(builder: FlatBufferBuilder, host: Int) = builder.addOffset(2, host, 0)
        fun addCombined(builder: FlatBufferBuilder, combined: Int) = builder.addOffset(3, combined, 0)
        fun endPolicySetting(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
