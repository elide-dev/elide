/*
 * Copyright (c) 2024 Elide Technologies, Inc.
 *
 * Licensed under the MIT license (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 *   https://opensource.org/license/mit/
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under the License.
 */

// automatically generated by the FlatBuffers compiler, do not modify

package elide.vfs

import com.google.flatbuffers.Constants
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.Table
import java.nio.ByteBuffer
import java.nio.ByteOrder

@Suppress("unused")
class TreeEntry : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : TreeEntry {
        __init(_i, _bb)
        return this
    }
    val parent : elide.vfs.TreeEntry? get() = parent(elide.vfs.TreeEntry())
    fun parent(obj: elide.vfs.TreeEntry) : elide.vfs.TreeEntry? {
        val o = __offset(4)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    val entry : elide.vfs.TreeEntry_.TreeEntrySpec? get() = entry(elide.vfs.TreeEntry_.TreeEntrySpec())
    fun entry(obj: elide.vfs.TreeEntry_.TreeEntrySpec) : elide.vfs.TreeEntry_.TreeEntrySpec? {
        val o = __offset(6)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_22_12_06()
        fun getRootAsTreeEntry(_bb: ByteBuffer): TreeEntry = getRootAsTreeEntry(_bb, TreeEntry())
        fun getRootAsTreeEntry(_bb: ByteBuffer, obj: TreeEntry): TreeEntry {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createTreeEntry(builder: FlatBufferBuilder, parentOffset: Int, entryOffset: Int) : Int {
            builder.startTable(2)
            addEntry(builder, entryOffset)
            addParent(builder, parentOffset)
            return endTreeEntry(builder)
        }
        fun startTreeEntry(builder: FlatBufferBuilder) = builder.startTable(2)
        fun addParent(builder: FlatBufferBuilder, parent: Int) = builder.addOffset(0, parent, 0)
        fun addEntry(builder: FlatBufferBuilder, entry: Int) = builder.addOffset(1, entry, 0)
        fun endTreeEntry(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
