public abstract class elide/runtime/runner/AbstractRunner : elide/runtime/runner/Runner {
	public fun <init> (Ljava/lang/String;)V
	public fun accept (Lelide/runtime/runner/RunnerJob;)V
	public synthetic fun accept (Ljava/lang/Object;)V
	public fun await (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun close ()V
	public fun configure (Lorg/graalvm/polyglot/Context;Lkotlin/coroutines/CoroutineContext;)V
	protected final fun err (Ljava/lang/String;ILjava/lang/Throwable;)Lelide/runtime/runner/RunnerOutcome;
	public static synthetic fun err$default (Lelide/runtime/runner/AbstractRunner;Ljava/lang/String;ILjava/lang/Throwable;ILjava/lang/Object;)Lelide/runtime/runner/RunnerOutcome;
	public fun getInfo ()Lelide/runtime/runner/RunnerInfo;
	protected abstract fun invoke (Lelide/runtime/runner/RunnerExecution;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun invoke (Lelide/runtime/runner/RunnerJob;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun poll ()Lkotlinx/coroutines/Deferred;
	protected final fun success ()Lelide/runtime/runner/RunnerOutcome;
}

public abstract class elide/runtime/runner/AbstractRunnerJob : elide/runtime/runner/RunnerJob {
	public fun <init> ()V
	public fun <init> (Lelide/tooling/Arguments;)V
	public synthetic fun <init> (Lelide/tooling/Arguments;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun configure (Lelide/tooling/Inputs;Lelide/tooling/Outputs;Lelide/tooling/Arguments;)V
	public static synthetic fun configure$default (Lelide/runtime/runner/AbstractRunnerJob;Lelide/tooling/Inputs;Lelide/tooling/Outputs;Lelide/tooling/Arguments;ILjava/lang/Object;)V
	public fun getArguments ()Lelide/tooling/Arguments;
	public fun getInputs ()Lelide/tooling/Inputs;
	public fun getOutputs ()Lelide/tooling/Outputs;
}

public final class elide/runtime/runner/AbstractRunnerJob$NoInputs : elide/tooling/Inputs$None {
	public static final field INSTANCE Lelide/runtime/runner/AbstractRunnerJob$NoInputs;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class elide/runtime/runner/AbstractRunnerJob$NoOutputs : elide/tooling/Outputs$None {
	public static final field INSTANCE Lelide/runtime/runner/AbstractRunnerJob$NoOutputs;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public abstract interface class elide/runtime/runner/JvmRunner : elide/runtime/runner/Runner$BytecodeRunner {
	public static final field Companion Lelide/runtime/runner/JvmRunner$Companion;
	public static fun create (Lkotlin/Pair;Lelide/tooling/Classpath;Lelide/tooling/Modulepath;Lelide/tooling/Arguments;Lelide/tooling/Environment;)Lelide/runtime/runner/JvmRunner$JvmRunnerJob;
	public static fun of (Ljava/lang/String;Lelide/tooling/Classpath;Lelide/tooling/Arguments;Lelide/tooling/Environment;)Lelide/runtime/runner/JvmRunner$JvmRunnerJob;
}

public final class elide/runtime/runner/JvmRunner$Companion {
	public final fun create (Lkotlin/Pair;Lelide/tooling/Classpath;Lelide/tooling/Modulepath;Lelide/tooling/Arguments;Lelide/tooling/Environment;)Lelide/runtime/runner/JvmRunner$JvmRunnerJob;
	public static synthetic fun create$default (Lelide/runtime/runner/JvmRunner$Companion;Lkotlin/Pair;Lelide/tooling/Classpath;Lelide/tooling/Modulepath;Lelide/tooling/Arguments;Lelide/tooling/Environment;ILjava/lang/Object;)Lelide/runtime/runner/JvmRunner$JvmRunnerJob;
	public final fun of (Ljava/lang/String;Lelide/tooling/Classpath;Lelide/tooling/Arguments;Lelide/tooling/Environment;)Lelide/runtime/runner/JvmRunner$JvmRunnerJob;
	public static synthetic fun of$default (Lelide/runtime/runner/JvmRunner$Companion;Ljava/lang/String;Lelide/tooling/Classpath;Lelide/tooling/Arguments;Lelide/tooling/Environment;ILjava/lang/Object;)Lelide/runtime/runner/JvmRunner$JvmRunnerJob;
}

public final class elide/runtime/runner/JvmRunner$JvmRunnerJob : elide/runtime/runner/AbstractRunnerJob, elide/runtime/runner/RunnerJob$RunBytecode {
	public final fun getClasspath ()Lelide/tooling/Classpath;
	public final fun getEnvironment ()Lelide/tooling/Environment;
	public final fun getJvmArgs ()Lelide/tooling/Arguments;
	public final fun getMainClass ()Ljava/lang/String;
	public final fun getMainModule ()Ljava/util/Optional;
	public final fun getModulepath ()Lelide/tooling/Modulepath;
}

public abstract interface class elide/runtime/runner/Runner : java/lang/AutoCloseable, java/util/function/Consumer {
	public abstract fun await (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun configure (Lorg/graalvm/polyglot/Context;Lkotlin/coroutines/CoroutineContext;)V
	public fun eligible (Lelide/runtime/runner/JvmRunner$JvmRunnerJob;)Z
	public abstract fun getInfo ()Lelide/runtime/runner/RunnerInfo;
	public abstract fun invoke (Lelide/runtime/runner/RunnerJob;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun poll ()Lkotlinx/coroutines/Deferred;
}

public abstract interface class elide/runtime/runner/Runner$BytecodeRunner : elide/runtime/runner/Runner {
}

public abstract interface class elide/runtime/runner/Runner$NativeRunner : elide/runtime/runner/Runner {
}

public abstract interface class elide/runtime/runner/Runner$SourceRunner : elide/runtime/runner/Runner {
}

public abstract interface class elide/runtime/runner/RunnerExecution {
	public abstract fun getContext ()Lorg/graalvm/polyglot/Context;
	public abstract fun getJob ()Lelide/runtime/runner/RunnerJob;
}

public abstract interface class elide/runtime/runner/RunnerInfo {
	public abstract fun getExits ()Z
	public abstract fun getName ()Ljava/lang/String;
}

public abstract interface class elide/runtime/runner/RunnerJob {
	public abstract fun getArguments ()Lelide/tooling/Arguments;
	public abstract fun getInputs ()Lelide/tooling/Inputs;
	public abstract fun getOutputs ()Lelide/tooling/Outputs;
}

public abstract interface class elide/runtime/runner/RunnerJob$RunBytecode : elide/runtime/runner/RunnerJob {
}

public abstract interface class elide/runtime/runner/RunnerJob$RunNative : elide/runtime/runner/RunnerJob {
}

public abstract interface class elide/runtime/runner/RunnerJob$RunSources : elide/runtime/runner/RunnerJob {
}

public abstract interface class elide/runtime/runner/RunnerOutcome {
	public abstract fun getExit ()I
	public abstract fun isSuccess ()Z
}

public final class elide/runtime/runner/RunnerOutcome$Failure : java/lang/Record, elide/runtime/runner/RunnerOutcome {
	public fun <init> (ILjava/lang/String;Ljava/lang/Throwable;)V
	public synthetic fun <init> (ILjava/lang/String;Ljava/lang/Throwable;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun cause ()Ljava/lang/Throwable;
	public final fun component1 ()I
	public final fun component2 ()Ljava/lang/String;
	public final fun component3 ()Ljava/lang/Throwable;
	public final fun copy (ILjava/lang/String;Ljava/lang/Throwable;)Lelide/runtime/runner/RunnerOutcome$Failure;
	public static synthetic fun copy$default (Lelide/runtime/runner/RunnerOutcome$Failure;ILjava/lang/String;Ljava/lang/Throwable;ILjava/lang/Object;)Lelide/runtime/runner/RunnerOutcome$Failure;
	public fun equals (Ljava/lang/Object;)Z
	public fun exit ()I
	public synthetic fun getExit ()I
	public fun hashCode ()I
	public fun isSuccess ()Z
	public final fun message ()Ljava/lang/String;
	public fun toString ()Ljava/lang/String;
}

public final class elide/runtime/runner/RunnerOutcome$Success : elide/runtime/runner/RunnerOutcome {
	public static final field INSTANCE Lelide/runtime/runner/RunnerOutcome$Success;
	public fun equals (Ljava/lang/Object;)Z
	public fun getExit ()I
	public fun hashCode ()I
	public fun isSuccess ()Z
	public fun toString ()Ljava/lang/String;
}

public final class elide/runtime/runner/Runners {
	public static final field INSTANCE Lelide/runtime/runner/Runners;
	public static final fun all ()Ljava/util/List;
	public static final fun jvm (Lelide/runtime/runner/JvmRunner$JvmRunnerJob;Ljava/lang/Boolean;)Ljava/util/List;
	public static synthetic fun jvm$default (Lelide/runtime/runner/JvmRunner$JvmRunnerJob;Ljava/lang/Boolean;ILjava/lang/Object;)Ljava/util/List;
}

public abstract interface class elide/runtime/runner/TruffleRunner {
}

