[
  {
    "name": "[B"
  },
  {
    "name": "[Lcom.fasterxml.jackson.databind.deser.BeanDeserializerModifier;"
  },
  {
    "name": "[Lcom.fasterxml.jackson.databind.deser.Deserializers;"
  },
  {
    "name": "[Lcom.fasterxml.jackson.databind.ser.BeanSerializerModifier;"
  },
  {
    "name": "[Lcom.fasterxml.jackson.databind.ser.Serializers;"
  },
  {
    "name": "[Lio.micronaut.http.HttpMethod;"
  },
  {
    "name": "[Ljava.lang.Object;"
  },
  {
    "name": "[Ljava.lang.String;"
  },
  {
    "name":"com.google.common.jimfs.SystemJimfsFileSystemProvider",
    "methods":[{"name":"removeFileSystemRunnable","parameterTypes":["java.net.URI"] }]
  },
  {
    "name": "[Lsun.security.pkcs.SignerInfo;"
  },
  {
    "name": "apple.security.AppleProvider",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "ch.qos.logback.classic.encoder.PatternLayoutEncoder",
    "queryAllPublicMethods": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "ch.qos.logback.classic.pattern.DateConverter",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "ch.qos.logback.classic.pattern.LevelConverter",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "ch.qos.logback.classic.pattern.LineSeparatorConverter",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "ch.qos.logback.classic.pattern.MessageConverter",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "ch.qos.logback.classic.pattern.ThreadConverter",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "ch.qos.logback.classic.pattern.color.HighlightingCompositeConverter",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "ch.qos.logback.core.ConsoleAppender",
    "queryAllPublicMethods": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      },
      {
        "name": "setWithJansi",
        "parameterTypes": ["boolean"]
      }
    ]
  },
  {
    "name": "ch.qos.logback.core.OutputStreamAppender",
    "methods": [
      {
        "name": "setEncoder",
        "parameterTypes": ["ch.qos.logback.core.encoder.Encoder"]
      }
    ]
  },
  {
    "name": "ch.qos.logback.core.encoder.LayoutWrappingEncoder",
    "methods": [
      {
        "name": "setParent",
        "parameterTypes": ["ch.qos.logback.core.spi.ContextAware"]
      }
    ]
  },
  {
    "name": "ch.qos.logback.core.pattern.PatternLayoutEncoderBase",
    "methods": [
      {
        "name": "setPattern",
        "parameterTypes": ["java.lang.String"]
      }
    ]
  },
  {
    "name": "ch.qos.logback.core.pattern.color.CyanCompositeConverter",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "ch.qos.logback.core.pattern.color.GrayCompositeConverter",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "ch.qos.logback.core.pattern.color.MagentaCompositeConverter",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.fasterxml.jackson.databind.ext.Java7SupportImpl",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.google.common.util.concurrent.AbstractFuture",
    "fields": [
      {
        "name": "listeners"
      },
      {
        "name": "value"
      },
      {
        "name": "waiters"
      }
    ]
  },
  {
    "name": "com.google.common.util.concurrent.AbstractFuture$Waiter",
    "fields": [
      {
        "name": "next"
      },
      {
        "name": "thread"
      }
    ]
  },
  {
    "name": "com.google.protobuf.ExtensionRegistry",
    "methods": [
      {
        "name": "getEmptyRegistry",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.google.protobuf.Timestamp",
    "methods": [
      {
        "name": "getNanos",
        "parameterTypes": []
      },
      {
        "name": "getSeconds",
        "parameterTypes": []
      },
      {
        "name": "newBuilder",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.google.protobuf.Timestamp$Builder",
    "queriedMethods": [
      {
        "name": "clearNanos",
        "parameterTypes": []
      },
      {
        "name": "clearSeconds",
        "parameterTypes": []
      },
      {
        "name": "getNanos",
        "parameterTypes": []
      },
      {
        "name": "getSeconds",
        "parameterTypes": []
      },
      {
        "name": "setNanos",
        "parameterTypes": ["int"]
      },
      {
        "name": "setSeconds",
        "parameterTypes": ["long"]
      }
    ]
  },
  {
    "name": "com.sun.jndi.dns.DnsContextFactory"
  },
  {
    "name": "com.sun.org.apache.xerces.internal.jaxp.SAXParserFactoryImpl",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "elide.server.assets.$AssetController$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "elide.server.assets.$AssetControllerTest$Definition",
    "allDeclaredClasses": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "elide.server.assets.$AssetControllerTest$Definition$Exec",
    "allDeclaredClasses": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "elide.server.assets.$AssetControllerTest$Definition$Reference",
    "allDeclaredClasses": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "elide.server.assets.$ServerAssetIndex$AssetStartupListener$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "elide.server.assets.$ServerAssetIndex$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "elide.server.assets.$ServerAssetIndexTest$Definition",
    "allDeclaredClasses": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "elide.server.assets.$ServerAssetIndexTest$Definition$Exec",
    "allDeclaredClasses": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "elide.server.assets.$ServerAssetIndexTest$Definition$Reference",
    "allDeclaredClasses": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "elide.server.assets.$ServerAssetManager$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "elide.server.assets.$ServerAssetManifestProvider$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "elide.server.assets.$ServerAssetReader$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "elide.server.assets.$ServerAssetServingTest$Definition",
    "allDeclaredClasses": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "elide.server.assets.$ServerAssetServingTest$Definition$Exec",
    "allDeclaredClasses": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "elide.server.assets.$ServerAssetServingTest$Definition$Reference",
    "allDeclaredClasses": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "allDeclaredClasses": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      },
      {
        "name": "testInjectable",
        "parameterTypes": []
      },
      {
        "name": "testServeBunkAsset",
        "parameterTypes": []
      },
      {
        "name": "testServeKnownGoodAssetStyle",
        "parameterTypes": []
      }
    ],
    "name": "elide.server.assets.AssetControllerTest",
    "queryAllDeclaredMethods": true,
    "allDeclaredFields": true,
    "queryAllPublicMethods": true
  },
  {
    "allDeclaredClasses": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      },
      {
        "name": "testAssetDependency",
        "parameterTypes": []
      },
      {
        "name": "testAssetDependencyCannotReferenceItself",
        "parameterTypes": []
      },
      {
        "name": "testAssetDependencyDefault",
        "parameterTypes": []
      },
      {
        "name": "testAssetPointer",
        "parameterTypes": []
      },
      {
        "name": "testAssetPointerWithoutIndex",
        "parameterTypes": []
      },
      {
        "name": "testAssetReference",
        "parameterTypes": []
      },
      {
        "name": "testAssetReferenceDefaults",
        "parameterTypes": []
      },
      {
        "name": "testAssetReferenceFromPointer",
        "parameterTypes": []
      },
      {
        "name": "testAssetType",
        "parameterTypes": []
      },
      {
        "name": "testRenderedAsset",
        "parameterTypes": []
      }
    ],
    "name": "elide.server.assets.AssetDataTest",
    "queryAllDeclaredMethods": true,
    "allDeclaredFields": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "elide.server.assets.ServerAssetIndex$AssetStartupListener",
    "fields": [
      {
        "name": "beanContext"
      }
    ]
  },
  {
    "allDeclaredClasses": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      },
      {
        "name": "addDirectDepsTest",
        "parameterTypes": []
      },
      {
        "name": "testAssetIndexBoot",
        "parameterTypes": []
      },
      {
        "name": "testAssetIndexBootNoManifest",
        "parameterTypes": []
      },
      {
        "name": "testAssetIndexerDoesNotInitializeMoreThanOnce",
        "parameterTypes": []
      },
      {
        "name": "testAssetIndexerInitializeTwiceDoesNotThrow",
        "parameterTypes": []
      },
      {
        "name": "testFailBuildConcreteGeneric",
        "parameterTypes": []
      },
      {
        "name": "testFailCompletelyGenericAsset",
        "parameterTypes": []
      },
      {
        "name": "testGenerateEtagsStrong",
        "parameterTypes": []
      },
      {
        "name": "testGenerateEtagsWeak",
        "parameterTypes": []
      },
      {
        "name": "testGenerateFailDuplicateModuleIds",
        "parameterTypes": []
      },
      {
        "name": "testGenerateFailDuplicateTags",
        "parameterTypes": []
      },
      {
        "name": "testGenerateIndexes",
        "parameterTypes": []
      },
      {
        "name": "testGenerateIndexesTextAssets",
        "parameterTypes": []
      },
      {
        "name": "testGenerateWithScriptDeps",
        "parameterTypes": []
      },
      {
        "name": "testGenerateWithStyleDeps",
        "parameterTypes": []
      },
      {
        "name": "testInitializeBeforeAccessingManifest",
        "parameterTypes": []
      },
      {
        "name": "testInterpretedManifest",
        "parameterTypes": []
      },
      {
        "name": "testLookupAssetByTagNotFound",
        "parameterTypes": []
      },
      {
        "name": "testLookupAssetByTagScript",
        "parameterTypes": []
      },
      {
        "name": "testLookupAssetByTagStyle",
        "parameterTypes": []
      },
      {
        "name": "testLookupAssetByTagText",
        "parameterTypes": []
      },
      {
        "name": "testRenderConditionalStrongETagMatch",
        "parameterTypes": []
      },
      {
        "name": "testRenderConditionalStrongETagMismatch",
        "parameterTypes": []
      },
      {
        "name": "testRenderConditionalWeakETagBadFormat",
        "parameterTypes": []
      },
      {
        "name": "testRenderConditionalWeakETagMatch",
        "parameterTypes": []
      },
      {
        "name": "testRenderConditionalWeakETagMatchInStrongMode",
        "parameterTypes": []
      },
      {
        "name": "testRenderConditionalWeakETagMismatch",
        "parameterTypes": []
      }
    ],
    "name": "elide.server.assets.ServerAssetIndexTest",
    "queryAllDeclaredMethods": true,
    "allDeclaredFields": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "elide.server.assets.ServerAssetIndexTest$testRenderConditionalStrongETagMismatch$2$1",
    "fields": [
      {
        "name": "label"
      }
    ]
  },
  {
    "name": "elide.server.assets.ServerAssetIndexTest$testRenderConditionalStrongETagMismatch$ItMismatched",
    "allDeclaredFields": true,
    "queryAllPublicConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "elide.server.assets.ServerAssetIndexTest$testRenderConditionalWeakETagBadFormat$2$1",
    "fields": [
      {
        "name": "label"
      }
    ]
  },
  {
    "name": "elide.server.assets.ServerAssetIndexTest$testRenderConditionalWeakETagBadFormat$ItMismatched",
    "allDeclaredFields": true,
    "queryAllPublicConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "elide.server.assets.ServerAssetIndexTest$testRenderConditionalWeakETagMismatch$2$1",
    "fields": [
      {
        "name": "label"
      }
    ]
  },
  {
    "name": "elide.server.assets.ServerAssetIndexTest$testRenderConditionalWeakETagMismatch$ItMismatched",
    "allDeclaredFields": true,
    "queryAllPublicConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "allDeclaredClasses": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      },
      {
        "name": "testFindLoadManifestDefault",
        "parameterTypes": []
      },
      {
        "name": "testFindLoadManifestFound",
        "parameterTypes": []
      },
      {
        "name": "testFindLoadManifestNotFound",
        "parameterTypes": []
      },
      {
        "name": "testFindManifestDefault",
        "parameterTypes": []
      },
      {
        "name": "testFindManifestFound",
        "parameterTypes": []
      },
      {
        "name": "testFindManifestNotFound",
        "parameterTypes": []
      },
      {
        "name": "testManifestEqualsAcrossFormats",
        "parameterTypes": []
      },
      {
        "name": "testParseInvalidData",
        "parameterTypes": []
      },
      {
        "name": "testParseInvalidFormat",
        "parameterTypes": []
      },
      {
        "name": "testParseSampleManifestBinary",
        "parameterTypes": []
      },
      {
        "name": "testParseSampleManifestJson",
        "parameterTypes": []
      },
      {
        "name": "testParseStabilityBinary",
        "parameterTypes": []
      },
      {
        "name": "testParseStabilityJson",
        "parameterTypes": []
      }
    ],
    "name": "elide.server.assets.ServerAssetManifestTest",
    "queryAllDeclaredMethods": true,
    "allDeclaredFields": true,
    "queryAllPublicMethods": true
  },
  {
    "allDeclaredClasses": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      },
      {
        "name": "testCompressionSupported",
        "parameterTypes": ["java.lang.String"]
      },
      {
        "name": "testConditionalRequestETag",
        "parameterTypes": []
      },
      {
        "name": "testEtags",
        "parameterTypes": []
      },
      {
        "name": "testGenerateLink",
        "parameterTypes": ["java.lang.String"]
      },
      {
        "name": "testGenerateLinkGeneric",
        "parameterTypes": []
      },
      {
        "name": "testGenerateLinkOverrideType",
        "parameterTypes": []
      },
      {
        "name": "testGenerateUnknownLink",
        "parameterTypes": []
      },
      {
        "name": "testInjectable",
        "parameterTypes": []
      },
      {
        "name": "testLocateKnownBadModule",
        "parameterTypes": []
      },
      {
        "name": "testLocateKnownGoodModule",
        "parameterTypes": []
      },
      {
        "name": "testNonConditional",
        "parameterTypes": []
      },
      {
        "name": "testResolveKnownFromModuleId",
        "parameterTypes": []
      },
      {
        "name": "testResolveKnownFromRequest",
        "parameterTypes": []
      },
      {
        "name": "testResolveUnknownFromModuleId",
        "parameterTypes": []
      },
      {
        "name": "testResolveUnknownFromRequest",
        "parameterTypes": []
      },
      {
        "name": "testServerAssetDescriptorScript",
        "parameterTypes": []
      },
      {
        "name": "testServerAssetDescriptorStyle",
        "parameterTypes": []
      },
      {
        "name": "testServerAssetDescriptorText",
        "parameterTypes": []
      },
      {
        "name": "testUnsupportedCompression",
        "parameterTypes": []
      }
    ],
    "name": "elide.server.assets.ServerAssetServingTest",
    "queryAllDeclaredMethods": true,
    "allDeclaredFields": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "elide.server.assets.ServerAssetServingTest$Companion",
    "allDeclaredClasses": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "elide.server.cfg.$AssetConfig$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "elide.server.cfg.$ServerConfig$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "allDeclaredClasses": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      },
      {
        "name": "testAssetConfig",
        "parameterTypes": []
      }
    ],
    "name": "elide.server.cfg.AssetConfigTest",
    "queryAllDeclaredMethods": true,
    "allDeclaredFields": true,
    "queryAllPublicMethods": true
  },
  {
    "allDeclaredClasses": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      },
      {
        "name": "testServerConfigDefaults",
        "parameterTypes": []
      }
    ],
    "name": "elide.server.cfg.ServerConfigTest",
    "queryAllDeclaredMethods": true,
    "allDeclaredFields": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "elide.server.cfg.ServerConfigurator",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "elide.server.controller.$PageControllerTest$Definition",
    "allDeclaredClasses": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "elide.server.controller.$PageControllerTest$Definition$Exec",
    "allDeclaredClasses": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "elide.server.controller.$PageControllerTest$Definition$Reference",
    "allDeclaredClasses": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "elide.server.controller.$SamplePageController$Definition",
    "allDeclaredClasses": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "elide.server.controller.$SamplePageController$Definition$Exec",
    "allDeclaredClasses": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "elide.server.controller.$SamplePageController$Definition$Reference",
    "allDeclaredClasses": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "elide.server.controller.BaseController",
    "allDeclaredClasses": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "elide.server.controller.ElideController",
    "allDeclaredClasses": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "elide.server.controller.PageController",
    "allDeclaredClasses": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "allDeclaredClasses": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      },
      {
        "name": "testAssignmentToUtilities",
        "parameterTypes": []
      },
      {
        "name": "testCanAcquireAppContext",
        "parameterTypes": []
      },
      {
        "name": "testCanAcquireAssetManager",
        "parameterTypes": []
      },
      {
        "name": "testGenerateAssetReferenceInvalid",
        "parameterTypes": []
      },
      {
        "name": "testGenerateReferenceModuleIdRequired",
        "parameterTypes": []
      },
      {
        "name": "testGenerateReferenceValid",
        "parameterTypes": []
      },
      {
        "name": "testGenerateReferenceViaHandler",
        "parameterTypes": []
      },
      {
        "name": "testInjectable",
        "parameterTypes": []
      },
      {
        "name": "testNotFoundStaticFile",
        "parameterTypes": []
      },
      {
        "name": "testRenderCssDocument",
        "parameterTypes": []
      },
      {
        "name": "testRenderHtmlPage",
        "parameterTypes": []
      },
      {
        "name": "testRenderScriptAssetWithHandler",
        "parameterTypes": []
      },
      {
        "name": "testRenderScriptAssetWithKnownModule",
        "parameterTypes": []
      },
      {
        "name": "testRenderStylesheetAssetWithGenericCall",
        "parameterTypes": []
      },
      {
        "name": "testRenderStylesheetAssetWithHandler",
        "parameterTypes": []
      },
      {
        "name": "testRenderStylesheetAssetWithKnownModule",
        "parameterTypes": []
      },
      {
        "name": "testRenderTextStaticResource",
        "parameterTypes": []
      }
    ],
    "name": "elide.server.controller.PageControllerTest",
    "queryAllDeclaredMethods": true,
    "allDeclaredFields": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "elide.server.controller.SamplePageController",
    "allDeclaredClasses": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "elide.server.controller.builtin.$NotFoundController$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "elide.server.controller.builtin.$NotFoundControllerTest$Definition",
    "allDeclaredClasses": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "elide.server.controller.builtin.$NotFoundControllerTest$Definition$Exec",
    "allDeclaredClasses": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "elide.server.controller.builtin.$NotFoundControllerTest$Definition$Reference",
    "allDeclaredClasses": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "elide.server.controller.builtin.$ServerErrorController$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "elide.server.controller.builtin.$ServerErrorControllerTest$Definition",
    "allDeclaredClasses": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "elide.server.controller.builtin.$ServerErrorControllerTest$Definition$Exec",
    "allDeclaredClasses": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "elide.server.controller.builtin.$ServerErrorControllerTest$Definition$Reference",
    "allDeclaredClasses": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "elide.server.controller.builtin.BuiltinControllerTest",
    "allDeclaredClasses": true,
    "queryAllDeclaredMethods": true,
    "allDeclaredFields": true,
    "queryAllPublicMethods": true,
    "methods": [
      {
        "name": "testRespondsToContentTypes",
        "parameterTypes": ["io.micronaut.http.MediaType"]
      },
      {
        "name": "testRespondsToMethods",
        "parameterTypes": ["java.lang.String"]
      }
    ]
  },
  {
    "allDeclaredClasses": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      },
      {
        "name": "testInjectable",
        "parameterTypes": []
      }
    ],
    "name": "elide.server.controller.builtin.NotFoundControllerTest",
    "queryAllDeclaredMethods": true,
    "allDeclaredFields": true,
    "queryAllPublicMethods": true
  },
  {
    "allDeclaredClasses": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      },
      {
        "name": "testInjectable",
        "parameterTypes": []
      }
    ],
    "name": "elide.server.controller.builtin.ServerErrorControllerTest",
    "queryAllDeclaredMethods": true,
    "allDeclaredFields": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "elide.server.http.$HeaderFinalizingFilter$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "elide.server.http.$RequestContextFilter$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "elide.server.runtime.$AppExecutor$DefaultExecutor$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "elide.server.runtime.$AppExecutorTest$Definition",
    "allDeclaredClasses": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "elide.server.runtime.$AppExecutorTest$Definition$Exec",
    "allDeclaredClasses": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "elide.server.runtime.$AppExecutorTest$Definition$Reference",
    "allDeclaredClasses": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "allDeclaredClasses": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      },
      {
        "name": "testAcquire",
        "parameterTypes": []
      },
      {
        "name": "testExecutorService",
        "parameterTypes": []
      },
      {
        "name": "testInjectable",
        "parameterTypes": []
      },
      {
        "name": "testRunIOTask",
        "parameterTypes": []
      }
    ],
    "name": "elide.server.runtime.AppExecutorTest",
    "queryAllDeclaredMethods": true,
    "allDeclaredFields": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "elide.server.runtime.jvm.$UncaughtExceptionHandler$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "allDeclaredClasses": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      },
      {
        "name": "testInitSecurity",
        "parameterTypes": []
      },
      {
        "name": "testInitSecurityTwice",
        "parameterTypes": []
      }
    ],
    "name": "elide.server.runtime.jvm.SecurityProviderConfiguratorTest",
    "queryAllDeclaredMethods": true,
    "allDeclaredFields": true,
    "queryAllPublicMethods": true
  },
  {
    "allDeclaredClasses": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      },
      {
        "name": "testLogUncaughtException",
        "parameterTypes": []
      }
    ],
    "name": "elide.server.runtime.jvm.UncaughtExceptionHandlerTest",
    "queryAllDeclaredMethods": true,
    "allDeclaredFields": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "io.grpc.internal.DnsNameResolverProvider"
  },
  {
    "name": "io.grpc.internal.JndiResourceResolverFactory",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.grpc.internal.PickFirstLoadBalancerProvider"
  },
  {
    "name": "io.grpc.netty.NettyChannelProvider"
  },
  {
    "name": "io.grpc.netty.UdsNettyChannelProvider"
  },
  {
    "name": "io.grpc.util.SecretRoundRobinLoadBalancerProvider$Provider",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.aop.internal.InterceptorRegistryBean",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.buffer.netty.$DefaultByteBufAllocatorConfiguration$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.buffer.netty.$NettyByteBufferFactory$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.context.AbstractBeanContextConditional",
    "allDeclaredClasses": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "io.micronaut.context.AbstractExecutableMethodsDefinition",
    "allDeclaredClasses": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "io.micronaut.context.AbstractInitializableBeanDefinition",
    "allDeclaredClasses": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "io.micronaut.context.AbstractInitializableBeanDefinitionReference",
    "allDeclaredClasses": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "io.micronaut.context.EnvironmentConfigurable",
    "allDeclaredClasses": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "io.micronaut.context.annotation.DefaultScope",
    "queryAllPublicMethods": true
  },
  {
    "name": "io.micronaut.context.annotation.Executable",
    "queryAllPublicMethods": true
  },
  {
    "name": "io.micronaut.context.annotation.Factory",
    "queryAllPublicMethods": true
  },
  {
    "name": "io.micronaut.context.annotation.Requires",
    "queryAllPublicMethods": true
  },
  {
    "name": "io.micronaut.context.env.PropertiesPropertySourceLoader",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.context.env.yaml.YamlPropertySourceLoader",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.context.event.ApplicationEventPublisherFactory",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.core.annotation.AnnotationMetadata",
    "allDeclaredClasses": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "io.micronaut.core.annotation.AnnotationMetadataDelegate",
    "allDeclaredClasses": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "io.micronaut.core.annotation.AnnotationMetadataProvider",
    "allDeclaredClasses": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "io.micronaut.core.annotation.AnnotationSource",
    "allDeclaredClasses": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "io.micronaut.core.naming.Named",
    "allDeclaredClasses": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "io.micronaut.core.type.ArgumentCoercible",
    "allDeclaredClasses": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "io.micronaut.discovery.$DefaultCompositeDiscoveryClient$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.discovery.$DefaultServiceInstanceIdGenerator$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.discovery.cloud.digitalocean.$DigitalOceanMetadataConfiguration$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.discovery.cloud.digitalocean.$DigitalOceanMetadataResolver$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.discovery.config.$DefaultCompositeConfigurationClient$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.grpc.channels.$GrpcChannelBuilderFactory$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.grpc.channels.$GrpcChannelBuilderFactory$ManagedChannelBuilder0$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.grpc.channels.$GrpcDefaultManagedChannelConfiguration$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.grpc.channels.$GrpcManagedChannelFactory$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.grpc.channels.$GrpcManagedChannelFactory$ManagedChannel0$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.grpc.channels.$GrpcNamedManagedChannelConfiguration$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.grpc.client.tracing.$BeanConfiguration",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.grpc.client.tracing.$GrpcClientTracingInterceptorConfiguration$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.grpc.client.tracing.$GrpcClientTracingInterceptorFactory$ClientTracingInterceptor0$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.grpc.client.tracing.$GrpcClientTracingInterceptorFactory$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.grpc.discovery.$GrpcNameResolverProvider$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.grpc.discovery.$GrpcNameResolverProvider$ManagedChannelBuilderListener$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.grpc.server.$GrpcEmbeddedServer$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.grpc.server.$GrpcEmbeddedServerListener$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.grpc.server.$GrpcServerBuilder$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.grpc.server.$GrpcServerBuilder$ServerBuilder0$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.grpc.server.$GrpcServerChannel$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.grpc.server.$GrpcServerChannel$ServerChannel0$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.grpc.server.$GrpcServerConfiguration$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.grpc.server.$GrpcSslConfiguration$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.grpc.server.health.$GrpcHealthFactory$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.grpc.server.health.$GrpcHealthFactory$HealthStatusManager0$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.grpc.server.health.$GrpcServerHealthIndicator$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.grpc.server.health.$HealthStatusManagerContainer$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.grpc.server.tracing.$BeanConfiguration",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.grpc.server.tracing.$GrpcServerTracingInterceptorConfiguration$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.grpc.server.tracing.$GrpcServerTracingInterceptorFactory$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.grpc.server.tracing.$GrpcServerTracingInterceptorFactory$ServerTracingInterceptor0$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.health.$DefaultCurrentHealthStatus$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.health.$HeartbeatConfiguration$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.health.$HeartbeatTask$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.MediaType",
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "queryAllPublicMethods": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": ["java.lang.String"]
      }
    ]
  },
  {
    "name": "io.micronaut.http.MediaTypeConvertersRegistrar",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.bind.$DefaultRequestBinderRegistry$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.client.$BeanConfiguration",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.client.$DefaultHttpClientConfiguration$DefaultConnectionPoolConfiguration$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.client.$DefaultHttpClientConfiguration$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.client.$DefaultLoadBalancerResolver$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.client.$ServiceHttpClientConfiguration$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.client.$ServiceHttpClientConfiguration$ServiceConnectionPoolConfiguration$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.client.$ServiceHttpClientConfiguration$ServiceSslClientConfiguration$DefaultKeyConfiguration$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.client.$ServiceHttpClientConfiguration$ServiceSslClientConfiguration$DefaultKeyStoreConfiguration$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.client.$ServiceHttpClientConfiguration$ServiceSslClientConfiguration$DefaultTrustStoreConfiguration$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.client.$ServiceHttpClientConfiguration$ServiceSslClientConfiguration$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.client.$ServiceHttpClientFactory$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.client.$ServiceHttpClientFactory$HealthCheckStarter1$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.client.$ServiceHttpClientFactory$ServiceInstanceList0$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.client.bind.$DefaultHttpClientBinderRegistry$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.client.filter.$DefaultHttpClientFilterResolver$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.client.interceptor.$HttpClientIntroductionAdvice$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.client.interceptor.configuration.$DefaultClientVersioningConfiguration$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.client.interceptor.configuration.$NamedClientVersioningConfiguration$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.client.loadbalance.$DiscoveryClientLoadBalancerFactory$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.client.loadbalance.$LoadBalancerConverters$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.client.loadbalance.$ServiceInstanceListLoadBalancerFactory$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.client.netty.$DefaultNettyHttpClientRegistry$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.client.netty.$DefaultNettyHttpClientRegistry$HttpClient0$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.client.netty.NettyClientHttpRequestFactory",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.client.netty.ssl.$NettyClientSslBuilder$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.codec.$CodecConfiguration$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.converters.$HttpConverterRegistrar$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.cookie.$SameSiteConverter$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.netty.channel.$DefaultEventLoopGroupConfiguration$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.netty.channel.$DefaultEventLoopGroupFactory$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.netty.channel.$DefaultEventLoopGroupRegistry$DefaultEventLoopGroup1$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.netty.channel.$DefaultEventLoopGroupRegistry$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.netty.channel.$DefaultEventLoopGroupRegistry$EventLoopGroup0$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.netty.channel.$EpollEventLoopGroupFactory$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.netty.channel.$KQueueEventLoopGroupFactory$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.netty.channel.$NettyThreadFactory$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.netty.channel.$NettyThreadFactory$NettyThreadFactory0$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.netty.channel.$NioEventLoopGroupFactory$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.netty.channel.converters.$DefaultChannelOptionFactory$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.netty.channel.converters.$EpollChannelOptionFactory$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.netty.channel.converters.$KQueueChannelOptionFactory$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.netty.configuration.$NettyGlobalConfiguration$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.netty.websocket.$NettyServerWebSocketBroadcaster$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.netty.websocket.$WebSocketMessageEncoder$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.resource.$ResourceLoaderFactory$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.resource.$ResourceLoaderFactory$FileSystemResourceLoader1$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.resource.$ResourceLoaderFactory$GetClassPathResourceLoader0$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.resource.$ResourceLoaderFactory$ResourceResolver2$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.server.$CoroutineHelper$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.server.$HttpServerConfiguration$CorsConfiguration$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.server.$HttpServerConfiguration$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.server.$HttpServerConfiguration$HostResolutionConfiguration$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.server.$HttpServerConfiguration$HttpLocaleResolutionConfigurationProperties$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.server.$HttpServerConfiguration$MultipartConfiguration$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.server.$RouteExecutor$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.server.binding.$BasicAuthArgumentBinder$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.server.binding.$LocaleArgumentBinder$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.server.binding.$RequestArgumentSatisfier$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.server.codec.$TextStreamCodec$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.server.context.$ServerRequestContextInstrumentation$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.server.cors.$BeanConfiguration",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.server.cors.$CorsFilter$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.server.cors.$CorsOriginConverter$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.server.exceptions.$ContentLengthExceededHandler$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.server.exceptions.$ConversionErrorHandler$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.server.exceptions.$DuplicateRouteHandler$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.server.exceptions.$HttpStatusHandler$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.server.exceptions.$JsonExceptionHandler$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.server.exceptions.$URISyntaxHandler$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.server.exceptions.$UnsatisfiedArgumentHandler$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.server.exceptions.$UnsatisfiedRouteHandler$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.server.exceptions.response.$HateoasErrorResponseProcessor$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.server.exceptions.response.$HateoasErrorResponseProcessorReplacement$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.server.netty.$DefaultHttpCompressionStrategy$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.server.netty.$DefaultHttpContentProcessorResolver$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.server.netty.$DefaultNettyEmbeddedServerFactory$BuildDefaultServer0$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.server.netty.$DefaultNettyEmbeddedServerFactory$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.server.netty.$FormDataHttpContentSubscriberFactory$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.server.netty.$NettyEmbeddedServerInstance$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.server.netty.$NettyRequestArgumentSatisfier$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.server.netty.NettyHttpResponseFactory",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.server.netty.NettyHttpServer$1"
  },
  {
    "name": "io.micronaut.http.server.netty.binders.$NettyBinderRegistrar$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.server.netty.binders.$PublisherBodyBinder$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.server.netty.configuration.$NettyHttpServerConfiguration$AccessLogger$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.server.netty.configuration.$NettyHttpServerConfiguration$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.server.netty.configuration.$NettyHttpServerConfiguration$FileTypeHandlerConfiguration$CacheControlConfiguration$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.server.netty.configuration.$NettyHttpServerConfiguration$FileTypeHandlerConfiguration$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.server.netty.configuration.$NettyHttpServerConfiguration$Http2Settings$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.server.netty.configuration.$NettyHttpServerConfiguration$NettyListenerConfiguration$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.server.netty.configuration.$NettyHttpServerConfiguration$Parent$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.server.netty.configuration.$NettyHttpServerConfiguration$Worker$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.server.netty.converters.$NettyConverters$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.server.netty.converters.NettyConvertersSpi",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.server.netty.handler.accesslog.element.BytesSentElementBuilder",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.server.netty.handler.accesslog.element.CookieElementBuilder",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.server.netty.handler.accesslog.element.DateTimeElementBuilder",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.server.netty.handler.accesslog.element.ElapseTimeElementBuilder",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.server.netty.handler.accesslog.element.HeaderElementBuilder",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.server.netty.handler.accesslog.element.LocalHostElementBuilder",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.server.netty.handler.accesslog.element.LocalIpElementBuilder",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.server.netty.handler.accesslog.element.LocalPortElementBuilder",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.server.netty.handler.accesslog.element.NotImplementedElementBuilder",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.server.netty.handler.accesslog.element.RemoteHostElementBuilder",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.server.netty.handler.accesslog.element.RemoteIpElementBuilder",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.server.netty.handler.accesslog.element.RequestLineElementBuilder",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.server.netty.handler.accesslog.element.RequestMethodElementBuilder",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.server.netty.handler.accesslog.element.RequestProtocolElementBuilder",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.server.netty.handler.accesslog.element.RequestUriElementBuilder",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.server.netty.handler.accesslog.element.ResponseCodeElementBuilder",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.server.netty.jackson.$JsonHttpContentSubscriberFactory$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.server.netty.jackson.$JsonViewMediaTypeCodecFactory$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.server.netty.jackson.$JsonViewServerFilter$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.server.netty.ssl.$CertificateProvidedSslBuilder$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.server.netty.ssl.$SelfSignedSslBuilder$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.server.netty.types.files.$FileTypeHandlerConfiguration$CacheControlConfiguration$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.server.netty.types.files.$FileTypeHandlerConfiguration$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.server.util.$DefaultHttpClientAddressResolver$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.server.util.$DefaultHttpHostResolver$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.server.util.locale.$CompositeHttpLocaleResolver$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.server.util.locale.$CookieLocaleResolver$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.server.util.locale.$HttpFixedLocaleResolver$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.server.util.locale.$HttpLocalizedMessageSource$Definition$Intercepted$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.server.util.locale.$HttpLocalizedMessageSource$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.server.util.locale.$RequestLocaleResolver$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.server.websocket.$ServerWebSocketProcessor$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.ssl.$ClientSslConfiguration$DefaultKeyConfiguration$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.ssl.$ClientSslConfiguration$DefaultKeyStoreConfiguration$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.ssl.$ClientSslConfiguration$DefaultTrustStoreConfiguration$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.ssl.$ClientSslConfiguration$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.ssl.$DefaultSslConfiguration$DefaultKeyConfiguration$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.ssl.$DefaultSslConfiguration$DefaultKeyStoreConfiguration$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.ssl.$DefaultSslConfiguration$DefaultTrustStoreConfiguration$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.ssl.$DefaultSslConfiguration$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.ssl.$ServerSslConfiguration$DefaultKeyConfiguration$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.ssl.$ServerSslConfiguration$DefaultKeyStoreConfiguration$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.ssl.$ServerSslConfiguration$DefaultTrustStoreConfiguration$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.ssl.$ServerSslConfiguration$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.http.util.$OutgoingHttpRequestProcessorImpl$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.inject.BeanContextConditional",
    "allDeclaredClasses": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "io.micronaut.inject.BeanDefinition",
    "allDeclaredClasses": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "io.micronaut.inject.BeanDefinitionReference",
    "allDeclaredClasses": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "io.micronaut.inject.BeanFactory",
    "allDeclaredClasses": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "io.micronaut.inject.BeanType",
    "allDeclaredClasses": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "io.micronaut.inject.ExecutableMethodsDefinition",
    "allDeclaredClasses": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "io.micronaut.inject.annotation.AnnotationConvertersRegistrar",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.inject.provider.BeanProviderDefinition",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.inject.provider.JakartaProviderBeanDefinition",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.inject.provider.JavaxProviderBeanDefinition"
  },
  {
    "name": "io.micronaut.jackson.$BeanConfiguration",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.jackson.$JacksonConfiguration$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.jackson.$ObjectMapperFactory$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.jackson.$ObjectMapperFactory$JsonFactory0$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.jackson.$ObjectMapperFactory$ObjectMapper1$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.jackson.codec.$JsonMediaTypeCodec$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.jackson.codec.$JsonStreamMediaTypeCodec$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.jackson.core.env.CloudFoundryVcapApplicationPropertySourceLoader",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.jackson.core.env.CloudFoundryVcapServicesPropertySourceLoader",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.jackson.core.env.EnvJsonPropertySourceLoader",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.jackson.core.env.JsonPropertySourceLoader",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.jackson.databind.$DatabindPropertyBinderExceptionHandler$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.jackson.databind.$JacksonDatabindMapper$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.jackson.databind.convert.$JacksonConverterRegistrar$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.jackson.modules.$BeanIntrospectionModule$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.jackson.serialize.$ConvertibleMultiValuesSerializer$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.jackson.serialize.$ConvertibleValuesSerializer$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.jackson.serialize.$JacksonObjectSerializer$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.jackson.serialize.$JsonNodeDeserializer$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.jackson.serialize.$JsonNodeSerializer$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.jackson.serialize.$OptionalValuesSerializer$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.jackson.serialize.$ResourceModule$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.jackson.serialize.$ResourceSerializerModifier$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.json.$JsonObjectSerializer$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.json.bind.$JsonBeanPropertyBinder$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.json.codec.$JsonMediaTypeCodec$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.json.codec.$JsonStreamMediaTypeCodec$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.json.convert.$JsonConverterRegistrar$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.logging.$PropertiesLoggingLevelsConfigurer$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.logging.impl.$Log4jLoggingSystem$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.logging.impl.$LogbackLoggingSystem$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.management.endpoint.$BeanConfiguration",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.management.endpoint.$EndpointConfiguration$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.management.endpoint.$EndpointDefaultConfiguration$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.management.endpoint.$EndpointSensitivityProcessor$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.management.endpoint.$EndpointsFilter$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.management.endpoint.beans.$BeansEndpoint$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.management.endpoint.beans.impl.$DefaultBeanDefinitionData$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.management.endpoint.beans.impl.$DefaultBeanDefinitionDataCollector$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.management.endpoint.env.$EnvironmentEndpoint$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.management.endpoint.health.$HealthEndpoint$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.management.endpoint.health.$HealthEndpoint$StatusConfiguration$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.management.endpoint.health.filter.$HealthResultFilter$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.management.endpoint.info.$InfoEndpoint$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.management.endpoint.info.impl.$ReactiveInfoAggregator$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.management.endpoint.info.source.$BuildInfoSource$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.management.endpoint.info.source.$ConfigurationInfoSource$Definition$Intercepted$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.management.endpoint.info.source.$ConfigurationInfoSource$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.management.endpoint.info.source.$GitInfoSource$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.management.endpoint.loggers.$LoggersEndpoint$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.management.endpoint.loggers.impl.$DefaultLoggersManager$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.management.endpoint.loggers.impl.$Log4jLoggingSystem$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.management.endpoint.loggers.impl.$LogbackLoggingSystem$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.management.endpoint.processors.$DeleteEndpointRouteBuilder$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.management.endpoint.processors.$ReadEndpointRouteBuilder$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.management.endpoint.processors.$WriteEndpointRouteBuilder$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.management.endpoint.refresh.$RefreshEndpoint$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.management.endpoint.routes.$RoutesEndpoint$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.management.endpoint.routes.impl.$DefaultRouteData$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.management.endpoint.routes.impl.$DefaultRouteDataCollector$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.management.endpoint.stop.$ServerStopEndpoint$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.management.endpoint.threads.$ThreadDumpEndpoint$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.management.endpoint.threads.impl.$DefaultThreadInfoMapper$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.management.health.aggregator.$DefaultHealthAggregator$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.management.health.indicator.discovery.$DiscoveryClientHealthIndicator$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.management.health.indicator.discovery.$DiscoveryClientHealthIndicatorConfiguration$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.management.health.indicator.diskspace.$DiskSpaceIndicator$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.management.health.indicator.diskspace.$DiskSpaceIndicatorConfiguration$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.management.health.indicator.jdbc.$JdbcIndicator$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.management.health.indicator.service.$ServiceReadyHealthIndicator$ApplicationEventListener$onServerStarted2$Intercepted$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.management.health.indicator.service.$ServiceReadyHealthIndicator$ApplicationEventListener$onServiceStarted1$Intercepted$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.management.health.indicator.service.$ServiceReadyHealthIndicator$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.management.health.monitor.$HealthMonitorTask$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.protobuf.codec.$ExtensionRegistryFactory$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.protobuf.codec.$ExtensionRegistryFactory$ExtensionRegistry0$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.protobuf.codec.$ProtobufferCodec$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.protobuf.convert.$ByteBufToProtoMessageConverter$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.protobuf.convert.$ProtoMessageToByteBufConverter$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.reactive.flow.converters.$FlowConverterRegistrar$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.reactive.reactor.instrument.$ReactorInstrumentation$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.reactive.reactor.instrument.$ReactorInstrumentation$ReactorInstrumenterFactory$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.retry.intercept.$DefaultRetryInterceptor$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.retry.intercept.$RecoveryInterceptor$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.runtime.$ApplicationConfiguration$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.runtime.$ApplicationConfiguration$InstanceConfiguration$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.runtime.context.$CompositeMessageSource$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.runtime.context.env.$ConfigurationIntroductionAdvice$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.runtime.context.scope.$ThreadLocalCustomScope$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.runtime.context.scope.refresh.$RefreshInterceptor$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.runtime.context.scope.refresh.$RefreshScope$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.runtime.converters.reactive.$ReactiveTypeConverterRegistrar$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.runtime.converters.time.TimeConverterRegistrar",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.runtime.http.codec.$MediaTypeCodecRegistryFactory$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.runtime.http.codec.$MediaTypeCodecRegistryFactory$MediaTypeCodecRegistry0$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.runtime.http.codec.$TextPlainCodec$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.runtime.http.scope.$RequestCustomScope$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.runtime.server.watch.event.$FileWatchRestartListener$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.scheduling.$DefaultTaskExceptionHandler$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.scheduling.$ScheduledExecutorTaskScheduler$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.scheduling.async.$AsyncInterceptor$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.scheduling.executor.$DefaultExecutorSelector$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.scheduling.executor.$DefaultThreadFactory$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.scheduling.executor.$DefaultThreadFactory$ThreadFactory0$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.scheduling.executor.$ExecutorFactory$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.scheduling.executor.$ExecutorFactory$EventLoopGroupThreadFactory0$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.scheduling.executor.$ExecutorFactory$ExecutorService1$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.scheduling.executor.$IOExecutorServiceConfig$Configuration0$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.scheduling.executor.$IOExecutorServiceConfig$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.scheduling.executor.$ScheduledExecutorServiceConfig$Configuration0$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.scheduling.executor.$ScheduledExecutorServiceConfig$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.scheduling.executor.$UserExecutorConfiguration$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.scheduling.instrument.$ExecutorServiceInstrumenter$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.scheduling.io.watch.$DefaultWatchThread$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.scheduling.io.watch.$FileWatchConfiguration$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.scheduling.io.watch.$WatchServiceFactory$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.scheduling.io.watch.$WatchServiceFactory$WatchService0$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.scheduling.processor.$ScheduledMethodProcessor$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.test.extensions.junit5.MicronautJunit5Extension",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.test.extensions.junit5.annotation.MicronautTest",
    "queryAllPublicMethods": true
  },
  {
    "name": "io.micronaut.test.support.server.$TestEmbeddedServer$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.test.support.server.$TestExecutableEmbeddedServer$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.views.$BeanConfiguration",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.views.$DefaultViewsModelDecorator$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.views.$DefaultViewsRendererLocator$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.views.$DefaultViewsResolver$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.views.$ViewsConfigurationProperties$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.views.$ViewsFilter$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.views.csp.$BeanConfiguration",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.views.csp.$CspConfiguration$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.views.csp.$CspFilter$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.views.model.security.$BeanConfiguration",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.views.model.security.$SecurityViewModelProcessor$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.views.model.security.$SecurityViewModelProcessorConfigurationProperties$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.views.turbo.$DefaultTurboFrameRenderer$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.views.turbo.$DefaultTurboStreamRenderer$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.web.router.$AnnotatedFilterRouteBuilder$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.web.router.$AnnotatedMethodRouteBuilder$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.web.router.$DefaultRouter$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.web.router.naming.$ConfigurableUriNamingStrategy$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.web.router.naming.$HyphenatedUriNamingStrategy$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.web.router.resource.$StaticResourceConfiguration$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.web.router.resource.$StaticResourceResolverFactory$Build0$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.web.router.resource.$StaticResourceResolverFactory$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.web.router.version.$ConfigurationDefaultVersionProvider$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.web.router.version.$RouteVersionFilter$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.web.router.version.$RoutesVersioningConfiguration$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.web.router.version.$VersionAwareRouterListener$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.web.router.version.resolution.$HeaderVersionResolver$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.web.router.version.resolution.$HeaderVersionResolverConfiguration$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.web.router.version.resolution.$ParameterVersionResolver$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.web.router.version.resolution.$ParameterVersionResolverConfiguration$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micronaut.websocket.interceptor.$ClientWebSocketInterceptor$Definition$Reference",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.netty.bootstrap.ServerBootstrap$1"
  },
  {
    "name": "io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor",
    "queriedMethods": [
      {
        "name": "channelRead",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Object"
        ]
      },
      {
        "name": "exceptionCaught",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Throwable"
        ]
      }
    ]
  },
  {
    "name": "io.netty.buffer.AbstractByteBufAllocator",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "io.netty.channel.ChannelInboundHandlerAdapter",
    "queriedMethods": [
      {
        "name": "channelActive",
        "parameterTypes": ["io.netty.channel.ChannelHandlerContext"]
      },
      {
        "name": "channelInactive",
        "parameterTypes": ["io.netty.channel.ChannelHandlerContext"]
      },
      {
        "name": "channelRead",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Object"
        ]
      },
      {
        "name": "channelReadComplete",
        "parameterTypes": ["io.netty.channel.ChannelHandlerContext"]
      },
      {
        "name": "channelRegistered",
        "parameterTypes": ["io.netty.channel.ChannelHandlerContext"]
      },
      {
        "name": "channelUnregistered",
        "parameterTypes": ["io.netty.channel.ChannelHandlerContext"]
      },
      {
        "name": "channelWritabilityChanged",
        "parameterTypes": ["io.netty.channel.ChannelHandlerContext"]
      },
      {
        "name": "userEventTriggered",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Object"
        ]
      }
    ]
  },
  {
    "name": "io.netty.channel.ChannelInitializer",
    "queriedMethods": [
      {
        "name": "channelRegistered",
        "parameterTypes": ["io.netty.channel.ChannelHandlerContext"]
      },
      {
        "name": "exceptionCaught",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Throwable"
        ]
      }
    ]
  },
  {
    "name": "io.netty.channel.DefaultChannelPipeline$HeadContext",
    "queriedMethods": [
      {
        "name": "bind",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.net.SocketAddress",
          "io.netty.channel.ChannelPromise"
        ]
      },
      {
        "name": "channelActive",
        "parameterTypes": ["io.netty.channel.ChannelHandlerContext"]
      },
      {
        "name": "channelInactive",
        "parameterTypes": ["io.netty.channel.ChannelHandlerContext"]
      },
      {
        "name": "channelRead",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Object"
        ]
      },
      {
        "name": "channelReadComplete",
        "parameterTypes": ["io.netty.channel.ChannelHandlerContext"]
      },
      {
        "name": "channelRegistered",
        "parameterTypes": ["io.netty.channel.ChannelHandlerContext"]
      },
      {
        "name": "channelUnregistered",
        "parameterTypes": ["io.netty.channel.ChannelHandlerContext"]
      },
      {
        "name": "channelWritabilityChanged",
        "parameterTypes": ["io.netty.channel.ChannelHandlerContext"]
      },
      {
        "name": "close",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "io.netty.channel.ChannelPromise"
        ]
      },
      {
        "name": "connect",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.net.SocketAddress",
          "java.net.SocketAddress",
          "io.netty.channel.ChannelPromise"
        ]
      },
      {
        "name": "deregister",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "io.netty.channel.ChannelPromise"
        ]
      },
      {
        "name": "disconnect",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "io.netty.channel.ChannelPromise"
        ]
      },
      {
        "name": "exceptionCaught",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Throwable"
        ]
      },
      {
        "name": "flush",
        "parameterTypes": ["io.netty.channel.ChannelHandlerContext"]
      },
      {
        "name": "read",
        "parameterTypes": ["io.netty.channel.ChannelHandlerContext"]
      },
      {
        "name": "userEventTriggered",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Object"
        ]
      },
      {
        "name": "write",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Object",
          "io.netty.channel.ChannelPromise"
        ]
      }
    ]
  },
  {
    "name": "io.netty.channel.DefaultChannelPipeline$TailContext",
    "queriedMethods": [
      {
        "name": "channelActive",
        "parameterTypes": ["io.netty.channel.ChannelHandlerContext"]
      },
      {
        "name": "channelInactive",
        "parameterTypes": ["io.netty.channel.ChannelHandlerContext"]
      },
      {
        "name": "channelRead",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Object"
        ]
      },
      {
        "name": "channelReadComplete",
        "parameterTypes": ["io.netty.channel.ChannelHandlerContext"]
      },
      {
        "name": "channelRegistered",
        "parameterTypes": ["io.netty.channel.ChannelHandlerContext"]
      },
      {
        "name": "channelUnregistered",
        "parameterTypes": ["io.netty.channel.ChannelHandlerContext"]
      },
      {
        "name": "channelWritabilityChanged",
        "parameterTypes": ["io.netty.channel.ChannelHandlerContext"]
      },
      {
        "name": "exceptionCaught",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Throwable"
        ]
      },
      {
        "name": "userEventTriggered",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Object"
        ]
      }
    ]
  },
  {
    "name": "io.netty.channel.DefaultFileRegion"
  },
  {
    "name": "io.netty.channel.epoll.Epoll",
    "methods": [
      {
        "name": "isAvailable",
        "parameterTypes": []
      },
      {
        "name": "unavailabilityCause",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.netty.channel.epoll.NativeDatagramPacketArray$NativeDatagramPacket"
  },
  {
    "name": "io.netty.channel.socket.nio.NioSocketChannel",
    "queriedMethods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.netty.channel.unix.PeerCredentials"
  },
  {
    "name": "io.netty.util.AbstractReferenceCounted",
    "fields": [
      {
        "name": "refCnt"
      }
    ]
  },
  {
    "name": "io.netty.util.internal.NativeLibraryUtil",
    "methods": [
      {
        "name": "loadLibrary",
        "parameterTypes": ["java.lang.String", "boolean"]
      }
    ]
  },
  {
    "name": "io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueueColdProducerFields",
    "fields": [
      {
        "name": "producerLimit"
      }
    ]
  },
  {
    "name": "io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueueConsumerFields",
    "fields": [
      {
        "name": "consumerIndex"
      }
    ]
  },
  {
    "name": "io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueueProducerFields",
    "fields": [
      {
        "name": "producerIndex"
      }
    ]
  },
  {
    "name": "jakarta.inject.Inject",
    "queryAllPublicMethods": true
  },
  {
    "name": "java.io.FileDescriptor"
  },
  {
    "name": "java.io.FilePermission"
  },
  {
    "name": "java.lang.CharSequence",
    "queryAllPublicMethods": true
  },
  {
    "name": "java.lang.Class",
    "methods": [
      {
        "name": "getModule",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "java.lang.Enum"
  },
  {
    "name": "java.lang.Exception",
    "allDeclaredFields": true
  },
  {
    "name": "java.lang.Module",
    "methods": [
      {
        "name": "getDescriptor",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "java.lang.Object",
    "allDeclaredFields": true
  },
  {
    "name": "java.lang.ProcessHandle",
    "methods": [
      {
        "name": "current",
        "parameterTypes": []
      },
      {
        "name": "pid",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "java.lang.RuntimeException",
    "allDeclaredFields": true
  },
  {
    "name": "java.lang.RuntimePermission"
  },
  {
    "name": "java.lang.String"
  },
  {
    "name": "java.lang.Throwable",
    "allDeclaredFields": true,
    "methods": [
      {
        "name": "getSuppressed",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "java.lang.invoke.MethodHandle"
  },
  {
    "name": "java.lang.management.ManagementFactory",
    "methods": [
      {
        "name": "getRuntimeMXBean",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "java.lang.management.RuntimeMXBean",
    "methods": [
      {
        "name": "getInputArguments",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "java.lang.module.ModuleDescriptor",
    "queriedMethods": [
      {
        "name": "name",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "java.net.NetPermission"
  },
  {
    "name": "java.net.SocketPermission"
  },
  {
    "name": "java.net.URLPermission",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": ["java.lang.String", "java.lang.String"]
      }
    ]
  },
  {
    "name": "java.nio.Bits",
    "methods": [
      {
        "name": "unaligned",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "java.nio.Buffer",
    "fields": [
      {
        "name": "address"
      }
    ]
  },
  {
    "name": "java.nio.ByteBuffer",
    "queriedMethods": [
      {
        "name": "alignedSlice",
        "parameterTypes": ["int"]
      }
    ]
  },
  {
    "name": "java.nio.DirectByteBuffer",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": ["long", "int"]
      }
    ]
  },
  {
    "name": "java.nio.channels.FileChannel"
  },
  {
    "name": "java.security.AlgorithmParametersSpi"
  },
  {
    "name": "java.security.AllPermission"
  },
  {
    "name": "java.security.MessageDigestSpi"
  },
  {
    "name": "java.security.SecureRandomParameters"
  },
  {
    "name": "java.security.SecurityPermission"
  },
  {
    "name": "java.security.cert.PKIXRevocationChecker"
  },
  {
    "name": "java.security.interfaces.DSAPrivateKey"
  },
  {
    "name": "java.security.interfaces.DSAPublicKey"
  },
  {
    "name": "java.security.interfaces.RSAPrivateKey"
  },
  {
    "name": "java.security.interfaces.RSAPublicKey"
  },
  {
    "name": "java.security.spec.DSAParameterSpec"
  },
  {
    "name": "java.util.Date"
  },
  {
    "name": "java.util.HashSet"
  },
  {
    "name": "java.util.LinkedHashSet"
  },
  {
    "name": "java.util.PropertyPermission"
  },
  {
    "name": "java.util.concurrent.ArrayBlockingQueue"
  },
  {
    "name": "java.util.concurrent.atomic.LongAdder",
    "queryAllPublicConstructors": true,
    "queriedMethods": [
      {
        "name": "add",
        "parameterTypes": ["long"]
      },
      {
        "name": "sum",
        "parameterTypes": []
      }
    ],
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "java.util.concurrent.locks.AbstractOwnableSynchronizer"
  },
  {
    "name": "java.util.concurrent.locks.AbstractQueuedSynchronizer"
  },
  {
    "name": "java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject"
  },
  {
    "name": "java.util.concurrent.locks.ReentrantLock"
  },
  {
    "name": "java.util.concurrent.locks.ReentrantLock$NonfairSync"
  },
  {
    "name": "java.util.concurrent.locks.ReentrantLock$Sync"
  },
  {
    "name": "java.util.function.Consumer",
    "queryAllPublicMethods": true
  },
  {
    "name": "javax.management.ObjectName"
  },
  {
    "name": "javax.naming.directory.InitialDirContext"
  },
  {
    "name": "javax.security.auth.x500.X500Principal",
    "fields": [
      {
        "name": "thisX500Name"
      }
    ],
    "queriedMethods": [
      {
        "name": "<init>",
        "parameterTypes": ["sun.security.x509.X500Name"]
      }
    ]
  },
  {
    "name": "jdk.internal.misc.Unsafe",
    "methods": [
      {
        "name": "getUnsafe",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "kotlin.Metadata",
    "queryAllPublicMethods": true
  },
  {
    "name": "kotlin.annotation.MustBeDocumented",
    "queryAllPublicMethods": true
  },
  {
    "name": "kotlin.annotation.Retention",
    "queryAllPublicMethods": true
  },
  {
    "name": "kotlin.annotation.Target",
    "queryAllPublicMethods": true
  },
  {
    "name": "kotlin.coroutines.jvm.internal.BaseContinuationImpl"
  },
  {
    "name": "kotlin.internal.jdk8.JDK8PlatformImplementations",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "kotlinx.coroutines.flow.Flow"
  },
  {
    "name": "kotlinx.coroutines.internal.StackTraceRecoveryKt"
  },
  {
    "name": "org.bouncycastle.jcajce.provider.asymmetric.COMPOSITE$Mappings",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.bouncycastle.jcajce.provider.asymmetric.DH$Mappings",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.bouncycastle.jcajce.provider.asymmetric.DSA$Mappings",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.bouncycastle.jcajce.provider.asymmetric.DSTU4145$Mappings",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.bouncycastle.jcajce.provider.asymmetric.EC$Mappings",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.bouncycastle.jcajce.provider.asymmetric.ECGOST$Mappings",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.bouncycastle.jcajce.provider.asymmetric.EdEC$Mappings",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.bouncycastle.jcajce.provider.asymmetric.ElGamal$Mappings",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.bouncycastle.jcajce.provider.asymmetric.GM$Mappings",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.bouncycastle.jcajce.provider.asymmetric.GOST$Mappings",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.bouncycastle.jcajce.provider.asymmetric.IES$Mappings",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.bouncycastle.jcajce.provider.asymmetric.RSA$Mappings",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.bouncycastle.jcajce.provider.asymmetric.X509$Mappings",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.bouncycastle.jcajce.provider.digest.Blake2b$Mappings",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.bouncycastle.jcajce.provider.digest.Blake2s$Mappings",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.bouncycastle.jcajce.provider.digest.DSTU7564$Mappings",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.bouncycastle.jcajce.provider.digest.GOST3411$Mappings",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.bouncycastle.jcajce.provider.digest.Haraka$Mappings",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.bouncycastle.jcajce.provider.digest.Keccak$Mappings",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.bouncycastle.jcajce.provider.digest.MD2$Mappings",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.bouncycastle.jcajce.provider.digest.MD4$Mappings",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.bouncycastle.jcajce.provider.digest.MD5$Mappings",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.bouncycastle.jcajce.provider.digest.RIPEMD128$Mappings",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.bouncycastle.jcajce.provider.digest.RIPEMD160$Mappings",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.bouncycastle.jcajce.provider.digest.RIPEMD256$Mappings",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.bouncycastle.jcajce.provider.digest.RIPEMD320$Mappings",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.bouncycastle.jcajce.provider.digest.SHA1$Mappings",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.bouncycastle.jcajce.provider.digest.SHA224$Mappings",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.bouncycastle.jcajce.provider.digest.SHA256$Mappings",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.bouncycastle.jcajce.provider.digest.SHA3$Mappings",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.bouncycastle.jcajce.provider.digest.SHA384$Mappings",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.bouncycastle.jcajce.provider.digest.SHA512$Mappings",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.bouncycastle.jcajce.provider.digest.SM3$Mappings",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.bouncycastle.jcajce.provider.digest.Skein$Mappings",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.bouncycastle.jcajce.provider.digest.Tiger$Mappings",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.bouncycastle.jcajce.provider.digest.Whirlpool$Mappings",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.bouncycastle.jcajce.provider.drbg.DRBG$Mappings",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.bouncycastle.jcajce.provider.keystore.BC$Mappings",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.bouncycastle.jcajce.provider.keystore.BCFKS$Mappings",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.bouncycastle.jcajce.provider.keystore.PKCS12$Mappings",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.bouncycastle.jcajce.provider.symmetric.AES$Mappings",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.bouncycastle.jcajce.provider.symmetric.ARC4$Mappings",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.bouncycastle.jcajce.provider.symmetric.ARIA$Mappings",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.bouncycastle.jcajce.provider.symmetric.Blowfish$Mappings",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.bouncycastle.jcajce.provider.symmetric.CAST5$Mappings",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.bouncycastle.jcajce.provider.symmetric.CAST6$Mappings",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.bouncycastle.jcajce.provider.symmetric.Camellia$Mappings",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.bouncycastle.jcajce.provider.symmetric.ChaCha$Mappings",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.bouncycastle.jcajce.provider.symmetric.DES$Mappings",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.bouncycastle.jcajce.provider.symmetric.DESede$Mappings",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.bouncycastle.jcajce.provider.symmetric.DSTU7624$Mappings",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.bouncycastle.jcajce.provider.symmetric.GOST28147$Mappings",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.bouncycastle.jcajce.provider.symmetric.GOST3412_2015$Mappings",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.bouncycastle.jcajce.provider.symmetric.Grain128$Mappings",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.bouncycastle.jcajce.provider.symmetric.Grainv1$Mappings",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.bouncycastle.jcajce.provider.symmetric.HC128$Mappings",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.bouncycastle.jcajce.provider.symmetric.HC256$Mappings",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.bouncycastle.jcajce.provider.symmetric.IDEA$Mappings",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.bouncycastle.jcajce.provider.symmetric.Noekeon$Mappings",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.bouncycastle.jcajce.provider.symmetric.OpenSSLPBKDF$Mappings",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.bouncycastle.jcajce.provider.symmetric.PBEPBKDF1$Mappings",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.bouncycastle.jcajce.provider.symmetric.PBEPBKDF2$Mappings",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.bouncycastle.jcajce.provider.symmetric.PBEPKCS12$Mappings",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.bouncycastle.jcajce.provider.symmetric.Poly1305$Mappings",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.bouncycastle.jcajce.provider.symmetric.RC2$Mappings",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.bouncycastle.jcajce.provider.symmetric.RC5$Mappings",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.bouncycastle.jcajce.provider.symmetric.RC6$Mappings",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.bouncycastle.jcajce.provider.symmetric.Rijndael$Mappings",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.bouncycastle.jcajce.provider.symmetric.SCRYPT$Mappings",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.bouncycastle.jcajce.provider.symmetric.SEED$Mappings",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.bouncycastle.jcajce.provider.symmetric.SM4$Mappings",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.bouncycastle.jcajce.provider.symmetric.Salsa20$Mappings",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.bouncycastle.jcajce.provider.symmetric.Serpent$Mappings",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.bouncycastle.jcajce.provider.symmetric.Shacal2$Mappings",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.bouncycastle.jcajce.provider.symmetric.SipHash$Mappings",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.bouncycastle.jcajce.provider.symmetric.SipHash128$Mappings",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.bouncycastle.jcajce.provider.symmetric.Skipjack$Mappings",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.bouncycastle.jcajce.provider.symmetric.TEA$Mappings",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.bouncycastle.jcajce.provider.symmetric.TLSKDF$Mappings",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.bouncycastle.jcajce.provider.symmetric.Threefish$Mappings",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.bouncycastle.jcajce.provider.symmetric.Twofish$Mappings",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.bouncycastle.jcajce.provider.symmetric.VMPC$Mappings",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.bouncycastle.jcajce.provider.symmetric.VMPCKSA3$Mappings",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.bouncycastle.jcajce.provider.symmetric.XSalsa20$Mappings",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.bouncycastle.jcajce.provider.symmetric.XTEA$Mappings",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.bouncycastle.jcajce.provider.symmetric.Zuc$Mappings",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.conscrypt.NativeLibraryUtil",
    "methods": [
      {
        "name": "loadLibrary",
        "parameterTypes": ["java.lang.String", "boolean"]
      }
    ]
  },
  {
    "name": "reactor.core.publisher.Flux"
  },
  {
    "name": "reactor.core.publisher.Mono"
  },
  {
    "name": "sun.misc.Unsafe",
    "allDeclaredFields": true,
    "queriedMethods": [
      {
        "name": "arrayBaseOffset",
        "parameterTypes": ["java.lang.Class"]
      },
      {
        "name": "arrayIndexScale",
        "parameterTypes": ["java.lang.Class"]
      },
      {
        "name": "copyMemory",
        "parameterTypes": ["long", "long", "long"]
      },
      {
        "name": "copyMemory",
        "parameterTypes": [
          "java.lang.Object",
          "long",
          "java.lang.Object",
          "long",
          "long"
        ]
      },
      {
        "name": "getAndAddLong",
        "parameterTypes": ["java.lang.Object", "long", "long"]
      },
      {
        "name": "getAndSetObject",
        "parameterTypes": ["java.lang.Object", "long", "java.lang.Object"]
      },
      {
        "name": "getBoolean",
        "parameterTypes": ["java.lang.Object", "long"]
      },
      {
        "name": "getByte",
        "parameterTypes": ["long"]
      },
      {
        "name": "getByte",
        "parameterTypes": ["java.lang.Object", "long"]
      },
      {
        "name": "getDouble",
        "parameterTypes": ["java.lang.Object", "long"]
      },
      {
        "name": "getFloat",
        "parameterTypes": ["java.lang.Object", "long"]
      },
      {
        "name": "getInt",
        "parameterTypes": ["long"]
      },
      {
        "name": "getInt",
        "parameterTypes": ["java.lang.Object", "long"]
      },
      {
        "name": "getLong",
        "parameterTypes": ["long"]
      },
      {
        "name": "getLong",
        "parameterTypes": ["java.lang.Object", "long"]
      },
      {
        "name": "getObject",
        "parameterTypes": ["java.lang.Object", "long"]
      },
      {
        "name": "objectFieldOffset",
        "parameterTypes": ["java.lang.reflect.Field"]
      },
      {
        "name": "putBoolean",
        "parameterTypes": ["java.lang.Object", "long", "boolean"]
      },
      {
        "name": "putByte",
        "parameterTypes": ["long", "byte"]
      },
      {
        "name": "putByte",
        "parameterTypes": ["java.lang.Object", "long", "byte"]
      },
      {
        "name": "putDouble",
        "parameterTypes": ["java.lang.Object", "long", "double"]
      },
      {
        "name": "putFloat",
        "parameterTypes": ["java.lang.Object", "long", "float"]
      },
      {
        "name": "putInt",
        "parameterTypes": ["long", "int"]
      },
      {
        "name": "putInt",
        "parameterTypes": ["java.lang.Object", "long", "int"]
      },
      {
        "name": "putLong",
        "parameterTypes": ["long", "long"]
      },
      {
        "name": "putLong",
        "parameterTypes": ["java.lang.Object", "long", "long"]
      },
      {
        "name": "putObject",
        "parameterTypes": ["java.lang.Object", "long", "java.lang.Object"]
      },
      {
        "name": "storeFence",
        "parameterTypes": []
      }
    ],
    "methods": [
      {
        "name": "invokeCleaner",
        "parameterTypes": ["java.nio.ByteBuffer"]
      }
    ]
  },
  {
    "name": "sun.nio.ch.SelectorImpl",
    "fields": [
      {
        "name": "publicSelectedKeys"
      },
      {
        "name": "selectedKeys"
      }
    ]
  },
  {
    "name": "sun.security.provider.DSA$SHA1withDSA",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "sun.security.provider.DSA$SHA256withDSA",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "sun.security.provider.DSAKeyFactory",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "sun.security.provider.DSAParameters",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "sun.security.provider.NativePRNG",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "sun.security.provider.SHA",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "sun.security.provider.SHA2$SHA256",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "sun.security.provider.X509Factory",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "sun.security.rsa.RSAKeyFactory$Legacy",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "sun.security.rsa.RSASignature$SHA256withRSA",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "sun.security.util.ObjectIdentifier"
  },
  {
    "name": "sun.security.x509.AuthorityInfoAccessExtension",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": ["java.lang.Boolean", "java.lang.Object"]
      }
    ]
  },
  {
    "name": "sun.security.x509.AuthorityKeyIdentifierExtension",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": ["java.lang.Boolean", "java.lang.Object"]
      }
    ]
  },
  {
    "name": "sun.security.x509.BasicConstraintsExtension",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": ["java.lang.Boolean", "java.lang.Object"]
      }
    ]
  },
  {
    "name": "sun.security.x509.CRLDistributionPointsExtension",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": ["java.lang.Boolean", "java.lang.Object"]
      }
    ]
  },
  {
    "name": "sun.security.x509.CertificateExtensions"
  },
  {
    "name": "sun.security.x509.CertificatePoliciesExtension",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": ["java.lang.Boolean", "java.lang.Object"]
      }
    ]
  },
  {
    "name": "sun.security.x509.ExtendedKeyUsageExtension",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": ["java.lang.Boolean", "java.lang.Object"]
      }
    ]
  },
  {
    "name": "sun.security.x509.KeyUsageExtension",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": ["java.lang.Boolean", "java.lang.Object"]
      }
    ]
  },
  {
    "name": "sun.security.x509.NetscapeCertTypeExtension",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": ["java.lang.Boolean", "java.lang.Object"]
      }
    ]
  },
  {
    "name": "sun.security.x509.SubjectAlternativeNameExtension",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": ["java.lang.Boolean", "java.lang.Object"]
      }
    ]
  },
  {
    "name": "sun.security.x509.SubjectKeyIdentifierExtension",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": ["java.lang.Boolean", "java.lang.Object"]
      }
    ]
  },
  {
    "name": "tools.elide.assets.AssetBundle$GenericBundle",
    "methods": [
      {
        "name": "getModule",
        "parameterTypes": []
      },
      {
        "name": "getFilename",
        "parameterTypes": []
      },
      {
        "name": "getToken",
        "parameterTypes": []
      },
      {
        "name": "getVariantList",
        "parameterTypes": []
      },
      {
        "name": "getVariantCount",
        "parameterTypes": []
      },
      {
        "name": "getVariant",
        "parameterTypes": ["int"]
      },
      {
        "name": "getCompressable",
        "parameterTypes": []
      },
      {
        "name": "getCacheable",
        "parameterTypes": []
      },
      {
        "name": "getExternal",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "tools.elide.assets.AssetBundle",
    "queriedMethods": [
      {
        "name": "getAsset",
        "parameterTypes": ["int"]
      },
      {
        "name": "getAssetCount",
        "parameterTypes": []
      }
    ],
    "methods": [
      {
        "name": "getAssetList",
        "parameterTypes": []
      },
      {
        "name": "getDefaultInstance",
        "parameterTypes": []
      },
      {
        "name": "getDigest",
        "parameterTypes": []
      },
      {
        "name": "getGenerated",
        "parameterTypes": []
      },
      {
        "name": "getSettings",
        "parameterTypes": []
      },
      {
        "name": "getVersion",
        "parameterTypes": []
      },
      {
        "name": "hasGenerated",
        "parameterTypes": []
      },
      {
        "name": "hasSettings",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "tools.elide.assets.AssetBundle$AssetContent",
    "queriedMethods": [
      {
        "name": "getFilenameBytes",
        "parameterTypes": []
      },
      {
        "name": "getModuleBytes",
        "parameterTypes": []
      },
      {
        "name": "getTokenBytes",
        "parameterTypes": []
      },
      {
        "name": "getVariant",
        "parameterTypes": ["int"]
      },
      {
        "name": "getVariantCount",
        "parameterTypes": []
      }
    ],
    "methods": [
      {
        "name": "getFilename",
        "parameterTypes": []
      },
      {
        "name": "getModule",
        "parameterTypes": []
      },
      {
        "name": "getToken",
        "parameterTypes": []
      },
      {
        "name": "getVariantList",
        "parameterTypes": []
      },
      {
        "name": "newBuilder",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "tools.elide.assets.AssetBundle$AssetContent$Builder",
    "queriedMethods": [
      {
        "name": "clearFilename",
        "parameterTypes": []
      },
      {
        "name": "clearModule",
        "parameterTypes": []
      },
      {
        "name": "clearToken",
        "parameterTypes": []
      },
      {
        "name": "clearVariant",
        "parameterTypes": []
      },
      {
        "name": "getFilenameBytes",
        "parameterTypes": []
      },
      {
        "name": "getModuleBytes",
        "parameterTypes": []
      },
      {
        "name": "getTokenBytes",
        "parameterTypes": []
      },
      {
        "name": "getVariant",
        "parameterTypes": ["int"]
      },
      {
        "name": "getVariantBuilder",
        "parameterTypes": ["int"]
      },
      {
        "name": "getVariantList",
        "parameterTypes": []
      },
      {
        "name": "setFilenameBytes",
        "parameterTypes": ["com.google.protobuf.ByteString"]
      },
      {
        "name": "setModuleBytes",
        "parameterTypes": ["com.google.protobuf.ByteString"]
      },
      {
        "name": "setTokenBytes",
        "parameterTypes": ["com.google.protobuf.ByteString"]
      },
      {
        "name": "setVariant",
        "parameterTypes": ["int", "tools.elide.data.CompressedData"]
      }
    ],
    "methods": [
      {
        "name": "addVariant",
        "parameterTypes": ["tools.elide.data.CompressedData"]
      },
      {
        "name": "getFilename",
        "parameterTypes": []
      },
      {
        "name": "getModule",
        "parameterTypes": []
      },
      {
        "name": "getToken",
        "parameterTypes": []
      },
      {
        "name": "getVariantCount",
        "parameterTypes": []
      },
      {
        "name": "setFilename",
        "parameterTypes": ["java.lang.String"]
      },
      {
        "name": "setModule",
        "parameterTypes": ["java.lang.String"]
      },
      {
        "name": "setToken",
        "parameterTypes": ["java.lang.String"]
      }
    ]
  },
  {
    "name": "tools.elide.assets.AssetBundle$AssetDependencies",
    "queriedMethods": [
      {
        "name": "getDirect",
        "parameterTypes": ["int"]
      },
      {
        "name": "getDirectCount",
        "parameterTypes": []
      },
      {
        "name": "getMask",
        "parameterTypes": []
      },
      {
        "name": "getTransitive",
        "parameterTypes": ["int"]
      },
      {
        "name": "getTransitiveCount",
        "parameterTypes": []
      }
    ],
    "methods": [
      {
        "name": "getDirectList",
        "parameterTypes": []
      },
      {
        "name": "getTransitiveList",
        "parameterTypes": []
      },
      {
        "name": "hasMask",
        "parameterTypes": []
      },
      {
        "name": "newBuilder",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "tools.elide.assets.AssetBundle$AssetDependencies$Builder",
    "queriedMethods": [
      {
        "name": "addDirect",
        "parameterTypes": ["java.lang.String"]
      },
      {
        "name": "addTransitive",
        "parameterTypes": ["java.lang.String"]
      },
      {
        "name": "clearDirect",
        "parameterTypes": []
      },
      {
        "name": "clearMask",
        "parameterTypes": []
      },
      {
        "name": "clearTransitive",
        "parameterTypes": []
      },
      {
        "name": "getDirect",
        "parameterTypes": ["int"]
      },
      {
        "name": "getDirectList",
        "parameterTypes": []
      },
      {
        "name": "getMask",
        "parameterTypes": []
      },
      {
        "name": "getMaskBuilder",
        "parameterTypes": []
      },
      {
        "name": "getTransitive",
        "parameterTypes": ["int"]
      },
      {
        "name": "getTransitiveList",
        "parameterTypes": []
      },
      {
        "name": "hasMask",
        "parameterTypes": []
      },
      {
        "name": "setDirect",
        "parameterTypes": ["int", "java.lang.String"]
      },
      {
        "name": "setMask",
        "parameterTypes": ["tools.elide.struct.BloomFilter"]
      },
      {
        "name": "setTransitive",
        "parameterTypes": ["int", "java.lang.String"]
      }
    ],
    "methods": [
      {
        "name": "getDirectCount",
        "parameterTypes": []
      },
      {
        "name": "getTransitiveCount",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "tools.elide.assets.AssetBundle$Builder",
    "queriedMethods": [
      {
        "name": "clearAsset",
        "parameterTypes": []
      },
      {
        "name": "clearDigest",
        "parameterTypes": []
      },
      {
        "name": "clearGenerated",
        "parameterTypes": []
      },
      {
        "name": "clearSettings",
        "parameterTypes": []
      },
      {
        "name": "clearVersion",
        "parameterTypes": []
      },
      {
        "name": "getAsset",
        "parameterTypes": ["int"]
      },
      {
        "name": "getAssetBuilder",
        "parameterTypes": ["int"]
      },
      {
        "name": "getAssetList",
        "parameterTypes": []
      },
      {
        "name": "getGenerated",
        "parameterTypes": []
      },
      {
        "name": "getGeneratedBuilder",
        "parameterTypes": []
      },
      {
        "name": "getSettings",
        "parameterTypes": []
      },
      {
        "name": "getSettingsBuilder",
        "parameterTypes": []
      },
      {
        "name": "setAsset",
        "parameterTypes": ["int", "tools.elide.assets.AssetBundle$AssetContent"]
      }
    ],
    "methods": [
      {
        "name": "addAsset",
        "parameterTypes": ["tools.elide.assets.AssetBundle$AssetContent"]
      },
      {
        "name": "getAssetCount",
        "parameterTypes": []
      },
      {
        "name": "getDigest",
        "parameterTypes": []
      },
      {
        "name": "getVersion",
        "parameterTypes": []
      },
      {
        "name": "hasGenerated",
        "parameterTypes": []
      },
      {
        "name": "hasSettings",
        "parameterTypes": []
      },
      {
        "name": "setDigest",
        "parameterTypes": ["com.google.protobuf.ByteString"]
      },
      {
        "name": "setGenerated",
        "parameterTypes": ["com.google.protobuf.Timestamp"]
      },
      {
        "name": "setSettings",
        "parameterTypes": ["tools.elide.assets.AssetBundle$BundlerSettings"]
      },
      {
        "name": "setVersion",
        "parameterTypes": ["int"]
      }
    ]
  },
  {
    "name": "tools.elide.assets.AssetBundle$BundlerSettings",
    "queriedMethods": [
      {
        "name": "getCompression",
        "parameterTypes": ["int"]
      },
      {
        "name": "getCompressionList",
        "parameterTypes": []
      },
      {
        "name": "getCompressionValue",
        "parameterTypes": ["int"]
      }
    ],
    "methods": [
      {
        "name": "getCompressionCount",
        "parameterTypes": []
      },
      {
        "name": "getDigestSettings",
        "parameterTypes": []
      },
      {
        "name": "getMinify",
        "parameterTypes": []
      },
      {
        "name": "getPrepack",
        "parameterTypes": []
      },
      {
        "name": "getRewriting",
        "parameterTypes": []
      },
      {
        "name": "hasDigestSettings",
        "parameterTypes": []
      },
      {
        "name": "newBuilder",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "tools.elide.assets.AssetBundle$BundlerSettings$Builder",
    "queriedMethods": [
      {
        "name": "addCompression",
        "parameterTypes": ["tools.elide.data.CompressionMode"]
      },
      {
        "name": "addCompressionValue",
        "parameterTypes": ["int"]
      },
      {
        "name": "clearCompression",
        "parameterTypes": []
      },
      {
        "name": "clearDigestSettings",
        "parameterTypes": []
      },
      {
        "name": "clearMinify",
        "parameterTypes": []
      },
      {
        "name": "clearPrepack",
        "parameterTypes": []
      },
      {
        "name": "clearRewriting",
        "parameterTypes": []
      },
      {
        "name": "getCompression",
        "parameterTypes": ["int"]
      },
      {
        "name": "getCompressionList",
        "parameterTypes": []
      },
      {
        "name": "getCompressionValue",
        "parameterTypes": ["int"]
      },
      {
        "name": "getDigestSettings",
        "parameterTypes": []
      },
      {
        "name": "getDigestSettingsBuilder",
        "parameterTypes": []
      },
      {
        "name": "setCompression",
        "parameterTypes": ["int", "tools.elide.data.CompressionMode"]
      },
      {
        "name": "setCompressionValue",
        "parameterTypes": ["int", "int"]
      }
    ],
    "methods": [
      {
        "name": "getCompressionCount",
        "parameterTypes": []
      },
      {
        "name": "getMinify",
        "parameterTypes": []
      },
      {
        "name": "getPrepack",
        "parameterTypes": []
      },
      {
        "name": "getRewriting",
        "parameterTypes": []
      },
      {
        "name": "hasDigestSettings",
        "parameterTypes": []
      },
      {
        "name": "setDigestSettings",
        "parameterTypes": ["tools.elide.assets.AssetBundle$DigestSettings"]
      },
      {
        "name": "setMinify",
        "parameterTypes": ["boolean"]
      },
      {
        "name": "setPrepack",
        "parameterTypes": ["boolean"]
      },
      {
        "name": "setRewriting",
        "parameterTypes": ["boolean"]
      }
    ]
  },
  {
    "name": "tools.elide.assets.AssetBundle$DigestSettings",
    "queriedMethods": [
      {
        "name": "getAlgorithm",
        "parameterTypes": []
      }
    ],
    "methods": [
      {
        "name": "getAlgorithmValue",
        "parameterTypes": []
      },
      {
        "name": "getRounds",
        "parameterTypes": []
      },
      {
        "name": "getTail",
        "parameterTypes": []
      },
      {
        "name": "newBuilder",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "tools.elide.assets.AssetBundle$DigestSettings$Builder",
    "queriedMethods": [
      {
        "name": "clearAlgorithm",
        "parameterTypes": []
      },
      {
        "name": "clearRounds",
        "parameterTypes": []
      },
      {
        "name": "clearTail",
        "parameterTypes": []
      },
      {
        "name": "getAlgorithm",
        "parameterTypes": []
      },
      {
        "name": "setAlgorithm",
        "parameterTypes": ["tools.elide.crypto.HashAlgorithm"]
      }
    ],
    "methods": [
      {
        "name": "getAlgorithmValue",
        "parameterTypes": []
      },
      {
        "name": "getRounds",
        "parameterTypes": []
      },
      {
        "name": "getTail",
        "parameterTypes": []
      },
      {
        "name": "setAlgorithmValue",
        "parameterTypes": ["int"]
      },
      {
        "name": "setRounds",
        "parameterTypes": ["int"]
      },
      {
        "name": "setTail",
        "parameterTypes": ["int"]
      }
    ]
  },
  {
    "name": "tools.elide.assets.AssetBundle$RewriteMap",
    "queriedMethods": [
      {
        "name": "newBuilder",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "tools.elide.assets.AssetBundle$ScriptBundle",
    "queriedMethods": [
      {
        "name": "getAsset",
        "parameterTypes": ["int"]
      },
      {
        "name": "getAssetCount",
        "parameterTypes": []
      },
      {
        "name": "getModuleBytes",
        "parameterTypes": []
      }
    ],
    "methods": [
      {
        "name": "getAssetList",
        "parameterTypes": []
      },
      {
        "name": "getCacheable",
        "parameterTypes": []
      },
      {
        "name": "getCompressable",
        "parameterTypes": []
      },
      {
        "name": "getDependencies",
        "parameterTypes": []
      },
      {
        "name": "getExternal",
        "parameterTypes": []
      },
      {
        "name": "getModule",
        "parameterTypes": []
      },
      {
        "name": "hasDependencies",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "tools.elide.assets.AssetBundle$ScriptBundle$Builder",
    "queriedMethods": [
      {
        "name": "clearAsset",
        "parameterTypes": []
      },
      {
        "name": "clearCacheable",
        "parameterTypes": []
      },
      {
        "name": "clearCompressable",
        "parameterTypes": []
      },
      {
        "name": "clearDependencies",
        "parameterTypes": []
      },
      {
        "name": "clearExternal",
        "parameterTypes": []
      },
      {
        "name": "clearModule",
        "parameterTypes": []
      },
      {
        "name": "getAsset",
        "parameterTypes": ["int"]
      },
      {
        "name": "getAssetBuilder",
        "parameterTypes": ["int"]
      },
      {
        "name": "getAssetList",
        "parameterTypes": []
      },
      {
        "name": "getDependencies",
        "parameterTypes": []
      },
      {
        "name": "getDependenciesBuilder",
        "parameterTypes": []
      },
      {
        "name": "getModuleBytes",
        "parameterTypes": []
      },
      {
        "name": "setAsset",
        "parameterTypes": [
          "int",
          "tools.elide.assets.AssetBundle$ScriptBundle$ScriptAsset"
        ]
      },
      {
        "name": "setModuleBytes",
        "parameterTypes": ["com.google.protobuf.ByteString"]
      }
    ],
    "methods": [
      {
        "name": "addAsset",
        "parameterTypes": [
          "tools.elide.assets.AssetBundle$ScriptBundle$ScriptAsset"
        ]
      },
      {
        "name": "getAssetCount",
        "parameterTypes": []
      },
      {
        "name": "getCacheable",
        "parameterTypes": []
      },
      {
        "name": "getCompressable",
        "parameterTypes": []
      },
      {
        "name": "getExternal",
        "parameterTypes": []
      },
      {
        "name": "getModule",
        "parameterTypes": []
      },
      {
        "name": "hasDependencies",
        "parameterTypes": []
      },
      {
        "name": "setCacheable",
        "parameterTypes": ["boolean"]
      },
      {
        "name": "setCompressable",
        "parameterTypes": ["boolean"]
      },
      {
        "name": "setDependencies",
        "parameterTypes": ["tools.elide.assets.AssetBundle$AssetDependencies"]
      },
      {
        "name": "setExternal",
        "parameterTypes": ["boolean"]
      },
      {
        "name": "setModule",
        "parameterTypes": ["java.lang.String"]
      }
    ]
  },
  {
    "name": "tools.elide.assets.AssetBundle$ScriptBundle$ScriptAsset",
    "queriedMethods": [
      {
        "name": "getFilenameBytes",
        "parameterTypes": []
      },
      {
        "name": "getTokenBytes",
        "parameterTypes": []
      }
    ],
    "methods": [
      {
        "name": "getFilename",
        "parameterTypes": []
      },
      {
        "name": "getToken",
        "parameterTypes": []
      },
      {
        "name": "newBuilder",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "tools.elide.assets.AssetBundle$ScriptBundle$ScriptAsset$Builder",
    "queriedMethods": [
      {
        "name": "clearFilename",
        "parameterTypes": []
      },
      {
        "name": "clearToken",
        "parameterTypes": []
      },
      {
        "name": "getFilenameBytes",
        "parameterTypes": []
      },
      {
        "name": "getTokenBytes",
        "parameterTypes": []
      },
      {
        "name": "setFilenameBytes",
        "parameterTypes": ["com.google.protobuf.ByteString"]
      },
      {
        "name": "setTokenBytes",
        "parameterTypes": ["com.google.protobuf.ByteString"]
      }
    ],
    "methods": [
      {
        "name": "getFilename",
        "parameterTypes": []
      },
      {
        "name": "getToken",
        "parameterTypes": []
      },
      {
        "name": "setFilename",
        "parameterTypes": ["java.lang.String"]
      },
      {
        "name": "setToken",
        "parameterTypes": ["java.lang.String"]
      }
    ]
  },
  {
    "name": "tools.elide.assets.AssetBundle$StyleBundle",
    "queriedMethods": [
      {
        "name": "getAsset",
        "parameterTypes": ["int"]
      },
      {
        "name": "getAssetCount",
        "parameterTypes": []
      },
      {
        "name": "getModuleBytes",
        "parameterTypes": []
      },
      {
        "name": "getRewriteMap",
        "parameterTypes": []
      }
    ],
    "methods": [
      {
        "name": "getAssetList",
        "parameterTypes": []
      },
      {
        "name": "getCacheable",
        "parameterTypes": []
      },
      {
        "name": "getCompressable",
        "parameterTypes": []
      },
      {
        "name": "getDependencies",
        "parameterTypes": []
      },
      {
        "name": "getModule",
        "parameterTypes": []
      },
      {
        "name": "hasDependencies",
        "parameterTypes": []
      },
      {
        "name": "hasRewriteMap",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "tools.elide.assets.AssetBundle$StyleBundle$Builder",
    "queriedMethods": [
      {
        "name": "clearAsset",
        "parameterTypes": []
      },
      {
        "name": "clearCacheable",
        "parameterTypes": []
      },
      {
        "name": "clearCompressable",
        "parameterTypes": []
      },
      {
        "name": "clearDependencies",
        "parameterTypes": []
      },
      {
        "name": "clearModule",
        "parameterTypes": []
      },
      {
        "name": "clearRewriteMap",
        "parameterTypes": []
      },
      {
        "name": "getAsset",
        "parameterTypes": ["int"]
      },
      {
        "name": "getAssetBuilder",
        "parameterTypes": ["int"]
      },
      {
        "name": "getAssetList",
        "parameterTypes": []
      },
      {
        "name": "getDependencies",
        "parameterTypes": []
      },
      {
        "name": "getDependenciesBuilder",
        "parameterTypes": []
      },
      {
        "name": "getModuleBytes",
        "parameterTypes": []
      },
      {
        "name": "getRewriteMap",
        "parameterTypes": []
      },
      {
        "name": "getRewriteMapBuilder",
        "parameterTypes": []
      },
      {
        "name": "hasRewriteMap",
        "parameterTypes": []
      },
      {
        "name": "setAsset",
        "parameterTypes": [
          "int",
          "tools.elide.assets.AssetBundle$StyleBundle$StyleAsset"
        ]
      },
      {
        "name": "setModuleBytes",
        "parameterTypes": ["com.google.protobuf.ByteString"]
      },
      {
        "name": "setRewriteMap",
        "parameterTypes": ["tools.elide.assets.AssetBundle$RewriteMap"]
      }
    ],
    "methods": [
      {
        "name": "addAsset",
        "parameterTypes": [
          "tools.elide.assets.AssetBundle$StyleBundle$StyleAsset"
        ]
      },
      {
        "name": "getAssetCount",
        "parameterTypes": []
      },
      {
        "name": "getCacheable",
        "parameterTypes": []
      },
      {
        "name": "getCompressable",
        "parameterTypes": []
      },
      {
        "name": "getModule",
        "parameterTypes": []
      },
      {
        "name": "hasDependencies",
        "parameterTypes": []
      },
      {
        "name": "setCacheable",
        "parameterTypes": ["boolean"]
      },
      {
        "name": "setCompressable",
        "parameterTypes": ["boolean"]
      },
      {
        "name": "setDependencies",
        "parameterTypes": ["tools.elide.assets.AssetBundle$AssetDependencies"]
      },
      {
        "name": "setModule",
        "parameterTypes": ["java.lang.String"]
      }
    ]
  },
  {
    "name": "tools.elide.assets.AssetBundle$StyleBundle$StyleAsset",
    "queriedMethods": [
      {
        "name": "getFilenameBytes",
        "parameterTypes": []
      },
      {
        "name": "getTokenBytes",
        "parameterTypes": []
      }
    ],
    "methods": [
      {
        "name": "getFilename",
        "parameterTypes": []
      },
      {
        "name": "getRenaming",
        "parameterTypes": []
      },
      {
        "name": "getToken",
        "parameterTypes": []
      },
      {
        "name": "newBuilder",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "tools.elide.assets.AssetBundle$StyleBundle$StyleAsset$Builder",
    "queriedMethods": [
      {
        "name": "clearFilename",
        "parameterTypes": []
      },
      {
        "name": "clearRenaming",
        "parameterTypes": []
      },
      {
        "name": "clearToken",
        "parameterTypes": []
      },
      {
        "name": "getFilenameBytes",
        "parameterTypes": []
      },
      {
        "name": "getTokenBytes",
        "parameterTypes": []
      },
      {
        "name": "setFilenameBytes",
        "parameterTypes": ["com.google.protobuf.ByteString"]
      },
      {
        "name": "setTokenBytes",
        "parameterTypes": ["com.google.protobuf.ByteString"]
      }
    ],
    "methods": [
      {
        "name": "getFilename",
        "parameterTypes": []
      },
      {
        "name": "getRenaming",
        "parameterTypes": []
      },
      {
        "name": "getToken",
        "parameterTypes": []
      },
      {
        "name": "setFilename",
        "parameterTypes": ["java.lang.String"]
      },
      {
        "name": "setRenaming",
        "parameterTypes": ["boolean"]
      },
      {
        "name": "setToken",
        "parameterTypes": ["java.lang.String"]
      }
    ]
  },
  {
    "name": "tools.elide.crypto.HashAlgorithm",
    "queriedMethods": [
      {
        "name": "getValueDescriptor",
        "parameterTypes": []
      },
      {
        "name": "valueOf",
        "parameterTypes": [
          "com.google.protobuf.Descriptors$EnumValueDescriptor"
        ]
      }
    ]
  },
  {
    "name": "tools.elide.data.CompressedData",
    "queriedMethods": [
      {
        "name": "getCompression",
        "parameterTypes": []
      },
      {
        "name": "getIntegrity",
        "parameterTypes": ["int"]
      },
      {
        "name": "getIntegrityCount",
        "parameterTypes": []
      }
    ],
    "methods": [
      {
        "name": "getCompressionValue",
        "parameterTypes": []
      },
      {
        "name": "getData",
        "parameterTypes": []
      },
      {
        "name": "getIntegrityList",
        "parameterTypes": []
      },
      {
        "name": "getSize",
        "parameterTypes": []
      },
      {
        "name": "hasData",
        "parameterTypes": []
      },
      {
        "name": "newBuilder",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "tools.elide.data.CompressedData$Builder",
    "queriedMethods": [
      {
        "name": "clearCompression",
        "parameterTypes": []
      },
      {
        "name": "clearData",
        "parameterTypes": []
      },
      {
        "name": "clearIntegrity",
        "parameterTypes": []
      },
      {
        "name": "clearSize",
        "parameterTypes": []
      },
      {
        "name": "getCompression",
        "parameterTypes": []
      },
      {
        "name": "getData",
        "parameterTypes": []
      },
      {
        "name": "getDataBuilder",
        "parameterTypes": []
      },
      {
        "name": "getIntegrity",
        "parameterTypes": ["int"]
      },
      {
        "name": "getIntegrityBuilder",
        "parameterTypes": ["int"]
      },
      {
        "name": "getIntegrityList",
        "parameterTypes": []
      },
      {
        "name": "setCompression",
        "parameterTypes": ["tools.elide.data.CompressionMode"]
      },
      {
        "name": "setIntegrity",
        "parameterTypes": ["int", "tools.elide.data.DataFingerprint"]
      }
    ],
    "methods": [
      {
        "name": "addIntegrity",
        "parameterTypes": ["tools.elide.data.DataFingerprint"]
      },
      {
        "name": "getCompressionValue",
        "parameterTypes": []
      },
      {
        "name": "getIntegrityCount",
        "parameterTypes": []
      },
      {
        "name": "getSize",
        "parameterTypes": []
      },
      {
        "name": "hasData",
        "parameterTypes": []
      },
      {
        "name": "setCompressionValue",
        "parameterTypes": ["int"]
      },
      {
        "name": "setData",
        "parameterTypes": ["tools.elide.data.DataContainer"]
      },
      {
        "name": "setSize",
        "parameterTypes": ["long"]
      }
    ]
  },
  {
    "name": "tools.elide.data.CompressionMode",
    "queriedMethods": [
      {
        "name": "getValueDescriptor",
        "parameterTypes": []
      },
      {
        "name": "valueOf",
        "parameterTypes": [
          "com.google.protobuf.Descriptors$EnumValueDescriptor"
        ]
      }
    ]
  },
  {
    "name": "tools.elide.data.DataContainer",
    "queriedMethods": [
      {
        "name": "getIntegrity",
        "parameterTypes": ["int"]
      },
      {
        "name": "getIntegrityCount",
        "parameterTypes": []
      }
    ],
    "methods": [
      {
        "name": "getIntegrityList",
        "parameterTypes": []
      },
      {
        "name": "getRaw",
        "parameterTypes": []
      },
      {
        "name": "newBuilder",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "tools.elide.data.DataContainer$Builder",
    "queriedMethods": [
      {
        "name": "clearIntegrity",
        "parameterTypes": []
      },
      {
        "name": "clearRaw",
        "parameterTypes": []
      },
      {
        "name": "getIntegrity",
        "parameterTypes": ["int"]
      },
      {
        "name": "getIntegrityBuilder",
        "parameterTypes": ["int"]
      },
      {
        "name": "getIntegrityList",
        "parameterTypes": []
      },
      {
        "name": "setIntegrity",
        "parameterTypes": ["int", "tools.elide.data.DataFingerprint"]
      }
    ],
    "methods": [
      {
        "name": "addIntegrity",
        "parameterTypes": ["tools.elide.data.DataFingerprint"]
      },
      {
        "name": "getIntegrityCount",
        "parameterTypes": []
      },
      {
        "name": "getRaw",
        "parameterTypes": []
      },
      {
        "name": "setRaw",
        "parameterTypes": ["com.google.protobuf.ByteString"]
      }
    ]
  },
  {
    "name": "tools.elide.data.DataFingerprint",
    "queriedMethods": [
      {
        "name": "getHash",
        "parameterTypes": []
      }
    ],
    "methods": [
      {
        "name": "getFingerprint",
        "parameterTypes": []
      },
      {
        "name": "getHashValue",
        "parameterTypes": []
      },
      {
        "name": "getSalt",
        "parameterTypes": []
      },
      {
        "name": "newBuilder",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "tools.elide.data.DataFingerprint$Builder",
    "queriedMethods": [
      {
        "name": "clearFingerprint",
        "parameterTypes": []
      },
      {
        "name": "clearHash",
        "parameterTypes": []
      },
      {
        "name": "clearSalt",
        "parameterTypes": []
      },
      {
        "name": "getHash",
        "parameterTypes": []
      },
      {
        "name": "setHash",
        "parameterTypes": ["tools.elide.crypto.HashAlgorithm"]
      }
    ],
    "methods": [
      {
        "name": "getFingerprint",
        "parameterTypes": []
      },
      {
        "name": "getHashValue",
        "parameterTypes": []
      },
      {
        "name": "getSalt",
        "parameterTypes": []
      },
      {
        "name": "setFingerprint",
        "parameterTypes": ["com.google.protobuf.ByteString"]
      },
      {
        "name": "setHashValue",
        "parameterTypes": ["int"]
      },
      {
        "name": "setSalt",
        "parameterTypes": ["com.google.protobuf.ByteString"]
      }
    ]
  },
  {
    "name": "tools.elide.model.DatapointType",
    "queriedMethods": [
      {
        "name": "getValueDescriptor",
        "parameterTypes": []
      },
      {
        "name": "valueOf",
        "parameterTypes": [
          "com.google.protobuf.Descriptors$EnumValueDescriptor"
        ]
      }
    ]
  },
  {
    "name": "tools.elide.model.EnumeratedType",
    "queriedMethods": [
      {
        "name": "getValueDescriptor",
        "parameterTypes": []
      },
      {
        "name": "valueOf",
        "parameterTypes": [
          "com.google.protobuf.Descriptors$EnumValueDescriptor"
        ]
      }
    ]
  },
  {
    "name": "tools.elide.struct.BloomFilter",
    "queriedMethods": [
      {
        "name": "newBuilder",
        "parameterTypes": []
      }
    ]
  }
]
