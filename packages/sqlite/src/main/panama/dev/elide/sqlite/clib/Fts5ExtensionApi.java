// Generated by jextract

package dev.elide.sqlite.clib;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct Fts5ExtensionApi {
 *     int iVersion;
 *     void *(*xUserData)(Fts5Context *);
 *     int (*xColumnCount)(Fts5Context *);
 *     int (*xRowCount)(Fts5Context *, sqlite3_int64 *);
 *     int (*xColumnTotalSize)(Fts5Context *, int, sqlite3_int64 *);
 *     int (*xTokenize)(Fts5Context *, const char *, int, void *, int (*)(void *, int, const char *, int, int, int));
 *     int (*xPhraseCount)(Fts5Context *);
 *     int (*xPhraseSize)(Fts5Context *, int);
 *     int (*xInstCount)(Fts5Context *, int *);
 *     int (*xInst)(Fts5Context *, int, int *, int *, int *);
 *     sqlite3_int64 (*xRowid)(Fts5Context *);
 *     int (*xColumnText)(Fts5Context *, int, const char **, int *);
 *     int (*xColumnSize)(Fts5Context *, int, int *);
 *     int (*xQueryPhrase)(Fts5Context *, int, void *, int (*)(const Fts5ExtensionApi *, Fts5Context *, void *));
 *     int (*xSetAuxdata)(Fts5Context *, void *, void (*)(void *));
 *     void *(*xGetAuxdata)(Fts5Context *, int);
 *     int (*xPhraseFirst)(Fts5Context *, int, Fts5PhraseIter *, int *, int *);
 *     void (*xPhraseNext)(Fts5Context *, Fts5PhraseIter *, int *, int *);
 *     int (*xPhraseFirstColumn)(Fts5Context *, int, Fts5PhraseIter *, int *);
 *     void (*xPhraseNextColumn)(Fts5Context *, Fts5PhraseIter *, int *);
 *     int (*xQueryToken)(Fts5Context *, int, int, const char **, int *);
 *     int (*xInstToken)(Fts5Context *, int, int, const char **, int *);
 * }
 * }
 */
public class Fts5ExtensionApi {

    Fts5ExtensionApi() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        sqlite3_h.C_INT.withName("iVersion"),
        MemoryLayout.paddingLayout(4),
        sqlite3_h.C_POINTER.withName("xUserData"),
        sqlite3_h.C_POINTER.withName("xColumnCount"),
        sqlite3_h.C_POINTER.withName("xRowCount"),
        sqlite3_h.C_POINTER.withName("xColumnTotalSize"),
        sqlite3_h.C_POINTER.withName("xTokenize"),
        sqlite3_h.C_POINTER.withName("xPhraseCount"),
        sqlite3_h.C_POINTER.withName("xPhraseSize"),
        sqlite3_h.C_POINTER.withName("xInstCount"),
        sqlite3_h.C_POINTER.withName("xInst"),
        sqlite3_h.C_POINTER.withName("xRowid"),
        sqlite3_h.C_POINTER.withName("xColumnText"),
        sqlite3_h.C_POINTER.withName("xColumnSize"),
        sqlite3_h.C_POINTER.withName("xQueryPhrase"),
        sqlite3_h.C_POINTER.withName("xSetAuxdata"),
        sqlite3_h.C_POINTER.withName("xGetAuxdata"),
        sqlite3_h.C_POINTER.withName("xPhraseFirst"),
        sqlite3_h.C_POINTER.withName("xPhraseNext"),
        sqlite3_h.C_POINTER.withName("xPhraseFirstColumn"),
        sqlite3_h.C_POINTER.withName("xPhraseNextColumn"),
        sqlite3_h.C_POINTER.withName("xQueryToken"),
        sqlite3_h.C_POINTER.withName("xInstToken")
    ).withName("Fts5ExtensionApi");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt iVersion$LAYOUT = (OfInt)$LAYOUT.select(groupElement("iVersion"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int iVersion
     * }
     */
    public static final OfInt iVersion$layout() {
        return iVersion$LAYOUT;
    }

    private static final long iVersion$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int iVersion
     * }
     */
    public static final long iVersion$offset() {
        return iVersion$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int iVersion
     * }
     */
    public static int iVersion(MemorySegment struct) {
        return struct.get(iVersion$LAYOUT, iVersion$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int iVersion
     * }
     */
    public static void iVersion(MemorySegment struct, int fieldValue) {
        struct.set(iVersion$LAYOUT, iVersion$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void *(*xUserData)(Fts5Context *)
     * }
     */
    public static class xUserData {

        xUserData() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = sqlite3_h.upcallHandle(xUserData.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(xUserData.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout xUserData$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("xUserData"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *(*xUserData)(Fts5Context *)
     * }
     */
    public static final AddressLayout xUserData$layout() {
        return xUserData$LAYOUT;
    }

    private static final long xUserData$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *(*xUserData)(Fts5Context *)
     * }
     */
    public static final long xUserData$offset() {
        return xUserData$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *(*xUserData)(Fts5Context *)
     * }
     */
    public static MemorySegment xUserData(MemorySegment struct) {
        return struct.get(xUserData$LAYOUT, xUserData$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *(*xUserData)(Fts5Context *)
     * }
     */
    public static void xUserData(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(xUserData$LAYOUT, xUserData$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (*xColumnCount)(Fts5Context *)
     * }
     */
    public static class xColumnCount {

        xColumnCount() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = sqlite3_h.upcallHandle(xColumnCount.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(xColumnCount.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout xColumnCount$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("xColumnCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*xColumnCount)(Fts5Context *)
     * }
     */
    public static final AddressLayout xColumnCount$layout() {
        return xColumnCount$LAYOUT;
    }

    private static final long xColumnCount$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*xColumnCount)(Fts5Context *)
     * }
     */
    public static final long xColumnCount$offset() {
        return xColumnCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*xColumnCount)(Fts5Context *)
     * }
     */
    public static MemorySegment xColumnCount(MemorySegment struct) {
        return struct.get(xColumnCount$LAYOUT, xColumnCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*xColumnCount)(Fts5Context *)
     * }
     */
    public static void xColumnCount(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(xColumnCount$LAYOUT, xColumnCount$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (*xRowCount)(Fts5Context *, sqlite3_int64 *)
     * }
     */
    public static class xRowCount {

        xRowCount() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = sqlite3_h.upcallHandle(xRowCount.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(xRowCount.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout xRowCount$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("xRowCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*xRowCount)(Fts5Context *, sqlite3_int64 *)
     * }
     */
    public static final AddressLayout xRowCount$layout() {
        return xRowCount$LAYOUT;
    }

    private static final long xRowCount$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*xRowCount)(Fts5Context *, sqlite3_int64 *)
     * }
     */
    public static final long xRowCount$offset() {
        return xRowCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*xRowCount)(Fts5Context *, sqlite3_int64 *)
     * }
     */
    public static MemorySegment xRowCount(MemorySegment struct) {
        return struct.get(xRowCount$LAYOUT, xRowCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*xRowCount)(Fts5Context *, sqlite3_int64 *)
     * }
     */
    public static void xRowCount(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(xRowCount$LAYOUT, xRowCount$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (*xColumnTotalSize)(Fts5Context *, int, sqlite3_int64 *)
     * }
     */
    public static class xColumnTotalSize {

        xColumnTotalSize() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = sqlite3_h.upcallHandle(xColumnTotalSize.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(xColumnTotalSize.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout xColumnTotalSize$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("xColumnTotalSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*xColumnTotalSize)(Fts5Context *, int, sqlite3_int64 *)
     * }
     */
    public static final AddressLayout xColumnTotalSize$layout() {
        return xColumnTotalSize$LAYOUT;
    }

    private static final long xColumnTotalSize$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*xColumnTotalSize)(Fts5Context *, int, sqlite3_int64 *)
     * }
     */
    public static final long xColumnTotalSize$offset() {
        return xColumnTotalSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*xColumnTotalSize)(Fts5Context *, int, sqlite3_int64 *)
     * }
     */
    public static MemorySegment xColumnTotalSize(MemorySegment struct) {
        return struct.get(xColumnTotalSize$LAYOUT, xColumnTotalSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*xColumnTotalSize)(Fts5Context *, int, sqlite3_int64 *)
     * }
     */
    public static void xColumnTotalSize(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(xColumnTotalSize$LAYOUT, xColumnTotalSize$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (*xTokenize)(Fts5Context *, const char *, int, void *, int (*)(void *, int, const char *, int, int, int))
     * }
     */
    public static class xTokenize {

        xTokenize() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, int _x2, MemorySegment _x3, MemorySegment _x4);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = sqlite3_h.upcallHandle(xTokenize.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(xTokenize.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, int _x2, MemorySegment _x3, MemorySegment _x4) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout xTokenize$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("xTokenize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*xTokenize)(Fts5Context *, const char *, int, void *, int (*)(void *, int, const char *, int, int, int))
     * }
     */
    public static final AddressLayout xTokenize$layout() {
        return xTokenize$LAYOUT;
    }

    private static final long xTokenize$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*xTokenize)(Fts5Context *, const char *, int, void *, int (*)(void *, int, const char *, int, int, int))
     * }
     */
    public static final long xTokenize$offset() {
        return xTokenize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*xTokenize)(Fts5Context *, const char *, int, void *, int (*)(void *, int, const char *, int, int, int))
     * }
     */
    public static MemorySegment xTokenize(MemorySegment struct) {
        return struct.get(xTokenize$LAYOUT, xTokenize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*xTokenize)(Fts5Context *, const char *, int, void *, int (*)(void *, int, const char *, int, int, int))
     * }
     */
    public static void xTokenize(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(xTokenize$LAYOUT, xTokenize$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (*xPhraseCount)(Fts5Context *)
     * }
     */
    public static class xPhraseCount {

        xPhraseCount() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = sqlite3_h.upcallHandle(xPhraseCount.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(xPhraseCount.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout xPhraseCount$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("xPhraseCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*xPhraseCount)(Fts5Context *)
     * }
     */
    public static final AddressLayout xPhraseCount$layout() {
        return xPhraseCount$LAYOUT;
    }

    private static final long xPhraseCount$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*xPhraseCount)(Fts5Context *)
     * }
     */
    public static final long xPhraseCount$offset() {
        return xPhraseCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*xPhraseCount)(Fts5Context *)
     * }
     */
    public static MemorySegment xPhraseCount(MemorySegment struct) {
        return struct.get(xPhraseCount$LAYOUT, xPhraseCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*xPhraseCount)(Fts5Context *)
     * }
     */
    public static void xPhraseCount(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(xPhraseCount$LAYOUT, xPhraseCount$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (*xPhraseSize)(Fts5Context *, int)
     * }
     */
    public static class xPhraseSize {

        xPhraseSize() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = sqlite3_h.upcallHandle(xPhraseSize.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(xPhraseSize.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout xPhraseSize$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("xPhraseSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*xPhraseSize)(Fts5Context *, int)
     * }
     */
    public static final AddressLayout xPhraseSize$layout() {
        return xPhraseSize$LAYOUT;
    }

    private static final long xPhraseSize$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*xPhraseSize)(Fts5Context *, int)
     * }
     */
    public static final long xPhraseSize$offset() {
        return xPhraseSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*xPhraseSize)(Fts5Context *, int)
     * }
     */
    public static MemorySegment xPhraseSize(MemorySegment struct) {
        return struct.get(xPhraseSize$LAYOUT, xPhraseSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*xPhraseSize)(Fts5Context *, int)
     * }
     */
    public static void xPhraseSize(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(xPhraseSize$LAYOUT, xPhraseSize$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (*xInstCount)(Fts5Context *, int *)
     * }
     */
    public static class xInstCount {

        xInstCount() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = sqlite3_h.upcallHandle(xInstCount.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(xInstCount.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout xInstCount$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("xInstCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*xInstCount)(Fts5Context *, int *)
     * }
     */
    public static final AddressLayout xInstCount$layout() {
        return xInstCount$LAYOUT;
    }

    private static final long xInstCount$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*xInstCount)(Fts5Context *, int *)
     * }
     */
    public static final long xInstCount$offset() {
        return xInstCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*xInstCount)(Fts5Context *, int *)
     * }
     */
    public static MemorySegment xInstCount(MemorySegment struct) {
        return struct.get(xInstCount$LAYOUT, xInstCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*xInstCount)(Fts5Context *, int *)
     * }
     */
    public static void xInstCount(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(xInstCount$LAYOUT, xInstCount$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (*xInst)(Fts5Context *, int, int *, int *, int *)
     * }
     */
    public static class xInst {

        xInst() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, MemorySegment _x2, MemorySegment _x3, MemorySegment _x4);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = sqlite3_h.upcallHandle(xInst.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(xInst.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, MemorySegment _x2, MemorySegment _x3, MemorySegment _x4) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout xInst$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("xInst"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*xInst)(Fts5Context *, int, int *, int *, int *)
     * }
     */
    public static final AddressLayout xInst$layout() {
        return xInst$LAYOUT;
    }

    private static final long xInst$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*xInst)(Fts5Context *, int, int *, int *, int *)
     * }
     */
    public static final long xInst$offset() {
        return xInst$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*xInst)(Fts5Context *, int, int *, int *, int *)
     * }
     */
    public static MemorySegment xInst(MemorySegment struct) {
        return struct.get(xInst$LAYOUT, xInst$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*xInst)(Fts5Context *, int, int *, int *, int *)
     * }
     */
    public static void xInst(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(xInst$LAYOUT, xInst$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * sqlite3_int64 (*xRowid)(Fts5Context *)
     * }
     */
    public static class xRowid {

        xRowid() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            long apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            sqlite3_h.C_LONG_LONG,
            sqlite3_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = sqlite3_h.upcallHandle(xRowid.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(xRowid.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static long invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (long) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout xRowid$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("xRowid"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * sqlite3_int64 (*xRowid)(Fts5Context *)
     * }
     */
    public static final AddressLayout xRowid$layout() {
        return xRowid$LAYOUT;
    }

    private static final long xRowid$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * sqlite3_int64 (*xRowid)(Fts5Context *)
     * }
     */
    public static final long xRowid$offset() {
        return xRowid$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * sqlite3_int64 (*xRowid)(Fts5Context *)
     * }
     */
    public static MemorySegment xRowid(MemorySegment struct) {
        return struct.get(xRowid$LAYOUT, xRowid$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * sqlite3_int64 (*xRowid)(Fts5Context *)
     * }
     */
    public static void xRowid(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(xRowid$LAYOUT, xRowid$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (*xColumnText)(Fts5Context *, int, const char **, int *)
     * }
     */
    public static class xColumnText {

        xColumnText() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, MemorySegment _x2, MemorySegment _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = sqlite3_h.upcallHandle(xColumnText.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(xColumnText.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, MemorySegment _x2, MemorySegment _x3) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout xColumnText$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("xColumnText"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*xColumnText)(Fts5Context *, int, const char **, int *)
     * }
     */
    public static final AddressLayout xColumnText$layout() {
        return xColumnText$LAYOUT;
    }

    private static final long xColumnText$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*xColumnText)(Fts5Context *, int, const char **, int *)
     * }
     */
    public static final long xColumnText$offset() {
        return xColumnText$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*xColumnText)(Fts5Context *, int, const char **, int *)
     * }
     */
    public static MemorySegment xColumnText(MemorySegment struct) {
        return struct.get(xColumnText$LAYOUT, xColumnText$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*xColumnText)(Fts5Context *, int, const char **, int *)
     * }
     */
    public static void xColumnText(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(xColumnText$LAYOUT, xColumnText$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (*xColumnSize)(Fts5Context *, int, int *)
     * }
     */
    public static class xColumnSize {

        xColumnSize() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = sqlite3_h.upcallHandle(xColumnSize.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(xColumnSize.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout xColumnSize$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("xColumnSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*xColumnSize)(Fts5Context *, int, int *)
     * }
     */
    public static final AddressLayout xColumnSize$layout() {
        return xColumnSize$LAYOUT;
    }

    private static final long xColumnSize$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*xColumnSize)(Fts5Context *, int, int *)
     * }
     */
    public static final long xColumnSize$offset() {
        return xColumnSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*xColumnSize)(Fts5Context *, int, int *)
     * }
     */
    public static MemorySegment xColumnSize(MemorySegment struct) {
        return struct.get(xColumnSize$LAYOUT, xColumnSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*xColumnSize)(Fts5Context *, int, int *)
     * }
     */
    public static void xColumnSize(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(xColumnSize$LAYOUT, xColumnSize$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (*xQueryPhrase)(Fts5Context *, int, void *, int (*)(const Fts5ExtensionApi *, Fts5Context *, void *))
     * }
     */
    public static class xQueryPhrase {

        xQueryPhrase() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, MemorySegment _x2, MemorySegment _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = sqlite3_h.upcallHandle(xQueryPhrase.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(xQueryPhrase.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, MemorySegment _x2, MemorySegment _x3) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout xQueryPhrase$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("xQueryPhrase"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*xQueryPhrase)(Fts5Context *, int, void *, int (*)(const Fts5ExtensionApi *, Fts5Context *, void *))
     * }
     */
    public static final AddressLayout xQueryPhrase$layout() {
        return xQueryPhrase$LAYOUT;
    }

    private static final long xQueryPhrase$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*xQueryPhrase)(Fts5Context *, int, void *, int (*)(const Fts5ExtensionApi *, Fts5Context *, void *))
     * }
     */
    public static final long xQueryPhrase$offset() {
        return xQueryPhrase$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*xQueryPhrase)(Fts5Context *, int, void *, int (*)(const Fts5ExtensionApi *, Fts5Context *, void *))
     * }
     */
    public static MemorySegment xQueryPhrase(MemorySegment struct) {
        return struct.get(xQueryPhrase$LAYOUT, xQueryPhrase$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*xQueryPhrase)(Fts5Context *, int, void *, int (*)(const Fts5ExtensionApi *, Fts5Context *, void *))
     * }
     */
    public static void xQueryPhrase(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(xQueryPhrase$LAYOUT, xQueryPhrase$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (*xSetAuxdata)(Fts5Context *, void *, void (*)(void *))
     * }
     */
    public static class xSetAuxdata {

        xSetAuxdata() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = sqlite3_h.upcallHandle(xSetAuxdata.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(xSetAuxdata.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout xSetAuxdata$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("xSetAuxdata"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*xSetAuxdata)(Fts5Context *, void *, void (*)(void *))
     * }
     */
    public static final AddressLayout xSetAuxdata$layout() {
        return xSetAuxdata$LAYOUT;
    }

    private static final long xSetAuxdata$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*xSetAuxdata)(Fts5Context *, void *, void (*)(void *))
     * }
     */
    public static final long xSetAuxdata$offset() {
        return xSetAuxdata$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*xSetAuxdata)(Fts5Context *, void *, void (*)(void *))
     * }
     */
    public static MemorySegment xSetAuxdata(MemorySegment struct) {
        return struct.get(xSetAuxdata$LAYOUT, xSetAuxdata$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*xSetAuxdata)(Fts5Context *, void *, void (*)(void *))
     * }
     */
    public static void xSetAuxdata(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(xSetAuxdata$LAYOUT, xSetAuxdata$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void *(*xGetAuxdata)(Fts5Context *, int)
     * }
     */
    public static class xGetAuxdata {

        xGetAuxdata() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0, int _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = sqlite3_h.upcallHandle(xGetAuxdata.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(xGetAuxdata.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout xGetAuxdata$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("xGetAuxdata"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *(*xGetAuxdata)(Fts5Context *, int)
     * }
     */
    public static final AddressLayout xGetAuxdata$layout() {
        return xGetAuxdata$LAYOUT;
    }

    private static final long xGetAuxdata$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *(*xGetAuxdata)(Fts5Context *, int)
     * }
     */
    public static final long xGetAuxdata$offset() {
        return xGetAuxdata$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *(*xGetAuxdata)(Fts5Context *, int)
     * }
     */
    public static MemorySegment xGetAuxdata(MemorySegment struct) {
        return struct.get(xGetAuxdata$LAYOUT, xGetAuxdata$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *(*xGetAuxdata)(Fts5Context *, int)
     * }
     */
    public static void xGetAuxdata(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(xGetAuxdata$LAYOUT, xGetAuxdata$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (*xPhraseFirst)(Fts5Context *, int, Fts5PhraseIter *, int *, int *)
     * }
     */
    public static class xPhraseFirst {

        xPhraseFirst() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, MemorySegment _x2, MemorySegment _x3, MemorySegment _x4);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = sqlite3_h.upcallHandle(xPhraseFirst.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(xPhraseFirst.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, MemorySegment _x2, MemorySegment _x3, MemorySegment _x4) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout xPhraseFirst$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("xPhraseFirst"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*xPhraseFirst)(Fts5Context *, int, Fts5PhraseIter *, int *, int *)
     * }
     */
    public static final AddressLayout xPhraseFirst$layout() {
        return xPhraseFirst$LAYOUT;
    }

    private static final long xPhraseFirst$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*xPhraseFirst)(Fts5Context *, int, Fts5PhraseIter *, int *, int *)
     * }
     */
    public static final long xPhraseFirst$offset() {
        return xPhraseFirst$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*xPhraseFirst)(Fts5Context *, int, Fts5PhraseIter *, int *, int *)
     * }
     */
    public static MemorySegment xPhraseFirst(MemorySegment struct) {
        return struct.get(xPhraseFirst$LAYOUT, xPhraseFirst$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*xPhraseFirst)(Fts5Context *, int, Fts5PhraseIter *, int *, int *)
     * }
     */
    public static void xPhraseFirst(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(xPhraseFirst$LAYOUT, xPhraseFirst$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*xPhraseNext)(Fts5Context *, Fts5PhraseIter *, int *, int *)
     * }
     */
    public static class xPhraseNext {

        xPhraseNext() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = sqlite3_h.upcallHandle(xPhraseNext.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(xPhraseNext.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout xPhraseNext$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("xPhraseNext"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*xPhraseNext)(Fts5Context *, Fts5PhraseIter *, int *, int *)
     * }
     */
    public static final AddressLayout xPhraseNext$layout() {
        return xPhraseNext$LAYOUT;
    }

    private static final long xPhraseNext$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*xPhraseNext)(Fts5Context *, Fts5PhraseIter *, int *, int *)
     * }
     */
    public static final long xPhraseNext$offset() {
        return xPhraseNext$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*xPhraseNext)(Fts5Context *, Fts5PhraseIter *, int *, int *)
     * }
     */
    public static MemorySegment xPhraseNext(MemorySegment struct) {
        return struct.get(xPhraseNext$LAYOUT, xPhraseNext$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*xPhraseNext)(Fts5Context *, Fts5PhraseIter *, int *, int *)
     * }
     */
    public static void xPhraseNext(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(xPhraseNext$LAYOUT, xPhraseNext$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (*xPhraseFirstColumn)(Fts5Context *, int, Fts5PhraseIter *, int *)
     * }
     */
    public static class xPhraseFirstColumn {

        xPhraseFirstColumn() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, MemorySegment _x2, MemorySegment _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = sqlite3_h.upcallHandle(xPhraseFirstColumn.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(xPhraseFirstColumn.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, MemorySegment _x2, MemorySegment _x3) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout xPhraseFirstColumn$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("xPhraseFirstColumn"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*xPhraseFirstColumn)(Fts5Context *, int, Fts5PhraseIter *, int *)
     * }
     */
    public static final AddressLayout xPhraseFirstColumn$layout() {
        return xPhraseFirstColumn$LAYOUT;
    }

    private static final long xPhraseFirstColumn$OFFSET = 144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*xPhraseFirstColumn)(Fts5Context *, int, Fts5PhraseIter *, int *)
     * }
     */
    public static final long xPhraseFirstColumn$offset() {
        return xPhraseFirstColumn$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*xPhraseFirstColumn)(Fts5Context *, int, Fts5PhraseIter *, int *)
     * }
     */
    public static MemorySegment xPhraseFirstColumn(MemorySegment struct) {
        return struct.get(xPhraseFirstColumn$LAYOUT, xPhraseFirstColumn$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*xPhraseFirstColumn)(Fts5Context *, int, Fts5PhraseIter *, int *)
     * }
     */
    public static void xPhraseFirstColumn(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(xPhraseFirstColumn$LAYOUT, xPhraseFirstColumn$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*xPhraseNextColumn)(Fts5Context *, Fts5PhraseIter *, int *)
     * }
     */
    public static class xPhraseNextColumn {

        xPhraseNextColumn() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = sqlite3_h.upcallHandle(xPhraseNextColumn.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(xPhraseNextColumn.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout xPhraseNextColumn$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("xPhraseNextColumn"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*xPhraseNextColumn)(Fts5Context *, Fts5PhraseIter *, int *)
     * }
     */
    public static final AddressLayout xPhraseNextColumn$layout() {
        return xPhraseNextColumn$LAYOUT;
    }

    private static final long xPhraseNextColumn$OFFSET = 152;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*xPhraseNextColumn)(Fts5Context *, Fts5PhraseIter *, int *)
     * }
     */
    public static final long xPhraseNextColumn$offset() {
        return xPhraseNextColumn$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*xPhraseNextColumn)(Fts5Context *, Fts5PhraseIter *, int *)
     * }
     */
    public static MemorySegment xPhraseNextColumn(MemorySegment struct) {
        return struct.get(xPhraseNextColumn$LAYOUT, xPhraseNextColumn$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*xPhraseNextColumn)(Fts5Context *, Fts5PhraseIter *, int *)
     * }
     */
    public static void xPhraseNextColumn(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(xPhraseNextColumn$LAYOUT, xPhraseNextColumn$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (*xQueryToken)(Fts5Context *, int, int, const char **, int *)
     * }
     */
    public static class xQueryToken {

        xQueryToken() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, int _x2, MemorySegment _x3, MemorySegment _x4);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT,
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = sqlite3_h.upcallHandle(xQueryToken.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(xQueryToken.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, int _x2, MemorySegment _x3, MemorySegment _x4) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout xQueryToken$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("xQueryToken"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*xQueryToken)(Fts5Context *, int, int, const char **, int *)
     * }
     */
    public static final AddressLayout xQueryToken$layout() {
        return xQueryToken$LAYOUT;
    }

    private static final long xQueryToken$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*xQueryToken)(Fts5Context *, int, int, const char **, int *)
     * }
     */
    public static final long xQueryToken$offset() {
        return xQueryToken$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*xQueryToken)(Fts5Context *, int, int, const char **, int *)
     * }
     */
    public static MemorySegment xQueryToken(MemorySegment struct) {
        return struct.get(xQueryToken$LAYOUT, xQueryToken$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*xQueryToken)(Fts5Context *, int, int, const char **, int *)
     * }
     */
    public static void xQueryToken(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(xQueryToken$LAYOUT, xQueryToken$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (*xInstToken)(Fts5Context *, int, int, const char **, int *)
     * }
     */
    public static class xInstToken {

        xInstToken() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, int _x2, MemorySegment _x3, MemorySegment _x4);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT,
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = sqlite3_h.upcallHandle(xInstToken.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(xInstToken.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, int _x2, MemorySegment _x3, MemorySegment _x4) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout xInstToken$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("xInstToken"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*xInstToken)(Fts5Context *, int, int, const char **, int *)
     * }
     */
    public static final AddressLayout xInstToken$layout() {
        return xInstToken$LAYOUT;
    }

    private static final long xInstToken$OFFSET = 168;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*xInstToken)(Fts5Context *, int, int, const char **, int *)
     * }
     */
    public static final long xInstToken$offset() {
        return xInstToken$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*xInstToken)(Fts5Context *, int, int, const char **, int *)
     * }
     */
    public static MemorySegment xInstToken(MemorySegment struct) {
        return struct.get(xInstToken$LAYOUT, xInstToken$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*xInstToken)(Fts5Context *, int, int, const char **, int *)
     * }
     */
    public static void xInstToken(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(xInstToken$LAYOUT, xInstToken$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

