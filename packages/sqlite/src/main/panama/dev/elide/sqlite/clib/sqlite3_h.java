// Generated by jextract

package dev.elide.sqlite.clib;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class sqlite3_h {

    sqlite3_h() {
        // Should not be called directly
    }

    static final Arena LIBRARY_ARENA = Arena.ofAuto();
    static final boolean TRACE_DOWNCALLS = Boolean.getBoolean("jextract.trace.downcalls");

    static void traceDowncall(String name, Object... args) {
         String traceArgs = Arrays.stream(args)
                       .map(Object::toString)
                       .collect(Collectors.joining(", "));
         System.out.printf("%s(%s)\n", name, traceArgs);
    }

    static MemorySegment findOrThrow(String symbol) {
        return SYMBOL_LOOKUP.find(symbol)
            .orElseThrow(() -> new UnsatisfiedLinkError("unresolved symbol: " + symbol));
    }

    static MethodHandle upcallHandle(Class<?> fi, String name, FunctionDescriptor fdesc) {
        try {
            return MethodHandles.lookup().findVirtual(fi, name, fdesc.toMethodType());
        } catch (ReflectiveOperationException ex) {
            throw new AssertionError(ex);
        }
    }

    static MemoryLayout align(MemoryLayout layout, long align) {
        return switch (layout) {
            case PaddingLayout p -> p;
            case ValueLayout v -> v.withByteAlignment(align);
            case GroupLayout g -> {
                MemoryLayout[] alignedMembers = g.memberLayouts().stream()
                        .map(m -> align(m, align)).toArray(MemoryLayout[]::new);
                yield g instanceof StructLayout ?
                        MemoryLayout.structLayout(alignedMembers) : MemoryLayout.unionLayout(alignedMembers);
            }
            case SequenceLayout s -> MemoryLayout.sequenceLayout(s.elementCount(), align(s.elementLayout(), align));
        };
    }

    static final SymbolLookup SYMBOL_LOOKUP = SymbolLookup.loaderLookup()
            .or(Linker.nativeLinker().defaultLookup());

    public static final ValueLayout.OfBoolean C_BOOL = ValueLayout.JAVA_BOOLEAN;
    public static final ValueLayout.OfByte C_CHAR = ValueLayout.JAVA_BYTE;
    public static final ValueLayout.OfShort C_SHORT = ValueLayout.JAVA_SHORT;
    public static final ValueLayout.OfInt C_INT = ValueLayout.JAVA_INT;
    public static final ValueLayout.OfLong C_LONG_LONG = ValueLayout.JAVA_LONG;
    public static final ValueLayout.OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT;
    public static final ValueLayout.OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = ValueLayout.ADDRESS
            .withTargetLayout(MemoryLayout.sequenceLayout(java.lang.Long.MAX_VALUE, JAVA_BYTE));
    public static final ValueLayout.OfLong C_LONG = ValueLayout.JAVA_LONG;
    private static final int __GNUC_VA_LIST = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __GNUC_VA_LIST 1
     * }
     */
    public static int __GNUC_VA_LIST() {
        return __GNUC_VA_LIST;
    }
    private static final int SQLITE_VERSION_NUMBER = (int)3046000L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_VERSION_NUMBER 3046000
     * }
     */
    public static int SQLITE_VERSION_NUMBER() {
        return SQLITE_VERSION_NUMBER;
    }
    private static final int SQLITE_OK = (int)0L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_OK 0
     * }
     */
    public static int SQLITE_OK() {
        return SQLITE_OK;
    }
    private static final int SQLITE_ERROR = (int)1L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_ERROR 1
     * }
     */
    public static int SQLITE_ERROR() {
        return SQLITE_ERROR;
    }
    private static final int SQLITE_INTERNAL = (int)2L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_INTERNAL 2
     * }
     */
    public static int SQLITE_INTERNAL() {
        return SQLITE_INTERNAL;
    }
    private static final int SQLITE_PERM = (int)3L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_PERM 3
     * }
     */
    public static int SQLITE_PERM() {
        return SQLITE_PERM;
    }
    private static final int SQLITE_ABORT = (int)4L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_ABORT 4
     * }
     */
    public static int SQLITE_ABORT() {
        return SQLITE_ABORT;
    }
    private static final int SQLITE_BUSY = (int)5L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_BUSY 5
     * }
     */
    public static int SQLITE_BUSY() {
        return SQLITE_BUSY;
    }
    private static final int SQLITE_LOCKED = (int)6L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_LOCKED 6
     * }
     */
    public static int SQLITE_LOCKED() {
        return SQLITE_LOCKED;
    }
    private static final int SQLITE_NOMEM = (int)7L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_NOMEM 7
     * }
     */
    public static int SQLITE_NOMEM() {
        return SQLITE_NOMEM;
    }
    private static final int SQLITE_READONLY = (int)8L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_READONLY 8
     * }
     */
    public static int SQLITE_READONLY() {
        return SQLITE_READONLY;
    }
    private static final int SQLITE_INTERRUPT = (int)9L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_INTERRUPT 9
     * }
     */
    public static int SQLITE_INTERRUPT() {
        return SQLITE_INTERRUPT;
    }
    private static final int SQLITE_IOERR = (int)10L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_IOERR 10
     * }
     */
    public static int SQLITE_IOERR() {
        return SQLITE_IOERR;
    }
    private static final int SQLITE_CORRUPT = (int)11L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_CORRUPT 11
     * }
     */
    public static int SQLITE_CORRUPT() {
        return SQLITE_CORRUPT;
    }
    private static final int SQLITE_NOTFOUND = (int)12L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_NOTFOUND 12
     * }
     */
    public static int SQLITE_NOTFOUND() {
        return SQLITE_NOTFOUND;
    }
    private static final int SQLITE_FULL = (int)13L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_FULL 13
     * }
     */
    public static int SQLITE_FULL() {
        return SQLITE_FULL;
    }
    private static final int SQLITE_CANTOPEN = (int)14L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_CANTOPEN 14
     * }
     */
    public static int SQLITE_CANTOPEN() {
        return SQLITE_CANTOPEN;
    }
    private static final int SQLITE_PROTOCOL = (int)15L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_PROTOCOL 15
     * }
     */
    public static int SQLITE_PROTOCOL() {
        return SQLITE_PROTOCOL;
    }
    private static final int SQLITE_EMPTY = (int)16L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_EMPTY 16
     * }
     */
    public static int SQLITE_EMPTY() {
        return SQLITE_EMPTY;
    }
    private static final int SQLITE_SCHEMA = (int)17L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_SCHEMA 17
     * }
     */
    public static int SQLITE_SCHEMA() {
        return SQLITE_SCHEMA;
    }
    private static final int SQLITE_TOOBIG = (int)18L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_TOOBIG 18
     * }
     */
    public static int SQLITE_TOOBIG() {
        return SQLITE_TOOBIG;
    }
    private static final int SQLITE_CONSTRAINT = (int)19L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_CONSTRAINT 19
     * }
     */
    public static int SQLITE_CONSTRAINT() {
        return SQLITE_CONSTRAINT;
    }
    private static final int SQLITE_MISMATCH = (int)20L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_MISMATCH 20
     * }
     */
    public static int SQLITE_MISMATCH() {
        return SQLITE_MISMATCH;
    }
    private static final int SQLITE_MISUSE = (int)21L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_MISUSE 21
     * }
     */
    public static int SQLITE_MISUSE() {
        return SQLITE_MISUSE;
    }
    private static final int SQLITE_NOLFS = (int)22L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_NOLFS 22
     * }
     */
    public static int SQLITE_NOLFS() {
        return SQLITE_NOLFS;
    }
    private static final int SQLITE_AUTH = (int)23L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_AUTH 23
     * }
     */
    public static int SQLITE_AUTH() {
        return SQLITE_AUTH;
    }
    private static final int SQLITE_FORMAT = (int)24L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_FORMAT 24
     * }
     */
    public static int SQLITE_FORMAT() {
        return SQLITE_FORMAT;
    }
    private static final int SQLITE_RANGE = (int)25L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_RANGE 25
     * }
     */
    public static int SQLITE_RANGE() {
        return SQLITE_RANGE;
    }
    private static final int SQLITE_NOTADB = (int)26L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_NOTADB 26
     * }
     */
    public static int SQLITE_NOTADB() {
        return SQLITE_NOTADB;
    }
    private static final int SQLITE_NOTICE = (int)27L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_NOTICE 27
     * }
     */
    public static int SQLITE_NOTICE() {
        return SQLITE_NOTICE;
    }
    private static final int SQLITE_WARNING = (int)28L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_WARNING 28
     * }
     */
    public static int SQLITE_WARNING() {
        return SQLITE_WARNING;
    }
    private static final int SQLITE_ROW = (int)100L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_ROW 100
     * }
     */
    public static int SQLITE_ROW() {
        return SQLITE_ROW;
    }
    private static final int SQLITE_DONE = (int)101L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_DONE 101
     * }
     */
    public static int SQLITE_DONE() {
        return SQLITE_DONE;
    }
    private static final int SQLITE_OPEN_READONLY = (int)1L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_OPEN_READONLY 1
     * }
     */
    public static int SQLITE_OPEN_READONLY() {
        return SQLITE_OPEN_READONLY;
    }
    private static final int SQLITE_OPEN_READWRITE = (int)2L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_OPEN_READWRITE 2
     * }
     */
    public static int SQLITE_OPEN_READWRITE() {
        return SQLITE_OPEN_READWRITE;
    }
    private static final int SQLITE_OPEN_CREATE = (int)4L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_OPEN_CREATE 4
     * }
     */
    public static int SQLITE_OPEN_CREATE() {
        return SQLITE_OPEN_CREATE;
    }
    private static final int SQLITE_OPEN_DELETEONCLOSE = (int)8L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_OPEN_DELETEONCLOSE 8
     * }
     */
    public static int SQLITE_OPEN_DELETEONCLOSE() {
        return SQLITE_OPEN_DELETEONCLOSE;
    }
    private static final int SQLITE_OPEN_EXCLUSIVE = (int)16L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_OPEN_EXCLUSIVE 16
     * }
     */
    public static int SQLITE_OPEN_EXCLUSIVE() {
        return SQLITE_OPEN_EXCLUSIVE;
    }
    private static final int SQLITE_OPEN_AUTOPROXY = (int)32L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_OPEN_AUTOPROXY 32
     * }
     */
    public static int SQLITE_OPEN_AUTOPROXY() {
        return SQLITE_OPEN_AUTOPROXY;
    }
    private static final int SQLITE_OPEN_URI = (int)64L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_OPEN_URI 64
     * }
     */
    public static int SQLITE_OPEN_URI() {
        return SQLITE_OPEN_URI;
    }
    private static final int SQLITE_OPEN_MEMORY = (int)128L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_OPEN_MEMORY 128
     * }
     */
    public static int SQLITE_OPEN_MEMORY() {
        return SQLITE_OPEN_MEMORY;
    }
    private static final int SQLITE_OPEN_MAIN_DB = (int)256L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_OPEN_MAIN_DB 256
     * }
     */
    public static int SQLITE_OPEN_MAIN_DB() {
        return SQLITE_OPEN_MAIN_DB;
    }
    private static final int SQLITE_OPEN_TEMP_DB = (int)512L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_OPEN_TEMP_DB 512
     * }
     */
    public static int SQLITE_OPEN_TEMP_DB() {
        return SQLITE_OPEN_TEMP_DB;
    }
    private static final int SQLITE_OPEN_TRANSIENT_DB = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_OPEN_TRANSIENT_DB 1024
     * }
     */
    public static int SQLITE_OPEN_TRANSIENT_DB() {
        return SQLITE_OPEN_TRANSIENT_DB;
    }
    private static final int SQLITE_OPEN_MAIN_JOURNAL = (int)2048L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_OPEN_MAIN_JOURNAL 2048
     * }
     */
    public static int SQLITE_OPEN_MAIN_JOURNAL() {
        return SQLITE_OPEN_MAIN_JOURNAL;
    }
    private static final int SQLITE_OPEN_TEMP_JOURNAL = (int)4096L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_OPEN_TEMP_JOURNAL 4096
     * }
     */
    public static int SQLITE_OPEN_TEMP_JOURNAL() {
        return SQLITE_OPEN_TEMP_JOURNAL;
    }
    private static final int SQLITE_OPEN_SUBJOURNAL = (int)8192L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_OPEN_SUBJOURNAL 8192
     * }
     */
    public static int SQLITE_OPEN_SUBJOURNAL() {
        return SQLITE_OPEN_SUBJOURNAL;
    }
    private static final int SQLITE_OPEN_SUPER_JOURNAL = (int)16384L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_OPEN_SUPER_JOURNAL 16384
     * }
     */
    public static int SQLITE_OPEN_SUPER_JOURNAL() {
        return SQLITE_OPEN_SUPER_JOURNAL;
    }
    private static final int SQLITE_OPEN_NOMUTEX = (int)32768L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_OPEN_NOMUTEX 32768
     * }
     */
    public static int SQLITE_OPEN_NOMUTEX() {
        return SQLITE_OPEN_NOMUTEX;
    }
    private static final int SQLITE_OPEN_FULLMUTEX = (int)65536L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_OPEN_FULLMUTEX 65536
     * }
     */
    public static int SQLITE_OPEN_FULLMUTEX() {
        return SQLITE_OPEN_FULLMUTEX;
    }
    private static final int SQLITE_OPEN_SHAREDCACHE = (int)131072L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_OPEN_SHAREDCACHE 131072
     * }
     */
    public static int SQLITE_OPEN_SHAREDCACHE() {
        return SQLITE_OPEN_SHAREDCACHE;
    }
    private static final int SQLITE_OPEN_PRIVATECACHE = (int)262144L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_OPEN_PRIVATECACHE 262144
     * }
     */
    public static int SQLITE_OPEN_PRIVATECACHE() {
        return SQLITE_OPEN_PRIVATECACHE;
    }
    private static final int SQLITE_OPEN_WAL = (int)524288L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_OPEN_WAL 524288
     * }
     */
    public static int SQLITE_OPEN_WAL() {
        return SQLITE_OPEN_WAL;
    }
    private static final int SQLITE_OPEN_NOFOLLOW = (int)16777216L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_OPEN_NOFOLLOW 16777216
     * }
     */
    public static int SQLITE_OPEN_NOFOLLOW() {
        return SQLITE_OPEN_NOFOLLOW;
    }
    private static final int SQLITE_OPEN_EXRESCODE = (int)33554432L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_OPEN_EXRESCODE 33554432
     * }
     */
    public static int SQLITE_OPEN_EXRESCODE() {
        return SQLITE_OPEN_EXRESCODE;
    }
    private static final int SQLITE_OPEN_MASTER_JOURNAL = (int)16384L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_OPEN_MASTER_JOURNAL 16384
     * }
     */
    public static int SQLITE_OPEN_MASTER_JOURNAL() {
        return SQLITE_OPEN_MASTER_JOURNAL;
    }
    private static final int SQLITE_IOCAP_ATOMIC = (int)1L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_IOCAP_ATOMIC 1
     * }
     */
    public static int SQLITE_IOCAP_ATOMIC() {
        return SQLITE_IOCAP_ATOMIC;
    }
    private static final int SQLITE_IOCAP_ATOMIC512 = (int)2L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_IOCAP_ATOMIC512 2
     * }
     */
    public static int SQLITE_IOCAP_ATOMIC512() {
        return SQLITE_IOCAP_ATOMIC512;
    }
    private static final int SQLITE_IOCAP_ATOMIC1K = (int)4L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_IOCAP_ATOMIC1K 4
     * }
     */
    public static int SQLITE_IOCAP_ATOMIC1K() {
        return SQLITE_IOCAP_ATOMIC1K;
    }
    private static final int SQLITE_IOCAP_ATOMIC2K = (int)8L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_IOCAP_ATOMIC2K 8
     * }
     */
    public static int SQLITE_IOCAP_ATOMIC2K() {
        return SQLITE_IOCAP_ATOMIC2K;
    }
    private static final int SQLITE_IOCAP_ATOMIC4K = (int)16L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_IOCAP_ATOMIC4K 16
     * }
     */
    public static int SQLITE_IOCAP_ATOMIC4K() {
        return SQLITE_IOCAP_ATOMIC4K;
    }
    private static final int SQLITE_IOCAP_ATOMIC8K = (int)32L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_IOCAP_ATOMIC8K 32
     * }
     */
    public static int SQLITE_IOCAP_ATOMIC8K() {
        return SQLITE_IOCAP_ATOMIC8K;
    }
    private static final int SQLITE_IOCAP_ATOMIC16K = (int)64L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_IOCAP_ATOMIC16K 64
     * }
     */
    public static int SQLITE_IOCAP_ATOMIC16K() {
        return SQLITE_IOCAP_ATOMIC16K;
    }
    private static final int SQLITE_IOCAP_ATOMIC32K = (int)128L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_IOCAP_ATOMIC32K 128
     * }
     */
    public static int SQLITE_IOCAP_ATOMIC32K() {
        return SQLITE_IOCAP_ATOMIC32K;
    }
    private static final int SQLITE_IOCAP_ATOMIC64K = (int)256L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_IOCAP_ATOMIC64K 256
     * }
     */
    public static int SQLITE_IOCAP_ATOMIC64K() {
        return SQLITE_IOCAP_ATOMIC64K;
    }
    private static final int SQLITE_IOCAP_SAFE_APPEND = (int)512L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_IOCAP_SAFE_APPEND 512
     * }
     */
    public static int SQLITE_IOCAP_SAFE_APPEND() {
        return SQLITE_IOCAP_SAFE_APPEND;
    }
    private static final int SQLITE_IOCAP_SEQUENTIAL = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_IOCAP_SEQUENTIAL 1024
     * }
     */
    public static int SQLITE_IOCAP_SEQUENTIAL() {
        return SQLITE_IOCAP_SEQUENTIAL;
    }
    private static final int SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN = (int)2048L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN 2048
     * }
     */
    public static int SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN() {
        return SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN;
    }
    private static final int SQLITE_IOCAP_POWERSAFE_OVERWRITE = (int)4096L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_IOCAP_POWERSAFE_OVERWRITE 4096
     * }
     */
    public static int SQLITE_IOCAP_POWERSAFE_OVERWRITE() {
        return SQLITE_IOCAP_POWERSAFE_OVERWRITE;
    }
    private static final int SQLITE_IOCAP_IMMUTABLE = (int)8192L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_IOCAP_IMMUTABLE 8192
     * }
     */
    public static int SQLITE_IOCAP_IMMUTABLE() {
        return SQLITE_IOCAP_IMMUTABLE;
    }
    private static final int SQLITE_IOCAP_BATCH_ATOMIC = (int)16384L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_IOCAP_BATCH_ATOMIC 16384
     * }
     */
    public static int SQLITE_IOCAP_BATCH_ATOMIC() {
        return SQLITE_IOCAP_BATCH_ATOMIC;
    }
    private static final int SQLITE_LOCK_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_LOCK_NONE 0
     * }
     */
    public static int SQLITE_LOCK_NONE() {
        return SQLITE_LOCK_NONE;
    }
    private static final int SQLITE_LOCK_SHARED = (int)1L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_LOCK_SHARED 1
     * }
     */
    public static int SQLITE_LOCK_SHARED() {
        return SQLITE_LOCK_SHARED;
    }
    private static final int SQLITE_LOCK_RESERVED = (int)2L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_LOCK_RESERVED 2
     * }
     */
    public static int SQLITE_LOCK_RESERVED() {
        return SQLITE_LOCK_RESERVED;
    }
    private static final int SQLITE_LOCK_PENDING = (int)3L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_LOCK_PENDING 3
     * }
     */
    public static int SQLITE_LOCK_PENDING() {
        return SQLITE_LOCK_PENDING;
    }
    private static final int SQLITE_LOCK_EXCLUSIVE = (int)4L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_LOCK_EXCLUSIVE 4
     * }
     */
    public static int SQLITE_LOCK_EXCLUSIVE() {
        return SQLITE_LOCK_EXCLUSIVE;
    }
    private static final int SQLITE_SYNC_NORMAL = (int)2L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_SYNC_NORMAL 2
     * }
     */
    public static int SQLITE_SYNC_NORMAL() {
        return SQLITE_SYNC_NORMAL;
    }
    private static final int SQLITE_SYNC_FULL = (int)3L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_SYNC_FULL 3
     * }
     */
    public static int SQLITE_SYNC_FULL() {
        return SQLITE_SYNC_FULL;
    }
    private static final int SQLITE_SYNC_DATAONLY = (int)16L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_SYNC_DATAONLY 16
     * }
     */
    public static int SQLITE_SYNC_DATAONLY() {
        return SQLITE_SYNC_DATAONLY;
    }
    private static final int SQLITE_FCNTL_LOCKSTATE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_FCNTL_LOCKSTATE 1
     * }
     */
    public static int SQLITE_FCNTL_LOCKSTATE() {
        return SQLITE_FCNTL_LOCKSTATE;
    }
    private static final int SQLITE_FCNTL_GET_LOCKPROXYFILE = (int)2L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_FCNTL_GET_LOCKPROXYFILE 2
     * }
     */
    public static int SQLITE_FCNTL_GET_LOCKPROXYFILE() {
        return SQLITE_FCNTL_GET_LOCKPROXYFILE;
    }
    private static final int SQLITE_FCNTL_SET_LOCKPROXYFILE = (int)3L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_FCNTL_SET_LOCKPROXYFILE 3
     * }
     */
    public static int SQLITE_FCNTL_SET_LOCKPROXYFILE() {
        return SQLITE_FCNTL_SET_LOCKPROXYFILE;
    }
    private static final int SQLITE_FCNTL_LAST_ERRNO = (int)4L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_FCNTL_LAST_ERRNO 4
     * }
     */
    public static int SQLITE_FCNTL_LAST_ERRNO() {
        return SQLITE_FCNTL_LAST_ERRNO;
    }
    private static final int SQLITE_FCNTL_SIZE_HINT = (int)5L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_FCNTL_SIZE_HINT 5
     * }
     */
    public static int SQLITE_FCNTL_SIZE_HINT() {
        return SQLITE_FCNTL_SIZE_HINT;
    }
    private static final int SQLITE_FCNTL_CHUNK_SIZE = (int)6L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_FCNTL_CHUNK_SIZE 6
     * }
     */
    public static int SQLITE_FCNTL_CHUNK_SIZE() {
        return SQLITE_FCNTL_CHUNK_SIZE;
    }
    private static final int SQLITE_FCNTL_FILE_POINTER = (int)7L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_FCNTL_FILE_POINTER 7
     * }
     */
    public static int SQLITE_FCNTL_FILE_POINTER() {
        return SQLITE_FCNTL_FILE_POINTER;
    }
    private static final int SQLITE_FCNTL_SYNC_OMITTED = (int)8L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_FCNTL_SYNC_OMITTED 8
     * }
     */
    public static int SQLITE_FCNTL_SYNC_OMITTED() {
        return SQLITE_FCNTL_SYNC_OMITTED;
    }
    private static final int SQLITE_FCNTL_WIN32_AV_RETRY = (int)9L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_FCNTL_WIN32_AV_RETRY 9
     * }
     */
    public static int SQLITE_FCNTL_WIN32_AV_RETRY() {
        return SQLITE_FCNTL_WIN32_AV_RETRY;
    }
    private static final int SQLITE_FCNTL_PERSIST_WAL = (int)10L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_FCNTL_PERSIST_WAL 10
     * }
     */
    public static int SQLITE_FCNTL_PERSIST_WAL() {
        return SQLITE_FCNTL_PERSIST_WAL;
    }
    private static final int SQLITE_FCNTL_OVERWRITE = (int)11L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_FCNTL_OVERWRITE 11
     * }
     */
    public static int SQLITE_FCNTL_OVERWRITE() {
        return SQLITE_FCNTL_OVERWRITE;
    }
    private static final int SQLITE_FCNTL_VFSNAME = (int)12L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_FCNTL_VFSNAME 12
     * }
     */
    public static int SQLITE_FCNTL_VFSNAME() {
        return SQLITE_FCNTL_VFSNAME;
    }
    private static final int SQLITE_FCNTL_POWERSAFE_OVERWRITE = (int)13L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_FCNTL_POWERSAFE_OVERWRITE 13
     * }
     */
    public static int SQLITE_FCNTL_POWERSAFE_OVERWRITE() {
        return SQLITE_FCNTL_POWERSAFE_OVERWRITE;
    }
    private static final int SQLITE_FCNTL_PRAGMA = (int)14L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_FCNTL_PRAGMA 14
     * }
     */
    public static int SQLITE_FCNTL_PRAGMA() {
        return SQLITE_FCNTL_PRAGMA;
    }
    private static final int SQLITE_FCNTL_BUSYHANDLER = (int)15L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_FCNTL_BUSYHANDLER 15
     * }
     */
    public static int SQLITE_FCNTL_BUSYHANDLER() {
        return SQLITE_FCNTL_BUSYHANDLER;
    }
    private static final int SQLITE_FCNTL_TEMPFILENAME = (int)16L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_FCNTL_TEMPFILENAME 16
     * }
     */
    public static int SQLITE_FCNTL_TEMPFILENAME() {
        return SQLITE_FCNTL_TEMPFILENAME;
    }
    private static final int SQLITE_FCNTL_MMAP_SIZE = (int)18L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_FCNTL_MMAP_SIZE 18
     * }
     */
    public static int SQLITE_FCNTL_MMAP_SIZE() {
        return SQLITE_FCNTL_MMAP_SIZE;
    }
    private static final int SQLITE_FCNTL_TRACE = (int)19L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_FCNTL_TRACE 19
     * }
     */
    public static int SQLITE_FCNTL_TRACE() {
        return SQLITE_FCNTL_TRACE;
    }
    private static final int SQLITE_FCNTL_HAS_MOVED = (int)20L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_FCNTL_HAS_MOVED 20
     * }
     */
    public static int SQLITE_FCNTL_HAS_MOVED() {
        return SQLITE_FCNTL_HAS_MOVED;
    }
    private static final int SQLITE_FCNTL_SYNC = (int)21L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_FCNTL_SYNC 21
     * }
     */
    public static int SQLITE_FCNTL_SYNC() {
        return SQLITE_FCNTL_SYNC;
    }
    private static final int SQLITE_FCNTL_COMMIT_PHASETWO = (int)22L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_FCNTL_COMMIT_PHASETWO 22
     * }
     */
    public static int SQLITE_FCNTL_COMMIT_PHASETWO() {
        return SQLITE_FCNTL_COMMIT_PHASETWO;
    }
    private static final int SQLITE_FCNTL_WIN32_SET_HANDLE = (int)23L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_FCNTL_WIN32_SET_HANDLE 23
     * }
     */
    public static int SQLITE_FCNTL_WIN32_SET_HANDLE() {
        return SQLITE_FCNTL_WIN32_SET_HANDLE;
    }
    private static final int SQLITE_FCNTL_WAL_BLOCK = (int)24L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_FCNTL_WAL_BLOCK 24
     * }
     */
    public static int SQLITE_FCNTL_WAL_BLOCK() {
        return SQLITE_FCNTL_WAL_BLOCK;
    }
    private static final int SQLITE_FCNTL_ZIPVFS = (int)25L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_FCNTL_ZIPVFS 25
     * }
     */
    public static int SQLITE_FCNTL_ZIPVFS() {
        return SQLITE_FCNTL_ZIPVFS;
    }
    private static final int SQLITE_FCNTL_RBU = (int)26L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_FCNTL_RBU 26
     * }
     */
    public static int SQLITE_FCNTL_RBU() {
        return SQLITE_FCNTL_RBU;
    }
    private static final int SQLITE_FCNTL_VFS_POINTER = (int)27L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_FCNTL_VFS_POINTER 27
     * }
     */
    public static int SQLITE_FCNTL_VFS_POINTER() {
        return SQLITE_FCNTL_VFS_POINTER;
    }
    private static final int SQLITE_FCNTL_JOURNAL_POINTER = (int)28L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_FCNTL_JOURNAL_POINTER 28
     * }
     */
    public static int SQLITE_FCNTL_JOURNAL_POINTER() {
        return SQLITE_FCNTL_JOURNAL_POINTER;
    }
    private static final int SQLITE_FCNTL_WIN32_GET_HANDLE = (int)29L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_FCNTL_WIN32_GET_HANDLE 29
     * }
     */
    public static int SQLITE_FCNTL_WIN32_GET_HANDLE() {
        return SQLITE_FCNTL_WIN32_GET_HANDLE;
    }
    private static final int SQLITE_FCNTL_PDB = (int)30L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_FCNTL_PDB 30
     * }
     */
    public static int SQLITE_FCNTL_PDB() {
        return SQLITE_FCNTL_PDB;
    }
    private static final int SQLITE_FCNTL_BEGIN_ATOMIC_WRITE = (int)31L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_FCNTL_BEGIN_ATOMIC_WRITE 31
     * }
     */
    public static int SQLITE_FCNTL_BEGIN_ATOMIC_WRITE() {
        return SQLITE_FCNTL_BEGIN_ATOMIC_WRITE;
    }
    private static final int SQLITE_FCNTL_COMMIT_ATOMIC_WRITE = (int)32L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_FCNTL_COMMIT_ATOMIC_WRITE 32
     * }
     */
    public static int SQLITE_FCNTL_COMMIT_ATOMIC_WRITE() {
        return SQLITE_FCNTL_COMMIT_ATOMIC_WRITE;
    }
    private static final int SQLITE_FCNTL_ROLLBACK_ATOMIC_WRITE = (int)33L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_FCNTL_ROLLBACK_ATOMIC_WRITE 33
     * }
     */
    public static int SQLITE_FCNTL_ROLLBACK_ATOMIC_WRITE() {
        return SQLITE_FCNTL_ROLLBACK_ATOMIC_WRITE;
    }
    private static final int SQLITE_FCNTL_LOCK_TIMEOUT = (int)34L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_FCNTL_LOCK_TIMEOUT 34
     * }
     */
    public static int SQLITE_FCNTL_LOCK_TIMEOUT() {
        return SQLITE_FCNTL_LOCK_TIMEOUT;
    }
    private static final int SQLITE_FCNTL_DATA_VERSION = (int)35L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_FCNTL_DATA_VERSION 35
     * }
     */
    public static int SQLITE_FCNTL_DATA_VERSION() {
        return SQLITE_FCNTL_DATA_VERSION;
    }
    private static final int SQLITE_FCNTL_SIZE_LIMIT = (int)36L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_FCNTL_SIZE_LIMIT 36
     * }
     */
    public static int SQLITE_FCNTL_SIZE_LIMIT() {
        return SQLITE_FCNTL_SIZE_LIMIT;
    }
    private static final int SQLITE_FCNTL_CKPT_DONE = (int)37L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_FCNTL_CKPT_DONE 37
     * }
     */
    public static int SQLITE_FCNTL_CKPT_DONE() {
        return SQLITE_FCNTL_CKPT_DONE;
    }
    private static final int SQLITE_FCNTL_RESERVE_BYTES = (int)38L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_FCNTL_RESERVE_BYTES 38
     * }
     */
    public static int SQLITE_FCNTL_RESERVE_BYTES() {
        return SQLITE_FCNTL_RESERVE_BYTES;
    }
    private static final int SQLITE_FCNTL_CKPT_START = (int)39L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_FCNTL_CKPT_START 39
     * }
     */
    public static int SQLITE_FCNTL_CKPT_START() {
        return SQLITE_FCNTL_CKPT_START;
    }
    private static final int SQLITE_FCNTL_EXTERNAL_READER = (int)40L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_FCNTL_EXTERNAL_READER 40
     * }
     */
    public static int SQLITE_FCNTL_EXTERNAL_READER() {
        return SQLITE_FCNTL_EXTERNAL_READER;
    }
    private static final int SQLITE_FCNTL_CKSM_FILE = (int)41L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_FCNTL_CKSM_FILE 41
     * }
     */
    public static int SQLITE_FCNTL_CKSM_FILE() {
        return SQLITE_FCNTL_CKSM_FILE;
    }
    private static final int SQLITE_FCNTL_RESET_CACHE = (int)42L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_FCNTL_RESET_CACHE 42
     * }
     */
    public static int SQLITE_FCNTL_RESET_CACHE() {
        return SQLITE_FCNTL_RESET_CACHE;
    }
    private static final int SQLITE_ACCESS_EXISTS = (int)0L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_ACCESS_EXISTS 0
     * }
     */
    public static int SQLITE_ACCESS_EXISTS() {
        return SQLITE_ACCESS_EXISTS;
    }
    private static final int SQLITE_ACCESS_READWRITE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_ACCESS_READWRITE 1
     * }
     */
    public static int SQLITE_ACCESS_READWRITE() {
        return SQLITE_ACCESS_READWRITE;
    }
    private static final int SQLITE_ACCESS_READ = (int)2L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_ACCESS_READ 2
     * }
     */
    public static int SQLITE_ACCESS_READ() {
        return SQLITE_ACCESS_READ;
    }
    private static final int SQLITE_SHM_UNLOCK = (int)1L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_SHM_UNLOCK 1
     * }
     */
    public static int SQLITE_SHM_UNLOCK() {
        return SQLITE_SHM_UNLOCK;
    }
    private static final int SQLITE_SHM_LOCK = (int)2L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_SHM_LOCK 2
     * }
     */
    public static int SQLITE_SHM_LOCK() {
        return SQLITE_SHM_LOCK;
    }
    private static final int SQLITE_SHM_SHARED = (int)4L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_SHM_SHARED 4
     * }
     */
    public static int SQLITE_SHM_SHARED() {
        return SQLITE_SHM_SHARED;
    }
    private static final int SQLITE_SHM_EXCLUSIVE = (int)8L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_SHM_EXCLUSIVE 8
     * }
     */
    public static int SQLITE_SHM_EXCLUSIVE() {
        return SQLITE_SHM_EXCLUSIVE;
    }
    private static final int SQLITE_SHM_NLOCK = (int)8L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_SHM_NLOCK 8
     * }
     */
    public static int SQLITE_SHM_NLOCK() {
        return SQLITE_SHM_NLOCK;
    }
    private static final int SQLITE_CONFIG_SINGLETHREAD = (int)1L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_CONFIG_SINGLETHREAD 1
     * }
     */
    public static int SQLITE_CONFIG_SINGLETHREAD() {
        return SQLITE_CONFIG_SINGLETHREAD;
    }
    private static final int SQLITE_CONFIG_MULTITHREAD = (int)2L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_CONFIG_MULTITHREAD 2
     * }
     */
    public static int SQLITE_CONFIG_MULTITHREAD() {
        return SQLITE_CONFIG_MULTITHREAD;
    }
    private static final int SQLITE_CONFIG_SERIALIZED = (int)3L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_CONFIG_SERIALIZED 3
     * }
     */
    public static int SQLITE_CONFIG_SERIALIZED() {
        return SQLITE_CONFIG_SERIALIZED;
    }
    private static final int SQLITE_CONFIG_MALLOC = (int)4L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_CONFIG_MALLOC 4
     * }
     */
    public static int SQLITE_CONFIG_MALLOC() {
        return SQLITE_CONFIG_MALLOC;
    }
    private static final int SQLITE_CONFIG_GETMALLOC = (int)5L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_CONFIG_GETMALLOC 5
     * }
     */
    public static int SQLITE_CONFIG_GETMALLOC() {
        return SQLITE_CONFIG_GETMALLOC;
    }
    private static final int SQLITE_CONFIG_SCRATCH = (int)6L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_CONFIG_SCRATCH 6
     * }
     */
    public static int SQLITE_CONFIG_SCRATCH() {
        return SQLITE_CONFIG_SCRATCH;
    }
    private static final int SQLITE_CONFIG_PAGECACHE = (int)7L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_CONFIG_PAGECACHE 7
     * }
     */
    public static int SQLITE_CONFIG_PAGECACHE() {
        return SQLITE_CONFIG_PAGECACHE;
    }
    private static final int SQLITE_CONFIG_HEAP = (int)8L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_CONFIG_HEAP 8
     * }
     */
    public static int SQLITE_CONFIG_HEAP() {
        return SQLITE_CONFIG_HEAP;
    }
    private static final int SQLITE_CONFIG_MEMSTATUS = (int)9L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_CONFIG_MEMSTATUS 9
     * }
     */
    public static int SQLITE_CONFIG_MEMSTATUS() {
        return SQLITE_CONFIG_MEMSTATUS;
    }
    private static final int SQLITE_CONFIG_MUTEX = (int)10L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_CONFIG_MUTEX 10
     * }
     */
    public static int SQLITE_CONFIG_MUTEX() {
        return SQLITE_CONFIG_MUTEX;
    }
    private static final int SQLITE_CONFIG_GETMUTEX = (int)11L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_CONFIG_GETMUTEX 11
     * }
     */
    public static int SQLITE_CONFIG_GETMUTEX() {
        return SQLITE_CONFIG_GETMUTEX;
    }
    private static final int SQLITE_CONFIG_LOOKASIDE = (int)13L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_CONFIG_LOOKASIDE 13
     * }
     */
    public static int SQLITE_CONFIG_LOOKASIDE() {
        return SQLITE_CONFIG_LOOKASIDE;
    }
    private static final int SQLITE_CONFIG_PCACHE = (int)14L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_CONFIG_PCACHE 14
     * }
     */
    public static int SQLITE_CONFIG_PCACHE() {
        return SQLITE_CONFIG_PCACHE;
    }
    private static final int SQLITE_CONFIG_GETPCACHE = (int)15L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_CONFIG_GETPCACHE 15
     * }
     */
    public static int SQLITE_CONFIG_GETPCACHE() {
        return SQLITE_CONFIG_GETPCACHE;
    }
    private static final int SQLITE_CONFIG_LOG = (int)16L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_CONFIG_LOG 16
     * }
     */
    public static int SQLITE_CONFIG_LOG() {
        return SQLITE_CONFIG_LOG;
    }
    private static final int SQLITE_CONFIG_URI = (int)17L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_CONFIG_URI 17
     * }
     */
    public static int SQLITE_CONFIG_URI() {
        return SQLITE_CONFIG_URI;
    }
    private static final int SQLITE_CONFIG_PCACHE2 = (int)18L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_CONFIG_PCACHE2 18
     * }
     */
    public static int SQLITE_CONFIG_PCACHE2() {
        return SQLITE_CONFIG_PCACHE2;
    }
    private static final int SQLITE_CONFIG_GETPCACHE2 = (int)19L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_CONFIG_GETPCACHE2 19
     * }
     */
    public static int SQLITE_CONFIG_GETPCACHE2() {
        return SQLITE_CONFIG_GETPCACHE2;
    }
    private static final int SQLITE_CONFIG_COVERING_INDEX_SCAN = (int)20L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_CONFIG_COVERING_INDEX_SCAN 20
     * }
     */
    public static int SQLITE_CONFIG_COVERING_INDEX_SCAN() {
        return SQLITE_CONFIG_COVERING_INDEX_SCAN;
    }
    private static final int SQLITE_CONFIG_SQLLOG = (int)21L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_CONFIG_SQLLOG 21
     * }
     */
    public static int SQLITE_CONFIG_SQLLOG() {
        return SQLITE_CONFIG_SQLLOG;
    }
    private static final int SQLITE_CONFIG_MMAP_SIZE = (int)22L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_CONFIG_MMAP_SIZE 22
     * }
     */
    public static int SQLITE_CONFIG_MMAP_SIZE() {
        return SQLITE_CONFIG_MMAP_SIZE;
    }
    private static final int SQLITE_CONFIG_WIN32_HEAPSIZE = (int)23L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_CONFIG_WIN32_HEAPSIZE 23
     * }
     */
    public static int SQLITE_CONFIG_WIN32_HEAPSIZE() {
        return SQLITE_CONFIG_WIN32_HEAPSIZE;
    }
    private static final int SQLITE_CONFIG_PCACHE_HDRSZ = (int)24L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_CONFIG_PCACHE_HDRSZ 24
     * }
     */
    public static int SQLITE_CONFIG_PCACHE_HDRSZ() {
        return SQLITE_CONFIG_PCACHE_HDRSZ;
    }
    private static final int SQLITE_CONFIG_PMASZ = (int)25L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_CONFIG_PMASZ 25
     * }
     */
    public static int SQLITE_CONFIG_PMASZ() {
        return SQLITE_CONFIG_PMASZ;
    }
    private static final int SQLITE_CONFIG_STMTJRNL_SPILL = (int)26L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_CONFIG_STMTJRNL_SPILL 26
     * }
     */
    public static int SQLITE_CONFIG_STMTJRNL_SPILL() {
        return SQLITE_CONFIG_STMTJRNL_SPILL;
    }
    private static final int SQLITE_CONFIG_SMALL_MALLOC = (int)27L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_CONFIG_SMALL_MALLOC 27
     * }
     */
    public static int SQLITE_CONFIG_SMALL_MALLOC() {
        return SQLITE_CONFIG_SMALL_MALLOC;
    }
    private static final int SQLITE_CONFIG_SORTERREF_SIZE = (int)28L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_CONFIG_SORTERREF_SIZE 28
     * }
     */
    public static int SQLITE_CONFIG_SORTERREF_SIZE() {
        return SQLITE_CONFIG_SORTERREF_SIZE;
    }
    private static final int SQLITE_CONFIG_MEMDB_MAXSIZE = (int)29L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_CONFIG_MEMDB_MAXSIZE 29
     * }
     */
    public static int SQLITE_CONFIG_MEMDB_MAXSIZE() {
        return SQLITE_CONFIG_MEMDB_MAXSIZE;
    }
    private static final int SQLITE_CONFIG_ROWID_IN_VIEW = (int)30L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_CONFIG_ROWID_IN_VIEW 30
     * }
     */
    public static int SQLITE_CONFIG_ROWID_IN_VIEW() {
        return SQLITE_CONFIG_ROWID_IN_VIEW;
    }
    private static final int SQLITE_DBCONFIG_MAINDBNAME = (int)1000L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_DBCONFIG_MAINDBNAME 1000
     * }
     */
    public static int SQLITE_DBCONFIG_MAINDBNAME() {
        return SQLITE_DBCONFIG_MAINDBNAME;
    }
    private static final int SQLITE_DBCONFIG_LOOKASIDE = (int)1001L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_DBCONFIG_LOOKASIDE 1001
     * }
     */
    public static int SQLITE_DBCONFIG_LOOKASIDE() {
        return SQLITE_DBCONFIG_LOOKASIDE;
    }
    private static final int SQLITE_DBCONFIG_ENABLE_FKEY = (int)1002L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_DBCONFIG_ENABLE_FKEY 1002
     * }
     */
    public static int SQLITE_DBCONFIG_ENABLE_FKEY() {
        return SQLITE_DBCONFIG_ENABLE_FKEY;
    }
    private static final int SQLITE_DBCONFIG_ENABLE_TRIGGER = (int)1003L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_DBCONFIG_ENABLE_TRIGGER 1003
     * }
     */
    public static int SQLITE_DBCONFIG_ENABLE_TRIGGER() {
        return SQLITE_DBCONFIG_ENABLE_TRIGGER;
    }
    private static final int SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER = (int)1004L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER 1004
     * }
     */
    public static int SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER() {
        return SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER;
    }
    private static final int SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION = (int)1005L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION 1005
     * }
     */
    public static int SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION() {
        return SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION;
    }
    private static final int SQLITE_DBCONFIG_NO_CKPT_ON_CLOSE = (int)1006L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_DBCONFIG_NO_CKPT_ON_CLOSE 1006
     * }
     */
    public static int SQLITE_DBCONFIG_NO_CKPT_ON_CLOSE() {
        return SQLITE_DBCONFIG_NO_CKPT_ON_CLOSE;
    }
    private static final int SQLITE_DBCONFIG_ENABLE_QPSG = (int)1007L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_DBCONFIG_ENABLE_QPSG 1007
     * }
     */
    public static int SQLITE_DBCONFIG_ENABLE_QPSG() {
        return SQLITE_DBCONFIG_ENABLE_QPSG;
    }
    private static final int SQLITE_DBCONFIG_TRIGGER_EQP = (int)1008L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_DBCONFIG_TRIGGER_EQP 1008
     * }
     */
    public static int SQLITE_DBCONFIG_TRIGGER_EQP() {
        return SQLITE_DBCONFIG_TRIGGER_EQP;
    }
    private static final int SQLITE_DBCONFIG_RESET_DATABASE = (int)1009L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_DBCONFIG_RESET_DATABASE 1009
     * }
     */
    public static int SQLITE_DBCONFIG_RESET_DATABASE() {
        return SQLITE_DBCONFIG_RESET_DATABASE;
    }
    private static final int SQLITE_DBCONFIG_DEFENSIVE = (int)1010L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_DBCONFIG_DEFENSIVE 1010
     * }
     */
    public static int SQLITE_DBCONFIG_DEFENSIVE() {
        return SQLITE_DBCONFIG_DEFENSIVE;
    }
    private static final int SQLITE_DBCONFIG_WRITABLE_SCHEMA = (int)1011L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_DBCONFIG_WRITABLE_SCHEMA 1011
     * }
     */
    public static int SQLITE_DBCONFIG_WRITABLE_SCHEMA() {
        return SQLITE_DBCONFIG_WRITABLE_SCHEMA;
    }
    private static final int SQLITE_DBCONFIG_LEGACY_ALTER_TABLE = (int)1012L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_DBCONFIG_LEGACY_ALTER_TABLE 1012
     * }
     */
    public static int SQLITE_DBCONFIG_LEGACY_ALTER_TABLE() {
        return SQLITE_DBCONFIG_LEGACY_ALTER_TABLE;
    }
    private static final int SQLITE_DBCONFIG_DQS_DML = (int)1013L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_DBCONFIG_DQS_DML 1013
     * }
     */
    public static int SQLITE_DBCONFIG_DQS_DML() {
        return SQLITE_DBCONFIG_DQS_DML;
    }
    private static final int SQLITE_DBCONFIG_DQS_DDL = (int)1014L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_DBCONFIG_DQS_DDL 1014
     * }
     */
    public static int SQLITE_DBCONFIG_DQS_DDL() {
        return SQLITE_DBCONFIG_DQS_DDL;
    }
    private static final int SQLITE_DBCONFIG_ENABLE_VIEW = (int)1015L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_DBCONFIG_ENABLE_VIEW 1015
     * }
     */
    public static int SQLITE_DBCONFIG_ENABLE_VIEW() {
        return SQLITE_DBCONFIG_ENABLE_VIEW;
    }
    private static final int SQLITE_DBCONFIG_LEGACY_FILE_FORMAT = (int)1016L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_DBCONFIG_LEGACY_FILE_FORMAT 1016
     * }
     */
    public static int SQLITE_DBCONFIG_LEGACY_FILE_FORMAT() {
        return SQLITE_DBCONFIG_LEGACY_FILE_FORMAT;
    }
    private static final int SQLITE_DBCONFIG_TRUSTED_SCHEMA = (int)1017L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_DBCONFIG_TRUSTED_SCHEMA 1017
     * }
     */
    public static int SQLITE_DBCONFIG_TRUSTED_SCHEMA() {
        return SQLITE_DBCONFIG_TRUSTED_SCHEMA;
    }
    private static final int SQLITE_DBCONFIG_STMT_SCANSTATUS = (int)1018L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_DBCONFIG_STMT_SCANSTATUS 1018
     * }
     */
    public static int SQLITE_DBCONFIG_STMT_SCANSTATUS() {
        return SQLITE_DBCONFIG_STMT_SCANSTATUS;
    }
    private static final int SQLITE_DBCONFIG_REVERSE_SCANORDER = (int)1019L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_DBCONFIG_REVERSE_SCANORDER 1019
     * }
     */
    public static int SQLITE_DBCONFIG_REVERSE_SCANORDER() {
        return SQLITE_DBCONFIG_REVERSE_SCANORDER;
    }
    private static final int SQLITE_DBCONFIG_MAX = (int)1019L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_DBCONFIG_MAX 1019
     * }
     */
    public static int SQLITE_DBCONFIG_MAX() {
        return SQLITE_DBCONFIG_MAX;
    }
    private static final int SQLITE_DENY = (int)1L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_DENY 1
     * }
     */
    public static int SQLITE_DENY() {
        return SQLITE_DENY;
    }
    private static final int SQLITE_IGNORE = (int)2L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_IGNORE 2
     * }
     */
    public static int SQLITE_IGNORE() {
        return SQLITE_IGNORE;
    }
    private static final int SQLITE_CREATE_INDEX = (int)1L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_CREATE_INDEX 1
     * }
     */
    public static int SQLITE_CREATE_INDEX() {
        return SQLITE_CREATE_INDEX;
    }
    private static final int SQLITE_CREATE_TABLE = (int)2L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_CREATE_TABLE 2
     * }
     */
    public static int SQLITE_CREATE_TABLE() {
        return SQLITE_CREATE_TABLE;
    }
    private static final int SQLITE_CREATE_TEMP_INDEX = (int)3L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_CREATE_TEMP_INDEX 3
     * }
     */
    public static int SQLITE_CREATE_TEMP_INDEX() {
        return SQLITE_CREATE_TEMP_INDEX;
    }
    private static final int SQLITE_CREATE_TEMP_TABLE = (int)4L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_CREATE_TEMP_TABLE 4
     * }
     */
    public static int SQLITE_CREATE_TEMP_TABLE() {
        return SQLITE_CREATE_TEMP_TABLE;
    }
    private static final int SQLITE_CREATE_TEMP_TRIGGER = (int)5L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_CREATE_TEMP_TRIGGER 5
     * }
     */
    public static int SQLITE_CREATE_TEMP_TRIGGER() {
        return SQLITE_CREATE_TEMP_TRIGGER;
    }
    private static final int SQLITE_CREATE_TEMP_VIEW = (int)6L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_CREATE_TEMP_VIEW 6
     * }
     */
    public static int SQLITE_CREATE_TEMP_VIEW() {
        return SQLITE_CREATE_TEMP_VIEW;
    }
    private static final int SQLITE_CREATE_TRIGGER = (int)7L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_CREATE_TRIGGER 7
     * }
     */
    public static int SQLITE_CREATE_TRIGGER() {
        return SQLITE_CREATE_TRIGGER;
    }
    private static final int SQLITE_CREATE_VIEW = (int)8L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_CREATE_VIEW 8
     * }
     */
    public static int SQLITE_CREATE_VIEW() {
        return SQLITE_CREATE_VIEW;
    }
    private static final int SQLITE_DELETE = (int)9L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_DELETE 9
     * }
     */
    public static int SQLITE_DELETE() {
        return SQLITE_DELETE;
    }
    private static final int SQLITE_DROP_INDEX = (int)10L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_DROP_INDEX 10
     * }
     */
    public static int SQLITE_DROP_INDEX() {
        return SQLITE_DROP_INDEX;
    }
    private static final int SQLITE_DROP_TABLE = (int)11L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_DROP_TABLE 11
     * }
     */
    public static int SQLITE_DROP_TABLE() {
        return SQLITE_DROP_TABLE;
    }
    private static final int SQLITE_DROP_TEMP_INDEX = (int)12L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_DROP_TEMP_INDEX 12
     * }
     */
    public static int SQLITE_DROP_TEMP_INDEX() {
        return SQLITE_DROP_TEMP_INDEX;
    }
    private static final int SQLITE_DROP_TEMP_TABLE = (int)13L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_DROP_TEMP_TABLE 13
     * }
     */
    public static int SQLITE_DROP_TEMP_TABLE() {
        return SQLITE_DROP_TEMP_TABLE;
    }
    private static final int SQLITE_DROP_TEMP_TRIGGER = (int)14L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_DROP_TEMP_TRIGGER 14
     * }
     */
    public static int SQLITE_DROP_TEMP_TRIGGER() {
        return SQLITE_DROP_TEMP_TRIGGER;
    }
    private static final int SQLITE_DROP_TEMP_VIEW = (int)15L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_DROP_TEMP_VIEW 15
     * }
     */
    public static int SQLITE_DROP_TEMP_VIEW() {
        return SQLITE_DROP_TEMP_VIEW;
    }
    private static final int SQLITE_DROP_TRIGGER = (int)16L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_DROP_TRIGGER 16
     * }
     */
    public static int SQLITE_DROP_TRIGGER() {
        return SQLITE_DROP_TRIGGER;
    }
    private static final int SQLITE_DROP_VIEW = (int)17L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_DROP_VIEW 17
     * }
     */
    public static int SQLITE_DROP_VIEW() {
        return SQLITE_DROP_VIEW;
    }
    private static final int SQLITE_INSERT = (int)18L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_INSERT 18
     * }
     */
    public static int SQLITE_INSERT() {
        return SQLITE_INSERT;
    }
    private static final int SQLITE_PRAGMA = (int)19L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_PRAGMA 19
     * }
     */
    public static int SQLITE_PRAGMA() {
        return SQLITE_PRAGMA;
    }
    private static final int SQLITE_READ = (int)20L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_READ 20
     * }
     */
    public static int SQLITE_READ() {
        return SQLITE_READ;
    }
    private static final int SQLITE_SELECT = (int)21L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_SELECT 21
     * }
     */
    public static int SQLITE_SELECT() {
        return SQLITE_SELECT;
    }
    private static final int SQLITE_TRANSACTION = (int)22L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_TRANSACTION 22
     * }
     */
    public static int SQLITE_TRANSACTION() {
        return SQLITE_TRANSACTION;
    }
    private static final int SQLITE_UPDATE = (int)23L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_UPDATE 23
     * }
     */
    public static int SQLITE_UPDATE() {
        return SQLITE_UPDATE;
    }
    private static final int SQLITE_ATTACH = (int)24L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_ATTACH 24
     * }
     */
    public static int SQLITE_ATTACH() {
        return SQLITE_ATTACH;
    }
    private static final int SQLITE_DETACH = (int)25L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_DETACH 25
     * }
     */
    public static int SQLITE_DETACH() {
        return SQLITE_DETACH;
    }
    private static final int SQLITE_ALTER_TABLE = (int)26L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_ALTER_TABLE 26
     * }
     */
    public static int SQLITE_ALTER_TABLE() {
        return SQLITE_ALTER_TABLE;
    }
    private static final int SQLITE_REINDEX = (int)27L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_REINDEX 27
     * }
     */
    public static int SQLITE_REINDEX() {
        return SQLITE_REINDEX;
    }
    private static final int SQLITE_ANALYZE = (int)28L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_ANALYZE 28
     * }
     */
    public static int SQLITE_ANALYZE() {
        return SQLITE_ANALYZE;
    }
    private static final int SQLITE_CREATE_VTABLE = (int)29L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_CREATE_VTABLE 29
     * }
     */
    public static int SQLITE_CREATE_VTABLE() {
        return SQLITE_CREATE_VTABLE;
    }
    private static final int SQLITE_DROP_VTABLE = (int)30L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_DROP_VTABLE 30
     * }
     */
    public static int SQLITE_DROP_VTABLE() {
        return SQLITE_DROP_VTABLE;
    }
    private static final int SQLITE_FUNCTION = (int)31L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_FUNCTION 31
     * }
     */
    public static int SQLITE_FUNCTION() {
        return SQLITE_FUNCTION;
    }
    private static final int SQLITE_SAVEPOINT = (int)32L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_SAVEPOINT 32
     * }
     */
    public static int SQLITE_SAVEPOINT() {
        return SQLITE_SAVEPOINT;
    }
    private static final int SQLITE_COPY = (int)0L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_COPY 0
     * }
     */
    public static int SQLITE_COPY() {
        return SQLITE_COPY;
    }
    private static final int SQLITE_RECURSIVE = (int)33L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_RECURSIVE 33
     * }
     */
    public static int SQLITE_RECURSIVE() {
        return SQLITE_RECURSIVE;
    }
    private static final int SQLITE_TRACE_STMT = (int)1L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_TRACE_STMT 1
     * }
     */
    public static int SQLITE_TRACE_STMT() {
        return SQLITE_TRACE_STMT;
    }
    private static final int SQLITE_TRACE_PROFILE = (int)2L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_TRACE_PROFILE 2
     * }
     */
    public static int SQLITE_TRACE_PROFILE() {
        return SQLITE_TRACE_PROFILE;
    }
    private static final int SQLITE_TRACE_ROW = (int)4L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_TRACE_ROW 4
     * }
     */
    public static int SQLITE_TRACE_ROW() {
        return SQLITE_TRACE_ROW;
    }
    private static final int SQLITE_TRACE_CLOSE = (int)8L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_TRACE_CLOSE 8
     * }
     */
    public static int SQLITE_TRACE_CLOSE() {
        return SQLITE_TRACE_CLOSE;
    }
    private static final int SQLITE_LIMIT_LENGTH = (int)0L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_LIMIT_LENGTH 0
     * }
     */
    public static int SQLITE_LIMIT_LENGTH() {
        return SQLITE_LIMIT_LENGTH;
    }
    private static final int SQLITE_LIMIT_SQL_LENGTH = (int)1L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_LIMIT_SQL_LENGTH 1
     * }
     */
    public static int SQLITE_LIMIT_SQL_LENGTH() {
        return SQLITE_LIMIT_SQL_LENGTH;
    }
    private static final int SQLITE_LIMIT_COLUMN = (int)2L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_LIMIT_COLUMN 2
     * }
     */
    public static int SQLITE_LIMIT_COLUMN() {
        return SQLITE_LIMIT_COLUMN;
    }
    private static final int SQLITE_LIMIT_EXPR_DEPTH = (int)3L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_LIMIT_EXPR_DEPTH 3
     * }
     */
    public static int SQLITE_LIMIT_EXPR_DEPTH() {
        return SQLITE_LIMIT_EXPR_DEPTH;
    }
    private static final int SQLITE_LIMIT_COMPOUND_SELECT = (int)4L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_LIMIT_COMPOUND_SELECT 4
     * }
     */
    public static int SQLITE_LIMIT_COMPOUND_SELECT() {
        return SQLITE_LIMIT_COMPOUND_SELECT;
    }
    private static final int SQLITE_LIMIT_VDBE_OP = (int)5L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_LIMIT_VDBE_OP 5
     * }
     */
    public static int SQLITE_LIMIT_VDBE_OP() {
        return SQLITE_LIMIT_VDBE_OP;
    }
    private static final int SQLITE_LIMIT_FUNCTION_ARG = (int)6L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_LIMIT_FUNCTION_ARG 6
     * }
     */
    public static int SQLITE_LIMIT_FUNCTION_ARG() {
        return SQLITE_LIMIT_FUNCTION_ARG;
    }
    private static final int SQLITE_LIMIT_ATTACHED = (int)7L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_LIMIT_ATTACHED 7
     * }
     */
    public static int SQLITE_LIMIT_ATTACHED() {
        return SQLITE_LIMIT_ATTACHED;
    }
    private static final int SQLITE_LIMIT_LIKE_PATTERN_LENGTH = (int)8L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_LIMIT_LIKE_PATTERN_LENGTH 8
     * }
     */
    public static int SQLITE_LIMIT_LIKE_PATTERN_LENGTH() {
        return SQLITE_LIMIT_LIKE_PATTERN_LENGTH;
    }
    private static final int SQLITE_LIMIT_VARIABLE_NUMBER = (int)9L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_LIMIT_VARIABLE_NUMBER 9
     * }
     */
    public static int SQLITE_LIMIT_VARIABLE_NUMBER() {
        return SQLITE_LIMIT_VARIABLE_NUMBER;
    }
    private static final int SQLITE_LIMIT_TRIGGER_DEPTH = (int)10L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_LIMIT_TRIGGER_DEPTH 10
     * }
     */
    public static int SQLITE_LIMIT_TRIGGER_DEPTH() {
        return SQLITE_LIMIT_TRIGGER_DEPTH;
    }
    private static final int SQLITE_LIMIT_WORKER_THREADS = (int)11L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_LIMIT_WORKER_THREADS 11
     * }
     */
    public static int SQLITE_LIMIT_WORKER_THREADS() {
        return SQLITE_LIMIT_WORKER_THREADS;
    }
    private static final int SQLITE_PREPARE_PERSISTENT = (int)1L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_PREPARE_PERSISTENT 1
     * }
     */
    public static int SQLITE_PREPARE_PERSISTENT() {
        return SQLITE_PREPARE_PERSISTENT;
    }
    private static final int SQLITE_PREPARE_NORMALIZE = (int)2L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_PREPARE_NORMALIZE 2
     * }
     */
    public static int SQLITE_PREPARE_NORMALIZE() {
        return SQLITE_PREPARE_NORMALIZE;
    }
    private static final int SQLITE_PREPARE_NO_VTAB = (int)4L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_PREPARE_NO_VTAB 4
     * }
     */
    public static int SQLITE_PREPARE_NO_VTAB() {
        return SQLITE_PREPARE_NO_VTAB;
    }
    private static final int SQLITE_INTEGER = (int)1L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_INTEGER 1
     * }
     */
    public static int SQLITE_INTEGER() {
        return SQLITE_INTEGER;
    }
    private static final int SQLITE_FLOAT = (int)2L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_FLOAT 2
     * }
     */
    public static int SQLITE_FLOAT() {
        return SQLITE_FLOAT;
    }
    private static final int SQLITE_BLOB = (int)4L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_BLOB 4
     * }
     */
    public static int SQLITE_BLOB() {
        return SQLITE_BLOB;
    }
    private static final int SQLITE_NULL = (int)5L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_NULL 5
     * }
     */
    public static int SQLITE_NULL() {
        return SQLITE_NULL;
    }
    private static final int SQLITE_TEXT = (int)3L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_TEXT 3
     * }
     */
    public static int SQLITE_TEXT() {
        return SQLITE_TEXT;
    }
    private static final int SQLITE3_TEXT = (int)3L;
    /**
     * {@snippet lang=c :
     * #define SQLITE3_TEXT 3
     * }
     */
    public static int SQLITE3_TEXT() {
        return SQLITE3_TEXT;
    }
    private static final int SQLITE_UTF8 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_UTF8 1
     * }
     */
    public static int SQLITE_UTF8() {
        return SQLITE_UTF8;
    }
    private static final int SQLITE_UTF16LE = (int)2L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_UTF16LE 2
     * }
     */
    public static int SQLITE_UTF16LE() {
        return SQLITE_UTF16LE;
    }
    private static final int SQLITE_UTF16BE = (int)3L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_UTF16BE 3
     * }
     */
    public static int SQLITE_UTF16BE() {
        return SQLITE_UTF16BE;
    }
    private static final int SQLITE_UTF16 = (int)4L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_UTF16 4
     * }
     */
    public static int SQLITE_UTF16() {
        return SQLITE_UTF16;
    }
    private static final int SQLITE_ANY = (int)5L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_ANY 5
     * }
     */
    public static int SQLITE_ANY() {
        return SQLITE_ANY;
    }
    private static final int SQLITE_UTF16_ALIGNED = (int)8L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_UTF16_ALIGNED 8
     * }
     */
    public static int SQLITE_UTF16_ALIGNED() {
        return SQLITE_UTF16_ALIGNED;
    }
    private static final int SQLITE_DETERMINISTIC = (int)2048L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_DETERMINISTIC 2048
     * }
     */
    public static int SQLITE_DETERMINISTIC() {
        return SQLITE_DETERMINISTIC;
    }
    private static final int SQLITE_DIRECTONLY = (int)524288L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_DIRECTONLY 524288
     * }
     */
    public static int SQLITE_DIRECTONLY() {
        return SQLITE_DIRECTONLY;
    }
    private static final int SQLITE_SUBTYPE = (int)1048576L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_SUBTYPE 1048576
     * }
     */
    public static int SQLITE_SUBTYPE() {
        return SQLITE_SUBTYPE;
    }
    private static final int SQLITE_INNOCUOUS = (int)2097152L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_INNOCUOUS 2097152
     * }
     */
    public static int SQLITE_INNOCUOUS() {
        return SQLITE_INNOCUOUS;
    }
    private static final int SQLITE_RESULT_SUBTYPE = (int)16777216L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_RESULT_SUBTYPE 16777216
     * }
     */
    public static int SQLITE_RESULT_SUBTYPE() {
        return SQLITE_RESULT_SUBTYPE;
    }
    private static final int SQLITE_WIN32_DATA_DIRECTORY_TYPE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_WIN32_DATA_DIRECTORY_TYPE 1
     * }
     */
    public static int SQLITE_WIN32_DATA_DIRECTORY_TYPE() {
        return SQLITE_WIN32_DATA_DIRECTORY_TYPE;
    }
    private static final int SQLITE_WIN32_TEMP_DIRECTORY_TYPE = (int)2L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_WIN32_TEMP_DIRECTORY_TYPE 2
     * }
     */
    public static int SQLITE_WIN32_TEMP_DIRECTORY_TYPE() {
        return SQLITE_WIN32_TEMP_DIRECTORY_TYPE;
    }
    private static final int SQLITE_TXN_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_TXN_NONE 0
     * }
     */
    public static int SQLITE_TXN_NONE() {
        return SQLITE_TXN_NONE;
    }
    private static final int SQLITE_TXN_READ = (int)1L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_TXN_READ 1
     * }
     */
    public static int SQLITE_TXN_READ() {
        return SQLITE_TXN_READ;
    }
    private static final int SQLITE_TXN_WRITE = (int)2L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_TXN_WRITE 2
     * }
     */
    public static int SQLITE_TXN_WRITE() {
        return SQLITE_TXN_WRITE;
    }
    private static final int SQLITE_INDEX_SCAN_UNIQUE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_INDEX_SCAN_UNIQUE 1
     * }
     */
    public static int SQLITE_INDEX_SCAN_UNIQUE() {
        return SQLITE_INDEX_SCAN_UNIQUE;
    }
    private static final int SQLITE_INDEX_CONSTRAINT_EQ = (int)2L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_INDEX_CONSTRAINT_EQ 2
     * }
     */
    public static int SQLITE_INDEX_CONSTRAINT_EQ() {
        return SQLITE_INDEX_CONSTRAINT_EQ;
    }
    private static final int SQLITE_INDEX_CONSTRAINT_GT = (int)4L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_INDEX_CONSTRAINT_GT 4
     * }
     */
    public static int SQLITE_INDEX_CONSTRAINT_GT() {
        return SQLITE_INDEX_CONSTRAINT_GT;
    }
    private static final int SQLITE_INDEX_CONSTRAINT_LE = (int)8L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_INDEX_CONSTRAINT_LE 8
     * }
     */
    public static int SQLITE_INDEX_CONSTRAINT_LE() {
        return SQLITE_INDEX_CONSTRAINT_LE;
    }
    private static final int SQLITE_INDEX_CONSTRAINT_LT = (int)16L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_INDEX_CONSTRAINT_LT 16
     * }
     */
    public static int SQLITE_INDEX_CONSTRAINT_LT() {
        return SQLITE_INDEX_CONSTRAINT_LT;
    }
    private static final int SQLITE_INDEX_CONSTRAINT_GE = (int)32L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_INDEX_CONSTRAINT_GE 32
     * }
     */
    public static int SQLITE_INDEX_CONSTRAINT_GE() {
        return SQLITE_INDEX_CONSTRAINT_GE;
    }
    private static final int SQLITE_INDEX_CONSTRAINT_MATCH = (int)64L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_INDEX_CONSTRAINT_MATCH 64
     * }
     */
    public static int SQLITE_INDEX_CONSTRAINT_MATCH() {
        return SQLITE_INDEX_CONSTRAINT_MATCH;
    }
    private static final int SQLITE_INDEX_CONSTRAINT_LIKE = (int)65L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_INDEX_CONSTRAINT_LIKE 65
     * }
     */
    public static int SQLITE_INDEX_CONSTRAINT_LIKE() {
        return SQLITE_INDEX_CONSTRAINT_LIKE;
    }
    private static final int SQLITE_INDEX_CONSTRAINT_GLOB = (int)66L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_INDEX_CONSTRAINT_GLOB 66
     * }
     */
    public static int SQLITE_INDEX_CONSTRAINT_GLOB() {
        return SQLITE_INDEX_CONSTRAINT_GLOB;
    }
    private static final int SQLITE_INDEX_CONSTRAINT_REGEXP = (int)67L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_INDEX_CONSTRAINT_REGEXP 67
     * }
     */
    public static int SQLITE_INDEX_CONSTRAINT_REGEXP() {
        return SQLITE_INDEX_CONSTRAINT_REGEXP;
    }
    private static final int SQLITE_INDEX_CONSTRAINT_NE = (int)68L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_INDEX_CONSTRAINT_NE 68
     * }
     */
    public static int SQLITE_INDEX_CONSTRAINT_NE() {
        return SQLITE_INDEX_CONSTRAINT_NE;
    }
    private static final int SQLITE_INDEX_CONSTRAINT_ISNOT = (int)69L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_INDEX_CONSTRAINT_ISNOT 69
     * }
     */
    public static int SQLITE_INDEX_CONSTRAINT_ISNOT() {
        return SQLITE_INDEX_CONSTRAINT_ISNOT;
    }
    private static final int SQLITE_INDEX_CONSTRAINT_ISNOTNULL = (int)70L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_INDEX_CONSTRAINT_ISNOTNULL 70
     * }
     */
    public static int SQLITE_INDEX_CONSTRAINT_ISNOTNULL() {
        return SQLITE_INDEX_CONSTRAINT_ISNOTNULL;
    }
    private static final int SQLITE_INDEX_CONSTRAINT_ISNULL = (int)71L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_INDEX_CONSTRAINT_ISNULL 71
     * }
     */
    public static int SQLITE_INDEX_CONSTRAINT_ISNULL() {
        return SQLITE_INDEX_CONSTRAINT_ISNULL;
    }
    private static final int SQLITE_INDEX_CONSTRAINT_IS = (int)72L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_INDEX_CONSTRAINT_IS 72
     * }
     */
    public static int SQLITE_INDEX_CONSTRAINT_IS() {
        return SQLITE_INDEX_CONSTRAINT_IS;
    }
    private static final int SQLITE_INDEX_CONSTRAINT_LIMIT = (int)73L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_INDEX_CONSTRAINT_LIMIT 73
     * }
     */
    public static int SQLITE_INDEX_CONSTRAINT_LIMIT() {
        return SQLITE_INDEX_CONSTRAINT_LIMIT;
    }
    private static final int SQLITE_INDEX_CONSTRAINT_OFFSET = (int)74L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_INDEX_CONSTRAINT_OFFSET 74
     * }
     */
    public static int SQLITE_INDEX_CONSTRAINT_OFFSET() {
        return SQLITE_INDEX_CONSTRAINT_OFFSET;
    }
    private static final int SQLITE_INDEX_CONSTRAINT_FUNCTION = (int)150L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_INDEX_CONSTRAINT_FUNCTION 150
     * }
     */
    public static int SQLITE_INDEX_CONSTRAINT_FUNCTION() {
        return SQLITE_INDEX_CONSTRAINT_FUNCTION;
    }
    private static final int SQLITE_MUTEX_FAST = (int)0L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_MUTEX_FAST 0
     * }
     */
    public static int SQLITE_MUTEX_FAST() {
        return SQLITE_MUTEX_FAST;
    }
    private static final int SQLITE_MUTEX_RECURSIVE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_MUTEX_RECURSIVE 1
     * }
     */
    public static int SQLITE_MUTEX_RECURSIVE() {
        return SQLITE_MUTEX_RECURSIVE;
    }
    private static final int SQLITE_MUTEX_STATIC_MAIN = (int)2L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_MUTEX_STATIC_MAIN 2
     * }
     */
    public static int SQLITE_MUTEX_STATIC_MAIN() {
        return SQLITE_MUTEX_STATIC_MAIN;
    }
    private static final int SQLITE_MUTEX_STATIC_MEM = (int)3L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_MUTEX_STATIC_MEM 3
     * }
     */
    public static int SQLITE_MUTEX_STATIC_MEM() {
        return SQLITE_MUTEX_STATIC_MEM;
    }
    private static final int SQLITE_MUTEX_STATIC_MEM2 = (int)4L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_MUTEX_STATIC_MEM2 4
     * }
     */
    public static int SQLITE_MUTEX_STATIC_MEM2() {
        return SQLITE_MUTEX_STATIC_MEM2;
    }
    private static final int SQLITE_MUTEX_STATIC_OPEN = (int)4L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_MUTEX_STATIC_OPEN 4
     * }
     */
    public static int SQLITE_MUTEX_STATIC_OPEN() {
        return SQLITE_MUTEX_STATIC_OPEN;
    }
    private static final int SQLITE_MUTEX_STATIC_PRNG = (int)5L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_MUTEX_STATIC_PRNG 5
     * }
     */
    public static int SQLITE_MUTEX_STATIC_PRNG() {
        return SQLITE_MUTEX_STATIC_PRNG;
    }
    private static final int SQLITE_MUTEX_STATIC_LRU = (int)6L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_MUTEX_STATIC_LRU 6
     * }
     */
    public static int SQLITE_MUTEX_STATIC_LRU() {
        return SQLITE_MUTEX_STATIC_LRU;
    }
    private static final int SQLITE_MUTEX_STATIC_LRU2 = (int)7L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_MUTEX_STATIC_LRU2 7
     * }
     */
    public static int SQLITE_MUTEX_STATIC_LRU2() {
        return SQLITE_MUTEX_STATIC_LRU2;
    }
    private static final int SQLITE_MUTEX_STATIC_PMEM = (int)7L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_MUTEX_STATIC_PMEM 7
     * }
     */
    public static int SQLITE_MUTEX_STATIC_PMEM() {
        return SQLITE_MUTEX_STATIC_PMEM;
    }
    private static final int SQLITE_MUTEX_STATIC_APP1 = (int)8L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_MUTEX_STATIC_APP1 8
     * }
     */
    public static int SQLITE_MUTEX_STATIC_APP1() {
        return SQLITE_MUTEX_STATIC_APP1;
    }
    private static final int SQLITE_MUTEX_STATIC_APP2 = (int)9L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_MUTEX_STATIC_APP2 9
     * }
     */
    public static int SQLITE_MUTEX_STATIC_APP2() {
        return SQLITE_MUTEX_STATIC_APP2;
    }
    private static final int SQLITE_MUTEX_STATIC_APP3 = (int)10L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_MUTEX_STATIC_APP3 10
     * }
     */
    public static int SQLITE_MUTEX_STATIC_APP3() {
        return SQLITE_MUTEX_STATIC_APP3;
    }
    private static final int SQLITE_MUTEX_STATIC_VFS1 = (int)11L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_MUTEX_STATIC_VFS1 11
     * }
     */
    public static int SQLITE_MUTEX_STATIC_VFS1() {
        return SQLITE_MUTEX_STATIC_VFS1;
    }
    private static final int SQLITE_MUTEX_STATIC_VFS2 = (int)12L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_MUTEX_STATIC_VFS2 12
     * }
     */
    public static int SQLITE_MUTEX_STATIC_VFS2() {
        return SQLITE_MUTEX_STATIC_VFS2;
    }
    private static final int SQLITE_MUTEX_STATIC_VFS3 = (int)13L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_MUTEX_STATIC_VFS3 13
     * }
     */
    public static int SQLITE_MUTEX_STATIC_VFS3() {
        return SQLITE_MUTEX_STATIC_VFS3;
    }
    private static final int SQLITE_MUTEX_STATIC_MASTER = (int)2L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_MUTEX_STATIC_MASTER 2
     * }
     */
    public static int SQLITE_MUTEX_STATIC_MASTER() {
        return SQLITE_MUTEX_STATIC_MASTER;
    }
    private static final int SQLITE_TESTCTRL_FIRST = (int)5L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_TESTCTRL_FIRST 5
     * }
     */
    public static int SQLITE_TESTCTRL_FIRST() {
        return SQLITE_TESTCTRL_FIRST;
    }
    private static final int SQLITE_TESTCTRL_PRNG_SAVE = (int)5L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_TESTCTRL_PRNG_SAVE 5
     * }
     */
    public static int SQLITE_TESTCTRL_PRNG_SAVE() {
        return SQLITE_TESTCTRL_PRNG_SAVE;
    }
    private static final int SQLITE_TESTCTRL_PRNG_RESTORE = (int)6L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_TESTCTRL_PRNG_RESTORE 6
     * }
     */
    public static int SQLITE_TESTCTRL_PRNG_RESTORE() {
        return SQLITE_TESTCTRL_PRNG_RESTORE;
    }
    private static final int SQLITE_TESTCTRL_PRNG_RESET = (int)7L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_TESTCTRL_PRNG_RESET 7
     * }
     */
    public static int SQLITE_TESTCTRL_PRNG_RESET() {
        return SQLITE_TESTCTRL_PRNG_RESET;
    }
    private static final int SQLITE_TESTCTRL_FK_NO_ACTION = (int)7L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_TESTCTRL_FK_NO_ACTION 7
     * }
     */
    public static int SQLITE_TESTCTRL_FK_NO_ACTION() {
        return SQLITE_TESTCTRL_FK_NO_ACTION;
    }
    private static final int SQLITE_TESTCTRL_BITVEC_TEST = (int)8L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_TESTCTRL_BITVEC_TEST 8
     * }
     */
    public static int SQLITE_TESTCTRL_BITVEC_TEST() {
        return SQLITE_TESTCTRL_BITVEC_TEST;
    }
    private static final int SQLITE_TESTCTRL_FAULT_INSTALL = (int)9L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_TESTCTRL_FAULT_INSTALL 9
     * }
     */
    public static int SQLITE_TESTCTRL_FAULT_INSTALL() {
        return SQLITE_TESTCTRL_FAULT_INSTALL;
    }
    private static final int SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS = (int)10L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS 10
     * }
     */
    public static int SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS() {
        return SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS;
    }
    private static final int SQLITE_TESTCTRL_PENDING_BYTE = (int)11L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_TESTCTRL_PENDING_BYTE 11
     * }
     */
    public static int SQLITE_TESTCTRL_PENDING_BYTE() {
        return SQLITE_TESTCTRL_PENDING_BYTE;
    }
    private static final int SQLITE_TESTCTRL_ASSERT = (int)12L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_TESTCTRL_ASSERT 12
     * }
     */
    public static int SQLITE_TESTCTRL_ASSERT() {
        return SQLITE_TESTCTRL_ASSERT;
    }
    private static final int SQLITE_TESTCTRL_ALWAYS = (int)13L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_TESTCTRL_ALWAYS 13
     * }
     */
    public static int SQLITE_TESTCTRL_ALWAYS() {
        return SQLITE_TESTCTRL_ALWAYS;
    }
    private static final int SQLITE_TESTCTRL_RESERVE = (int)14L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_TESTCTRL_RESERVE 14
     * }
     */
    public static int SQLITE_TESTCTRL_RESERVE() {
        return SQLITE_TESTCTRL_RESERVE;
    }
    private static final int SQLITE_TESTCTRL_JSON_SELFCHECK = (int)14L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_TESTCTRL_JSON_SELFCHECK 14
     * }
     */
    public static int SQLITE_TESTCTRL_JSON_SELFCHECK() {
        return SQLITE_TESTCTRL_JSON_SELFCHECK;
    }
    private static final int SQLITE_TESTCTRL_OPTIMIZATIONS = (int)15L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_TESTCTRL_OPTIMIZATIONS 15
     * }
     */
    public static int SQLITE_TESTCTRL_OPTIMIZATIONS() {
        return SQLITE_TESTCTRL_OPTIMIZATIONS;
    }
    private static final int SQLITE_TESTCTRL_ISKEYWORD = (int)16L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_TESTCTRL_ISKEYWORD 16
     * }
     */
    public static int SQLITE_TESTCTRL_ISKEYWORD() {
        return SQLITE_TESTCTRL_ISKEYWORD;
    }
    private static final int SQLITE_TESTCTRL_SCRATCHMALLOC = (int)17L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_TESTCTRL_SCRATCHMALLOC 17
     * }
     */
    public static int SQLITE_TESTCTRL_SCRATCHMALLOC() {
        return SQLITE_TESTCTRL_SCRATCHMALLOC;
    }
    private static final int SQLITE_TESTCTRL_INTERNAL_FUNCTIONS = (int)17L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_TESTCTRL_INTERNAL_FUNCTIONS 17
     * }
     */
    public static int SQLITE_TESTCTRL_INTERNAL_FUNCTIONS() {
        return SQLITE_TESTCTRL_INTERNAL_FUNCTIONS;
    }
    private static final int SQLITE_TESTCTRL_LOCALTIME_FAULT = (int)18L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_TESTCTRL_LOCALTIME_FAULT 18
     * }
     */
    public static int SQLITE_TESTCTRL_LOCALTIME_FAULT() {
        return SQLITE_TESTCTRL_LOCALTIME_FAULT;
    }
    private static final int SQLITE_TESTCTRL_EXPLAIN_STMT = (int)19L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_TESTCTRL_EXPLAIN_STMT 19
     * }
     */
    public static int SQLITE_TESTCTRL_EXPLAIN_STMT() {
        return SQLITE_TESTCTRL_EXPLAIN_STMT;
    }
    private static final int SQLITE_TESTCTRL_ONCE_RESET_THRESHOLD = (int)19L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_TESTCTRL_ONCE_RESET_THRESHOLD 19
     * }
     */
    public static int SQLITE_TESTCTRL_ONCE_RESET_THRESHOLD() {
        return SQLITE_TESTCTRL_ONCE_RESET_THRESHOLD;
    }
    private static final int SQLITE_TESTCTRL_NEVER_CORRUPT = (int)20L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_TESTCTRL_NEVER_CORRUPT 20
     * }
     */
    public static int SQLITE_TESTCTRL_NEVER_CORRUPT() {
        return SQLITE_TESTCTRL_NEVER_CORRUPT;
    }
    private static final int SQLITE_TESTCTRL_VDBE_COVERAGE = (int)21L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_TESTCTRL_VDBE_COVERAGE 21
     * }
     */
    public static int SQLITE_TESTCTRL_VDBE_COVERAGE() {
        return SQLITE_TESTCTRL_VDBE_COVERAGE;
    }
    private static final int SQLITE_TESTCTRL_BYTEORDER = (int)22L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_TESTCTRL_BYTEORDER 22
     * }
     */
    public static int SQLITE_TESTCTRL_BYTEORDER() {
        return SQLITE_TESTCTRL_BYTEORDER;
    }
    private static final int SQLITE_TESTCTRL_ISINIT = (int)23L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_TESTCTRL_ISINIT 23
     * }
     */
    public static int SQLITE_TESTCTRL_ISINIT() {
        return SQLITE_TESTCTRL_ISINIT;
    }
    private static final int SQLITE_TESTCTRL_SORTER_MMAP = (int)24L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_TESTCTRL_SORTER_MMAP 24
     * }
     */
    public static int SQLITE_TESTCTRL_SORTER_MMAP() {
        return SQLITE_TESTCTRL_SORTER_MMAP;
    }
    private static final int SQLITE_TESTCTRL_IMPOSTER = (int)25L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_TESTCTRL_IMPOSTER 25
     * }
     */
    public static int SQLITE_TESTCTRL_IMPOSTER() {
        return SQLITE_TESTCTRL_IMPOSTER;
    }
    private static final int SQLITE_TESTCTRL_PARSER_COVERAGE = (int)26L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_TESTCTRL_PARSER_COVERAGE 26
     * }
     */
    public static int SQLITE_TESTCTRL_PARSER_COVERAGE() {
        return SQLITE_TESTCTRL_PARSER_COVERAGE;
    }
    private static final int SQLITE_TESTCTRL_RESULT_INTREAL = (int)27L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_TESTCTRL_RESULT_INTREAL 27
     * }
     */
    public static int SQLITE_TESTCTRL_RESULT_INTREAL() {
        return SQLITE_TESTCTRL_RESULT_INTREAL;
    }
    private static final int SQLITE_TESTCTRL_PRNG_SEED = (int)28L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_TESTCTRL_PRNG_SEED 28
     * }
     */
    public static int SQLITE_TESTCTRL_PRNG_SEED() {
        return SQLITE_TESTCTRL_PRNG_SEED;
    }
    private static final int SQLITE_TESTCTRL_EXTRA_SCHEMA_CHECKS = (int)29L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_TESTCTRL_EXTRA_SCHEMA_CHECKS 29
     * }
     */
    public static int SQLITE_TESTCTRL_EXTRA_SCHEMA_CHECKS() {
        return SQLITE_TESTCTRL_EXTRA_SCHEMA_CHECKS;
    }
    private static final int SQLITE_TESTCTRL_SEEK_COUNT = (int)30L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_TESTCTRL_SEEK_COUNT 30
     * }
     */
    public static int SQLITE_TESTCTRL_SEEK_COUNT() {
        return SQLITE_TESTCTRL_SEEK_COUNT;
    }
    private static final int SQLITE_TESTCTRL_TRACEFLAGS = (int)31L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_TESTCTRL_TRACEFLAGS 31
     * }
     */
    public static int SQLITE_TESTCTRL_TRACEFLAGS() {
        return SQLITE_TESTCTRL_TRACEFLAGS;
    }
    private static final int SQLITE_TESTCTRL_TUNE = (int)32L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_TESTCTRL_TUNE 32
     * }
     */
    public static int SQLITE_TESTCTRL_TUNE() {
        return SQLITE_TESTCTRL_TUNE;
    }
    private static final int SQLITE_TESTCTRL_LOGEST = (int)33L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_TESTCTRL_LOGEST 33
     * }
     */
    public static int SQLITE_TESTCTRL_LOGEST() {
        return SQLITE_TESTCTRL_LOGEST;
    }
    private static final int SQLITE_TESTCTRL_USELONGDOUBLE = (int)34L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_TESTCTRL_USELONGDOUBLE 34
     * }
     */
    public static int SQLITE_TESTCTRL_USELONGDOUBLE() {
        return SQLITE_TESTCTRL_USELONGDOUBLE;
    }
    private static final int SQLITE_TESTCTRL_LAST = (int)34L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_TESTCTRL_LAST 34
     * }
     */
    public static int SQLITE_TESTCTRL_LAST() {
        return SQLITE_TESTCTRL_LAST;
    }
    private static final int SQLITE_STATUS_MEMORY_USED = (int)0L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_STATUS_MEMORY_USED 0
     * }
     */
    public static int SQLITE_STATUS_MEMORY_USED() {
        return SQLITE_STATUS_MEMORY_USED;
    }
    private static final int SQLITE_STATUS_PAGECACHE_USED = (int)1L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_STATUS_PAGECACHE_USED 1
     * }
     */
    public static int SQLITE_STATUS_PAGECACHE_USED() {
        return SQLITE_STATUS_PAGECACHE_USED;
    }
    private static final int SQLITE_STATUS_PAGECACHE_OVERFLOW = (int)2L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_STATUS_PAGECACHE_OVERFLOW 2
     * }
     */
    public static int SQLITE_STATUS_PAGECACHE_OVERFLOW() {
        return SQLITE_STATUS_PAGECACHE_OVERFLOW;
    }
    private static final int SQLITE_STATUS_SCRATCH_USED = (int)3L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_STATUS_SCRATCH_USED 3
     * }
     */
    public static int SQLITE_STATUS_SCRATCH_USED() {
        return SQLITE_STATUS_SCRATCH_USED;
    }
    private static final int SQLITE_STATUS_SCRATCH_OVERFLOW = (int)4L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_STATUS_SCRATCH_OVERFLOW 4
     * }
     */
    public static int SQLITE_STATUS_SCRATCH_OVERFLOW() {
        return SQLITE_STATUS_SCRATCH_OVERFLOW;
    }
    private static final int SQLITE_STATUS_MALLOC_SIZE = (int)5L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_STATUS_MALLOC_SIZE 5
     * }
     */
    public static int SQLITE_STATUS_MALLOC_SIZE() {
        return SQLITE_STATUS_MALLOC_SIZE;
    }
    private static final int SQLITE_STATUS_PARSER_STACK = (int)6L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_STATUS_PARSER_STACK 6
     * }
     */
    public static int SQLITE_STATUS_PARSER_STACK() {
        return SQLITE_STATUS_PARSER_STACK;
    }
    private static final int SQLITE_STATUS_PAGECACHE_SIZE = (int)7L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_STATUS_PAGECACHE_SIZE 7
     * }
     */
    public static int SQLITE_STATUS_PAGECACHE_SIZE() {
        return SQLITE_STATUS_PAGECACHE_SIZE;
    }
    private static final int SQLITE_STATUS_SCRATCH_SIZE = (int)8L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_STATUS_SCRATCH_SIZE 8
     * }
     */
    public static int SQLITE_STATUS_SCRATCH_SIZE() {
        return SQLITE_STATUS_SCRATCH_SIZE;
    }
    private static final int SQLITE_STATUS_MALLOC_COUNT = (int)9L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_STATUS_MALLOC_COUNT 9
     * }
     */
    public static int SQLITE_STATUS_MALLOC_COUNT() {
        return SQLITE_STATUS_MALLOC_COUNT;
    }
    private static final int SQLITE_DBSTATUS_LOOKASIDE_USED = (int)0L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_DBSTATUS_LOOKASIDE_USED 0
     * }
     */
    public static int SQLITE_DBSTATUS_LOOKASIDE_USED() {
        return SQLITE_DBSTATUS_LOOKASIDE_USED;
    }
    private static final int SQLITE_DBSTATUS_CACHE_USED = (int)1L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_DBSTATUS_CACHE_USED 1
     * }
     */
    public static int SQLITE_DBSTATUS_CACHE_USED() {
        return SQLITE_DBSTATUS_CACHE_USED;
    }
    private static final int SQLITE_DBSTATUS_SCHEMA_USED = (int)2L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_DBSTATUS_SCHEMA_USED 2
     * }
     */
    public static int SQLITE_DBSTATUS_SCHEMA_USED() {
        return SQLITE_DBSTATUS_SCHEMA_USED;
    }
    private static final int SQLITE_DBSTATUS_STMT_USED = (int)3L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_DBSTATUS_STMT_USED 3
     * }
     */
    public static int SQLITE_DBSTATUS_STMT_USED() {
        return SQLITE_DBSTATUS_STMT_USED;
    }
    private static final int SQLITE_DBSTATUS_LOOKASIDE_HIT = (int)4L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_DBSTATUS_LOOKASIDE_HIT 4
     * }
     */
    public static int SQLITE_DBSTATUS_LOOKASIDE_HIT() {
        return SQLITE_DBSTATUS_LOOKASIDE_HIT;
    }
    private static final int SQLITE_DBSTATUS_LOOKASIDE_MISS_SIZE = (int)5L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_DBSTATUS_LOOKASIDE_MISS_SIZE 5
     * }
     */
    public static int SQLITE_DBSTATUS_LOOKASIDE_MISS_SIZE() {
        return SQLITE_DBSTATUS_LOOKASIDE_MISS_SIZE;
    }
    private static final int SQLITE_DBSTATUS_LOOKASIDE_MISS_FULL = (int)6L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_DBSTATUS_LOOKASIDE_MISS_FULL 6
     * }
     */
    public static int SQLITE_DBSTATUS_LOOKASIDE_MISS_FULL() {
        return SQLITE_DBSTATUS_LOOKASIDE_MISS_FULL;
    }
    private static final int SQLITE_DBSTATUS_CACHE_HIT = (int)7L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_DBSTATUS_CACHE_HIT 7
     * }
     */
    public static int SQLITE_DBSTATUS_CACHE_HIT() {
        return SQLITE_DBSTATUS_CACHE_HIT;
    }
    private static final int SQLITE_DBSTATUS_CACHE_MISS = (int)8L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_DBSTATUS_CACHE_MISS 8
     * }
     */
    public static int SQLITE_DBSTATUS_CACHE_MISS() {
        return SQLITE_DBSTATUS_CACHE_MISS;
    }
    private static final int SQLITE_DBSTATUS_CACHE_WRITE = (int)9L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_DBSTATUS_CACHE_WRITE 9
     * }
     */
    public static int SQLITE_DBSTATUS_CACHE_WRITE() {
        return SQLITE_DBSTATUS_CACHE_WRITE;
    }
    private static final int SQLITE_DBSTATUS_DEFERRED_FKS = (int)10L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_DBSTATUS_DEFERRED_FKS 10
     * }
     */
    public static int SQLITE_DBSTATUS_DEFERRED_FKS() {
        return SQLITE_DBSTATUS_DEFERRED_FKS;
    }
    private static final int SQLITE_DBSTATUS_CACHE_USED_SHARED = (int)11L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_DBSTATUS_CACHE_USED_SHARED 11
     * }
     */
    public static int SQLITE_DBSTATUS_CACHE_USED_SHARED() {
        return SQLITE_DBSTATUS_CACHE_USED_SHARED;
    }
    private static final int SQLITE_DBSTATUS_CACHE_SPILL = (int)12L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_DBSTATUS_CACHE_SPILL 12
     * }
     */
    public static int SQLITE_DBSTATUS_CACHE_SPILL() {
        return SQLITE_DBSTATUS_CACHE_SPILL;
    }
    private static final int SQLITE_DBSTATUS_MAX = (int)12L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_DBSTATUS_MAX 12
     * }
     */
    public static int SQLITE_DBSTATUS_MAX() {
        return SQLITE_DBSTATUS_MAX;
    }
    private static final int SQLITE_STMTSTATUS_FULLSCAN_STEP = (int)1L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_STMTSTATUS_FULLSCAN_STEP 1
     * }
     */
    public static int SQLITE_STMTSTATUS_FULLSCAN_STEP() {
        return SQLITE_STMTSTATUS_FULLSCAN_STEP;
    }
    private static final int SQLITE_STMTSTATUS_SORT = (int)2L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_STMTSTATUS_SORT 2
     * }
     */
    public static int SQLITE_STMTSTATUS_SORT() {
        return SQLITE_STMTSTATUS_SORT;
    }
    private static final int SQLITE_STMTSTATUS_AUTOINDEX = (int)3L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_STMTSTATUS_AUTOINDEX 3
     * }
     */
    public static int SQLITE_STMTSTATUS_AUTOINDEX() {
        return SQLITE_STMTSTATUS_AUTOINDEX;
    }
    private static final int SQLITE_STMTSTATUS_VM_STEP = (int)4L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_STMTSTATUS_VM_STEP 4
     * }
     */
    public static int SQLITE_STMTSTATUS_VM_STEP() {
        return SQLITE_STMTSTATUS_VM_STEP;
    }
    private static final int SQLITE_STMTSTATUS_REPREPARE = (int)5L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_STMTSTATUS_REPREPARE 5
     * }
     */
    public static int SQLITE_STMTSTATUS_REPREPARE() {
        return SQLITE_STMTSTATUS_REPREPARE;
    }
    private static final int SQLITE_STMTSTATUS_RUN = (int)6L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_STMTSTATUS_RUN 6
     * }
     */
    public static int SQLITE_STMTSTATUS_RUN() {
        return SQLITE_STMTSTATUS_RUN;
    }
    private static final int SQLITE_STMTSTATUS_FILTER_MISS = (int)7L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_STMTSTATUS_FILTER_MISS 7
     * }
     */
    public static int SQLITE_STMTSTATUS_FILTER_MISS() {
        return SQLITE_STMTSTATUS_FILTER_MISS;
    }
    private static final int SQLITE_STMTSTATUS_FILTER_HIT = (int)8L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_STMTSTATUS_FILTER_HIT 8
     * }
     */
    public static int SQLITE_STMTSTATUS_FILTER_HIT() {
        return SQLITE_STMTSTATUS_FILTER_HIT;
    }
    private static final int SQLITE_STMTSTATUS_MEMUSED = (int)99L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_STMTSTATUS_MEMUSED 99
     * }
     */
    public static int SQLITE_STMTSTATUS_MEMUSED() {
        return SQLITE_STMTSTATUS_MEMUSED;
    }
    private static final int SQLITE_CHECKPOINT_PASSIVE = (int)0L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_CHECKPOINT_PASSIVE 0
     * }
     */
    public static int SQLITE_CHECKPOINT_PASSIVE() {
        return SQLITE_CHECKPOINT_PASSIVE;
    }
    private static final int SQLITE_CHECKPOINT_FULL = (int)1L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_CHECKPOINT_FULL 1
     * }
     */
    public static int SQLITE_CHECKPOINT_FULL() {
        return SQLITE_CHECKPOINT_FULL;
    }
    private static final int SQLITE_CHECKPOINT_RESTART = (int)2L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_CHECKPOINT_RESTART 2
     * }
     */
    public static int SQLITE_CHECKPOINT_RESTART() {
        return SQLITE_CHECKPOINT_RESTART;
    }
    private static final int SQLITE_CHECKPOINT_TRUNCATE = (int)3L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_CHECKPOINT_TRUNCATE 3
     * }
     */
    public static int SQLITE_CHECKPOINT_TRUNCATE() {
        return SQLITE_CHECKPOINT_TRUNCATE;
    }
    private static final int SQLITE_VTAB_CONSTRAINT_SUPPORT = (int)1L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_VTAB_CONSTRAINT_SUPPORT 1
     * }
     */
    public static int SQLITE_VTAB_CONSTRAINT_SUPPORT() {
        return SQLITE_VTAB_CONSTRAINT_SUPPORT;
    }
    private static final int SQLITE_VTAB_INNOCUOUS = (int)2L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_VTAB_INNOCUOUS 2
     * }
     */
    public static int SQLITE_VTAB_INNOCUOUS() {
        return SQLITE_VTAB_INNOCUOUS;
    }
    private static final int SQLITE_VTAB_DIRECTONLY = (int)3L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_VTAB_DIRECTONLY 3
     * }
     */
    public static int SQLITE_VTAB_DIRECTONLY() {
        return SQLITE_VTAB_DIRECTONLY;
    }
    private static final int SQLITE_VTAB_USES_ALL_SCHEMAS = (int)4L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_VTAB_USES_ALL_SCHEMAS 4
     * }
     */
    public static int SQLITE_VTAB_USES_ALL_SCHEMAS() {
        return SQLITE_VTAB_USES_ALL_SCHEMAS;
    }
    private static final int SQLITE_ROLLBACK = (int)1L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_ROLLBACK 1
     * }
     */
    public static int SQLITE_ROLLBACK() {
        return SQLITE_ROLLBACK;
    }
    private static final int SQLITE_FAIL = (int)3L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_FAIL 3
     * }
     */
    public static int SQLITE_FAIL() {
        return SQLITE_FAIL;
    }
    private static final int SQLITE_REPLACE = (int)5L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_REPLACE 5
     * }
     */
    public static int SQLITE_REPLACE() {
        return SQLITE_REPLACE;
    }
    private static final int SQLITE_SCANSTAT_NLOOP = (int)0L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_SCANSTAT_NLOOP 0
     * }
     */
    public static int SQLITE_SCANSTAT_NLOOP() {
        return SQLITE_SCANSTAT_NLOOP;
    }
    private static final int SQLITE_SCANSTAT_NVISIT = (int)1L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_SCANSTAT_NVISIT 1
     * }
     */
    public static int SQLITE_SCANSTAT_NVISIT() {
        return SQLITE_SCANSTAT_NVISIT;
    }
    private static final int SQLITE_SCANSTAT_EST = (int)2L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_SCANSTAT_EST 2
     * }
     */
    public static int SQLITE_SCANSTAT_EST() {
        return SQLITE_SCANSTAT_EST;
    }
    private static final int SQLITE_SCANSTAT_NAME = (int)3L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_SCANSTAT_NAME 3
     * }
     */
    public static int SQLITE_SCANSTAT_NAME() {
        return SQLITE_SCANSTAT_NAME;
    }
    private static final int SQLITE_SCANSTAT_EXPLAIN = (int)4L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_SCANSTAT_EXPLAIN 4
     * }
     */
    public static int SQLITE_SCANSTAT_EXPLAIN() {
        return SQLITE_SCANSTAT_EXPLAIN;
    }
    private static final int SQLITE_SCANSTAT_SELECTID = (int)5L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_SCANSTAT_SELECTID 5
     * }
     */
    public static int SQLITE_SCANSTAT_SELECTID() {
        return SQLITE_SCANSTAT_SELECTID;
    }
    private static final int SQLITE_SCANSTAT_PARENTID = (int)6L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_SCANSTAT_PARENTID 6
     * }
     */
    public static int SQLITE_SCANSTAT_PARENTID() {
        return SQLITE_SCANSTAT_PARENTID;
    }
    private static final int SQLITE_SCANSTAT_NCYCLE = (int)7L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_SCANSTAT_NCYCLE 7
     * }
     */
    public static int SQLITE_SCANSTAT_NCYCLE() {
        return SQLITE_SCANSTAT_NCYCLE;
    }
    private static final int SQLITE_SCANSTAT_COMPLEX = (int)1L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_SCANSTAT_COMPLEX 1
     * }
     */
    public static int SQLITE_SCANSTAT_COMPLEX() {
        return SQLITE_SCANSTAT_COMPLEX;
    }
    private static final int SQLITE_SERIALIZE_NOCOPY = (int)1L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_SERIALIZE_NOCOPY 1
     * }
     */
    public static int SQLITE_SERIALIZE_NOCOPY() {
        return SQLITE_SERIALIZE_NOCOPY;
    }
    private static final int SQLITE_DESERIALIZE_FREEONCLOSE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_DESERIALIZE_FREEONCLOSE 1
     * }
     */
    public static int SQLITE_DESERIALIZE_FREEONCLOSE() {
        return SQLITE_DESERIALIZE_FREEONCLOSE;
    }
    private static final int SQLITE_DESERIALIZE_RESIZEABLE = (int)2L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_DESERIALIZE_RESIZEABLE 2
     * }
     */
    public static int SQLITE_DESERIALIZE_RESIZEABLE() {
        return SQLITE_DESERIALIZE_RESIZEABLE;
    }
    private static final int SQLITE_DESERIALIZE_READONLY = (int)4L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_DESERIALIZE_READONLY 4
     * }
     */
    public static int SQLITE_DESERIALIZE_READONLY() {
        return SQLITE_DESERIALIZE_READONLY;
    }
    private static final int NOT_WITHIN = (int)0L;
    /**
     * {@snippet lang=c :
     * #define NOT_WITHIN 0
     * }
     */
    public static int NOT_WITHIN() {
        return NOT_WITHIN;
    }
    private static final int PARTLY_WITHIN = (int)1L;
    /**
     * {@snippet lang=c :
     * #define PARTLY_WITHIN 1
     * }
     */
    public static int PARTLY_WITHIN() {
        return PARTLY_WITHIN;
    }
    private static final int FULLY_WITHIN = (int)2L;
    /**
     * {@snippet lang=c :
     * #define FULLY_WITHIN 2
     * }
     */
    public static int FULLY_WITHIN() {
        return FULLY_WITHIN;
    }
    private static final int FTS5_TOKENIZE_QUERY = (int)1L;
    /**
     * {@snippet lang=c :
     * #define FTS5_TOKENIZE_QUERY 1
     * }
     */
    public static int FTS5_TOKENIZE_QUERY() {
        return FTS5_TOKENIZE_QUERY;
    }
    private static final int FTS5_TOKENIZE_PREFIX = (int)2L;
    /**
     * {@snippet lang=c :
     * #define FTS5_TOKENIZE_PREFIX 2
     * }
     */
    public static int FTS5_TOKENIZE_PREFIX() {
        return FTS5_TOKENIZE_PREFIX;
    }
    private static final int FTS5_TOKENIZE_DOCUMENT = (int)4L;
    /**
     * {@snippet lang=c :
     * #define FTS5_TOKENIZE_DOCUMENT 4
     * }
     */
    public static int FTS5_TOKENIZE_DOCUMENT() {
        return FTS5_TOKENIZE_DOCUMENT;
    }
    private static final int FTS5_TOKENIZE_AUX = (int)8L;
    /**
     * {@snippet lang=c :
     * #define FTS5_TOKENIZE_AUX 8
     * }
     */
    public static int FTS5_TOKENIZE_AUX() {
        return FTS5_TOKENIZE_AUX;
    }
    private static final int FTS5_TOKEN_COLOCATED = (int)1L;
    /**
     * {@snippet lang=c :
     * #define FTS5_TOKEN_COLOCATED 1
     * }
     */
    public static int FTS5_TOKEN_COLOCATED() {
        return FTS5_TOKEN_COLOCATED;
    }
    /**
     * {@snippet lang=c :
     * typedef __builtin_va_list va_list
     * }
     */
    public static final AddressLayout va_list = sqlite3_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef __builtin_va_list __gnuc_va_list
     * }
     */
    public static final AddressLayout __gnuc_va_list = sqlite3_h.C_POINTER;

    private static class sqlite3_version$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(0, sqlite3_h.C_CHAR);
        public static final MemorySegment SEGMENT = sqlite3_h.findOrThrow("sqlite3_version").reinterpret(LAYOUT.byteSize());
        public static final VarHandle HANDLE = LAYOUT.varHandle();

        public static final long[] DIMS = {  };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const char sqlite3_version[]
     * }
     */
    public static SequenceLayout sqlite3_version$layout() {
        return sqlite3_version$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern const char sqlite3_version[]
     * }
     */
    public static long[] sqlite3_version$dimensions() {
        return sqlite3_version$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const char sqlite3_version[]
     * }
     */
    public static MemorySegment sqlite3_version() {
        return sqlite3_version$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const char sqlite3_version[]
     * }
     */
    public static void sqlite3_version(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, sqlite3_version$constants.SEGMENT, 0L, sqlite3_version$constants.LAYOUT.byteSize());
    }

    private static class sqlite3_libversion {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_POINTER    );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_libversion");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *sqlite3_libversion()
     * }
     */
    public static FunctionDescriptor sqlite3_libversion$descriptor() {
        return sqlite3_libversion.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *sqlite3_libversion()
     * }
     */
    public static MethodHandle sqlite3_libversion$handle() {
        return sqlite3_libversion.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const char *sqlite3_libversion()
     * }
     */
    public static MemorySegment sqlite3_libversion$address() {
        return sqlite3_libversion.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const char *sqlite3_libversion()
     * }
     */
    public static MemorySegment sqlite3_libversion() {
        var mh$ = sqlite3_libversion.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_libversion");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_sourceid {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_POINTER    );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_sourceid");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *sqlite3_sourceid()
     * }
     */
    public static FunctionDescriptor sqlite3_sourceid$descriptor() {
        return sqlite3_sourceid.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *sqlite3_sourceid()
     * }
     */
    public static MethodHandle sqlite3_sourceid$handle() {
        return sqlite3_sourceid.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const char *sqlite3_sourceid()
     * }
     */
    public static MemorySegment sqlite3_sourceid$address() {
        return sqlite3_sourceid.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const char *sqlite3_sourceid()
     * }
     */
    public static MemorySegment sqlite3_sourceid() {
        var mh$ = sqlite3_sourceid.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_sourceid");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_libversion_number {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT    );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_libversion_number");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_libversion_number()
     * }
     */
    public static FunctionDescriptor sqlite3_libversion_number$descriptor() {
        return sqlite3_libversion_number.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_libversion_number()
     * }
     */
    public static MethodHandle sqlite3_libversion_number$handle() {
        return sqlite3_libversion_number.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_libversion_number()
     * }
     */
    public static MemorySegment sqlite3_libversion_number$address() {
        return sqlite3_libversion_number.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_libversion_number()
     * }
     */
    public static int sqlite3_libversion_number() {
        var mh$ = sqlite3_libversion_number.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_libversion_number");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_compileoption_used {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_compileoption_used");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_compileoption_used(const char *zOptName)
     * }
     */
    public static FunctionDescriptor sqlite3_compileoption_used$descriptor() {
        return sqlite3_compileoption_used.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_compileoption_used(const char *zOptName)
     * }
     */
    public static MethodHandle sqlite3_compileoption_used$handle() {
        return sqlite3_compileoption_used.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_compileoption_used(const char *zOptName)
     * }
     */
    public static MemorySegment sqlite3_compileoption_used$address() {
        return sqlite3_compileoption_used.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_compileoption_used(const char *zOptName)
     * }
     */
    public static int sqlite3_compileoption_used(MemorySegment zOptName) {
        var mh$ = sqlite3_compileoption_used.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_compileoption_used", zOptName);
            }
            return (int)mh$.invokeExact(zOptName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_compileoption_get {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_compileoption_get");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *sqlite3_compileoption_get(int N)
     * }
     */
    public static FunctionDescriptor sqlite3_compileoption_get$descriptor() {
        return sqlite3_compileoption_get.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *sqlite3_compileoption_get(int N)
     * }
     */
    public static MethodHandle sqlite3_compileoption_get$handle() {
        return sqlite3_compileoption_get.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const char *sqlite3_compileoption_get(int N)
     * }
     */
    public static MemorySegment sqlite3_compileoption_get$address() {
        return sqlite3_compileoption_get.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const char *sqlite3_compileoption_get(int N)
     * }
     */
    public static MemorySegment sqlite3_compileoption_get(int N) {
        var mh$ = sqlite3_compileoption_get.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_compileoption_get", N);
            }
            return (MemorySegment)mh$.invokeExact(N);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_threadsafe {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT    );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_threadsafe");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_threadsafe()
     * }
     */
    public static FunctionDescriptor sqlite3_threadsafe$descriptor() {
        return sqlite3_threadsafe.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_threadsafe()
     * }
     */
    public static MethodHandle sqlite3_threadsafe$handle() {
        return sqlite3_threadsafe.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_threadsafe()
     * }
     */
    public static MemorySegment sqlite3_threadsafe$address() {
        return sqlite3_threadsafe.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_threadsafe()
     * }
     */
    public static int sqlite3_threadsafe() {
        var mh$ = sqlite3_threadsafe.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_threadsafe");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef long long sqlite_int64
     * }
     */
    public static final OfLong sqlite_int64 = sqlite3_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long long sqlite_uint64
     * }
     */
    public static final OfLong sqlite_uint64 = sqlite3_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef sqlite_int64 sqlite3_int64
     * }
     */
    public static final OfLong sqlite3_int64 = sqlite3_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef sqlite_uint64 sqlite3_uint64
     * }
     */
    public static final OfLong sqlite3_uint64 = sqlite3_h.C_LONG_LONG;

    private static class sqlite3_close {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_close");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_close(sqlite3 *)
     * }
     */
    public static FunctionDescriptor sqlite3_close$descriptor() {
        return sqlite3_close.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_close(sqlite3 *)
     * }
     */
    public static MethodHandle sqlite3_close$handle() {
        return sqlite3_close.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_close(sqlite3 *)
     * }
     */
    public static MemorySegment sqlite3_close$address() {
        return sqlite3_close.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_close(sqlite3 *)
     * }
     */
    public static int sqlite3_close(MemorySegment x0) {
        var mh$ = sqlite3_close.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_close", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_close_v2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_close_v2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_close_v2(sqlite3 *)
     * }
     */
    public static FunctionDescriptor sqlite3_close_v2$descriptor() {
        return sqlite3_close_v2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_close_v2(sqlite3 *)
     * }
     */
    public static MethodHandle sqlite3_close_v2$handle() {
        return sqlite3_close_v2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_close_v2(sqlite3 *)
     * }
     */
    public static MemorySegment sqlite3_close_v2$address() {
        return sqlite3_close_v2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_close_v2(sqlite3 *)
     * }
     */
    public static int sqlite3_close_v2(MemorySegment x0) {
        var mh$ = sqlite3_close_v2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_close_v2", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_exec {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_exec");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_exec(sqlite3 *, const char *sql, int (*callback)(void *, int, char **, char **), void *, char **errmsg)
     * }
     */
    public static FunctionDescriptor sqlite3_exec$descriptor() {
        return sqlite3_exec.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_exec(sqlite3 *, const char *sql, int (*callback)(void *, int, char **, char **), void *, char **errmsg)
     * }
     */
    public static MethodHandle sqlite3_exec$handle() {
        return sqlite3_exec.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_exec(sqlite3 *, const char *sql, int (*callback)(void *, int, char **, char **), void *, char **errmsg)
     * }
     */
    public static MemorySegment sqlite3_exec$address() {
        return sqlite3_exec.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_exec(sqlite3 *, const char *sql, int (*callback)(void *, int, char **, char **), void *, char **errmsg)
     * }
     */
    public static int sqlite3_exec(MemorySegment x0, MemorySegment sql, MemorySegment callback, MemorySegment x3, MemorySegment errmsg) {
        var mh$ = sqlite3_exec.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_exec", x0, sql, callback, x3, errmsg);
            }
            return (int)mh$.invokeExact(x0, sql, callback, x3, errmsg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef const char *sqlite3_filename
     * }
     */
    public static final AddressLayout sqlite3_filename = sqlite3_h.C_POINTER;

    private static class sqlite3_initialize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT    );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_initialize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_initialize()
     * }
     */
    public static FunctionDescriptor sqlite3_initialize$descriptor() {
        return sqlite3_initialize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_initialize()
     * }
     */
    public static MethodHandle sqlite3_initialize$handle() {
        return sqlite3_initialize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_initialize()
     * }
     */
    public static MemorySegment sqlite3_initialize$address() {
        return sqlite3_initialize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_initialize()
     * }
     */
    public static int sqlite3_initialize() {
        var mh$ = sqlite3_initialize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_initialize");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_shutdown {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT    );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_shutdown");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_shutdown()
     * }
     */
    public static FunctionDescriptor sqlite3_shutdown$descriptor() {
        return sqlite3_shutdown.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_shutdown()
     * }
     */
    public static MethodHandle sqlite3_shutdown$handle() {
        return sqlite3_shutdown.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_shutdown()
     * }
     */
    public static MemorySegment sqlite3_shutdown$address() {
        return sqlite3_shutdown.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_shutdown()
     * }
     */
    public static int sqlite3_shutdown() {
        var mh$ = sqlite3_shutdown.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_shutdown");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_os_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT    );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_os_init");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_os_init()
     * }
     */
    public static FunctionDescriptor sqlite3_os_init$descriptor() {
        return sqlite3_os_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_os_init()
     * }
     */
    public static MethodHandle sqlite3_os_init$handle() {
        return sqlite3_os_init.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_os_init()
     * }
     */
    public static MemorySegment sqlite3_os_init$address() {
        return sqlite3_os_init.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_os_init()
     * }
     */
    public static int sqlite3_os_init() {
        var mh$ = sqlite3_os_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_os_init");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_os_end {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT    );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_os_end");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_os_end()
     * }
     */
    public static FunctionDescriptor sqlite3_os_end$descriptor() {
        return sqlite3_os_end.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_os_end()
     * }
     */
    public static MethodHandle sqlite3_os_end$handle() {
        return sqlite3_os_end.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_os_end()
     * }
     */
    public static MemorySegment sqlite3_os_end$address() {
        return sqlite3_os_end.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_os_end()
     * }
     */
    public static int sqlite3_os_end() {
        var mh$ = sqlite3_os_end.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_os_end");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * int sqlite3_config(int, ...)
     * }
     */
    public static class sqlite3_config {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                sqlite3_h.C_INT,
                sqlite3_h.C_INT
            );
        private static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_config");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private sqlite3_config(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * int sqlite3_config(int, ...)
         * }
         */
        public static sqlite3_config makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new sqlite3_config(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(int x0, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("sqlite3_config", x0, x1);
                }
                return (int)spreader.invokeExact(x0, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * int sqlite3_db_config(sqlite3 *, int op, ...)
     * }
     */
    public static class sqlite3_db_config {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                sqlite3_h.C_INT,
                sqlite3_h.C_POINTER,
                sqlite3_h.C_INT
            );
        private static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_db_config");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private sqlite3_db_config(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * int sqlite3_db_config(sqlite3 *, int op, ...)
         * }
         */
        public static sqlite3_db_config makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new sqlite3_db_config(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment x0, int op, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("sqlite3_db_config", x0, op, x2);
                }
                return (int)spreader.invokeExact(x0, op, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class sqlite3_extended_result_codes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_extended_result_codes");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_extended_result_codes(sqlite3 *, int onoff)
     * }
     */
    public static FunctionDescriptor sqlite3_extended_result_codes$descriptor() {
        return sqlite3_extended_result_codes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_extended_result_codes(sqlite3 *, int onoff)
     * }
     */
    public static MethodHandle sqlite3_extended_result_codes$handle() {
        return sqlite3_extended_result_codes.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_extended_result_codes(sqlite3 *, int onoff)
     * }
     */
    public static MemorySegment sqlite3_extended_result_codes$address() {
        return sqlite3_extended_result_codes.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_extended_result_codes(sqlite3 *, int onoff)
     * }
     */
    public static int sqlite3_extended_result_codes(MemorySegment x0, int onoff) {
        var mh$ = sqlite3_extended_result_codes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_extended_result_codes", x0, onoff);
            }
            return (int)mh$.invokeExact(x0, onoff);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_last_insert_rowid {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_LONG_LONG,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_last_insert_rowid");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * sqlite3_int64 sqlite3_last_insert_rowid(sqlite3 *)
     * }
     */
    public static FunctionDescriptor sqlite3_last_insert_rowid$descriptor() {
        return sqlite3_last_insert_rowid.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * sqlite3_int64 sqlite3_last_insert_rowid(sqlite3 *)
     * }
     */
    public static MethodHandle sqlite3_last_insert_rowid$handle() {
        return sqlite3_last_insert_rowid.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * sqlite3_int64 sqlite3_last_insert_rowid(sqlite3 *)
     * }
     */
    public static MemorySegment sqlite3_last_insert_rowid$address() {
        return sqlite3_last_insert_rowid.ADDR;
    }

    /**
     * {@snippet lang=c :
     * sqlite3_int64 sqlite3_last_insert_rowid(sqlite3 *)
     * }
     */
    public static long sqlite3_last_insert_rowid(MemorySegment x0) {
        var mh$ = sqlite3_last_insert_rowid.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_last_insert_rowid", x0);
            }
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_set_last_insert_rowid {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_set_last_insert_rowid");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void sqlite3_set_last_insert_rowid(sqlite3 *, sqlite3_int64)
     * }
     */
    public static FunctionDescriptor sqlite3_set_last_insert_rowid$descriptor() {
        return sqlite3_set_last_insert_rowid.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void sqlite3_set_last_insert_rowid(sqlite3 *, sqlite3_int64)
     * }
     */
    public static MethodHandle sqlite3_set_last_insert_rowid$handle() {
        return sqlite3_set_last_insert_rowid.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void sqlite3_set_last_insert_rowid(sqlite3 *, sqlite3_int64)
     * }
     */
    public static MemorySegment sqlite3_set_last_insert_rowid$address() {
        return sqlite3_set_last_insert_rowid.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void sqlite3_set_last_insert_rowid(sqlite3 *, sqlite3_int64)
     * }
     */
    public static void sqlite3_set_last_insert_rowid(MemorySegment x0, long x1) {
        var mh$ = sqlite3_set_last_insert_rowid.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_set_last_insert_rowid", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_changes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_changes");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_changes(sqlite3 *)
     * }
     */
    public static FunctionDescriptor sqlite3_changes$descriptor() {
        return sqlite3_changes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_changes(sqlite3 *)
     * }
     */
    public static MethodHandle sqlite3_changes$handle() {
        return sqlite3_changes.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_changes(sqlite3 *)
     * }
     */
    public static MemorySegment sqlite3_changes$address() {
        return sqlite3_changes.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_changes(sqlite3 *)
     * }
     */
    public static int sqlite3_changes(MemorySegment x0) {
        var mh$ = sqlite3_changes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_changes", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_changes64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_LONG_LONG,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_changes64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * sqlite3_int64 sqlite3_changes64(sqlite3 *)
     * }
     */
    public static FunctionDescriptor sqlite3_changes64$descriptor() {
        return sqlite3_changes64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * sqlite3_int64 sqlite3_changes64(sqlite3 *)
     * }
     */
    public static MethodHandle sqlite3_changes64$handle() {
        return sqlite3_changes64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * sqlite3_int64 sqlite3_changes64(sqlite3 *)
     * }
     */
    public static MemorySegment sqlite3_changes64$address() {
        return sqlite3_changes64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * sqlite3_int64 sqlite3_changes64(sqlite3 *)
     * }
     */
    public static long sqlite3_changes64(MemorySegment x0) {
        var mh$ = sqlite3_changes64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_changes64", x0);
            }
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_total_changes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_total_changes");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_total_changes(sqlite3 *)
     * }
     */
    public static FunctionDescriptor sqlite3_total_changes$descriptor() {
        return sqlite3_total_changes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_total_changes(sqlite3 *)
     * }
     */
    public static MethodHandle sqlite3_total_changes$handle() {
        return sqlite3_total_changes.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_total_changes(sqlite3 *)
     * }
     */
    public static MemorySegment sqlite3_total_changes$address() {
        return sqlite3_total_changes.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_total_changes(sqlite3 *)
     * }
     */
    public static int sqlite3_total_changes(MemorySegment x0) {
        var mh$ = sqlite3_total_changes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_total_changes", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_total_changes64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_LONG_LONG,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_total_changes64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * sqlite3_int64 sqlite3_total_changes64(sqlite3 *)
     * }
     */
    public static FunctionDescriptor sqlite3_total_changes64$descriptor() {
        return sqlite3_total_changes64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * sqlite3_int64 sqlite3_total_changes64(sqlite3 *)
     * }
     */
    public static MethodHandle sqlite3_total_changes64$handle() {
        return sqlite3_total_changes64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * sqlite3_int64 sqlite3_total_changes64(sqlite3 *)
     * }
     */
    public static MemorySegment sqlite3_total_changes64$address() {
        return sqlite3_total_changes64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * sqlite3_int64 sqlite3_total_changes64(sqlite3 *)
     * }
     */
    public static long sqlite3_total_changes64(MemorySegment x0) {
        var mh$ = sqlite3_total_changes64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_total_changes64", x0);
            }
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_interrupt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_interrupt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void sqlite3_interrupt(sqlite3 *)
     * }
     */
    public static FunctionDescriptor sqlite3_interrupt$descriptor() {
        return sqlite3_interrupt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void sqlite3_interrupt(sqlite3 *)
     * }
     */
    public static MethodHandle sqlite3_interrupt$handle() {
        return sqlite3_interrupt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void sqlite3_interrupt(sqlite3 *)
     * }
     */
    public static MemorySegment sqlite3_interrupt$address() {
        return sqlite3_interrupt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void sqlite3_interrupt(sqlite3 *)
     * }
     */
    public static void sqlite3_interrupt(MemorySegment x0) {
        var mh$ = sqlite3_interrupt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_interrupt", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_is_interrupted {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_is_interrupted");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_is_interrupted(sqlite3 *)
     * }
     */
    public static FunctionDescriptor sqlite3_is_interrupted$descriptor() {
        return sqlite3_is_interrupted.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_is_interrupted(sqlite3 *)
     * }
     */
    public static MethodHandle sqlite3_is_interrupted$handle() {
        return sqlite3_is_interrupted.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_is_interrupted(sqlite3 *)
     * }
     */
    public static MemorySegment sqlite3_is_interrupted$address() {
        return sqlite3_is_interrupted.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_is_interrupted(sqlite3 *)
     * }
     */
    public static int sqlite3_is_interrupted(MemorySegment x0) {
        var mh$ = sqlite3_is_interrupted.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_is_interrupted", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_complete {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_complete");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_complete(const char *sql)
     * }
     */
    public static FunctionDescriptor sqlite3_complete$descriptor() {
        return sqlite3_complete.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_complete(const char *sql)
     * }
     */
    public static MethodHandle sqlite3_complete$handle() {
        return sqlite3_complete.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_complete(const char *sql)
     * }
     */
    public static MemorySegment sqlite3_complete$address() {
        return sqlite3_complete.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_complete(const char *sql)
     * }
     */
    public static int sqlite3_complete(MemorySegment sql) {
        var mh$ = sqlite3_complete.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_complete", sql);
            }
            return (int)mh$.invokeExact(sql);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_complete16 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_complete16");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_complete16(const void *sql)
     * }
     */
    public static FunctionDescriptor sqlite3_complete16$descriptor() {
        return sqlite3_complete16.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_complete16(const void *sql)
     * }
     */
    public static MethodHandle sqlite3_complete16$handle() {
        return sqlite3_complete16.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_complete16(const void *sql)
     * }
     */
    public static MemorySegment sqlite3_complete16$address() {
        return sqlite3_complete16.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_complete16(const void *sql)
     * }
     */
    public static int sqlite3_complete16(MemorySegment sql) {
        var mh$ = sqlite3_complete16.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_complete16", sql);
            }
            return (int)mh$.invokeExact(sql);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_busy_handler {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_busy_handler");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_busy_handler(sqlite3 *, int (*)(void *, int), void *)
     * }
     */
    public static FunctionDescriptor sqlite3_busy_handler$descriptor() {
        return sqlite3_busy_handler.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_busy_handler(sqlite3 *, int (*)(void *, int), void *)
     * }
     */
    public static MethodHandle sqlite3_busy_handler$handle() {
        return sqlite3_busy_handler.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_busy_handler(sqlite3 *, int (*)(void *, int), void *)
     * }
     */
    public static MemorySegment sqlite3_busy_handler$address() {
        return sqlite3_busy_handler.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_busy_handler(sqlite3 *, int (*)(void *, int), void *)
     * }
     */
    public static int sqlite3_busy_handler(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = sqlite3_busy_handler.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_busy_handler", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_busy_timeout {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_busy_timeout");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_busy_timeout(sqlite3 *, int ms)
     * }
     */
    public static FunctionDescriptor sqlite3_busy_timeout$descriptor() {
        return sqlite3_busy_timeout.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_busy_timeout(sqlite3 *, int ms)
     * }
     */
    public static MethodHandle sqlite3_busy_timeout$handle() {
        return sqlite3_busy_timeout.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_busy_timeout(sqlite3 *, int ms)
     * }
     */
    public static MemorySegment sqlite3_busy_timeout$address() {
        return sqlite3_busy_timeout.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_busy_timeout(sqlite3 *, int ms)
     * }
     */
    public static int sqlite3_busy_timeout(MemorySegment x0, int ms) {
        var mh$ = sqlite3_busy_timeout.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_busy_timeout", x0, ms);
            }
            return (int)mh$.invokeExact(x0, ms);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_get_table {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_get_table");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_get_table(sqlite3 *db, const char *zSql, char ***pazResult, int *pnRow, int *pnColumn, char **pzErrmsg)
     * }
     */
    public static FunctionDescriptor sqlite3_get_table$descriptor() {
        return sqlite3_get_table.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_get_table(sqlite3 *db, const char *zSql, char ***pazResult, int *pnRow, int *pnColumn, char **pzErrmsg)
     * }
     */
    public static MethodHandle sqlite3_get_table$handle() {
        return sqlite3_get_table.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_get_table(sqlite3 *db, const char *zSql, char ***pazResult, int *pnRow, int *pnColumn, char **pzErrmsg)
     * }
     */
    public static MemorySegment sqlite3_get_table$address() {
        return sqlite3_get_table.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_get_table(sqlite3 *db, const char *zSql, char ***pazResult, int *pnRow, int *pnColumn, char **pzErrmsg)
     * }
     */
    public static int sqlite3_get_table(MemorySegment db, MemorySegment zSql, MemorySegment pazResult, MemorySegment pnRow, MemorySegment pnColumn, MemorySegment pzErrmsg) {
        var mh$ = sqlite3_get_table.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_get_table", db, zSql, pazResult, pnRow, pnColumn, pzErrmsg);
            }
            return (int)mh$.invokeExact(db, zSql, pazResult, pnRow, pnColumn, pzErrmsg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_free_table {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_free_table");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void sqlite3_free_table(char **result)
     * }
     */
    public static FunctionDescriptor sqlite3_free_table$descriptor() {
        return sqlite3_free_table.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void sqlite3_free_table(char **result)
     * }
     */
    public static MethodHandle sqlite3_free_table$handle() {
        return sqlite3_free_table.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void sqlite3_free_table(char **result)
     * }
     */
    public static MemorySegment sqlite3_free_table$address() {
        return sqlite3_free_table.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void sqlite3_free_table(char **result)
     * }
     */
    public static void sqlite3_free_table(MemorySegment result) {
        var mh$ = sqlite3_free_table.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_free_table", result);
            }
            mh$.invokeExact(result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * char *sqlite3_mprintf(const char *, ...)
     * }
     */
    public static class sqlite3_mprintf {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                sqlite3_h.C_POINTER,
                sqlite3_h.C_POINTER
            );
        private static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_mprintf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private sqlite3_mprintf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * char *sqlite3_mprintf(const char *, ...)
         * }
         */
        public static sqlite3_mprintf makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new sqlite3_mprintf(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(MemorySegment x0, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("sqlite3_mprintf", x0, x1);
                }
                return (MemorySegment)spreader.invokeExact(x0, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class sqlite3_vmprintf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_vmprintf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *sqlite3_vmprintf(const char *, va_list)
     * }
     */
    public static FunctionDescriptor sqlite3_vmprintf$descriptor() {
        return sqlite3_vmprintf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *sqlite3_vmprintf(const char *, va_list)
     * }
     */
    public static MethodHandle sqlite3_vmprintf$handle() {
        return sqlite3_vmprintf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *sqlite3_vmprintf(const char *, va_list)
     * }
     */
    public static MemorySegment sqlite3_vmprintf$address() {
        return sqlite3_vmprintf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *sqlite3_vmprintf(const char *, va_list)
     * }
     */
    public static MemorySegment sqlite3_vmprintf(MemorySegment x0, MemorySegment x1) {
        var mh$ = sqlite3_vmprintf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_vmprintf", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * char *sqlite3_snprintf(int, char *, const char *, ...)
     * }
     */
    public static class sqlite3_snprintf {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                sqlite3_h.C_POINTER,
                sqlite3_h.C_INT,
                sqlite3_h.C_POINTER,
                sqlite3_h.C_POINTER
            );
        private static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_snprintf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private sqlite3_snprintf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * char *sqlite3_snprintf(int, char *, const char *, ...)
         * }
         */
        public static sqlite3_snprintf makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new sqlite3_snprintf(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(int x0, MemorySegment x1, MemorySegment x2, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("sqlite3_snprintf", x0, x1, x2, x3);
                }
                return (MemorySegment)spreader.invokeExact(x0, x1, x2, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class sqlite3_vsnprintf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_vsnprintf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *sqlite3_vsnprintf(int, char *, const char *, va_list)
     * }
     */
    public static FunctionDescriptor sqlite3_vsnprintf$descriptor() {
        return sqlite3_vsnprintf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *sqlite3_vsnprintf(int, char *, const char *, va_list)
     * }
     */
    public static MethodHandle sqlite3_vsnprintf$handle() {
        return sqlite3_vsnprintf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *sqlite3_vsnprintf(int, char *, const char *, va_list)
     * }
     */
    public static MemorySegment sqlite3_vsnprintf$address() {
        return sqlite3_vsnprintf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *sqlite3_vsnprintf(int, char *, const char *, va_list)
     * }
     */
    public static MemorySegment sqlite3_vsnprintf(int x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = sqlite3_vsnprintf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_vsnprintf", x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_malloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_malloc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *sqlite3_malloc(int)
     * }
     */
    public static FunctionDescriptor sqlite3_malloc$descriptor() {
        return sqlite3_malloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *sqlite3_malloc(int)
     * }
     */
    public static MethodHandle sqlite3_malloc$handle() {
        return sqlite3_malloc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *sqlite3_malloc(int)
     * }
     */
    public static MemorySegment sqlite3_malloc$address() {
        return sqlite3_malloc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *sqlite3_malloc(int)
     * }
     */
    public static MemorySegment sqlite3_malloc(int x0) {
        var mh$ = sqlite3_malloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_malloc", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_malloc64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_malloc64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *sqlite3_malloc64(sqlite3_uint64)
     * }
     */
    public static FunctionDescriptor sqlite3_malloc64$descriptor() {
        return sqlite3_malloc64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *sqlite3_malloc64(sqlite3_uint64)
     * }
     */
    public static MethodHandle sqlite3_malloc64$handle() {
        return sqlite3_malloc64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *sqlite3_malloc64(sqlite3_uint64)
     * }
     */
    public static MemorySegment sqlite3_malloc64$address() {
        return sqlite3_malloc64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *sqlite3_malloc64(sqlite3_uint64)
     * }
     */
    public static MemorySegment sqlite3_malloc64(long x0) {
        var mh$ = sqlite3_malloc64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_malloc64", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_realloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_realloc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *sqlite3_realloc(void *, int)
     * }
     */
    public static FunctionDescriptor sqlite3_realloc$descriptor() {
        return sqlite3_realloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *sqlite3_realloc(void *, int)
     * }
     */
    public static MethodHandle sqlite3_realloc$handle() {
        return sqlite3_realloc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *sqlite3_realloc(void *, int)
     * }
     */
    public static MemorySegment sqlite3_realloc$address() {
        return sqlite3_realloc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *sqlite3_realloc(void *, int)
     * }
     */
    public static MemorySegment sqlite3_realloc(MemorySegment x0, int x1) {
        var mh$ = sqlite3_realloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_realloc", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_realloc64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_realloc64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *sqlite3_realloc64(void *, sqlite3_uint64)
     * }
     */
    public static FunctionDescriptor sqlite3_realloc64$descriptor() {
        return sqlite3_realloc64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *sqlite3_realloc64(void *, sqlite3_uint64)
     * }
     */
    public static MethodHandle sqlite3_realloc64$handle() {
        return sqlite3_realloc64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *sqlite3_realloc64(void *, sqlite3_uint64)
     * }
     */
    public static MemorySegment sqlite3_realloc64$address() {
        return sqlite3_realloc64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *sqlite3_realloc64(void *, sqlite3_uint64)
     * }
     */
    public static MemorySegment sqlite3_realloc64(MemorySegment x0, long x1) {
        var mh$ = sqlite3_realloc64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_realloc64", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void sqlite3_free(void *)
     * }
     */
    public static FunctionDescriptor sqlite3_free$descriptor() {
        return sqlite3_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void sqlite3_free(void *)
     * }
     */
    public static MethodHandle sqlite3_free$handle() {
        return sqlite3_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void sqlite3_free(void *)
     * }
     */
    public static MemorySegment sqlite3_free$address() {
        return sqlite3_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void sqlite3_free(void *)
     * }
     */
    public static void sqlite3_free(MemorySegment x0) {
        var mh$ = sqlite3_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_free", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_msize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_LONG_LONG,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_msize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * sqlite3_uint64 sqlite3_msize(void *)
     * }
     */
    public static FunctionDescriptor sqlite3_msize$descriptor() {
        return sqlite3_msize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * sqlite3_uint64 sqlite3_msize(void *)
     * }
     */
    public static MethodHandle sqlite3_msize$handle() {
        return sqlite3_msize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * sqlite3_uint64 sqlite3_msize(void *)
     * }
     */
    public static MemorySegment sqlite3_msize$address() {
        return sqlite3_msize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * sqlite3_uint64 sqlite3_msize(void *)
     * }
     */
    public static long sqlite3_msize(MemorySegment x0) {
        var mh$ = sqlite3_msize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_msize", x0);
            }
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_memory_used {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_LONG_LONG    );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_memory_used");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * sqlite3_int64 sqlite3_memory_used()
     * }
     */
    public static FunctionDescriptor sqlite3_memory_used$descriptor() {
        return sqlite3_memory_used.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * sqlite3_int64 sqlite3_memory_used()
     * }
     */
    public static MethodHandle sqlite3_memory_used$handle() {
        return sqlite3_memory_used.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * sqlite3_int64 sqlite3_memory_used()
     * }
     */
    public static MemorySegment sqlite3_memory_used$address() {
        return sqlite3_memory_used.ADDR;
    }

    /**
     * {@snippet lang=c :
     * sqlite3_int64 sqlite3_memory_used()
     * }
     */
    public static long sqlite3_memory_used() {
        var mh$ = sqlite3_memory_used.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_memory_used");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_memory_highwater {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_LONG_LONG,
            sqlite3_h.C_INT
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_memory_highwater");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * sqlite3_int64 sqlite3_memory_highwater(int resetFlag)
     * }
     */
    public static FunctionDescriptor sqlite3_memory_highwater$descriptor() {
        return sqlite3_memory_highwater.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * sqlite3_int64 sqlite3_memory_highwater(int resetFlag)
     * }
     */
    public static MethodHandle sqlite3_memory_highwater$handle() {
        return sqlite3_memory_highwater.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * sqlite3_int64 sqlite3_memory_highwater(int resetFlag)
     * }
     */
    public static MemorySegment sqlite3_memory_highwater$address() {
        return sqlite3_memory_highwater.ADDR;
    }

    /**
     * {@snippet lang=c :
     * sqlite3_int64 sqlite3_memory_highwater(int resetFlag)
     * }
     */
    public static long sqlite3_memory_highwater(int resetFlag) {
        var mh$ = sqlite3_memory_highwater.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_memory_highwater", resetFlag);
            }
            return (long)mh$.invokeExact(resetFlag);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_randomness {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_randomness");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void sqlite3_randomness(int N, void *P)
     * }
     */
    public static FunctionDescriptor sqlite3_randomness$descriptor() {
        return sqlite3_randomness.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void sqlite3_randomness(int N, void *P)
     * }
     */
    public static MethodHandle sqlite3_randomness$handle() {
        return sqlite3_randomness.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void sqlite3_randomness(int N, void *P)
     * }
     */
    public static MemorySegment sqlite3_randomness$address() {
        return sqlite3_randomness.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void sqlite3_randomness(int N, void *P)
     * }
     */
    public static void sqlite3_randomness(int N, MemorySegment P) {
        var mh$ = sqlite3_randomness.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_randomness", N, P);
            }
            mh$.invokeExact(N, P);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_set_authorizer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_set_authorizer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_set_authorizer(sqlite3 *, int (*xAuth)(void *, int, const char *, const char *, const char *, const char *), void *pUserData)
     * }
     */
    public static FunctionDescriptor sqlite3_set_authorizer$descriptor() {
        return sqlite3_set_authorizer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_set_authorizer(sqlite3 *, int (*xAuth)(void *, int, const char *, const char *, const char *, const char *), void *pUserData)
     * }
     */
    public static MethodHandle sqlite3_set_authorizer$handle() {
        return sqlite3_set_authorizer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_set_authorizer(sqlite3 *, int (*xAuth)(void *, int, const char *, const char *, const char *, const char *), void *pUserData)
     * }
     */
    public static MemorySegment sqlite3_set_authorizer$address() {
        return sqlite3_set_authorizer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_set_authorizer(sqlite3 *, int (*xAuth)(void *, int, const char *, const char *, const char *, const char *), void *pUserData)
     * }
     */
    public static int sqlite3_set_authorizer(MemorySegment x0, MemorySegment xAuth, MemorySegment pUserData) {
        var mh$ = sqlite3_set_authorizer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_set_authorizer", x0, xAuth, pUserData);
            }
            return (int)mh$.invokeExact(x0, xAuth, pUserData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_trace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_trace");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *sqlite3_trace(sqlite3 *, void (*xTrace)(void *, const char *), void *)
     * }
     */
    public static FunctionDescriptor sqlite3_trace$descriptor() {
        return sqlite3_trace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *sqlite3_trace(sqlite3 *, void (*xTrace)(void *, const char *), void *)
     * }
     */
    public static MethodHandle sqlite3_trace$handle() {
        return sqlite3_trace.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *sqlite3_trace(sqlite3 *, void (*xTrace)(void *, const char *), void *)
     * }
     */
    public static MemorySegment sqlite3_trace$address() {
        return sqlite3_trace.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *sqlite3_trace(sqlite3 *, void (*xTrace)(void *, const char *), void *)
     * }
     */
    public static MemorySegment sqlite3_trace(MemorySegment x0, MemorySegment xTrace, MemorySegment x2) {
        var mh$ = sqlite3_trace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_trace", x0, xTrace, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, xTrace, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_profile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_profile");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *sqlite3_profile(sqlite3 *, void (*xProfile)(void *, const char *, sqlite3_uint64), void *)
     * }
     */
    public static FunctionDescriptor sqlite3_profile$descriptor() {
        return sqlite3_profile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *sqlite3_profile(sqlite3 *, void (*xProfile)(void *, const char *, sqlite3_uint64), void *)
     * }
     */
    public static MethodHandle sqlite3_profile$handle() {
        return sqlite3_profile.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *sqlite3_profile(sqlite3 *, void (*xProfile)(void *, const char *, sqlite3_uint64), void *)
     * }
     */
    public static MemorySegment sqlite3_profile$address() {
        return sqlite3_profile.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *sqlite3_profile(sqlite3 *, void (*xProfile)(void *, const char *, sqlite3_uint64), void *)
     * }
     */
    public static MemorySegment sqlite3_profile(MemorySegment x0, MemorySegment xProfile, MemorySegment x2) {
        var mh$ = sqlite3_profile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_profile", x0, xProfile, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, xProfile, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_trace_v2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_trace_v2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_trace_v2(sqlite3 *, unsigned int uMask, int (*xCallback)(unsigned int, void *, void *, void *), void *pCtx)
     * }
     */
    public static FunctionDescriptor sqlite3_trace_v2$descriptor() {
        return sqlite3_trace_v2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_trace_v2(sqlite3 *, unsigned int uMask, int (*xCallback)(unsigned int, void *, void *, void *), void *pCtx)
     * }
     */
    public static MethodHandle sqlite3_trace_v2$handle() {
        return sqlite3_trace_v2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_trace_v2(sqlite3 *, unsigned int uMask, int (*xCallback)(unsigned int, void *, void *, void *), void *pCtx)
     * }
     */
    public static MemorySegment sqlite3_trace_v2$address() {
        return sqlite3_trace_v2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_trace_v2(sqlite3 *, unsigned int uMask, int (*xCallback)(unsigned int, void *, void *, void *), void *pCtx)
     * }
     */
    public static int sqlite3_trace_v2(MemorySegment x0, int uMask, MemorySegment xCallback, MemorySegment pCtx) {
        var mh$ = sqlite3_trace_v2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_trace_v2", x0, uMask, xCallback, pCtx);
            }
            return (int)mh$.invokeExact(x0, uMask, xCallback, pCtx);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_progress_handler {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_progress_handler");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void sqlite3_progress_handler(sqlite3 *, int, int (*)(void *), void *)
     * }
     */
    public static FunctionDescriptor sqlite3_progress_handler$descriptor() {
        return sqlite3_progress_handler.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void sqlite3_progress_handler(sqlite3 *, int, int (*)(void *), void *)
     * }
     */
    public static MethodHandle sqlite3_progress_handler$handle() {
        return sqlite3_progress_handler.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void sqlite3_progress_handler(sqlite3 *, int, int (*)(void *), void *)
     * }
     */
    public static MemorySegment sqlite3_progress_handler$address() {
        return sqlite3_progress_handler.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void sqlite3_progress_handler(sqlite3 *, int, int (*)(void *), void *)
     * }
     */
    public static void sqlite3_progress_handler(MemorySegment x0, int x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = sqlite3_progress_handler.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_progress_handler", x0, x1, x2, x3);
            }
            mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_open {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_open");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_open(const char *filename, sqlite3 **ppDb)
     * }
     */
    public static FunctionDescriptor sqlite3_open$descriptor() {
        return sqlite3_open.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_open(const char *filename, sqlite3 **ppDb)
     * }
     */
    public static MethodHandle sqlite3_open$handle() {
        return sqlite3_open.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_open(const char *filename, sqlite3 **ppDb)
     * }
     */
    public static MemorySegment sqlite3_open$address() {
        return sqlite3_open.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_open(const char *filename, sqlite3 **ppDb)
     * }
     */
    public static int sqlite3_open(MemorySegment filename, MemorySegment ppDb) {
        var mh$ = sqlite3_open.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_open", filename, ppDb);
            }
            return (int)mh$.invokeExact(filename, ppDb);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_open16 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_open16");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_open16(const void *filename, sqlite3 **ppDb)
     * }
     */
    public static FunctionDescriptor sqlite3_open16$descriptor() {
        return sqlite3_open16.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_open16(const void *filename, sqlite3 **ppDb)
     * }
     */
    public static MethodHandle sqlite3_open16$handle() {
        return sqlite3_open16.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_open16(const void *filename, sqlite3 **ppDb)
     * }
     */
    public static MemorySegment sqlite3_open16$address() {
        return sqlite3_open16.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_open16(const void *filename, sqlite3 **ppDb)
     * }
     */
    public static int sqlite3_open16(MemorySegment filename, MemorySegment ppDb) {
        var mh$ = sqlite3_open16.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_open16", filename, ppDb);
            }
            return (int)mh$.invokeExact(filename, ppDb);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_open_v2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_open_v2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_open_v2(const char *filename, sqlite3 **ppDb, int flags, const char *zVfs)
     * }
     */
    public static FunctionDescriptor sqlite3_open_v2$descriptor() {
        return sqlite3_open_v2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_open_v2(const char *filename, sqlite3 **ppDb, int flags, const char *zVfs)
     * }
     */
    public static MethodHandle sqlite3_open_v2$handle() {
        return sqlite3_open_v2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_open_v2(const char *filename, sqlite3 **ppDb, int flags, const char *zVfs)
     * }
     */
    public static MemorySegment sqlite3_open_v2$address() {
        return sqlite3_open_v2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_open_v2(const char *filename, sqlite3 **ppDb, int flags, const char *zVfs)
     * }
     */
    public static int sqlite3_open_v2(MemorySegment filename, MemorySegment ppDb, int flags, MemorySegment zVfs) {
        var mh$ = sqlite3_open_v2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_open_v2", filename, ppDb, flags, zVfs);
            }
            return (int)mh$.invokeExact(filename, ppDb, flags, zVfs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_uri_parameter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_uri_parameter");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *sqlite3_uri_parameter(sqlite3_filename z, const char *zParam)
     * }
     */
    public static FunctionDescriptor sqlite3_uri_parameter$descriptor() {
        return sqlite3_uri_parameter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *sqlite3_uri_parameter(sqlite3_filename z, const char *zParam)
     * }
     */
    public static MethodHandle sqlite3_uri_parameter$handle() {
        return sqlite3_uri_parameter.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const char *sqlite3_uri_parameter(sqlite3_filename z, const char *zParam)
     * }
     */
    public static MemorySegment sqlite3_uri_parameter$address() {
        return sqlite3_uri_parameter.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const char *sqlite3_uri_parameter(sqlite3_filename z, const char *zParam)
     * }
     */
    public static MemorySegment sqlite3_uri_parameter(MemorySegment z, MemorySegment zParam) {
        var mh$ = sqlite3_uri_parameter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_uri_parameter", z, zParam);
            }
            return (MemorySegment)mh$.invokeExact(z, zParam);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_uri_boolean {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_uri_boolean");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_uri_boolean(sqlite3_filename z, const char *zParam, int bDefault)
     * }
     */
    public static FunctionDescriptor sqlite3_uri_boolean$descriptor() {
        return sqlite3_uri_boolean.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_uri_boolean(sqlite3_filename z, const char *zParam, int bDefault)
     * }
     */
    public static MethodHandle sqlite3_uri_boolean$handle() {
        return sqlite3_uri_boolean.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_uri_boolean(sqlite3_filename z, const char *zParam, int bDefault)
     * }
     */
    public static MemorySegment sqlite3_uri_boolean$address() {
        return sqlite3_uri_boolean.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_uri_boolean(sqlite3_filename z, const char *zParam, int bDefault)
     * }
     */
    public static int sqlite3_uri_boolean(MemorySegment z, MemorySegment zParam, int bDefault) {
        var mh$ = sqlite3_uri_boolean.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_uri_boolean", z, zParam, bDefault);
            }
            return (int)mh$.invokeExact(z, zParam, bDefault);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_uri_int64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_LONG_LONG,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_uri_int64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * sqlite3_int64 sqlite3_uri_int64(sqlite3_filename, const char *, sqlite3_int64)
     * }
     */
    public static FunctionDescriptor sqlite3_uri_int64$descriptor() {
        return sqlite3_uri_int64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * sqlite3_int64 sqlite3_uri_int64(sqlite3_filename, const char *, sqlite3_int64)
     * }
     */
    public static MethodHandle sqlite3_uri_int64$handle() {
        return sqlite3_uri_int64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * sqlite3_int64 sqlite3_uri_int64(sqlite3_filename, const char *, sqlite3_int64)
     * }
     */
    public static MemorySegment sqlite3_uri_int64$address() {
        return sqlite3_uri_int64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * sqlite3_int64 sqlite3_uri_int64(sqlite3_filename, const char *, sqlite3_int64)
     * }
     */
    public static long sqlite3_uri_int64(MemorySegment x0, MemorySegment x1, long x2) {
        var mh$ = sqlite3_uri_int64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_uri_int64", x0, x1, x2);
            }
            return (long)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_uri_key {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_uri_key");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *sqlite3_uri_key(sqlite3_filename z, int N)
     * }
     */
    public static FunctionDescriptor sqlite3_uri_key$descriptor() {
        return sqlite3_uri_key.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *sqlite3_uri_key(sqlite3_filename z, int N)
     * }
     */
    public static MethodHandle sqlite3_uri_key$handle() {
        return sqlite3_uri_key.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const char *sqlite3_uri_key(sqlite3_filename z, int N)
     * }
     */
    public static MemorySegment sqlite3_uri_key$address() {
        return sqlite3_uri_key.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const char *sqlite3_uri_key(sqlite3_filename z, int N)
     * }
     */
    public static MemorySegment sqlite3_uri_key(MemorySegment z, int N) {
        var mh$ = sqlite3_uri_key.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_uri_key", z, N);
            }
            return (MemorySegment)mh$.invokeExact(z, N);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_filename_database {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_filename_database");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *sqlite3_filename_database(sqlite3_filename)
     * }
     */
    public static FunctionDescriptor sqlite3_filename_database$descriptor() {
        return sqlite3_filename_database.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *sqlite3_filename_database(sqlite3_filename)
     * }
     */
    public static MethodHandle sqlite3_filename_database$handle() {
        return sqlite3_filename_database.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const char *sqlite3_filename_database(sqlite3_filename)
     * }
     */
    public static MemorySegment sqlite3_filename_database$address() {
        return sqlite3_filename_database.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const char *sqlite3_filename_database(sqlite3_filename)
     * }
     */
    public static MemorySegment sqlite3_filename_database(MemorySegment x0) {
        var mh$ = sqlite3_filename_database.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_filename_database", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_filename_journal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_filename_journal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *sqlite3_filename_journal(sqlite3_filename)
     * }
     */
    public static FunctionDescriptor sqlite3_filename_journal$descriptor() {
        return sqlite3_filename_journal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *sqlite3_filename_journal(sqlite3_filename)
     * }
     */
    public static MethodHandle sqlite3_filename_journal$handle() {
        return sqlite3_filename_journal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const char *sqlite3_filename_journal(sqlite3_filename)
     * }
     */
    public static MemorySegment sqlite3_filename_journal$address() {
        return sqlite3_filename_journal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const char *sqlite3_filename_journal(sqlite3_filename)
     * }
     */
    public static MemorySegment sqlite3_filename_journal(MemorySegment x0) {
        var mh$ = sqlite3_filename_journal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_filename_journal", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_filename_wal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_filename_wal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *sqlite3_filename_wal(sqlite3_filename)
     * }
     */
    public static FunctionDescriptor sqlite3_filename_wal$descriptor() {
        return sqlite3_filename_wal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *sqlite3_filename_wal(sqlite3_filename)
     * }
     */
    public static MethodHandle sqlite3_filename_wal$handle() {
        return sqlite3_filename_wal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const char *sqlite3_filename_wal(sqlite3_filename)
     * }
     */
    public static MemorySegment sqlite3_filename_wal$address() {
        return sqlite3_filename_wal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const char *sqlite3_filename_wal(sqlite3_filename)
     * }
     */
    public static MemorySegment sqlite3_filename_wal(MemorySegment x0) {
        var mh$ = sqlite3_filename_wal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_filename_wal", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_database_file_object {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_database_file_object");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * sqlite3_file *sqlite3_database_file_object(const char *)
     * }
     */
    public static FunctionDescriptor sqlite3_database_file_object$descriptor() {
        return sqlite3_database_file_object.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * sqlite3_file *sqlite3_database_file_object(const char *)
     * }
     */
    public static MethodHandle sqlite3_database_file_object$handle() {
        return sqlite3_database_file_object.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * sqlite3_file *sqlite3_database_file_object(const char *)
     * }
     */
    public static MemorySegment sqlite3_database_file_object$address() {
        return sqlite3_database_file_object.ADDR;
    }

    /**
     * {@snippet lang=c :
     * sqlite3_file *sqlite3_database_file_object(const char *)
     * }
     */
    public static MemorySegment sqlite3_database_file_object(MemorySegment x0) {
        var mh$ = sqlite3_database_file_object.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_database_file_object", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_create_filename {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_create_filename");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * sqlite3_filename sqlite3_create_filename(const char *zDatabase, const char *zJournal, const char *zWal, int nParam, const char **azParam)
     * }
     */
    public static FunctionDescriptor sqlite3_create_filename$descriptor() {
        return sqlite3_create_filename.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * sqlite3_filename sqlite3_create_filename(const char *zDatabase, const char *zJournal, const char *zWal, int nParam, const char **azParam)
     * }
     */
    public static MethodHandle sqlite3_create_filename$handle() {
        return sqlite3_create_filename.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * sqlite3_filename sqlite3_create_filename(const char *zDatabase, const char *zJournal, const char *zWal, int nParam, const char **azParam)
     * }
     */
    public static MemorySegment sqlite3_create_filename$address() {
        return sqlite3_create_filename.ADDR;
    }

    /**
     * {@snippet lang=c :
     * sqlite3_filename sqlite3_create_filename(const char *zDatabase, const char *zJournal, const char *zWal, int nParam, const char **azParam)
     * }
     */
    public static MemorySegment sqlite3_create_filename(MemorySegment zDatabase, MemorySegment zJournal, MemorySegment zWal, int nParam, MemorySegment azParam) {
        var mh$ = sqlite3_create_filename.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_create_filename", zDatabase, zJournal, zWal, nParam, azParam);
            }
            return (MemorySegment)mh$.invokeExact(zDatabase, zJournal, zWal, nParam, azParam);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_free_filename {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_free_filename");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void sqlite3_free_filename(sqlite3_filename)
     * }
     */
    public static FunctionDescriptor sqlite3_free_filename$descriptor() {
        return sqlite3_free_filename.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void sqlite3_free_filename(sqlite3_filename)
     * }
     */
    public static MethodHandle sqlite3_free_filename$handle() {
        return sqlite3_free_filename.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void sqlite3_free_filename(sqlite3_filename)
     * }
     */
    public static MemorySegment sqlite3_free_filename$address() {
        return sqlite3_free_filename.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void sqlite3_free_filename(sqlite3_filename)
     * }
     */
    public static void sqlite3_free_filename(MemorySegment x0) {
        var mh$ = sqlite3_free_filename.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_free_filename", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_errcode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_errcode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_errcode(sqlite3 *db)
     * }
     */
    public static FunctionDescriptor sqlite3_errcode$descriptor() {
        return sqlite3_errcode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_errcode(sqlite3 *db)
     * }
     */
    public static MethodHandle sqlite3_errcode$handle() {
        return sqlite3_errcode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_errcode(sqlite3 *db)
     * }
     */
    public static MemorySegment sqlite3_errcode$address() {
        return sqlite3_errcode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_errcode(sqlite3 *db)
     * }
     */
    public static int sqlite3_errcode(MemorySegment db) {
        var mh$ = sqlite3_errcode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_errcode", db);
            }
            return (int)mh$.invokeExact(db);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_extended_errcode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_extended_errcode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_extended_errcode(sqlite3 *db)
     * }
     */
    public static FunctionDescriptor sqlite3_extended_errcode$descriptor() {
        return sqlite3_extended_errcode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_extended_errcode(sqlite3 *db)
     * }
     */
    public static MethodHandle sqlite3_extended_errcode$handle() {
        return sqlite3_extended_errcode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_extended_errcode(sqlite3 *db)
     * }
     */
    public static MemorySegment sqlite3_extended_errcode$address() {
        return sqlite3_extended_errcode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_extended_errcode(sqlite3 *db)
     * }
     */
    public static int sqlite3_extended_errcode(MemorySegment db) {
        var mh$ = sqlite3_extended_errcode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_extended_errcode", db);
            }
            return (int)mh$.invokeExact(db);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_errmsg {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_errmsg");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *sqlite3_errmsg(sqlite3 *)
     * }
     */
    public static FunctionDescriptor sqlite3_errmsg$descriptor() {
        return sqlite3_errmsg.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *sqlite3_errmsg(sqlite3 *)
     * }
     */
    public static MethodHandle sqlite3_errmsg$handle() {
        return sqlite3_errmsg.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const char *sqlite3_errmsg(sqlite3 *)
     * }
     */
    public static MemorySegment sqlite3_errmsg$address() {
        return sqlite3_errmsg.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const char *sqlite3_errmsg(sqlite3 *)
     * }
     */
    public static MemorySegment sqlite3_errmsg(MemorySegment x0) {
        var mh$ = sqlite3_errmsg.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_errmsg", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_errmsg16 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_errmsg16");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const void *sqlite3_errmsg16(sqlite3 *)
     * }
     */
    public static FunctionDescriptor sqlite3_errmsg16$descriptor() {
        return sqlite3_errmsg16.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const void *sqlite3_errmsg16(sqlite3 *)
     * }
     */
    public static MethodHandle sqlite3_errmsg16$handle() {
        return sqlite3_errmsg16.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const void *sqlite3_errmsg16(sqlite3 *)
     * }
     */
    public static MemorySegment sqlite3_errmsg16$address() {
        return sqlite3_errmsg16.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const void *sqlite3_errmsg16(sqlite3 *)
     * }
     */
    public static MemorySegment sqlite3_errmsg16(MemorySegment x0) {
        var mh$ = sqlite3_errmsg16.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_errmsg16", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_errstr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_errstr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *sqlite3_errstr(int)
     * }
     */
    public static FunctionDescriptor sqlite3_errstr$descriptor() {
        return sqlite3_errstr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *sqlite3_errstr(int)
     * }
     */
    public static MethodHandle sqlite3_errstr$handle() {
        return sqlite3_errstr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const char *sqlite3_errstr(int)
     * }
     */
    public static MemorySegment sqlite3_errstr$address() {
        return sqlite3_errstr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const char *sqlite3_errstr(int)
     * }
     */
    public static MemorySegment sqlite3_errstr(int x0) {
        var mh$ = sqlite3_errstr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_errstr", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_error_offset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_error_offset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_error_offset(sqlite3 *db)
     * }
     */
    public static FunctionDescriptor sqlite3_error_offset$descriptor() {
        return sqlite3_error_offset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_error_offset(sqlite3 *db)
     * }
     */
    public static MethodHandle sqlite3_error_offset$handle() {
        return sqlite3_error_offset.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_error_offset(sqlite3 *db)
     * }
     */
    public static MemorySegment sqlite3_error_offset$address() {
        return sqlite3_error_offset.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_error_offset(sqlite3 *db)
     * }
     */
    public static int sqlite3_error_offset(MemorySegment db) {
        var mh$ = sqlite3_error_offset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_error_offset", db);
            }
            return (int)mh$.invokeExact(db);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_limit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT,
            sqlite3_h.C_INT
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_limit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_limit(sqlite3 *, int id, int newVal)
     * }
     */
    public static FunctionDescriptor sqlite3_limit$descriptor() {
        return sqlite3_limit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_limit(sqlite3 *, int id, int newVal)
     * }
     */
    public static MethodHandle sqlite3_limit$handle() {
        return sqlite3_limit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_limit(sqlite3 *, int id, int newVal)
     * }
     */
    public static MemorySegment sqlite3_limit$address() {
        return sqlite3_limit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_limit(sqlite3 *, int id, int newVal)
     * }
     */
    public static int sqlite3_limit(MemorySegment x0, int id, int newVal) {
        var mh$ = sqlite3_limit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_limit", x0, id, newVal);
            }
            return (int)mh$.invokeExact(x0, id, newVal);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_prepare {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_prepare");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_prepare(sqlite3 *db, const char *zSql, int nByte, sqlite3_stmt **ppStmt, const char **pzTail)
     * }
     */
    public static FunctionDescriptor sqlite3_prepare$descriptor() {
        return sqlite3_prepare.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_prepare(sqlite3 *db, const char *zSql, int nByte, sqlite3_stmt **ppStmt, const char **pzTail)
     * }
     */
    public static MethodHandle sqlite3_prepare$handle() {
        return sqlite3_prepare.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_prepare(sqlite3 *db, const char *zSql, int nByte, sqlite3_stmt **ppStmt, const char **pzTail)
     * }
     */
    public static MemorySegment sqlite3_prepare$address() {
        return sqlite3_prepare.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_prepare(sqlite3 *db, const char *zSql, int nByte, sqlite3_stmt **ppStmt, const char **pzTail)
     * }
     */
    public static int sqlite3_prepare(MemorySegment db, MemorySegment zSql, int nByte, MemorySegment ppStmt, MemorySegment pzTail) {
        var mh$ = sqlite3_prepare.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_prepare", db, zSql, nByte, ppStmt, pzTail);
            }
            return (int)mh$.invokeExact(db, zSql, nByte, ppStmt, pzTail);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_prepare_v2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_prepare_v2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_prepare_v2(sqlite3 *db, const char *zSql, int nByte, sqlite3_stmt **ppStmt, const char **pzTail)
     * }
     */
    public static FunctionDescriptor sqlite3_prepare_v2$descriptor() {
        return sqlite3_prepare_v2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_prepare_v2(sqlite3 *db, const char *zSql, int nByte, sqlite3_stmt **ppStmt, const char **pzTail)
     * }
     */
    public static MethodHandle sqlite3_prepare_v2$handle() {
        return sqlite3_prepare_v2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_prepare_v2(sqlite3 *db, const char *zSql, int nByte, sqlite3_stmt **ppStmt, const char **pzTail)
     * }
     */
    public static MemorySegment sqlite3_prepare_v2$address() {
        return sqlite3_prepare_v2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_prepare_v2(sqlite3 *db, const char *zSql, int nByte, sqlite3_stmt **ppStmt, const char **pzTail)
     * }
     */
    public static int sqlite3_prepare_v2(MemorySegment db, MemorySegment zSql, int nByte, MemorySegment ppStmt, MemorySegment pzTail) {
        var mh$ = sqlite3_prepare_v2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_prepare_v2", db, zSql, nByte, ppStmt, pzTail);
            }
            return (int)mh$.invokeExact(db, zSql, nByte, ppStmt, pzTail);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_prepare_v3 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT,
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_prepare_v3");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_prepare_v3(sqlite3 *db, const char *zSql, int nByte, unsigned int prepFlags, sqlite3_stmt **ppStmt, const char **pzTail)
     * }
     */
    public static FunctionDescriptor sqlite3_prepare_v3$descriptor() {
        return sqlite3_prepare_v3.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_prepare_v3(sqlite3 *db, const char *zSql, int nByte, unsigned int prepFlags, sqlite3_stmt **ppStmt, const char **pzTail)
     * }
     */
    public static MethodHandle sqlite3_prepare_v3$handle() {
        return sqlite3_prepare_v3.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_prepare_v3(sqlite3 *db, const char *zSql, int nByte, unsigned int prepFlags, sqlite3_stmt **ppStmt, const char **pzTail)
     * }
     */
    public static MemorySegment sqlite3_prepare_v3$address() {
        return sqlite3_prepare_v3.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_prepare_v3(sqlite3 *db, const char *zSql, int nByte, unsigned int prepFlags, sqlite3_stmt **ppStmt, const char **pzTail)
     * }
     */
    public static int sqlite3_prepare_v3(MemorySegment db, MemorySegment zSql, int nByte, int prepFlags, MemorySegment ppStmt, MemorySegment pzTail) {
        var mh$ = sqlite3_prepare_v3.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_prepare_v3", db, zSql, nByte, prepFlags, ppStmt, pzTail);
            }
            return (int)mh$.invokeExact(db, zSql, nByte, prepFlags, ppStmt, pzTail);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_prepare16 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_prepare16");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_prepare16(sqlite3 *db, const void *zSql, int nByte, sqlite3_stmt **ppStmt, const void **pzTail)
     * }
     */
    public static FunctionDescriptor sqlite3_prepare16$descriptor() {
        return sqlite3_prepare16.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_prepare16(sqlite3 *db, const void *zSql, int nByte, sqlite3_stmt **ppStmt, const void **pzTail)
     * }
     */
    public static MethodHandle sqlite3_prepare16$handle() {
        return sqlite3_prepare16.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_prepare16(sqlite3 *db, const void *zSql, int nByte, sqlite3_stmt **ppStmt, const void **pzTail)
     * }
     */
    public static MemorySegment sqlite3_prepare16$address() {
        return sqlite3_prepare16.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_prepare16(sqlite3 *db, const void *zSql, int nByte, sqlite3_stmt **ppStmt, const void **pzTail)
     * }
     */
    public static int sqlite3_prepare16(MemorySegment db, MemorySegment zSql, int nByte, MemorySegment ppStmt, MemorySegment pzTail) {
        var mh$ = sqlite3_prepare16.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_prepare16", db, zSql, nByte, ppStmt, pzTail);
            }
            return (int)mh$.invokeExact(db, zSql, nByte, ppStmt, pzTail);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_prepare16_v2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_prepare16_v2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_prepare16_v2(sqlite3 *db, const void *zSql, int nByte, sqlite3_stmt **ppStmt, const void **pzTail)
     * }
     */
    public static FunctionDescriptor sqlite3_prepare16_v2$descriptor() {
        return sqlite3_prepare16_v2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_prepare16_v2(sqlite3 *db, const void *zSql, int nByte, sqlite3_stmt **ppStmt, const void **pzTail)
     * }
     */
    public static MethodHandle sqlite3_prepare16_v2$handle() {
        return sqlite3_prepare16_v2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_prepare16_v2(sqlite3 *db, const void *zSql, int nByte, sqlite3_stmt **ppStmt, const void **pzTail)
     * }
     */
    public static MemorySegment sqlite3_prepare16_v2$address() {
        return sqlite3_prepare16_v2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_prepare16_v2(sqlite3 *db, const void *zSql, int nByte, sqlite3_stmt **ppStmt, const void **pzTail)
     * }
     */
    public static int sqlite3_prepare16_v2(MemorySegment db, MemorySegment zSql, int nByte, MemorySegment ppStmt, MemorySegment pzTail) {
        var mh$ = sqlite3_prepare16_v2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_prepare16_v2", db, zSql, nByte, ppStmt, pzTail);
            }
            return (int)mh$.invokeExact(db, zSql, nByte, ppStmt, pzTail);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_prepare16_v3 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT,
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_prepare16_v3");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_prepare16_v3(sqlite3 *db, const void *zSql, int nByte, unsigned int prepFlags, sqlite3_stmt **ppStmt, const void **pzTail)
     * }
     */
    public static FunctionDescriptor sqlite3_prepare16_v3$descriptor() {
        return sqlite3_prepare16_v3.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_prepare16_v3(sqlite3 *db, const void *zSql, int nByte, unsigned int prepFlags, sqlite3_stmt **ppStmt, const void **pzTail)
     * }
     */
    public static MethodHandle sqlite3_prepare16_v3$handle() {
        return sqlite3_prepare16_v3.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_prepare16_v3(sqlite3 *db, const void *zSql, int nByte, unsigned int prepFlags, sqlite3_stmt **ppStmt, const void **pzTail)
     * }
     */
    public static MemorySegment sqlite3_prepare16_v3$address() {
        return sqlite3_prepare16_v3.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_prepare16_v3(sqlite3 *db, const void *zSql, int nByte, unsigned int prepFlags, sqlite3_stmt **ppStmt, const void **pzTail)
     * }
     */
    public static int sqlite3_prepare16_v3(MemorySegment db, MemorySegment zSql, int nByte, int prepFlags, MemorySegment ppStmt, MemorySegment pzTail) {
        var mh$ = sqlite3_prepare16_v3.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_prepare16_v3", db, zSql, nByte, prepFlags, ppStmt, pzTail);
            }
            return (int)mh$.invokeExact(db, zSql, nByte, prepFlags, ppStmt, pzTail);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_sql {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_sql");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *sqlite3_sql(sqlite3_stmt *pStmt)
     * }
     */
    public static FunctionDescriptor sqlite3_sql$descriptor() {
        return sqlite3_sql.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *sqlite3_sql(sqlite3_stmt *pStmt)
     * }
     */
    public static MethodHandle sqlite3_sql$handle() {
        return sqlite3_sql.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const char *sqlite3_sql(sqlite3_stmt *pStmt)
     * }
     */
    public static MemorySegment sqlite3_sql$address() {
        return sqlite3_sql.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const char *sqlite3_sql(sqlite3_stmt *pStmt)
     * }
     */
    public static MemorySegment sqlite3_sql(MemorySegment pStmt) {
        var mh$ = sqlite3_sql.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_sql", pStmt);
            }
            return (MemorySegment)mh$.invokeExact(pStmt);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_expanded_sql {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_expanded_sql");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *sqlite3_expanded_sql(sqlite3_stmt *pStmt)
     * }
     */
    public static FunctionDescriptor sqlite3_expanded_sql$descriptor() {
        return sqlite3_expanded_sql.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *sqlite3_expanded_sql(sqlite3_stmt *pStmt)
     * }
     */
    public static MethodHandle sqlite3_expanded_sql$handle() {
        return sqlite3_expanded_sql.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *sqlite3_expanded_sql(sqlite3_stmt *pStmt)
     * }
     */
    public static MemorySegment sqlite3_expanded_sql$address() {
        return sqlite3_expanded_sql.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *sqlite3_expanded_sql(sqlite3_stmt *pStmt)
     * }
     */
    public static MemorySegment sqlite3_expanded_sql(MemorySegment pStmt) {
        var mh$ = sqlite3_expanded_sql.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_expanded_sql", pStmt);
            }
            return (MemorySegment)mh$.invokeExact(pStmt);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_stmt_readonly {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_stmt_readonly");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_stmt_readonly(sqlite3_stmt *pStmt)
     * }
     */
    public static FunctionDescriptor sqlite3_stmt_readonly$descriptor() {
        return sqlite3_stmt_readonly.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_stmt_readonly(sqlite3_stmt *pStmt)
     * }
     */
    public static MethodHandle sqlite3_stmt_readonly$handle() {
        return sqlite3_stmt_readonly.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_stmt_readonly(sqlite3_stmt *pStmt)
     * }
     */
    public static MemorySegment sqlite3_stmt_readonly$address() {
        return sqlite3_stmt_readonly.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_stmt_readonly(sqlite3_stmt *pStmt)
     * }
     */
    public static int sqlite3_stmt_readonly(MemorySegment pStmt) {
        var mh$ = sqlite3_stmt_readonly.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_stmt_readonly", pStmt);
            }
            return (int)mh$.invokeExact(pStmt);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_stmt_isexplain {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_stmt_isexplain");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_stmt_isexplain(sqlite3_stmt *pStmt)
     * }
     */
    public static FunctionDescriptor sqlite3_stmt_isexplain$descriptor() {
        return sqlite3_stmt_isexplain.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_stmt_isexplain(sqlite3_stmt *pStmt)
     * }
     */
    public static MethodHandle sqlite3_stmt_isexplain$handle() {
        return sqlite3_stmt_isexplain.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_stmt_isexplain(sqlite3_stmt *pStmt)
     * }
     */
    public static MemorySegment sqlite3_stmt_isexplain$address() {
        return sqlite3_stmt_isexplain.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_stmt_isexplain(sqlite3_stmt *pStmt)
     * }
     */
    public static int sqlite3_stmt_isexplain(MemorySegment pStmt) {
        var mh$ = sqlite3_stmt_isexplain.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_stmt_isexplain", pStmt);
            }
            return (int)mh$.invokeExact(pStmt);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_stmt_explain {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_stmt_explain");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_stmt_explain(sqlite3_stmt *pStmt, int eMode)
     * }
     */
    public static FunctionDescriptor sqlite3_stmt_explain$descriptor() {
        return sqlite3_stmt_explain.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_stmt_explain(sqlite3_stmt *pStmt, int eMode)
     * }
     */
    public static MethodHandle sqlite3_stmt_explain$handle() {
        return sqlite3_stmt_explain.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_stmt_explain(sqlite3_stmt *pStmt, int eMode)
     * }
     */
    public static MemorySegment sqlite3_stmt_explain$address() {
        return sqlite3_stmt_explain.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_stmt_explain(sqlite3_stmt *pStmt, int eMode)
     * }
     */
    public static int sqlite3_stmt_explain(MemorySegment pStmt, int eMode) {
        var mh$ = sqlite3_stmt_explain.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_stmt_explain", pStmt, eMode);
            }
            return (int)mh$.invokeExact(pStmt, eMode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_stmt_busy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_stmt_busy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_stmt_busy(sqlite3_stmt *)
     * }
     */
    public static FunctionDescriptor sqlite3_stmt_busy$descriptor() {
        return sqlite3_stmt_busy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_stmt_busy(sqlite3_stmt *)
     * }
     */
    public static MethodHandle sqlite3_stmt_busy$handle() {
        return sqlite3_stmt_busy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_stmt_busy(sqlite3_stmt *)
     * }
     */
    public static MemorySegment sqlite3_stmt_busy$address() {
        return sqlite3_stmt_busy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_stmt_busy(sqlite3_stmt *)
     * }
     */
    public static int sqlite3_stmt_busy(MemorySegment x0) {
        var mh$ = sqlite3_stmt_busy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_stmt_busy", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_bind_blob {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_bind_blob");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_bind_blob(sqlite3_stmt *, int, const void *, int n, void (*)(void *))
     * }
     */
    public static FunctionDescriptor sqlite3_bind_blob$descriptor() {
        return sqlite3_bind_blob.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_bind_blob(sqlite3_stmt *, int, const void *, int n, void (*)(void *))
     * }
     */
    public static MethodHandle sqlite3_bind_blob$handle() {
        return sqlite3_bind_blob.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_bind_blob(sqlite3_stmt *, int, const void *, int n, void (*)(void *))
     * }
     */
    public static MemorySegment sqlite3_bind_blob$address() {
        return sqlite3_bind_blob.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_bind_blob(sqlite3_stmt *, int, const void *, int n, void (*)(void *))
     * }
     */
    public static int sqlite3_bind_blob(MemorySegment x0, int x1, MemorySegment x2, int n, MemorySegment x4) {
        var mh$ = sqlite3_bind_blob.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_bind_blob", x0, x1, x2, n, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, n, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_bind_blob64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_LONG_LONG,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_bind_blob64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_bind_blob64(sqlite3_stmt *, int, const void *, sqlite3_uint64, void (*)(void *))
     * }
     */
    public static FunctionDescriptor sqlite3_bind_blob64$descriptor() {
        return sqlite3_bind_blob64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_bind_blob64(sqlite3_stmt *, int, const void *, sqlite3_uint64, void (*)(void *))
     * }
     */
    public static MethodHandle sqlite3_bind_blob64$handle() {
        return sqlite3_bind_blob64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_bind_blob64(sqlite3_stmt *, int, const void *, sqlite3_uint64, void (*)(void *))
     * }
     */
    public static MemorySegment sqlite3_bind_blob64$address() {
        return sqlite3_bind_blob64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_bind_blob64(sqlite3_stmt *, int, const void *, sqlite3_uint64, void (*)(void *))
     * }
     */
    public static int sqlite3_bind_blob64(MemorySegment x0, int x1, MemorySegment x2, long x3, MemorySegment x4) {
        var mh$ = sqlite3_bind_blob64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_bind_blob64", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_bind_double {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT,
            sqlite3_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_bind_double");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_bind_double(sqlite3_stmt *, int, double)
     * }
     */
    public static FunctionDescriptor sqlite3_bind_double$descriptor() {
        return sqlite3_bind_double.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_bind_double(sqlite3_stmt *, int, double)
     * }
     */
    public static MethodHandle sqlite3_bind_double$handle() {
        return sqlite3_bind_double.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_bind_double(sqlite3_stmt *, int, double)
     * }
     */
    public static MemorySegment sqlite3_bind_double$address() {
        return sqlite3_bind_double.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_bind_double(sqlite3_stmt *, int, double)
     * }
     */
    public static int sqlite3_bind_double(MemorySegment x0, int x1, double x2) {
        var mh$ = sqlite3_bind_double.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_bind_double", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_bind_int {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT,
            sqlite3_h.C_INT
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_bind_int");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_bind_int(sqlite3_stmt *, int, int)
     * }
     */
    public static FunctionDescriptor sqlite3_bind_int$descriptor() {
        return sqlite3_bind_int.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_bind_int(sqlite3_stmt *, int, int)
     * }
     */
    public static MethodHandle sqlite3_bind_int$handle() {
        return sqlite3_bind_int.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_bind_int(sqlite3_stmt *, int, int)
     * }
     */
    public static MemorySegment sqlite3_bind_int$address() {
        return sqlite3_bind_int.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_bind_int(sqlite3_stmt *, int, int)
     * }
     */
    public static int sqlite3_bind_int(MemorySegment x0, int x1, int x2) {
        var mh$ = sqlite3_bind_int.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_bind_int", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_bind_int64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT,
            sqlite3_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_bind_int64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_bind_int64(sqlite3_stmt *, int, sqlite3_int64)
     * }
     */
    public static FunctionDescriptor sqlite3_bind_int64$descriptor() {
        return sqlite3_bind_int64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_bind_int64(sqlite3_stmt *, int, sqlite3_int64)
     * }
     */
    public static MethodHandle sqlite3_bind_int64$handle() {
        return sqlite3_bind_int64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_bind_int64(sqlite3_stmt *, int, sqlite3_int64)
     * }
     */
    public static MemorySegment sqlite3_bind_int64$address() {
        return sqlite3_bind_int64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_bind_int64(sqlite3_stmt *, int, sqlite3_int64)
     * }
     */
    public static int sqlite3_bind_int64(MemorySegment x0, int x1, long x2) {
        var mh$ = sqlite3_bind_int64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_bind_int64", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_bind_null {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_bind_null");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_bind_null(sqlite3_stmt *, int)
     * }
     */
    public static FunctionDescriptor sqlite3_bind_null$descriptor() {
        return sqlite3_bind_null.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_bind_null(sqlite3_stmt *, int)
     * }
     */
    public static MethodHandle sqlite3_bind_null$handle() {
        return sqlite3_bind_null.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_bind_null(sqlite3_stmt *, int)
     * }
     */
    public static MemorySegment sqlite3_bind_null$address() {
        return sqlite3_bind_null.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_bind_null(sqlite3_stmt *, int)
     * }
     */
    public static int sqlite3_bind_null(MemorySegment x0, int x1) {
        var mh$ = sqlite3_bind_null.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_bind_null", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_bind_text {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_bind_text");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_bind_text(sqlite3_stmt *, int, const char *, int, void (*)(void *))
     * }
     */
    public static FunctionDescriptor sqlite3_bind_text$descriptor() {
        return sqlite3_bind_text.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_bind_text(sqlite3_stmt *, int, const char *, int, void (*)(void *))
     * }
     */
    public static MethodHandle sqlite3_bind_text$handle() {
        return sqlite3_bind_text.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_bind_text(sqlite3_stmt *, int, const char *, int, void (*)(void *))
     * }
     */
    public static MemorySegment sqlite3_bind_text$address() {
        return sqlite3_bind_text.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_bind_text(sqlite3_stmt *, int, const char *, int, void (*)(void *))
     * }
     */
    public static int sqlite3_bind_text(MemorySegment x0, int x1, MemorySegment x2, int x3, MemorySegment x4) {
        var mh$ = sqlite3_bind_text.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_bind_text", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_bind_text16 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_bind_text16");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_bind_text16(sqlite3_stmt *, int, const void *, int, void (*)(void *))
     * }
     */
    public static FunctionDescriptor sqlite3_bind_text16$descriptor() {
        return sqlite3_bind_text16.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_bind_text16(sqlite3_stmt *, int, const void *, int, void (*)(void *))
     * }
     */
    public static MethodHandle sqlite3_bind_text16$handle() {
        return sqlite3_bind_text16.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_bind_text16(sqlite3_stmt *, int, const void *, int, void (*)(void *))
     * }
     */
    public static MemorySegment sqlite3_bind_text16$address() {
        return sqlite3_bind_text16.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_bind_text16(sqlite3_stmt *, int, const void *, int, void (*)(void *))
     * }
     */
    public static int sqlite3_bind_text16(MemorySegment x0, int x1, MemorySegment x2, int x3, MemorySegment x4) {
        var mh$ = sqlite3_bind_text16.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_bind_text16", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_bind_text64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_LONG_LONG,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_CHAR
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_bind_text64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_bind_text64(sqlite3_stmt *, int, const char *, sqlite3_uint64, void (*)(void *), unsigned char encoding)
     * }
     */
    public static FunctionDescriptor sqlite3_bind_text64$descriptor() {
        return sqlite3_bind_text64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_bind_text64(sqlite3_stmt *, int, const char *, sqlite3_uint64, void (*)(void *), unsigned char encoding)
     * }
     */
    public static MethodHandle sqlite3_bind_text64$handle() {
        return sqlite3_bind_text64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_bind_text64(sqlite3_stmt *, int, const char *, sqlite3_uint64, void (*)(void *), unsigned char encoding)
     * }
     */
    public static MemorySegment sqlite3_bind_text64$address() {
        return sqlite3_bind_text64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_bind_text64(sqlite3_stmt *, int, const char *, sqlite3_uint64, void (*)(void *), unsigned char encoding)
     * }
     */
    public static int sqlite3_bind_text64(MemorySegment x0, int x1, MemorySegment x2, long x3, MemorySegment x4, byte encoding) {
        var mh$ = sqlite3_bind_text64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_bind_text64", x0, x1, x2, x3, x4, encoding);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, encoding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_bind_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_bind_value");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_bind_value(sqlite3_stmt *, int, const sqlite3_value *)
     * }
     */
    public static FunctionDescriptor sqlite3_bind_value$descriptor() {
        return sqlite3_bind_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_bind_value(sqlite3_stmt *, int, const sqlite3_value *)
     * }
     */
    public static MethodHandle sqlite3_bind_value$handle() {
        return sqlite3_bind_value.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_bind_value(sqlite3_stmt *, int, const sqlite3_value *)
     * }
     */
    public static MemorySegment sqlite3_bind_value$address() {
        return sqlite3_bind_value.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_bind_value(sqlite3_stmt *, int, const sqlite3_value *)
     * }
     */
    public static int sqlite3_bind_value(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = sqlite3_bind_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_bind_value", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_bind_pointer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_bind_pointer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_bind_pointer(sqlite3_stmt *, int, void *, const char *, void (*)(void *))
     * }
     */
    public static FunctionDescriptor sqlite3_bind_pointer$descriptor() {
        return sqlite3_bind_pointer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_bind_pointer(sqlite3_stmt *, int, void *, const char *, void (*)(void *))
     * }
     */
    public static MethodHandle sqlite3_bind_pointer$handle() {
        return sqlite3_bind_pointer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_bind_pointer(sqlite3_stmt *, int, void *, const char *, void (*)(void *))
     * }
     */
    public static MemorySegment sqlite3_bind_pointer$address() {
        return sqlite3_bind_pointer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_bind_pointer(sqlite3_stmt *, int, void *, const char *, void (*)(void *))
     * }
     */
    public static int sqlite3_bind_pointer(MemorySegment x0, int x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = sqlite3_bind_pointer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_bind_pointer", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_bind_zeroblob {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT,
            sqlite3_h.C_INT
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_bind_zeroblob");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_bind_zeroblob(sqlite3_stmt *, int, int n)
     * }
     */
    public static FunctionDescriptor sqlite3_bind_zeroblob$descriptor() {
        return sqlite3_bind_zeroblob.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_bind_zeroblob(sqlite3_stmt *, int, int n)
     * }
     */
    public static MethodHandle sqlite3_bind_zeroblob$handle() {
        return sqlite3_bind_zeroblob.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_bind_zeroblob(sqlite3_stmt *, int, int n)
     * }
     */
    public static MemorySegment sqlite3_bind_zeroblob$address() {
        return sqlite3_bind_zeroblob.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_bind_zeroblob(sqlite3_stmt *, int, int n)
     * }
     */
    public static int sqlite3_bind_zeroblob(MemorySegment x0, int x1, int n) {
        var mh$ = sqlite3_bind_zeroblob.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_bind_zeroblob", x0, x1, n);
            }
            return (int)mh$.invokeExact(x0, x1, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_bind_zeroblob64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT,
            sqlite3_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_bind_zeroblob64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_bind_zeroblob64(sqlite3_stmt *, int, sqlite3_uint64)
     * }
     */
    public static FunctionDescriptor sqlite3_bind_zeroblob64$descriptor() {
        return sqlite3_bind_zeroblob64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_bind_zeroblob64(sqlite3_stmt *, int, sqlite3_uint64)
     * }
     */
    public static MethodHandle sqlite3_bind_zeroblob64$handle() {
        return sqlite3_bind_zeroblob64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_bind_zeroblob64(sqlite3_stmt *, int, sqlite3_uint64)
     * }
     */
    public static MemorySegment sqlite3_bind_zeroblob64$address() {
        return sqlite3_bind_zeroblob64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_bind_zeroblob64(sqlite3_stmt *, int, sqlite3_uint64)
     * }
     */
    public static int sqlite3_bind_zeroblob64(MemorySegment x0, int x1, long x2) {
        var mh$ = sqlite3_bind_zeroblob64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_bind_zeroblob64", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_bind_parameter_count {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_bind_parameter_count");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_bind_parameter_count(sqlite3_stmt *)
     * }
     */
    public static FunctionDescriptor sqlite3_bind_parameter_count$descriptor() {
        return sqlite3_bind_parameter_count.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_bind_parameter_count(sqlite3_stmt *)
     * }
     */
    public static MethodHandle sqlite3_bind_parameter_count$handle() {
        return sqlite3_bind_parameter_count.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_bind_parameter_count(sqlite3_stmt *)
     * }
     */
    public static MemorySegment sqlite3_bind_parameter_count$address() {
        return sqlite3_bind_parameter_count.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_bind_parameter_count(sqlite3_stmt *)
     * }
     */
    public static int sqlite3_bind_parameter_count(MemorySegment x0) {
        var mh$ = sqlite3_bind_parameter_count.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_bind_parameter_count", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_bind_parameter_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_bind_parameter_name");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *sqlite3_bind_parameter_name(sqlite3_stmt *, int)
     * }
     */
    public static FunctionDescriptor sqlite3_bind_parameter_name$descriptor() {
        return sqlite3_bind_parameter_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *sqlite3_bind_parameter_name(sqlite3_stmt *, int)
     * }
     */
    public static MethodHandle sqlite3_bind_parameter_name$handle() {
        return sqlite3_bind_parameter_name.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const char *sqlite3_bind_parameter_name(sqlite3_stmt *, int)
     * }
     */
    public static MemorySegment sqlite3_bind_parameter_name$address() {
        return sqlite3_bind_parameter_name.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const char *sqlite3_bind_parameter_name(sqlite3_stmt *, int)
     * }
     */
    public static MemorySegment sqlite3_bind_parameter_name(MemorySegment x0, int x1) {
        var mh$ = sqlite3_bind_parameter_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_bind_parameter_name", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_bind_parameter_index {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_bind_parameter_index");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_bind_parameter_index(sqlite3_stmt *, const char *zName)
     * }
     */
    public static FunctionDescriptor sqlite3_bind_parameter_index$descriptor() {
        return sqlite3_bind_parameter_index.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_bind_parameter_index(sqlite3_stmt *, const char *zName)
     * }
     */
    public static MethodHandle sqlite3_bind_parameter_index$handle() {
        return sqlite3_bind_parameter_index.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_bind_parameter_index(sqlite3_stmt *, const char *zName)
     * }
     */
    public static MemorySegment sqlite3_bind_parameter_index$address() {
        return sqlite3_bind_parameter_index.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_bind_parameter_index(sqlite3_stmt *, const char *zName)
     * }
     */
    public static int sqlite3_bind_parameter_index(MemorySegment x0, MemorySegment zName) {
        var mh$ = sqlite3_bind_parameter_index.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_bind_parameter_index", x0, zName);
            }
            return (int)mh$.invokeExact(x0, zName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_clear_bindings {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_clear_bindings");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_clear_bindings(sqlite3_stmt *)
     * }
     */
    public static FunctionDescriptor sqlite3_clear_bindings$descriptor() {
        return sqlite3_clear_bindings.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_clear_bindings(sqlite3_stmt *)
     * }
     */
    public static MethodHandle sqlite3_clear_bindings$handle() {
        return sqlite3_clear_bindings.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_clear_bindings(sqlite3_stmt *)
     * }
     */
    public static MemorySegment sqlite3_clear_bindings$address() {
        return sqlite3_clear_bindings.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_clear_bindings(sqlite3_stmt *)
     * }
     */
    public static int sqlite3_clear_bindings(MemorySegment x0) {
        var mh$ = sqlite3_clear_bindings.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_clear_bindings", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_column_count {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_column_count");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_column_count(sqlite3_stmt *pStmt)
     * }
     */
    public static FunctionDescriptor sqlite3_column_count$descriptor() {
        return sqlite3_column_count.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_column_count(sqlite3_stmt *pStmt)
     * }
     */
    public static MethodHandle sqlite3_column_count$handle() {
        return sqlite3_column_count.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_column_count(sqlite3_stmt *pStmt)
     * }
     */
    public static MemorySegment sqlite3_column_count$address() {
        return sqlite3_column_count.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_column_count(sqlite3_stmt *pStmt)
     * }
     */
    public static int sqlite3_column_count(MemorySegment pStmt) {
        var mh$ = sqlite3_column_count.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_column_count", pStmt);
            }
            return (int)mh$.invokeExact(pStmt);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_column_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_column_name");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *sqlite3_column_name(sqlite3_stmt *, int N)
     * }
     */
    public static FunctionDescriptor sqlite3_column_name$descriptor() {
        return sqlite3_column_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *sqlite3_column_name(sqlite3_stmt *, int N)
     * }
     */
    public static MethodHandle sqlite3_column_name$handle() {
        return sqlite3_column_name.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const char *sqlite3_column_name(sqlite3_stmt *, int N)
     * }
     */
    public static MemorySegment sqlite3_column_name$address() {
        return sqlite3_column_name.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const char *sqlite3_column_name(sqlite3_stmt *, int N)
     * }
     */
    public static MemorySegment sqlite3_column_name(MemorySegment x0, int N) {
        var mh$ = sqlite3_column_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_column_name", x0, N);
            }
            return (MemorySegment)mh$.invokeExact(x0, N);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_column_name16 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_column_name16");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const void *sqlite3_column_name16(sqlite3_stmt *, int N)
     * }
     */
    public static FunctionDescriptor sqlite3_column_name16$descriptor() {
        return sqlite3_column_name16.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const void *sqlite3_column_name16(sqlite3_stmt *, int N)
     * }
     */
    public static MethodHandle sqlite3_column_name16$handle() {
        return sqlite3_column_name16.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const void *sqlite3_column_name16(sqlite3_stmt *, int N)
     * }
     */
    public static MemorySegment sqlite3_column_name16$address() {
        return sqlite3_column_name16.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const void *sqlite3_column_name16(sqlite3_stmt *, int N)
     * }
     */
    public static MemorySegment sqlite3_column_name16(MemorySegment x0, int N) {
        var mh$ = sqlite3_column_name16.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_column_name16", x0, N);
            }
            return (MemorySegment)mh$.invokeExact(x0, N);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_column_database_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_column_database_name");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *sqlite3_column_database_name(sqlite3_stmt *, int)
     * }
     */
    public static FunctionDescriptor sqlite3_column_database_name$descriptor() {
        return sqlite3_column_database_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *sqlite3_column_database_name(sqlite3_stmt *, int)
     * }
     */
    public static MethodHandle sqlite3_column_database_name$handle() {
        return sqlite3_column_database_name.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const char *sqlite3_column_database_name(sqlite3_stmt *, int)
     * }
     */
    public static MemorySegment sqlite3_column_database_name$address() {
        return sqlite3_column_database_name.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const char *sqlite3_column_database_name(sqlite3_stmt *, int)
     * }
     */
    public static MemorySegment sqlite3_column_database_name(MemorySegment x0, int x1) {
        var mh$ = sqlite3_column_database_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_column_database_name", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_column_database_name16 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_column_database_name16");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const void *sqlite3_column_database_name16(sqlite3_stmt *, int)
     * }
     */
    public static FunctionDescriptor sqlite3_column_database_name16$descriptor() {
        return sqlite3_column_database_name16.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const void *sqlite3_column_database_name16(sqlite3_stmt *, int)
     * }
     */
    public static MethodHandle sqlite3_column_database_name16$handle() {
        return sqlite3_column_database_name16.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const void *sqlite3_column_database_name16(sqlite3_stmt *, int)
     * }
     */
    public static MemorySegment sqlite3_column_database_name16$address() {
        return sqlite3_column_database_name16.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const void *sqlite3_column_database_name16(sqlite3_stmt *, int)
     * }
     */
    public static MemorySegment sqlite3_column_database_name16(MemorySegment x0, int x1) {
        var mh$ = sqlite3_column_database_name16.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_column_database_name16", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_column_table_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_column_table_name");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *sqlite3_column_table_name(sqlite3_stmt *, int)
     * }
     */
    public static FunctionDescriptor sqlite3_column_table_name$descriptor() {
        return sqlite3_column_table_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *sqlite3_column_table_name(sqlite3_stmt *, int)
     * }
     */
    public static MethodHandle sqlite3_column_table_name$handle() {
        return sqlite3_column_table_name.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const char *sqlite3_column_table_name(sqlite3_stmt *, int)
     * }
     */
    public static MemorySegment sqlite3_column_table_name$address() {
        return sqlite3_column_table_name.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const char *sqlite3_column_table_name(sqlite3_stmt *, int)
     * }
     */
    public static MemorySegment sqlite3_column_table_name(MemorySegment x0, int x1) {
        var mh$ = sqlite3_column_table_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_column_table_name", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_column_table_name16 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_column_table_name16");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const void *sqlite3_column_table_name16(sqlite3_stmt *, int)
     * }
     */
    public static FunctionDescriptor sqlite3_column_table_name16$descriptor() {
        return sqlite3_column_table_name16.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const void *sqlite3_column_table_name16(sqlite3_stmt *, int)
     * }
     */
    public static MethodHandle sqlite3_column_table_name16$handle() {
        return sqlite3_column_table_name16.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const void *sqlite3_column_table_name16(sqlite3_stmt *, int)
     * }
     */
    public static MemorySegment sqlite3_column_table_name16$address() {
        return sqlite3_column_table_name16.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const void *sqlite3_column_table_name16(sqlite3_stmt *, int)
     * }
     */
    public static MemorySegment sqlite3_column_table_name16(MemorySegment x0, int x1) {
        var mh$ = sqlite3_column_table_name16.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_column_table_name16", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_column_origin_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_column_origin_name");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *sqlite3_column_origin_name(sqlite3_stmt *, int)
     * }
     */
    public static FunctionDescriptor sqlite3_column_origin_name$descriptor() {
        return sqlite3_column_origin_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *sqlite3_column_origin_name(sqlite3_stmt *, int)
     * }
     */
    public static MethodHandle sqlite3_column_origin_name$handle() {
        return sqlite3_column_origin_name.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const char *sqlite3_column_origin_name(sqlite3_stmt *, int)
     * }
     */
    public static MemorySegment sqlite3_column_origin_name$address() {
        return sqlite3_column_origin_name.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const char *sqlite3_column_origin_name(sqlite3_stmt *, int)
     * }
     */
    public static MemorySegment sqlite3_column_origin_name(MemorySegment x0, int x1) {
        var mh$ = sqlite3_column_origin_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_column_origin_name", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_column_origin_name16 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_column_origin_name16");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const void *sqlite3_column_origin_name16(sqlite3_stmt *, int)
     * }
     */
    public static FunctionDescriptor sqlite3_column_origin_name16$descriptor() {
        return sqlite3_column_origin_name16.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const void *sqlite3_column_origin_name16(sqlite3_stmt *, int)
     * }
     */
    public static MethodHandle sqlite3_column_origin_name16$handle() {
        return sqlite3_column_origin_name16.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const void *sqlite3_column_origin_name16(sqlite3_stmt *, int)
     * }
     */
    public static MemorySegment sqlite3_column_origin_name16$address() {
        return sqlite3_column_origin_name16.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const void *sqlite3_column_origin_name16(sqlite3_stmt *, int)
     * }
     */
    public static MemorySegment sqlite3_column_origin_name16(MemorySegment x0, int x1) {
        var mh$ = sqlite3_column_origin_name16.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_column_origin_name16", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_column_decltype {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_column_decltype");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *sqlite3_column_decltype(sqlite3_stmt *, int)
     * }
     */
    public static FunctionDescriptor sqlite3_column_decltype$descriptor() {
        return sqlite3_column_decltype.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *sqlite3_column_decltype(sqlite3_stmt *, int)
     * }
     */
    public static MethodHandle sqlite3_column_decltype$handle() {
        return sqlite3_column_decltype.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const char *sqlite3_column_decltype(sqlite3_stmt *, int)
     * }
     */
    public static MemorySegment sqlite3_column_decltype$address() {
        return sqlite3_column_decltype.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const char *sqlite3_column_decltype(sqlite3_stmt *, int)
     * }
     */
    public static MemorySegment sqlite3_column_decltype(MemorySegment x0, int x1) {
        var mh$ = sqlite3_column_decltype.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_column_decltype", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_column_decltype16 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_column_decltype16");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const void *sqlite3_column_decltype16(sqlite3_stmt *, int)
     * }
     */
    public static FunctionDescriptor sqlite3_column_decltype16$descriptor() {
        return sqlite3_column_decltype16.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const void *sqlite3_column_decltype16(sqlite3_stmt *, int)
     * }
     */
    public static MethodHandle sqlite3_column_decltype16$handle() {
        return sqlite3_column_decltype16.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const void *sqlite3_column_decltype16(sqlite3_stmt *, int)
     * }
     */
    public static MemorySegment sqlite3_column_decltype16$address() {
        return sqlite3_column_decltype16.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const void *sqlite3_column_decltype16(sqlite3_stmt *, int)
     * }
     */
    public static MemorySegment sqlite3_column_decltype16(MemorySegment x0, int x1) {
        var mh$ = sqlite3_column_decltype16.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_column_decltype16", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_step {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_step");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_step(sqlite3_stmt *)
     * }
     */
    public static FunctionDescriptor sqlite3_step$descriptor() {
        return sqlite3_step.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_step(sqlite3_stmt *)
     * }
     */
    public static MethodHandle sqlite3_step$handle() {
        return sqlite3_step.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_step(sqlite3_stmt *)
     * }
     */
    public static MemorySegment sqlite3_step$address() {
        return sqlite3_step.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_step(sqlite3_stmt *)
     * }
     */
    public static int sqlite3_step(MemorySegment x0) {
        var mh$ = sqlite3_step.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_step", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_data_count {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_data_count");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_data_count(sqlite3_stmt *pStmt)
     * }
     */
    public static FunctionDescriptor sqlite3_data_count$descriptor() {
        return sqlite3_data_count.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_data_count(sqlite3_stmt *pStmt)
     * }
     */
    public static MethodHandle sqlite3_data_count$handle() {
        return sqlite3_data_count.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_data_count(sqlite3_stmt *pStmt)
     * }
     */
    public static MemorySegment sqlite3_data_count$address() {
        return sqlite3_data_count.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_data_count(sqlite3_stmt *pStmt)
     * }
     */
    public static int sqlite3_data_count(MemorySegment pStmt) {
        var mh$ = sqlite3_data_count.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_data_count", pStmt);
            }
            return (int)mh$.invokeExact(pStmt);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_column_blob {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_column_blob");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const void *sqlite3_column_blob(sqlite3_stmt *, int iCol)
     * }
     */
    public static FunctionDescriptor sqlite3_column_blob$descriptor() {
        return sqlite3_column_blob.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const void *sqlite3_column_blob(sqlite3_stmt *, int iCol)
     * }
     */
    public static MethodHandle sqlite3_column_blob$handle() {
        return sqlite3_column_blob.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const void *sqlite3_column_blob(sqlite3_stmt *, int iCol)
     * }
     */
    public static MemorySegment sqlite3_column_blob$address() {
        return sqlite3_column_blob.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const void *sqlite3_column_blob(sqlite3_stmt *, int iCol)
     * }
     */
    public static MemorySegment sqlite3_column_blob(MemorySegment x0, int iCol) {
        var mh$ = sqlite3_column_blob.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_column_blob", x0, iCol);
            }
            return (MemorySegment)mh$.invokeExact(x0, iCol);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_column_double {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_DOUBLE,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_column_double");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double sqlite3_column_double(sqlite3_stmt *, int iCol)
     * }
     */
    public static FunctionDescriptor sqlite3_column_double$descriptor() {
        return sqlite3_column_double.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double sqlite3_column_double(sqlite3_stmt *, int iCol)
     * }
     */
    public static MethodHandle sqlite3_column_double$handle() {
        return sqlite3_column_double.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double sqlite3_column_double(sqlite3_stmt *, int iCol)
     * }
     */
    public static MemorySegment sqlite3_column_double$address() {
        return sqlite3_column_double.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double sqlite3_column_double(sqlite3_stmt *, int iCol)
     * }
     */
    public static double sqlite3_column_double(MemorySegment x0, int iCol) {
        var mh$ = sqlite3_column_double.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_column_double", x0, iCol);
            }
            return (double)mh$.invokeExact(x0, iCol);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_column_int {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_column_int");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_column_int(sqlite3_stmt *, int iCol)
     * }
     */
    public static FunctionDescriptor sqlite3_column_int$descriptor() {
        return sqlite3_column_int.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_column_int(sqlite3_stmt *, int iCol)
     * }
     */
    public static MethodHandle sqlite3_column_int$handle() {
        return sqlite3_column_int.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_column_int(sqlite3_stmt *, int iCol)
     * }
     */
    public static MemorySegment sqlite3_column_int$address() {
        return sqlite3_column_int.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_column_int(sqlite3_stmt *, int iCol)
     * }
     */
    public static int sqlite3_column_int(MemorySegment x0, int iCol) {
        var mh$ = sqlite3_column_int.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_column_int", x0, iCol);
            }
            return (int)mh$.invokeExact(x0, iCol);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_column_int64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_LONG_LONG,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_column_int64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * sqlite3_int64 sqlite3_column_int64(sqlite3_stmt *, int iCol)
     * }
     */
    public static FunctionDescriptor sqlite3_column_int64$descriptor() {
        return sqlite3_column_int64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * sqlite3_int64 sqlite3_column_int64(sqlite3_stmt *, int iCol)
     * }
     */
    public static MethodHandle sqlite3_column_int64$handle() {
        return sqlite3_column_int64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * sqlite3_int64 sqlite3_column_int64(sqlite3_stmt *, int iCol)
     * }
     */
    public static MemorySegment sqlite3_column_int64$address() {
        return sqlite3_column_int64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * sqlite3_int64 sqlite3_column_int64(sqlite3_stmt *, int iCol)
     * }
     */
    public static long sqlite3_column_int64(MemorySegment x0, int iCol) {
        var mh$ = sqlite3_column_int64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_column_int64", x0, iCol);
            }
            return (long)mh$.invokeExact(x0, iCol);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_column_text {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_column_text");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const unsigned char *sqlite3_column_text(sqlite3_stmt *, int iCol)
     * }
     */
    public static FunctionDescriptor sqlite3_column_text$descriptor() {
        return sqlite3_column_text.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const unsigned char *sqlite3_column_text(sqlite3_stmt *, int iCol)
     * }
     */
    public static MethodHandle sqlite3_column_text$handle() {
        return sqlite3_column_text.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const unsigned char *sqlite3_column_text(sqlite3_stmt *, int iCol)
     * }
     */
    public static MemorySegment sqlite3_column_text$address() {
        return sqlite3_column_text.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const unsigned char *sqlite3_column_text(sqlite3_stmt *, int iCol)
     * }
     */
    public static MemorySegment sqlite3_column_text(MemorySegment x0, int iCol) {
        var mh$ = sqlite3_column_text.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_column_text", x0, iCol);
            }
            return (MemorySegment)mh$.invokeExact(x0, iCol);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_column_text16 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_column_text16");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const void *sqlite3_column_text16(sqlite3_stmt *, int iCol)
     * }
     */
    public static FunctionDescriptor sqlite3_column_text16$descriptor() {
        return sqlite3_column_text16.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const void *sqlite3_column_text16(sqlite3_stmt *, int iCol)
     * }
     */
    public static MethodHandle sqlite3_column_text16$handle() {
        return sqlite3_column_text16.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const void *sqlite3_column_text16(sqlite3_stmt *, int iCol)
     * }
     */
    public static MemorySegment sqlite3_column_text16$address() {
        return sqlite3_column_text16.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const void *sqlite3_column_text16(sqlite3_stmt *, int iCol)
     * }
     */
    public static MemorySegment sqlite3_column_text16(MemorySegment x0, int iCol) {
        var mh$ = sqlite3_column_text16.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_column_text16", x0, iCol);
            }
            return (MemorySegment)mh$.invokeExact(x0, iCol);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_column_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_column_value");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * sqlite3_value *sqlite3_column_value(sqlite3_stmt *, int iCol)
     * }
     */
    public static FunctionDescriptor sqlite3_column_value$descriptor() {
        return sqlite3_column_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * sqlite3_value *sqlite3_column_value(sqlite3_stmt *, int iCol)
     * }
     */
    public static MethodHandle sqlite3_column_value$handle() {
        return sqlite3_column_value.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * sqlite3_value *sqlite3_column_value(sqlite3_stmt *, int iCol)
     * }
     */
    public static MemorySegment sqlite3_column_value$address() {
        return sqlite3_column_value.ADDR;
    }

    /**
     * {@snippet lang=c :
     * sqlite3_value *sqlite3_column_value(sqlite3_stmt *, int iCol)
     * }
     */
    public static MemorySegment sqlite3_column_value(MemorySegment x0, int iCol) {
        var mh$ = sqlite3_column_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_column_value", x0, iCol);
            }
            return (MemorySegment)mh$.invokeExact(x0, iCol);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_column_bytes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_column_bytes");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_column_bytes(sqlite3_stmt *, int iCol)
     * }
     */
    public static FunctionDescriptor sqlite3_column_bytes$descriptor() {
        return sqlite3_column_bytes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_column_bytes(sqlite3_stmt *, int iCol)
     * }
     */
    public static MethodHandle sqlite3_column_bytes$handle() {
        return sqlite3_column_bytes.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_column_bytes(sqlite3_stmt *, int iCol)
     * }
     */
    public static MemorySegment sqlite3_column_bytes$address() {
        return sqlite3_column_bytes.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_column_bytes(sqlite3_stmt *, int iCol)
     * }
     */
    public static int sqlite3_column_bytes(MemorySegment x0, int iCol) {
        var mh$ = sqlite3_column_bytes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_column_bytes", x0, iCol);
            }
            return (int)mh$.invokeExact(x0, iCol);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_column_bytes16 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_column_bytes16");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_column_bytes16(sqlite3_stmt *, int iCol)
     * }
     */
    public static FunctionDescriptor sqlite3_column_bytes16$descriptor() {
        return sqlite3_column_bytes16.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_column_bytes16(sqlite3_stmt *, int iCol)
     * }
     */
    public static MethodHandle sqlite3_column_bytes16$handle() {
        return sqlite3_column_bytes16.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_column_bytes16(sqlite3_stmt *, int iCol)
     * }
     */
    public static MemorySegment sqlite3_column_bytes16$address() {
        return sqlite3_column_bytes16.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_column_bytes16(sqlite3_stmt *, int iCol)
     * }
     */
    public static int sqlite3_column_bytes16(MemorySegment x0, int iCol) {
        var mh$ = sqlite3_column_bytes16.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_column_bytes16", x0, iCol);
            }
            return (int)mh$.invokeExact(x0, iCol);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_column_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_column_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_column_type(sqlite3_stmt *, int iCol)
     * }
     */
    public static FunctionDescriptor sqlite3_column_type$descriptor() {
        return sqlite3_column_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_column_type(sqlite3_stmt *, int iCol)
     * }
     */
    public static MethodHandle sqlite3_column_type$handle() {
        return sqlite3_column_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_column_type(sqlite3_stmt *, int iCol)
     * }
     */
    public static MemorySegment sqlite3_column_type$address() {
        return sqlite3_column_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_column_type(sqlite3_stmt *, int iCol)
     * }
     */
    public static int sqlite3_column_type(MemorySegment x0, int iCol) {
        var mh$ = sqlite3_column_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_column_type", x0, iCol);
            }
            return (int)mh$.invokeExact(x0, iCol);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_finalize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_finalize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_finalize(sqlite3_stmt *pStmt)
     * }
     */
    public static FunctionDescriptor sqlite3_finalize$descriptor() {
        return sqlite3_finalize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_finalize(sqlite3_stmt *pStmt)
     * }
     */
    public static MethodHandle sqlite3_finalize$handle() {
        return sqlite3_finalize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_finalize(sqlite3_stmt *pStmt)
     * }
     */
    public static MemorySegment sqlite3_finalize$address() {
        return sqlite3_finalize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_finalize(sqlite3_stmt *pStmt)
     * }
     */
    public static int sqlite3_finalize(MemorySegment pStmt) {
        var mh$ = sqlite3_finalize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_finalize", pStmt);
            }
            return (int)mh$.invokeExact(pStmt);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_reset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_reset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_reset(sqlite3_stmt *pStmt)
     * }
     */
    public static FunctionDescriptor sqlite3_reset$descriptor() {
        return sqlite3_reset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_reset(sqlite3_stmt *pStmt)
     * }
     */
    public static MethodHandle sqlite3_reset$handle() {
        return sqlite3_reset.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_reset(sqlite3_stmt *pStmt)
     * }
     */
    public static MemorySegment sqlite3_reset$address() {
        return sqlite3_reset.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_reset(sqlite3_stmt *pStmt)
     * }
     */
    public static int sqlite3_reset(MemorySegment pStmt) {
        var mh$ = sqlite3_reset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_reset", pStmt);
            }
            return (int)mh$.invokeExact(pStmt);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_create_function {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT,
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_create_function");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_create_function(sqlite3 *db, const char *zFunctionName, int nArg, int eTextRep, void *pApp, void (*xFunc)(sqlite3_context *, int, sqlite3_value **), void (*xStep)(sqlite3_context *, int, sqlite3_value **), void (*xFinal)(sqlite3_context *))
     * }
     */
    public static FunctionDescriptor sqlite3_create_function$descriptor() {
        return sqlite3_create_function.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_create_function(sqlite3 *db, const char *zFunctionName, int nArg, int eTextRep, void *pApp, void (*xFunc)(sqlite3_context *, int, sqlite3_value **), void (*xStep)(sqlite3_context *, int, sqlite3_value **), void (*xFinal)(sqlite3_context *))
     * }
     */
    public static MethodHandle sqlite3_create_function$handle() {
        return sqlite3_create_function.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_create_function(sqlite3 *db, const char *zFunctionName, int nArg, int eTextRep, void *pApp, void (*xFunc)(sqlite3_context *, int, sqlite3_value **), void (*xStep)(sqlite3_context *, int, sqlite3_value **), void (*xFinal)(sqlite3_context *))
     * }
     */
    public static MemorySegment sqlite3_create_function$address() {
        return sqlite3_create_function.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_create_function(sqlite3 *db, const char *zFunctionName, int nArg, int eTextRep, void *pApp, void (*xFunc)(sqlite3_context *, int, sqlite3_value **), void (*xStep)(sqlite3_context *, int, sqlite3_value **), void (*xFinal)(sqlite3_context *))
     * }
     */
    public static int sqlite3_create_function(MemorySegment db, MemorySegment zFunctionName, int nArg, int eTextRep, MemorySegment pApp, MemorySegment xFunc, MemorySegment xStep, MemorySegment xFinal) {
        var mh$ = sqlite3_create_function.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_create_function", db, zFunctionName, nArg, eTextRep, pApp, xFunc, xStep, xFinal);
            }
            return (int)mh$.invokeExact(db, zFunctionName, nArg, eTextRep, pApp, xFunc, xStep, xFinal);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_create_function16 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT,
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_create_function16");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_create_function16(sqlite3 *db, const void *zFunctionName, int nArg, int eTextRep, void *pApp, void (*xFunc)(sqlite3_context *, int, sqlite3_value **), void (*xStep)(sqlite3_context *, int, sqlite3_value **), void (*xFinal)(sqlite3_context *))
     * }
     */
    public static FunctionDescriptor sqlite3_create_function16$descriptor() {
        return sqlite3_create_function16.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_create_function16(sqlite3 *db, const void *zFunctionName, int nArg, int eTextRep, void *pApp, void (*xFunc)(sqlite3_context *, int, sqlite3_value **), void (*xStep)(sqlite3_context *, int, sqlite3_value **), void (*xFinal)(sqlite3_context *))
     * }
     */
    public static MethodHandle sqlite3_create_function16$handle() {
        return sqlite3_create_function16.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_create_function16(sqlite3 *db, const void *zFunctionName, int nArg, int eTextRep, void *pApp, void (*xFunc)(sqlite3_context *, int, sqlite3_value **), void (*xStep)(sqlite3_context *, int, sqlite3_value **), void (*xFinal)(sqlite3_context *))
     * }
     */
    public static MemorySegment sqlite3_create_function16$address() {
        return sqlite3_create_function16.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_create_function16(sqlite3 *db, const void *zFunctionName, int nArg, int eTextRep, void *pApp, void (*xFunc)(sqlite3_context *, int, sqlite3_value **), void (*xStep)(sqlite3_context *, int, sqlite3_value **), void (*xFinal)(sqlite3_context *))
     * }
     */
    public static int sqlite3_create_function16(MemorySegment db, MemorySegment zFunctionName, int nArg, int eTextRep, MemorySegment pApp, MemorySegment xFunc, MemorySegment xStep, MemorySegment xFinal) {
        var mh$ = sqlite3_create_function16.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_create_function16", db, zFunctionName, nArg, eTextRep, pApp, xFunc, xStep, xFinal);
            }
            return (int)mh$.invokeExact(db, zFunctionName, nArg, eTextRep, pApp, xFunc, xStep, xFinal);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_create_function_v2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT,
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_create_function_v2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_create_function_v2(sqlite3 *db, const char *zFunctionName, int nArg, int eTextRep, void *pApp, void (*xFunc)(sqlite3_context *, int, sqlite3_value **), void (*xStep)(sqlite3_context *, int, sqlite3_value **), void (*xFinal)(sqlite3_context *), void (*xDestroy)(void *))
     * }
     */
    public static FunctionDescriptor sqlite3_create_function_v2$descriptor() {
        return sqlite3_create_function_v2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_create_function_v2(sqlite3 *db, const char *zFunctionName, int nArg, int eTextRep, void *pApp, void (*xFunc)(sqlite3_context *, int, sqlite3_value **), void (*xStep)(sqlite3_context *, int, sqlite3_value **), void (*xFinal)(sqlite3_context *), void (*xDestroy)(void *))
     * }
     */
    public static MethodHandle sqlite3_create_function_v2$handle() {
        return sqlite3_create_function_v2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_create_function_v2(sqlite3 *db, const char *zFunctionName, int nArg, int eTextRep, void *pApp, void (*xFunc)(sqlite3_context *, int, sqlite3_value **), void (*xStep)(sqlite3_context *, int, sqlite3_value **), void (*xFinal)(sqlite3_context *), void (*xDestroy)(void *))
     * }
     */
    public static MemorySegment sqlite3_create_function_v2$address() {
        return sqlite3_create_function_v2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_create_function_v2(sqlite3 *db, const char *zFunctionName, int nArg, int eTextRep, void *pApp, void (*xFunc)(sqlite3_context *, int, sqlite3_value **), void (*xStep)(sqlite3_context *, int, sqlite3_value **), void (*xFinal)(sqlite3_context *), void (*xDestroy)(void *))
     * }
     */
    public static int sqlite3_create_function_v2(MemorySegment db, MemorySegment zFunctionName, int nArg, int eTextRep, MemorySegment pApp, MemorySegment xFunc, MemorySegment xStep, MemorySegment xFinal, MemorySegment xDestroy) {
        var mh$ = sqlite3_create_function_v2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_create_function_v2", db, zFunctionName, nArg, eTextRep, pApp, xFunc, xStep, xFinal, xDestroy);
            }
            return (int)mh$.invokeExact(db, zFunctionName, nArg, eTextRep, pApp, xFunc, xStep, xFinal, xDestroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_create_window_function {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT,
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_create_window_function");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_create_window_function(sqlite3 *db, const char *zFunctionName, int nArg, int eTextRep, void *pApp, void (*xStep)(sqlite3_context *, int, sqlite3_value **), void (*xFinal)(sqlite3_context *), void (*xValue)(sqlite3_context *), void (*xInverse)(sqlite3_context *, int, sqlite3_value **), void (*xDestroy)(void *))
     * }
     */
    public static FunctionDescriptor sqlite3_create_window_function$descriptor() {
        return sqlite3_create_window_function.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_create_window_function(sqlite3 *db, const char *zFunctionName, int nArg, int eTextRep, void *pApp, void (*xStep)(sqlite3_context *, int, sqlite3_value **), void (*xFinal)(sqlite3_context *), void (*xValue)(sqlite3_context *), void (*xInverse)(sqlite3_context *, int, sqlite3_value **), void (*xDestroy)(void *))
     * }
     */
    public static MethodHandle sqlite3_create_window_function$handle() {
        return sqlite3_create_window_function.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_create_window_function(sqlite3 *db, const char *zFunctionName, int nArg, int eTextRep, void *pApp, void (*xStep)(sqlite3_context *, int, sqlite3_value **), void (*xFinal)(sqlite3_context *), void (*xValue)(sqlite3_context *), void (*xInverse)(sqlite3_context *, int, sqlite3_value **), void (*xDestroy)(void *))
     * }
     */
    public static MemorySegment sqlite3_create_window_function$address() {
        return sqlite3_create_window_function.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_create_window_function(sqlite3 *db, const char *zFunctionName, int nArg, int eTextRep, void *pApp, void (*xStep)(sqlite3_context *, int, sqlite3_value **), void (*xFinal)(sqlite3_context *), void (*xValue)(sqlite3_context *), void (*xInverse)(sqlite3_context *, int, sqlite3_value **), void (*xDestroy)(void *))
     * }
     */
    public static int sqlite3_create_window_function(MemorySegment db, MemorySegment zFunctionName, int nArg, int eTextRep, MemorySegment pApp, MemorySegment xStep, MemorySegment xFinal, MemorySegment xValue, MemorySegment xInverse, MemorySegment xDestroy) {
        var mh$ = sqlite3_create_window_function.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_create_window_function", db, zFunctionName, nArg, eTextRep, pApp, xStep, xFinal, xValue, xInverse, xDestroy);
            }
            return (int)mh$.invokeExact(db, zFunctionName, nArg, eTextRep, pApp, xStep, xFinal, xValue, xInverse, xDestroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_aggregate_count {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_aggregate_count");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_aggregate_count(sqlite3_context *)
     * }
     */
    public static FunctionDescriptor sqlite3_aggregate_count$descriptor() {
        return sqlite3_aggregate_count.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_aggregate_count(sqlite3_context *)
     * }
     */
    public static MethodHandle sqlite3_aggregate_count$handle() {
        return sqlite3_aggregate_count.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_aggregate_count(sqlite3_context *)
     * }
     */
    public static MemorySegment sqlite3_aggregate_count$address() {
        return sqlite3_aggregate_count.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_aggregate_count(sqlite3_context *)
     * }
     */
    public static int sqlite3_aggregate_count(MemorySegment x0) {
        var mh$ = sqlite3_aggregate_count.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_aggregate_count", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_expired {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_expired");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_expired(sqlite3_stmt *)
     * }
     */
    public static FunctionDescriptor sqlite3_expired$descriptor() {
        return sqlite3_expired.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_expired(sqlite3_stmt *)
     * }
     */
    public static MethodHandle sqlite3_expired$handle() {
        return sqlite3_expired.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_expired(sqlite3_stmt *)
     * }
     */
    public static MemorySegment sqlite3_expired$address() {
        return sqlite3_expired.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_expired(sqlite3_stmt *)
     * }
     */
    public static int sqlite3_expired(MemorySegment x0) {
        var mh$ = sqlite3_expired.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_expired", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_transfer_bindings {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_transfer_bindings");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_transfer_bindings(sqlite3_stmt *, sqlite3_stmt *)
     * }
     */
    public static FunctionDescriptor sqlite3_transfer_bindings$descriptor() {
        return sqlite3_transfer_bindings.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_transfer_bindings(sqlite3_stmt *, sqlite3_stmt *)
     * }
     */
    public static MethodHandle sqlite3_transfer_bindings$handle() {
        return sqlite3_transfer_bindings.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_transfer_bindings(sqlite3_stmt *, sqlite3_stmt *)
     * }
     */
    public static MemorySegment sqlite3_transfer_bindings$address() {
        return sqlite3_transfer_bindings.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_transfer_bindings(sqlite3_stmt *, sqlite3_stmt *)
     * }
     */
    public static int sqlite3_transfer_bindings(MemorySegment x0, MemorySegment x1) {
        var mh$ = sqlite3_transfer_bindings.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_transfer_bindings", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_global_recover {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT    );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_global_recover");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_global_recover()
     * }
     */
    public static FunctionDescriptor sqlite3_global_recover$descriptor() {
        return sqlite3_global_recover.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_global_recover()
     * }
     */
    public static MethodHandle sqlite3_global_recover$handle() {
        return sqlite3_global_recover.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_global_recover()
     * }
     */
    public static MemorySegment sqlite3_global_recover$address() {
        return sqlite3_global_recover.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_global_recover()
     * }
     */
    public static int sqlite3_global_recover() {
        var mh$ = sqlite3_global_recover.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_global_recover");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_thread_cleanup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_thread_cleanup");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void sqlite3_thread_cleanup()
     * }
     */
    public static FunctionDescriptor sqlite3_thread_cleanup$descriptor() {
        return sqlite3_thread_cleanup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void sqlite3_thread_cleanup()
     * }
     */
    public static MethodHandle sqlite3_thread_cleanup$handle() {
        return sqlite3_thread_cleanup.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void sqlite3_thread_cleanup()
     * }
     */
    public static MemorySegment sqlite3_thread_cleanup$address() {
        return sqlite3_thread_cleanup.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void sqlite3_thread_cleanup()
     * }
     */
    public static void sqlite3_thread_cleanup() {
        var mh$ = sqlite3_thread_cleanup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_thread_cleanup");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_memory_alarm {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_memory_alarm");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_memory_alarm(void (*)(void *, sqlite3_int64, int), void *, sqlite3_int64)
     * }
     */
    public static FunctionDescriptor sqlite3_memory_alarm$descriptor() {
        return sqlite3_memory_alarm.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_memory_alarm(void (*)(void *, sqlite3_int64, int), void *, sqlite3_int64)
     * }
     */
    public static MethodHandle sqlite3_memory_alarm$handle() {
        return sqlite3_memory_alarm.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_memory_alarm(void (*)(void *, sqlite3_int64, int), void *, sqlite3_int64)
     * }
     */
    public static MemorySegment sqlite3_memory_alarm$address() {
        return sqlite3_memory_alarm.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_memory_alarm(void (*)(void *, sqlite3_int64, int), void *, sqlite3_int64)
     * }
     */
    public static int sqlite3_memory_alarm(MemorySegment x0, MemorySegment x1, long x2) {
        var mh$ = sqlite3_memory_alarm.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_memory_alarm", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_value_blob {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_value_blob");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const void *sqlite3_value_blob(sqlite3_value *)
     * }
     */
    public static FunctionDescriptor sqlite3_value_blob$descriptor() {
        return sqlite3_value_blob.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const void *sqlite3_value_blob(sqlite3_value *)
     * }
     */
    public static MethodHandle sqlite3_value_blob$handle() {
        return sqlite3_value_blob.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const void *sqlite3_value_blob(sqlite3_value *)
     * }
     */
    public static MemorySegment sqlite3_value_blob$address() {
        return sqlite3_value_blob.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const void *sqlite3_value_blob(sqlite3_value *)
     * }
     */
    public static MemorySegment sqlite3_value_blob(MemorySegment x0) {
        var mh$ = sqlite3_value_blob.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_value_blob", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_value_double {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_DOUBLE,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_value_double");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double sqlite3_value_double(sqlite3_value *)
     * }
     */
    public static FunctionDescriptor sqlite3_value_double$descriptor() {
        return sqlite3_value_double.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double sqlite3_value_double(sqlite3_value *)
     * }
     */
    public static MethodHandle sqlite3_value_double$handle() {
        return sqlite3_value_double.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double sqlite3_value_double(sqlite3_value *)
     * }
     */
    public static MemorySegment sqlite3_value_double$address() {
        return sqlite3_value_double.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double sqlite3_value_double(sqlite3_value *)
     * }
     */
    public static double sqlite3_value_double(MemorySegment x0) {
        var mh$ = sqlite3_value_double.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_value_double", x0);
            }
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_value_int {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_value_int");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_value_int(sqlite3_value *)
     * }
     */
    public static FunctionDescriptor sqlite3_value_int$descriptor() {
        return sqlite3_value_int.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_value_int(sqlite3_value *)
     * }
     */
    public static MethodHandle sqlite3_value_int$handle() {
        return sqlite3_value_int.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_value_int(sqlite3_value *)
     * }
     */
    public static MemorySegment sqlite3_value_int$address() {
        return sqlite3_value_int.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_value_int(sqlite3_value *)
     * }
     */
    public static int sqlite3_value_int(MemorySegment x0) {
        var mh$ = sqlite3_value_int.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_value_int", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_value_int64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_LONG_LONG,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_value_int64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * sqlite3_int64 sqlite3_value_int64(sqlite3_value *)
     * }
     */
    public static FunctionDescriptor sqlite3_value_int64$descriptor() {
        return sqlite3_value_int64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * sqlite3_int64 sqlite3_value_int64(sqlite3_value *)
     * }
     */
    public static MethodHandle sqlite3_value_int64$handle() {
        return sqlite3_value_int64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * sqlite3_int64 sqlite3_value_int64(sqlite3_value *)
     * }
     */
    public static MemorySegment sqlite3_value_int64$address() {
        return sqlite3_value_int64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * sqlite3_int64 sqlite3_value_int64(sqlite3_value *)
     * }
     */
    public static long sqlite3_value_int64(MemorySegment x0) {
        var mh$ = sqlite3_value_int64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_value_int64", x0);
            }
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_value_pointer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_value_pointer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *sqlite3_value_pointer(sqlite3_value *, const char *)
     * }
     */
    public static FunctionDescriptor sqlite3_value_pointer$descriptor() {
        return sqlite3_value_pointer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *sqlite3_value_pointer(sqlite3_value *, const char *)
     * }
     */
    public static MethodHandle sqlite3_value_pointer$handle() {
        return sqlite3_value_pointer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *sqlite3_value_pointer(sqlite3_value *, const char *)
     * }
     */
    public static MemorySegment sqlite3_value_pointer$address() {
        return sqlite3_value_pointer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *sqlite3_value_pointer(sqlite3_value *, const char *)
     * }
     */
    public static MemorySegment sqlite3_value_pointer(MemorySegment x0, MemorySegment x1) {
        var mh$ = sqlite3_value_pointer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_value_pointer", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_value_text {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_value_text");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const unsigned char *sqlite3_value_text(sqlite3_value *)
     * }
     */
    public static FunctionDescriptor sqlite3_value_text$descriptor() {
        return sqlite3_value_text.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const unsigned char *sqlite3_value_text(sqlite3_value *)
     * }
     */
    public static MethodHandle sqlite3_value_text$handle() {
        return sqlite3_value_text.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const unsigned char *sqlite3_value_text(sqlite3_value *)
     * }
     */
    public static MemorySegment sqlite3_value_text$address() {
        return sqlite3_value_text.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const unsigned char *sqlite3_value_text(sqlite3_value *)
     * }
     */
    public static MemorySegment sqlite3_value_text(MemorySegment x0) {
        var mh$ = sqlite3_value_text.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_value_text", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_value_text16 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_value_text16");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const void *sqlite3_value_text16(sqlite3_value *)
     * }
     */
    public static FunctionDescriptor sqlite3_value_text16$descriptor() {
        return sqlite3_value_text16.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const void *sqlite3_value_text16(sqlite3_value *)
     * }
     */
    public static MethodHandle sqlite3_value_text16$handle() {
        return sqlite3_value_text16.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const void *sqlite3_value_text16(sqlite3_value *)
     * }
     */
    public static MemorySegment sqlite3_value_text16$address() {
        return sqlite3_value_text16.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const void *sqlite3_value_text16(sqlite3_value *)
     * }
     */
    public static MemorySegment sqlite3_value_text16(MemorySegment x0) {
        var mh$ = sqlite3_value_text16.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_value_text16", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_value_text16le {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_value_text16le");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const void *sqlite3_value_text16le(sqlite3_value *)
     * }
     */
    public static FunctionDescriptor sqlite3_value_text16le$descriptor() {
        return sqlite3_value_text16le.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const void *sqlite3_value_text16le(sqlite3_value *)
     * }
     */
    public static MethodHandle sqlite3_value_text16le$handle() {
        return sqlite3_value_text16le.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const void *sqlite3_value_text16le(sqlite3_value *)
     * }
     */
    public static MemorySegment sqlite3_value_text16le$address() {
        return sqlite3_value_text16le.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const void *sqlite3_value_text16le(sqlite3_value *)
     * }
     */
    public static MemorySegment sqlite3_value_text16le(MemorySegment x0) {
        var mh$ = sqlite3_value_text16le.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_value_text16le", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_value_text16be {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_value_text16be");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const void *sqlite3_value_text16be(sqlite3_value *)
     * }
     */
    public static FunctionDescriptor sqlite3_value_text16be$descriptor() {
        return sqlite3_value_text16be.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const void *sqlite3_value_text16be(sqlite3_value *)
     * }
     */
    public static MethodHandle sqlite3_value_text16be$handle() {
        return sqlite3_value_text16be.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const void *sqlite3_value_text16be(sqlite3_value *)
     * }
     */
    public static MemorySegment sqlite3_value_text16be$address() {
        return sqlite3_value_text16be.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const void *sqlite3_value_text16be(sqlite3_value *)
     * }
     */
    public static MemorySegment sqlite3_value_text16be(MemorySegment x0) {
        var mh$ = sqlite3_value_text16be.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_value_text16be", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_value_bytes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_value_bytes");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_value_bytes(sqlite3_value *)
     * }
     */
    public static FunctionDescriptor sqlite3_value_bytes$descriptor() {
        return sqlite3_value_bytes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_value_bytes(sqlite3_value *)
     * }
     */
    public static MethodHandle sqlite3_value_bytes$handle() {
        return sqlite3_value_bytes.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_value_bytes(sqlite3_value *)
     * }
     */
    public static MemorySegment sqlite3_value_bytes$address() {
        return sqlite3_value_bytes.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_value_bytes(sqlite3_value *)
     * }
     */
    public static int sqlite3_value_bytes(MemorySegment x0) {
        var mh$ = sqlite3_value_bytes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_value_bytes", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_value_bytes16 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_value_bytes16");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_value_bytes16(sqlite3_value *)
     * }
     */
    public static FunctionDescriptor sqlite3_value_bytes16$descriptor() {
        return sqlite3_value_bytes16.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_value_bytes16(sqlite3_value *)
     * }
     */
    public static MethodHandle sqlite3_value_bytes16$handle() {
        return sqlite3_value_bytes16.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_value_bytes16(sqlite3_value *)
     * }
     */
    public static MemorySegment sqlite3_value_bytes16$address() {
        return sqlite3_value_bytes16.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_value_bytes16(sqlite3_value *)
     * }
     */
    public static int sqlite3_value_bytes16(MemorySegment x0) {
        var mh$ = sqlite3_value_bytes16.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_value_bytes16", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_value_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_value_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_value_type(sqlite3_value *)
     * }
     */
    public static FunctionDescriptor sqlite3_value_type$descriptor() {
        return sqlite3_value_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_value_type(sqlite3_value *)
     * }
     */
    public static MethodHandle sqlite3_value_type$handle() {
        return sqlite3_value_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_value_type(sqlite3_value *)
     * }
     */
    public static MemorySegment sqlite3_value_type$address() {
        return sqlite3_value_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_value_type(sqlite3_value *)
     * }
     */
    public static int sqlite3_value_type(MemorySegment x0) {
        var mh$ = sqlite3_value_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_value_type", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_value_numeric_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_value_numeric_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_value_numeric_type(sqlite3_value *)
     * }
     */
    public static FunctionDescriptor sqlite3_value_numeric_type$descriptor() {
        return sqlite3_value_numeric_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_value_numeric_type(sqlite3_value *)
     * }
     */
    public static MethodHandle sqlite3_value_numeric_type$handle() {
        return sqlite3_value_numeric_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_value_numeric_type(sqlite3_value *)
     * }
     */
    public static MemorySegment sqlite3_value_numeric_type$address() {
        return sqlite3_value_numeric_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_value_numeric_type(sqlite3_value *)
     * }
     */
    public static int sqlite3_value_numeric_type(MemorySegment x0) {
        var mh$ = sqlite3_value_numeric_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_value_numeric_type", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_value_nochange {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_value_nochange");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_value_nochange(sqlite3_value *)
     * }
     */
    public static FunctionDescriptor sqlite3_value_nochange$descriptor() {
        return sqlite3_value_nochange.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_value_nochange(sqlite3_value *)
     * }
     */
    public static MethodHandle sqlite3_value_nochange$handle() {
        return sqlite3_value_nochange.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_value_nochange(sqlite3_value *)
     * }
     */
    public static MemorySegment sqlite3_value_nochange$address() {
        return sqlite3_value_nochange.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_value_nochange(sqlite3_value *)
     * }
     */
    public static int sqlite3_value_nochange(MemorySegment x0) {
        var mh$ = sqlite3_value_nochange.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_value_nochange", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_value_frombind {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_value_frombind");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_value_frombind(sqlite3_value *)
     * }
     */
    public static FunctionDescriptor sqlite3_value_frombind$descriptor() {
        return sqlite3_value_frombind.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_value_frombind(sqlite3_value *)
     * }
     */
    public static MethodHandle sqlite3_value_frombind$handle() {
        return sqlite3_value_frombind.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_value_frombind(sqlite3_value *)
     * }
     */
    public static MemorySegment sqlite3_value_frombind$address() {
        return sqlite3_value_frombind.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_value_frombind(sqlite3_value *)
     * }
     */
    public static int sqlite3_value_frombind(MemorySegment x0) {
        var mh$ = sqlite3_value_frombind.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_value_frombind", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_value_encoding {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_value_encoding");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_value_encoding(sqlite3_value *)
     * }
     */
    public static FunctionDescriptor sqlite3_value_encoding$descriptor() {
        return sqlite3_value_encoding.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_value_encoding(sqlite3_value *)
     * }
     */
    public static MethodHandle sqlite3_value_encoding$handle() {
        return sqlite3_value_encoding.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_value_encoding(sqlite3_value *)
     * }
     */
    public static MemorySegment sqlite3_value_encoding$address() {
        return sqlite3_value_encoding.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_value_encoding(sqlite3_value *)
     * }
     */
    public static int sqlite3_value_encoding(MemorySegment x0) {
        var mh$ = sqlite3_value_encoding.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_value_encoding", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_value_subtype {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_value_subtype");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned int sqlite3_value_subtype(sqlite3_value *)
     * }
     */
    public static FunctionDescriptor sqlite3_value_subtype$descriptor() {
        return sqlite3_value_subtype.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned int sqlite3_value_subtype(sqlite3_value *)
     * }
     */
    public static MethodHandle sqlite3_value_subtype$handle() {
        return sqlite3_value_subtype.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned int sqlite3_value_subtype(sqlite3_value *)
     * }
     */
    public static MemorySegment sqlite3_value_subtype$address() {
        return sqlite3_value_subtype.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned int sqlite3_value_subtype(sqlite3_value *)
     * }
     */
    public static int sqlite3_value_subtype(MemorySegment x0) {
        var mh$ = sqlite3_value_subtype.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_value_subtype", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_value_dup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_value_dup");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * sqlite3_value *sqlite3_value_dup(const sqlite3_value *)
     * }
     */
    public static FunctionDescriptor sqlite3_value_dup$descriptor() {
        return sqlite3_value_dup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * sqlite3_value *sqlite3_value_dup(const sqlite3_value *)
     * }
     */
    public static MethodHandle sqlite3_value_dup$handle() {
        return sqlite3_value_dup.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * sqlite3_value *sqlite3_value_dup(const sqlite3_value *)
     * }
     */
    public static MemorySegment sqlite3_value_dup$address() {
        return sqlite3_value_dup.ADDR;
    }

    /**
     * {@snippet lang=c :
     * sqlite3_value *sqlite3_value_dup(const sqlite3_value *)
     * }
     */
    public static MemorySegment sqlite3_value_dup(MemorySegment x0) {
        var mh$ = sqlite3_value_dup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_value_dup", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_value_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_value_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void sqlite3_value_free(sqlite3_value *)
     * }
     */
    public static FunctionDescriptor sqlite3_value_free$descriptor() {
        return sqlite3_value_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void sqlite3_value_free(sqlite3_value *)
     * }
     */
    public static MethodHandle sqlite3_value_free$handle() {
        return sqlite3_value_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void sqlite3_value_free(sqlite3_value *)
     * }
     */
    public static MemorySegment sqlite3_value_free$address() {
        return sqlite3_value_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void sqlite3_value_free(sqlite3_value *)
     * }
     */
    public static void sqlite3_value_free(MemorySegment x0) {
        var mh$ = sqlite3_value_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_value_free", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_aggregate_context {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_aggregate_context");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *sqlite3_aggregate_context(sqlite3_context *, int nBytes)
     * }
     */
    public static FunctionDescriptor sqlite3_aggregate_context$descriptor() {
        return sqlite3_aggregate_context.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *sqlite3_aggregate_context(sqlite3_context *, int nBytes)
     * }
     */
    public static MethodHandle sqlite3_aggregate_context$handle() {
        return sqlite3_aggregate_context.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *sqlite3_aggregate_context(sqlite3_context *, int nBytes)
     * }
     */
    public static MemorySegment sqlite3_aggregate_context$address() {
        return sqlite3_aggregate_context.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *sqlite3_aggregate_context(sqlite3_context *, int nBytes)
     * }
     */
    public static MemorySegment sqlite3_aggregate_context(MemorySegment x0, int nBytes) {
        var mh$ = sqlite3_aggregate_context.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_aggregate_context", x0, nBytes);
            }
            return (MemorySegment)mh$.invokeExact(x0, nBytes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_user_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_user_data");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *sqlite3_user_data(sqlite3_context *)
     * }
     */
    public static FunctionDescriptor sqlite3_user_data$descriptor() {
        return sqlite3_user_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *sqlite3_user_data(sqlite3_context *)
     * }
     */
    public static MethodHandle sqlite3_user_data$handle() {
        return sqlite3_user_data.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *sqlite3_user_data(sqlite3_context *)
     * }
     */
    public static MemorySegment sqlite3_user_data$address() {
        return sqlite3_user_data.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *sqlite3_user_data(sqlite3_context *)
     * }
     */
    public static MemorySegment sqlite3_user_data(MemorySegment x0) {
        var mh$ = sqlite3_user_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_user_data", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_context_db_handle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_context_db_handle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * sqlite3 *sqlite3_context_db_handle(sqlite3_context *)
     * }
     */
    public static FunctionDescriptor sqlite3_context_db_handle$descriptor() {
        return sqlite3_context_db_handle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * sqlite3 *sqlite3_context_db_handle(sqlite3_context *)
     * }
     */
    public static MethodHandle sqlite3_context_db_handle$handle() {
        return sqlite3_context_db_handle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * sqlite3 *sqlite3_context_db_handle(sqlite3_context *)
     * }
     */
    public static MemorySegment sqlite3_context_db_handle$address() {
        return sqlite3_context_db_handle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * sqlite3 *sqlite3_context_db_handle(sqlite3_context *)
     * }
     */
    public static MemorySegment sqlite3_context_db_handle(MemorySegment x0) {
        var mh$ = sqlite3_context_db_handle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_context_db_handle", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_get_auxdata {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_get_auxdata");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *sqlite3_get_auxdata(sqlite3_context *, int N)
     * }
     */
    public static FunctionDescriptor sqlite3_get_auxdata$descriptor() {
        return sqlite3_get_auxdata.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *sqlite3_get_auxdata(sqlite3_context *, int N)
     * }
     */
    public static MethodHandle sqlite3_get_auxdata$handle() {
        return sqlite3_get_auxdata.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *sqlite3_get_auxdata(sqlite3_context *, int N)
     * }
     */
    public static MemorySegment sqlite3_get_auxdata$address() {
        return sqlite3_get_auxdata.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *sqlite3_get_auxdata(sqlite3_context *, int N)
     * }
     */
    public static MemorySegment sqlite3_get_auxdata(MemorySegment x0, int N) {
        var mh$ = sqlite3_get_auxdata.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_get_auxdata", x0, N);
            }
            return (MemorySegment)mh$.invokeExact(x0, N);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_set_auxdata {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_set_auxdata");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void sqlite3_set_auxdata(sqlite3_context *, int N, void *, void (*)(void *))
     * }
     */
    public static FunctionDescriptor sqlite3_set_auxdata$descriptor() {
        return sqlite3_set_auxdata.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void sqlite3_set_auxdata(sqlite3_context *, int N, void *, void (*)(void *))
     * }
     */
    public static MethodHandle sqlite3_set_auxdata$handle() {
        return sqlite3_set_auxdata.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void sqlite3_set_auxdata(sqlite3_context *, int N, void *, void (*)(void *))
     * }
     */
    public static MemorySegment sqlite3_set_auxdata$address() {
        return sqlite3_set_auxdata.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void sqlite3_set_auxdata(sqlite3_context *, int N, void *, void (*)(void *))
     * }
     */
    public static void sqlite3_set_auxdata(MemorySegment x0, int N, MemorySegment x2, MemorySegment x3) {
        var mh$ = sqlite3_set_auxdata.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_set_auxdata", x0, N, x2, x3);
            }
            mh$.invokeExact(x0, N, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_get_clientdata {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_get_clientdata");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *sqlite3_get_clientdata(sqlite3 *, const char *)
     * }
     */
    public static FunctionDescriptor sqlite3_get_clientdata$descriptor() {
        return sqlite3_get_clientdata.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *sqlite3_get_clientdata(sqlite3 *, const char *)
     * }
     */
    public static MethodHandle sqlite3_get_clientdata$handle() {
        return sqlite3_get_clientdata.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *sqlite3_get_clientdata(sqlite3 *, const char *)
     * }
     */
    public static MemorySegment sqlite3_get_clientdata$address() {
        return sqlite3_get_clientdata.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *sqlite3_get_clientdata(sqlite3 *, const char *)
     * }
     */
    public static MemorySegment sqlite3_get_clientdata(MemorySegment x0, MemorySegment x1) {
        var mh$ = sqlite3_get_clientdata.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_get_clientdata", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_set_clientdata {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_set_clientdata");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_set_clientdata(sqlite3 *, const char *, void *, void (*)(void *))
     * }
     */
    public static FunctionDescriptor sqlite3_set_clientdata$descriptor() {
        return sqlite3_set_clientdata.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_set_clientdata(sqlite3 *, const char *, void *, void (*)(void *))
     * }
     */
    public static MethodHandle sqlite3_set_clientdata$handle() {
        return sqlite3_set_clientdata.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_set_clientdata(sqlite3 *, const char *, void *, void (*)(void *))
     * }
     */
    public static MemorySegment sqlite3_set_clientdata$address() {
        return sqlite3_set_clientdata.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_set_clientdata(sqlite3 *, const char *, void *, void (*)(void *))
     * }
     */
    public static int sqlite3_set_clientdata(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = sqlite3_set_clientdata.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_set_clientdata", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_result_blob {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_result_blob");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void sqlite3_result_blob(sqlite3_context *, const void *, int, void (*)(void *))
     * }
     */
    public static FunctionDescriptor sqlite3_result_blob$descriptor() {
        return sqlite3_result_blob.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void sqlite3_result_blob(sqlite3_context *, const void *, int, void (*)(void *))
     * }
     */
    public static MethodHandle sqlite3_result_blob$handle() {
        return sqlite3_result_blob.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void sqlite3_result_blob(sqlite3_context *, const void *, int, void (*)(void *))
     * }
     */
    public static MemorySegment sqlite3_result_blob$address() {
        return sqlite3_result_blob.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void sqlite3_result_blob(sqlite3_context *, const void *, int, void (*)(void *))
     * }
     */
    public static void sqlite3_result_blob(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3) {
        var mh$ = sqlite3_result_blob.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_result_blob", x0, x1, x2, x3);
            }
            mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_result_blob64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_LONG_LONG,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_result_blob64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void sqlite3_result_blob64(sqlite3_context *, const void *, sqlite3_uint64, void (*)(void *))
     * }
     */
    public static FunctionDescriptor sqlite3_result_blob64$descriptor() {
        return sqlite3_result_blob64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void sqlite3_result_blob64(sqlite3_context *, const void *, sqlite3_uint64, void (*)(void *))
     * }
     */
    public static MethodHandle sqlite3_result_blob64$handle() {
        return sqlite3_result_blob64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void sqlite3_result_blob64(sqlite3_context *, const void *, sqlite3_uint64, void (*)(void *))
     * }
     */
    public static MemorySegment sqlite3_result_blob64$address() {
        return sqlite3_result_blob64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void sqlite3_result_blob64(sqlite3_context *, const void *, sqlite3_uint64, void (*)(void *))
     * }
     */
    public static void sqlite3_result_blob64(MemorySegment x0, MemorySegment x1, long x2, MemorySegment x3) {
        var mh$ = sqlite3_result_blob64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_result_blob64", x0, x1, x2, x3);
            }
            mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_result_double {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_result_double");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void sqlite3_result_double(sqlite3_context *, double)
     * }
     */
    public static FunctionDescriptor sqlite3_result_double$descriptor() {
        return sqlite3_result_double.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void sqlite3_result_double(sqlite3_context *, double)
     * }
     */
    public static MethodHandle sqlite3_result_double$handle() {
        return sqlite3_result_double.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void sqlite3_result_double(sqlite3_context *, double)
     * }
     */
    public static MemorySegment sqlite3_result_double$address() {
        return sqlite3_result_double.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void sqlite3_result_double(sqlite3_context *, double)
     * }
     */
    public static void sqlite3_result_double(MemorySegment x0, double x1) {
        var mh$ = sqlite3_result_double.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_result_double", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_result_error {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_result_error");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void sqlite3_result_error(sqlite3_context *, const char *, int)
     * }
     */
    public static FunctionDescriptor sqlite3_result_error$descriptor() {
        return sqlite3_result_error.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void sqlite3_result_error(sqlite3_context *, const char *, int)
     * }
     */
    public static MethodHandle sqlite3_result_error$handle() {
        return sqlite3_result_error.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void sqlite3_result_error(sqlite3_context *, const char *, int)
     * }
     */
    public static MemorySegment sqlite3_result_error$address() {
        return sqlite3_result_error.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void sqlite3_result_error(sqlite3_context *, const char *, int)
     * }
     */
    public static void sqlite3_result_error(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = sqlite3_result_error.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_result_error", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_result_error16 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_result_error16");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void sqlite3_result_error16(sqlite3_context *, const void *, int)
     * }
     */
    public static FunctionDescriptor sqlite3_result_error16$descriptor() {
        return sqlite3_result_error16.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void sqlite3_result_error16(sqlite3_context *, const void *, int)
     * }
     */
    public static MethodHandle sqlite3_result_error16$handle() {
        return sqlite3_result_error16.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void sqlite3_result_error16(sqlite3_context *, const void *, int)
     * }
     */
    public static MemorySegment sqlite3_result_error16$address() {
        return sqlite3_result_error16.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void sqlite3_result_error16(sqlite3_context *, const void *, int)
     * }
     */
    public static void sqlite3_result_error16(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = sqlite3_result_error16.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_result_error16", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_result_error_toobig {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_result_error_toobig");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void sqlite3_result_error_toobig(sqlite3_context *)
     * }
     */
    public static FunctionDescriptor sqlite3_result_error_toobig$descriptor() {
        return sqlite3_result_error_toobig.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void sqlite3_result_error_toobig(sqlite3_context *)
     * }
     */
    public static MethodHandle sqlite3_result_error_toobig$handle() {
        return sqlite3_result_error_toobig.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void sqlite3_result_error_toobig(sqlite3_context *)
     * }
     */
    public static MemorySegment sqlite3_result_error_toobig$address() {
        return sqlite3_result_error_toobig.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void sqlite3_result_error_toobig(sqlite3_context *)
     * }
     */
    public static void sqlite3_result_error_toobig(MemorySegment x0) {
        var mh$ = sqlite3_result_error_toobig.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_result_error_toobig", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_result_error_nomem {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_result_error_nomem");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void sqlite3_result_error_nomem(sqlite3_context *)
     * }
     */
    public static FunctionDescriptor sqlite3_result_error_nomem$descriptor() {
        return sqlite3_result_error_nomem.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void sqlite3_result_error_nomem(sqlite3_context *)
     * }
     */
    public static MethodHandle sqlite3_result_error_nomem$handle() {
        return sqlite3_result_error_nomem.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void sqlite3_result_error_nomem(sqlite3_context *)
     * }
     */
    public static MemorySegment sqlite3_result_error_nomem$address() {
        return sqlite3_result_error_nomem.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void sqlite3_result_error_nomem(sqlite3_context *)
     * }
     */
    public static void sqlite3_result_error_nomem(MemorySegment x0) {
        var mh$ = sqlite3_result_error_nomem.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_result_error_nomem", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_result_error_code {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_result_error_code");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void sqlite3_result_error_code(sqlite3_context *, int)
     * }
     */
    public static FunctionDescriptor sqlite3_result_error_code$descriptor() {
        return sqlite3_result_error_code.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void sqlite3_result_error_code(sqlite3_context *, int)
     * }
     */
    public static MethodHandle sqlite3_result_error_code$handle() {
        return sqlite3_result_error_code.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void sqlite3_result_error_code(sqlite3_context *, int)
     * }
     */
    public static MemorySegment sqlite3_result_error_code$address() {
        return sqlite3_result_error_code.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void sqlite3_result_error_code(sqlite3_context *, int)
     * }
     */
    public static void sqlite3_result_error_code(MemorySegment x0, int x1) {
        var mh$ = sqlite3_result_error_code.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_result_error_code", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_result_int {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_result_int");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void sqlite3_result_int(sqlite3_context *, int)
     * }
     */
    public static FunctionDescriptor sqlite3_result_int$descriptor() {
        return sqlite3_result_int.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void sqlite3_result_int(sqlite3_context *, int)
     * }
     */
    public static MethodHandle sqlite3_result_int$handle() {
        return sqlite3_result_int.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void sqlite3_result_int(sqlite3_context *, int)
     * }
     */
    public static MemorySegment sqlite3_result_int$address() {
        return sqlite3_result_int.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void sqlite3_result_int(sqlite3_context *, int)
     * }
     */
    public static void sqlite3_result_int(MemorySegment x0, int x1) {
        var mh$ = sqlite3_result_int.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_result_int", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_result_int64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_result_int64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void sqlite3_result_int64(sqlite3_context *, sqlite3_int64)
     * }
     */
    public static FunctionDescriptor sqlite3_result_int64$descriptor() {
        return sqlite3_result_int64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void sqlite3_result_int64(sqlite3_context *, sqlite3_int64)
     * }
     */
    public static MethodHandle sqlite3_result_int64$handle() {
        return sqlite3_result_int64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void sqlite3_result_int64(sqlite3_context *, sqlite3_int64)
     * }
     */
    public static MemorySegment sqlite3_result_int64$address() {
        return sqlite3_result_int64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void sqlite3_result_int64(sqlite3_context *, sqlite3_int64)
     * }
     */
    public static void sqlite3_result_int64(MemorySegment x0, long x1) {
        var mh$ = sqlite3_result_int64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_result_int64", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_result_null {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_result_null");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void sqlite3_result_null(sqlite3_context *)
     * }
     */
    public static FunctionDescriptor sqlite3_result_null$descriptor() {
        return sqlite3_result_null.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void sqlite3_result_null(sqlite3_context *)
     * }
     */
    public static MethodHandle sqlite3_result_null$handle() {
        return sqlite3_result_null.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void sqlite3_result_null(sqlite3_context *)
     * }
     */
    public static MemorySegment sqlite3_result_null$address() {
        return sqlite3_result_null.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void sqlite3_result_null(sqlite3_context *)
     * }
     */
    public static void sqlite3_result_null(MemorySegment x0) {
        var mh$ = sqlite3_result_null.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_result_null", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_result_text {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_result_text");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void sqlite3_result_text(sqlite3_context *, const char *, int, void (*)(void *))
     * }
     */
    public static FunctionDescriptor sqlite3_result_text$descriptor() {
        return sqlite3_result_text.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void sqlite3_result_text(sqlite3_context *, const char *, int, void (*)(void *))
     * }
     */
    public static MethodHandle sqlite3_result_text$handle() {
        return sqlite3_result_text.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void sqlite3_result_text(sqlite3_context *, const char *, int, void (*)(void *))
     * }
     */
    public static MemorySegment sqlite3_result_text$address() {
        return sqlite3_result_text.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void sqlite3_result_text(sqlite3_context *, const char *, int, void (*)(void *))
     * }
     */
    public static void sqlite3_result_text(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3) {
        var mh$ = sqlite3_result_text.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_result_text", x0, x1, x2, x3);
            }
            mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_result_text64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_LONG_LONG,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_CHAR
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_result_text64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void sqlite3_result_text64(sqlite3_context *, const char *, sqlite3_uint64, void (*)(void *), unsigned char encoding)
     * }
     */
    public static FunctionDescriptor sqlite3_result_text64$descriptor() {
        return sqlite3_result_text64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void sqlite3_result_text64(sqlite3_context *, const char *, sqlite3_uint64, void (*)(void *), unsigned char encoding)
     * }
     */
    public static MethodHandle sqlite3_result_text64$handle() {
        return sqlite3_result_text64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void sqlite3_result_text64(sqlite3_context *, const char *, sqlite3_uint64, void (*)(void *), unsigned char encoding)
     * }
     */
    public static MemorySegment sqlite3_result_text64$address() {
        return sqlite3_result_text64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void sqlite3_result_text64(sqlite3_context *, const char *, sqlite3_uint64, void (*)(void *), unsigned char encoding)
     * }
     */
    public static void sqlite3_result_text64(MemorySegment x0, MemorySegment x1, long x2, MemorySegment x3, byte encoding) {
        var mh$ = sqlite3_result_text64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_result_text64", x0, x1, x2, x3, encoding);
            }
            mh$.invokeExact(x0, x1, x2, x3, encoding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_result_text16 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_result_text16");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void sqlite3_result_text16(sqlite3_context *, const void *, int, void (*)(void *))
     * }
     */
    public static FunctionDescriptor sqlite3_result_text16$descriptor() {
        return sqlite3_result_text16.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void sqlite3_result_text16(sqlite3_context *, const void *, int, void (*)(void *))
     * }
     */
    public static MethodHandle sqlite3_result_text16$handle() {
        return sqlite3_result_text16.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void sqlite3_result_text16(sqlite3_context *, const void *, int, void (*)(void *))
     * }
     */
    public static MemorySegment sqlite3_result_text16$address() {
        return sqlite3_result_text16.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void sqlite3_result_text16(sqlite3_context *, const void *, int, void (*)(void *))
     * }
     */
    public static void sqlite3_result_text16(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3) {
        var mh$ = sqlite3_result_text16.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_result_text16", x0, x1, x2, x3);
            }
            mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_result_text16le {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_result_text16le");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void sqlite3_result_text16le(sqlite3_context *, const void *, int, void (*)(void *))
     * }
     */
    public static FunctionDescriptor sqlite3_result_text16le$descriptor() {
        return sqlite3_result_text16le.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void sqlite3_result_text16le(sqlite3_context *, const void *, int, void (*)(void *))
     * }
     */
    public static MethodHandle sqlite3_result_text16le$handle() {
        return sqlite3_result_text16le.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void sqlite3_result_text16le(sqlite3_context *, const void *, int, void (*)(void *))
     * }
     */
    public static MemorySegment sqlite3_result_text16le$address() {
        return sqlite3_result_text16le.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void sqlite3_result_text16le(sqlite3_context *, const void *, int, void (*)(void *))
     * }
     */
    public static void sqlite3_result_text16le(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3) {
        var mh$ = sqlite3_result_text16le.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_result_text16le", x0, x1, x2, x3);
            }
            mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_result_text16be {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_result_text16be");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void sqlite3_result_text16be(sqlite3_context *, const void *, int, void (*)(void *))
     * }
     */
    public static FunctionDescriptor sqlite3_result_text16be$descriptor() {
        return sqlite3_result_text16be.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void sqlite3_result_text16be(sqlite3_context *, const void *, int, void (*)(void *))
     * }
     */
    public static MethodHandle sqlite3_result_text16be$handle() {
        return sqlite3_result_text16be.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void sqlite3_result_text16be(sqlite3_context *, const void *, int, void (*)(void *))
     * }
     */
    public static MemorySegment sqlite3_result_text16be$address() {
        return sqlite3_result_text16be.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void sqlite3_result_text16be(sqlite3_context *, const void *, int, void (*)(void *))
     * }
     */
    public static void sqlite3_result_text16be(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3) {
        var mh$ = sqlite3_result_text16be.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_result_text16be", x0, x1, x2, x3);
            }
            mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_result_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_result_value");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void sqlite3_result_value(sqlite3_context *, sqlite3_value *)
     * }
     */
    public static FunctionDescriptor sqlite3_result_value$descriptor() {
        return sqlite3_result_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void sqlite3_result_value(sqlite3_context *, sqlite3_value *)
     * }
     */
    public static MethodHandle sqlite3_result_value$handle() {
        return sqlite3_result_value.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void sqlite3_result_value(sqlite3_context *, sqlite3_value *)
     * }
     */
    public static MemorySegment sqlite3_result_value$address() {
        return sqlite3_result_value.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void sqlite3_result_value(sqlite3_context *, sqlite3_value *)
     * }
     */
    public static void sqlite3_result_value(MemorySegment x0, MemorySegment x1) {
        var mh$ = sqlite3_result_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_result_value", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_result_pointer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_result_pointer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void sqlite3_result_pointer(sqlite3_context *, void *, const char *, void (*)(void *))
     * }
     */
    public static FunctionDescriptor sqlite3_result_pointer$descriptor() {
        return sqlite3_result_pointer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void sqlite3_result_pointer(sqlite3_context *, void *, const char *, void (*)(void *))
     * }
     */
    public static MethodHandle sqlite3_result_pointer$handle() {
        return sqlite3_result_pointer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void sqlite3_result_pointer(sqlite3_context *, void *, const char *, void (*)(void *))
     * }
     */
    public static MemorySegment sqlite3_result_pointer$address() {
        return sqlite3_result_pointer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void sqlite3_result_pointer(sqlite3_context *, void *, const char *, void (*)(void *))
     * }
     */
    public static void sqlite3_result_pointer(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = sqlite3_result_pointer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_result_pointer", x0, x1, x2, x3);
            }
            mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_result_zeroblob {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_result_zeroblob");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void sqlite3_result_zeroblob(sqlite3_context *, int n)
     * }
     */
    public static FunctionDescriptor sqlite3_result_zeroblob$descriptor() {
        return sqlite3_result_zeroblob.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void sqlite3_result_zeroblob(sqlite3_context *, int n)
     * }
     */
    public static MethodHandle sqlite3_result_zeroblob$handle() {
        return sqlite3_result_zeroblob.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void sqlite3_result_zeroblob(sqlite3_context *, int n)
     * }
     */
    public static MemorySegment sqlite3_result_zeroblob$address() {
        return sqlite3_result_zeroblob.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void sqlite3_result_zeroblob(sqlite3_context *, int n)
     * }
     */
    public static void sqlite3_result_zeroblob(MemorySegment x0, int n) {
        var mh$ = sqlite3_result_zeroblob.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_result_zeroblob", x0, n);
            }
            mh$.invokeExact(x0, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_result_zeroblob64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_result_zeroblob64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_result_zeroblob64(sqlite3_context *, sqlite3_uint64 n)
     * }
     */
    public static FunctionDescriptor sqlite3_result_zeroblob64$descriptor() {
        return sqlite3_result_zeroblob64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_result_zeroblob64(sqlite3_context *, sqlite3_uint64 n)
     * }
     */
    public static MethodHandle sqlite3_result_zeroblob64$handle() {
        return sqlite3_result_zeroblob64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_result_zeroblob64(sqlite3_context *, sqlite3_uint64 n)
     * }
     */
    public static MemorySegment sqlite3_result_zeroblob64$address() {
        return sqlite3_result_zeroblob64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_result_zeroblob64(sqlite3_context *, sqlite3_uint64 n)
     * }
     */
    public static int sqlite3_result_zeroblob64(MemorySegment x0, long n) {
        var mh$ = sqlite3_result_zeroblob64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_result_zeroblob64", x0, n);
            }
            return (int)mh$.invokeExact(x0, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_result_subtype {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_result_subtype");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void sqlite3_result_subtype(sqlite3_context *, unsigned int)
     * }
     */
    public static FunctionDescriptor sqlite3_result_subtype$descriptor() {
        return sqlite3_result_subtype.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void sqlite3_result_subtype(sqlite3_context *, unsigned int)
     * }
     */
    public static MethodHandle sqlite3_result_subtype$handle() {
        return sqlite3_result_subtype.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void sqlite3_result_subtype(sqlite3_context *, unsigned int)
     * }
     */
    public static MemorySegment sqlite3_result_subtype$address() {
        return sqlite3_result_subtype.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void sqlite3_result_subtype(sqlite3_context *, unsigned int)
     * }
     */
    public static void sqlite3_result_subtype(MemorySegment x0, int x1) {
        var mh$ = sqlite3_result_subtype.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_result_subtype", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_create_collation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_create_collation");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_create_collation(sqlite3 *, const char *zName, int eTextRep, void *pArg, int (*xCompare)(void *, int, const void *, int, const void *))
     * }
     */
    public static FunctionDescriptor sqlite3_create_collation$descriptor() {
        return sqlite3_create_collation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_create_collation(sqlite3 *, const char *zName, int eTextRep, void *pArg, int (*xCompare)(void *, int, const void *, int, const void *))
     * }
     */
    public static MethodHandle sqlite3_create_collation$handle() {
        return sqlite3_create_collation.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_create_collation(sqlite3 *, const char *zName, int eTextRep, void *pArg, int (*xCompare)(void *, int, const void *, int, const void *))
     * }
     */
    public static MemorySegment sqlite3_create_collation$address() {
        return sqlite3_create_collation.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_create_collation(sqlite3 *, const char *zName, int eTextRep, void *pArg, int (*xCompare)(void *, int, const void *, int, const void *))
     * }
     */
    public static int sqlite3_create_collation(MemorySegment x0, MemorySegment zName, int eTextRep, MemorySegment pArg, MemorySegment xCompare) {
        var mh$ = sqlite3_create_collation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_create_collation", x0, zName, eTextRep, pArg, xCompare);
            }
            return (int)mh$.invokeExact(x0, zName, eTextRep, pArg, xCompare);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_create_collation_v2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_create_collation_v2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_create_collation_v2(sqlite3 *, const char *zName, int eTextRep, void *pArg, int (*xCompare)(void *, int, const void *, int, const void *), void (*xDestroy)(void *))
     * }
     */
    public static FunctionDescriptor sqlite3_create_collation_v2$descriptor() {
        return sqlite3_create_collation_v2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_create_collation_v2(sqlite3 *, const char *zName, int eTextRep, void *pArg, int (*xCompare)(void *, int, const void *, int, const void *), void (*xDestroy)(void *))
     * }
     */
    public static MethodHandle sqlite3_create_collation_v2$handle() {
        return sqlite3_create_collation_v2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_create_collation_v2(sqlite3 *, const char *zName, int eTextRep, void *pArg, int (*xCompare)(void *, int, const void *, int, const void *), void (*xDestroy)(void *))
     * }
     */
    public static MemorySegment sqlite3_create_collation_v2$address() {
        return sqlite3_create_collation_v2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_create_collation_v2(sqlite3 *, const char *zName, int eTextRep, void *pArg, int (*xCompare)(void *, int, const void *, int, const void *), void (*xDestroy)(void *))
     * }
     */
    public static int sqlite3_create_collation_v2(MemorySegment x0, MemorySegment zName, int eTextRep, MemorySegment pArg, MemorySegment xCompare, MemorySegment xDestroy) {
        var mh$ = sqlite3_create_collation_v2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_create_collation_v2", x0, zName, eTextRep, pArg, xCompare, xDestroy);
            }
            return (int)mh$.invokeExact(x0, zName, eTextRep, pArg, xCompare, xDestroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_create_collation16 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_create_collation16");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_create_collation16(sqlite3 *, const void *zName, int eTextRep, void *pArg, int (*xCompare)(void *, int, const void *, int, const void *))
     * }
     */
    public static FunctionDescriptor sqlite3_create_collation16$descriptor() {
        return sqlite3_create_collation16.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_create_collation16(sqlite3 *, const void *zName, int eTextRep, void *pArg, int (*xCompare)(void *, int, const void *, int, const void *))
     * }
     */
    public static MethodHandle sqlite3_create_collation16$handle() {
        return sqlite3_create_collation16.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_create_collation16(sqlite3 *, const void *zName, int eTextRep, void *pArg, int (*xCompare)(void *, int, const void *, int, const void *))
     * }
     */
    public static MemorySegment sqlite3_create_collation16$address() {
        return sqlite3_create_collation16.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_create_collation16(sqlite3 *, const void *zName, int eTextRep, void *pArg, int (*xCompare)(void *, int, const void *, int, const void *))
     * }
     */
    public static int sqlite3_create_collation16(MemorySegment x0, MemorySegment zName, int eTextRep, MemorySegment pArg, MemorySegment xCompare) {
        var mh$ = sqlite3_create_collation16.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_create_collation16", x0, zName, eTextRep, pArg, xCompare);
            }
            return (int)mh$.invokeExact(x0, zName, eTextRep, pArg, xCompare);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_collation_needed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_collation_needed");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_collation_needed(sqlite3 *, void *, void (*)(void *, sqlite3 *, int, const char *))
     * }
     */
    public static FunctionDescriptor sqlite3_collation_needed$descriptor() {
        return sqlite3_collation_needed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_collation_needed(sqlite3 *, void *, void (*)(void *, sqlite3 *, int, const char *))
     * }
     */
    public static MethodHandle sqlite3_collation_needed$handle() {
        return sqlite3_collation_needed.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_collation_needed(sqlite3 *, void *, void (*)(void *, sqlite3 *, int, const char *))
     * }
     */
    public static MemorySegment sqlite3_collation_needed$address() {
        return sqlite3_collation_needed.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_collation_needed(sqlite3 *, void *, void (*)(void *, sqlite3 *, int, const char *))
     * }
     */
    public static int sqlite3_collation_needed(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = sqlite3_collation_needed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_collation_needed", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_collation_needed16 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_collation_needed16");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_collation_needed16(sqlite3 *, void *, void (*)(void *, sqlite3 *, int, const void *))
     * }
     */
    public static FunctionDescriptor sqlite3_collation_needed16$descriptor() {
        return sqlite3_collation_needed16.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_collation_needed16(sqlite3 *, void *, void (*)(void *, sqlite3 *, int, const void *))
     * }
     */
    public static MethodHandle sqlite3_collation_needed16$handle() {
        return sqlite3_collation_needed16.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_collation_needed16(sqlite3 *, void *, void (*)(void *, sqlite3 *, int, const void *))
     * }
     */
    public static MemorySegment sqlite3_collation_needed16$address() {
        return sqlite3_collation_needed16.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_collation_needed16(sqlite3 *, void *, void (*)(void *, sqlite3 *, int, const void *))
     * }
     */
    public static int sqlite3_collation_needed16(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = sqlite3_collation_needed16.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_collation_needed16", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_sleep {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_INT
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_sleep");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_sleep(int)
     * }
     */
    public static FunctionDescriptor sqlite3_sleep$descriptor() {
        return sqlite3_sleep.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_sleep(int)
     * }
     */
    public static MethodHandle sqlite3_sleep$handle() {
        return sqlite3_sleep.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_sleep(int)
     * }
     */
    public static MemorySegment sqlite3_sleep$address() {
        return sqlite3_sleep.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_sleep(int)
     * }
     */
    public static int sqlite3_sleep(int x0) {
        var mh$ = sqlite3_sleep.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_sleep", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_temp_directory$constants {
        public static final AddressLayout LAYOUT = sqlite3_h.C_POINTER;
        public static final MemorySegment SEGMENT = sqlite3_h.findOrThrow("sqlite3_temp_directory").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern char *sqlite3_temp_directory
     * }
     */
    public static AddressLayout sqlite3_temp_directory$layout() {
        return sqlite3_temp_directory$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern char *sqlite3_temp_directory
     * }
     */
    public static MemorySegment sqlite3_temp_directory$segment() {
        return sqlite3_temp_directory$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern char *sqlite3_temp_directory
     * }
     */
    public static MemorySegment sqlite3_temp_directory() {
        return sqlite3_temp_directory$constants.SEGMENT.get(sqlite3_temp_directory$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern char *sqlite3_temp_directory
     * }
     */
    public static void sqlite3_temp_directory(MemorySegment varValue) {
        sqlite3_temp_directory$constants.SEGMENT.set(sqlite3_temp_directory$constants.LAYOUT, 0L, varValue);
    }

    private static class sqlite3_data_directory$constants {
        public static final AddressLayout LAYOUT = sqlite3_h.C_POINTER;
        public static final MemorySegment SEGMENT = sqlite3_h.findOrThrow("sqlite3_data_directory").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern char *sqlite3_data_directory
     * }
     */
    public static AddressLayout sqlite3_data_directory$layout() {
        return sqlite3_data_directory$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern char *sqlite3_data_directory
     * }
     */
    public static MemorySegment sqlite3_data_directory$segment() {
        return sqlite3_data_directory$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern char *sqlite3_data_directory
     * }
     */
    public static MemorySegment sqlite3_data_directory() {
        return sqlite3_data_directory$constants.SEGMENT.get(sqlite3_data_directory$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern char *sqlite3_data_directory
     * }
     */
    public static void sqlite3_data_directory(MemorySegment varValue) {
        sqlite3_data_directory$constants.SEGMENT.set(sqlite3_data_directory$constants.LAYOUT, 0L, varValue);
    }

    private static class sqlite3_win32_set_directory {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_LONG,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_win32_set_directory");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_win32_set_directory(unsigned long type, void *zValue)
     * }
     */
    public static FunctionDescriptor sqlite3_win32_set_directory$descriptor() {
        return sqlite3_win32_set_directory.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_win32_set_directory(unsigned long type, void *zValue)
     * }
     */
    public static MethodHandle sqlite3_win32_set_directory$handle() {
        return sqlite3_win32_set_directory.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_win32_set_directory(unsigned long type, void *zValue)
     * }
     */
    public static MemorySegment sqlite3_win32_set_directory$address() {
        return sqlite3_win32_set_directory.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_win32_set_directory(unsigned long type, void *zValue)
     * }
     */
    public static int sqlite3_win32_set_directory(long type, MemorySegment zValue) {
        var mh$ = sqlite3_win32_set_directory.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_win32_set_directory", type, zValue);
            }
            return (int)mh$.invokeExact(type, zValue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_win32_set_directory8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_LONG,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_win32_set_directory8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_win32_set_directory8(unsigned long type, const char *zValue)
     * }
     */
    public static FunctionDescriptor sqlite3_win32_set_directory8$descriptor() {
        return sqlite3_win32_set_directory8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_win32_set_directory8(unsigned long type, const char *zValue)
     * }
     */
    public static MethodHandle sqlite3_win32_set_directory8$handle() {
        return sqlite3_win32_set_directory8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_win32_set_directory8(unsigned long type, const char *zValue)
     * }
     */
    public static MemorySegment sqlite3_win32_set_directory8$address() {
        return sqlite3_win32_set_directory8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_win32_set_directory8(unsigned long type, const char *zValue)
     * }
     */
    public static int sqlite3_win32_set_directory8(long type, MemorySegment zValue) {
        var mh$ = sqlite3_win32_set_directory8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_win32_set_directory8", type, zValue);
            }
            return (int)mh$.invokeExact(type, zValue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_win32_set_directory16 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_LONG,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_win32_set_directory16");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_win32_set_directory16(unsigned long type, const void *zValue)
     * }
     */
    public static FunctionDescriptor sqlite3_win32_set_directory16$descriptor() {
        return sqlite3_win32_set_directory16.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_win32_set_directory16(unsigned long type, const void *zValue)
     * }
     */
    public static MethodHandle sqlite3_win32_set_directory16$handle() {
        return sqlite3_win32_set_directory16.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_win32_set_directory16(unsigned long type, const void *zValue)
     * }
     */
    public static MemorySegment sqlite3_win32_set_directory16$address() {
        return sqlite3_win32_set_directory16.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_win32_set_directory16(unsigned long type, const void *zValue)
     * }
     */
    public static int sqlite3_win32_set_directory16(long type, MemorySegment zValue) {
        var mh$ = sqlite3_win32_set_directory16.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_win32_set_directory16", type, zValue);
            }
            return (int)mh$.invokeExact(type, zValue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_get_autocommit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_get_autocommit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_get_autocommit(sqlite3 *)
     * }
     */
    public static FunctionDescriptor sqlite3_get_autocommit$descriptor() {
        return sqlite3_get_autocommit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_get_autocommit(sqlite3 *)
     * }
     */
    public static MethodHandle sqlite3_get_autocommit$handle() {
        return sqlite3_get_autocommit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_get_autocommit(sqlite3 *)
     * }
     */
    public static MemorySegment sqlite3_get_autocommit$address() {
        return sqlite3_get_autocommit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_get_autocommit(sqlite3 *)
     * }
     */
    public static int sqlite3_get_autocommit(MemorySegment x0) {
        var mh$ = sqlite3_get_autocommit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_get_autocommit", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_db_handle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_db_handle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * sqlite3 *sqlite3_db_handle(sqlite3_stmt *)
     * }
     */
    public static FunctionDescriptor sqlite3_db_handle$descriptor() {
        return sqlite3_db_handle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * sqlite3 *sqlite3_db_handle(sqlite3_stmt *)
     * }
     */
    public static MethodHandle sqlite3_db_handle$handle() {
        return sqlite3_db_handle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * sqlite3 *sqlite3_db_handle(sqlite3_stmt *)
     * }
     */
    public static MemorySegment sqlite3_db_handle$address() {
        return sqlite3_db_handle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * sqlite3 *sqlite3_db_handle(sqlite3_stmt *)
     * }
     */
    public static MemorySegment sqlite3_db_handle(MemorySegment x0) {
        var mh$ = sqlite3_db_handle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_db_handle", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_db_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_db_name");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *sqlite3_db_name(sqlite3 *db, int N)
     * }
     */
    public static FunctionDescriptor sqlite3_db_name$descriptor() {
        return sqlite3_db_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *sqlite3_db_name(sqlite3 *db, int N)
     * }
     */
    public static MethodHandle sqlite3_db_name$handle() {
        return sqlite3_db_name.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const char *sqlite3_db_name(sqlite3 *db, int N)
     * }
     */
    public static MemorySegment sqlite3_db_name$address() {
        return sqlite3_db_name.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const char *sqlite3_db_name(sqlite3 *db, int N)
     * }
     */
    public static MemorySegment sqlite3_db_name(MemorySegment db, int N) {
        var mh$ = sqlite3_db_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_db_name", db, N);
            }
            return (MemorySegment)mh$.invokeExact(db, N);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_db_filename {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_db_filename");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * sqlite3_filename sqlite3_db_filename(sqlite3 *db, const char *zDbName)
     * }
     */
    public static FunctionDescriptor sqlite3_db_filename$descriptor() {
        return sqlite3_db_filename.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * sqlite3_filename sqlite3_db_filename(sqlite3 *db, const char *zDbName)
     * }
     */
    public static MethodHandle sqlite3_db_filename$handle() {
        return sqlite3_db_filename.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * sqlite3_filename sqlite3_db_filename(sqlite3 *db, const char *zDbName)
     * }
     */
    public static MemorySegment sqlite3_db_filename$address() {
        return sqlite3_db_filename.ADDR;
    }

    /**
     * {@snippet lang=c :
     * sqlite3_filename sqlite3_db_filename(sqlite3 *db, const char *zDbName)
     * }
     */
    public static MemorySegment sqlite3_db_filename(MemorySegment db, MemorySegment zDbName) {
        var mh$ = sqlite3_db_filename.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_db_filename", db, zDbName);
            }
            return (MemorySegment)mh$.invokeExact(db, zDbName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_db_readonly {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_db_readonly");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_db_readonly(sqlite3 *db, const char *zDbName)
     * }
     */
    public static FunctionDescriptor sqlite3_db_readonly$descriptor() {
        return sqlite3_db_readonly.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_db_readonly(sqlite3 *db, const char *zDbName)
     * }
     */
    public static MethodHandle sqlite3_db_readonly$handle() {
        return sqlite3_db_readonly.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_db_readonly(sqlite3 *db, const char *zDbName)
     * }
     */
    public static MemorySegment sqlite3_db_readonly$address() {
        return sqlite3_db_readonly.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_db_readonly(sqlite3 *db, const char *zDbName)
     * }
     */
    public static int sqlite3_db_readonly(MemorySegment db, MemorySegment zDbName) {
        var mh$ = sqlite3_db_readonly.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_db_readonly", db, zDbName);
            }
            return (int)mh$.invokeExact(db, zDbName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_txn_state {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_txn_state");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_txn_state(sqlite3 *, const char *zSchema)
     * }
     */
    public static FunctionDescriptor sqlite3_txn_state$descriptor() {
        return sqlite3_txn_state.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_txn_state(sqlite3 *, const char *zSchema)
     * }
     */
    public static MethodHandle sqlite3_txn_state$handle() {
        return sqlite3_txn_state.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_txn_state(sqlite3 *, const char *zSchema)
     * }
     */
    public static MemorySegment sqlite3_txn_state$address() {
        return sqlite3_txn_state.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_txn_state(sqlite3 *, const char *zSchema)
     * }
     */
    public static int sqlite3_txn_state(MemorySegment x0, MemorySegment zSchema) {
        var mh$ = sqlite3_txn_state.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_txn_state", x0, zSchema);
            }
            return (int)mh$.invokeExact(x0, zSchema);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_next_stmt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_next_stmt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * sqlite3_stmt *sqlite3_next_stmt(sqlite3 *pDb, sqlite3_stmt *pStmt)
     * }
     */
    public static FunctionDescriptor sqlite3_next_stmt$descriptor() {
        return sqlite3_next_stmt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * sqlite3_stmt *sqlite3_next_stmt(sqlite3 *pDb, sqlite3_stmt *pStmt)
     * }
     */
    public static MethodHandle sqlite3_next_stmt$handle() {
        return sqlite3_next_stmt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * sqlite3_stmt *sqlite3_next_stmt(sqlite3 *pDb, sqlite3_stmt *pStmt)
     * }
     */
    public static MemorySegment sqlite3_next_stmt$address() {
        return sqlite3_next_stmt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * sqlite3_stmt *sqlite3_next_stmt(sqlite3 *pDb, sqlite3_stmt *pStmt)
     * }
     */
    public static MemorySegment sqlite3_next_stmt(MemorySegment pDb, MemorySegment pStmt) {
        var mh$ = sqlite3_next_stmt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_next_stmt", pDb, pStmt);
            }
            return (MemorySegment)mh$.invokeExact(pDb, pStmt);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_commit_hook {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_commit_hook");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *sqlite3_commit_hook(sqlite3 *, int (*)(void *), void *)
     * }
     */
    public static FunctionDescriptor sqlite3_commit_hook$descriptor() {
        return sqlite3_commit_hook.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *sqlite3_commit_hook(sqlite3 *, int (*)(void *), void *)
     * }
     */
    public static MethodHandle sqlite3_commit_hook$handle() {
        return sqlite3_commit_hook.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *sqlite3_commit_hook(sqlite3 *, int (*)(void *), void *)
     * }
     */
    public static MemorySegment sqlite3_commit_hook$address() {
        return sqlite3_commit_hook.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *sqlite3_commit_hook(sqlite3 *, int (*)(void *), void *)
     * }
     */
    public static MemorySegment sqlite3_commit_hook(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = sqlite3_commit_hook.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_commit_hook", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_rollback_hook {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_rollback_hook");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *sqlite3_rollback_hook(sqlite3 *, void (*)(void *), void *)
     * }
     */
    public static FunctionDescriptor sqlite3_rollback_hook$descriptor() {
        return sqlite3_rollback_hook.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *sqlite3_rollback_hook(sqlite3 *, void (*)(void *), void *)
     * }
     */
    public static MethodHandle sqlite3_rollback_hook$handle() {
        return sqlite3_rollback_hook.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *sqlite3_rollback_hook(sqlite3 *, void (*)(void *), void *)
     * }
     */
    public static MemorySegment sqlite3_rollback_hook$address() {
        return sqlite3_rollback_hook.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *sqlite3_rollback_hook(sqlite3 *, void (*)(void *), void *)
     * }
     */
    public static MemorySegment sqlite3_rollback_hook(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = sqlite3_rollback_hook.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_rollback_hook", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_autovacuum_pages {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_autovacuum_pages");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_autovacuum_pages(sqlite3 *db, unsigned int (*)(void *, const char *, unsigned int, unsigned int, unsigned int), void *, void (*)(void *))
     * }
     */
    public static FunctionDescriptor sqlite3_autovacuum_pages$descriptor() {
        return sqlite3_autovacuum_pages.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_autovacuum_pages(sqlite3 *db, unsigned int (*)(void *, const char *, unsigned int, unsigned int, unsigned int), void *, void (*)(void *))
     * }
     */
    public static MethodHandle sqlite3_autovacuum_pages$handle() {
        return sqlite3_autovacuum_pages.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_autovacuum_pages(sqlite3 *db, unsigned int (*)(void *, const char *, unsigned int, unsigned int, unsigned int), void *, void (*)(void *))
     * }
     */
    public static MemorySegment sqlite3_autovacuum_pages$address() {
        return sqlite3_autovacuum_pages.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_autovacuum_pages(sqlite3 *db, unsigned int (*)(void *, const char *, unsigned int, unsigned int, unsigned int), void *, void (*)(void *))
     * }
     */
    public static int sqlite3_autovacuum_pages(MemorySegment db, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = sqlite3_autovacuum_pages.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_autovacuum_pages", db, x1, x2, x3);
            }
            return (int)mh$.invokeExact(db, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_update_hook {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_update_hook");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *sqlite3_update_hook(sqlite3 *, void (*)(void *, int, const char *, const char *, sqlite3_int64), void *)
     * }
     */
    public static FunctionDescriptor sqlite3_update_hook$descriptor() {
        return sqlite3_update_hook.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *sqlite3_update_hook(sqlite3 *, void (*)(void *, int, const char *, const char *, sqlite3_int64), void *)
     * }
     */
    public static MethodHandle sqlite3_update_hook$handle() {
        return sqlite3_update_hook.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *sqlite3_update_hook(sqlite3 *, void (*)(void *, int, const char *, const char *, sqlite3_int64), void *)
     * }
     */
    public static MemorySegment sqlite3_update_hook$address() {
        return sqlite3_update_hook.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *sqlite3_update_hook(sqlite3 *, void (*)(void *, int, const char *, const char *, sqlite3_int64), void *)
     * }
     */
    public static MemorySegment sqlite3_update_hook(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = sqlite3_update_hook.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_update_hook", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_enable_shared_cache {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_INT
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_enable_shared_cache");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_enable_shared_cache(int)
     * }
     */
    public static FunctionDescriptor sqlite3_enable_shared_cache$descriptor() {
        return sqlite3_enable_shared_cache.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_enable_shared_cache(int)
     * }
     */
    public static MethodHandle sqlite3_enable_shared_cache$handle() {
        return sqlite3_enable_shared_cache.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_enable_shared_cache(int)
     * }
     */
    public static MemorySegment sqlite3_enable_shared_cache$address() {
        return sqlite3_enable_shared_cache.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_enable_shared_cache(int)
     * }
     */
    public static int sqlite3_enable_shared_cache(int x0) {
        var mh$ = sqlite3_enable_shared_cache.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_enable_shared_cache", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_release_memory {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_INT
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_release_memory");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_release_memory(int)
     * }
     */
    public static FunctionDescriptor sqlite3_release_memory$descriptor() {
        return sqlite3_release_memory.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_release_memory(int)
     * }
     */
    public static MethodHandle sqlite3_release_memory$handle() {
        return sqlite3_release_memory.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_release_memory(int)
     * }
     */
    public static MemorySegment sqlite3_release_memory$address() {
        return sqlite3_release_memory.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_release_memory(int)
     * }
     */
    public static int sqlite3_release_memory(int x0) {
        var mh$ = sqlite3_release_memory.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_release_memory", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_db_release_memory {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_db_release_memory");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_db_release_memory(sqlite3 *)
     * }
     */
    public static FunctionDescriptor sqlite3_db_release_memory$descriptor() {
        return sqlite3_db_release_memory.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_db_release_memory(sqlite3 *)
     * }
     */
    public static MethodHandle sqlite3_db_release_memory$handle() {
        return sqlite3_db_release_memory.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_db_release_memory(sqlite3 *)
     * }
     */
    public static MemorySegment sqlite3_db_release_memory$address() {
        return sqlite3_db_release_memory.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_db_release_memory(sqlite3 *)
     * }
     */
    public static int sqlite3_db_release_memory(MemorySegment x0) {
        var mh$ = sqlite3_db_release_memory.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_db_release_memory", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_soft_heap_limit64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_LONG_LONG,
            sqlite3_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_soft_heap_limit64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * sqlite3_int64 sqlite3_soft_heap_limit64(sqlite3_int64 N)
     * }
     */
    public static FunctionDescriptor sqlite3_soft_heap_limit64$descriptor() {
        return sqlite3_soft_heap_limit64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * sqlite3_int64 sqlite3_soft_heap_limit64(sqlite3_int64 N)
     * }
     */
    public static MethodHandle sqlite3_soft_heap_limit64$handle() {
        return sqlite3_soft_heap_limit64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * sqlite3_int64 sqlite3_soft_heap_limit64(sqlite3_int64 N)
     * }
     */
    public static MemorySegment sqlite3_soft_heap_limit64$address() {
        return sqlite3_soft_heap_limit64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * sqlite3_int64 sqlite3_soft_heap_limit64(sqlite3_int64 N)
     * }
     */
    public static long sqlite3_soft_heap_limit64(long N) {
        var mh$ = sqlite3_soft_heap_limit64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_soft_heap_limit64", N);
            }
            return (long)mh$.invokeExact(N);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_hard_heap_limit64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_LONG_LONG,
            sqlite3_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_hard_heap_limit64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * sqlite3_int64 sqlite3_hard_heap_limit64(sqlite3_int64 N)
     * }
     */
    public static FunctionDescriptor sqlite3_hard_heap_limit64$descriptor() {
        return sqlite3_hard_heap_limit64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * sqlite3_int64 sqlite3_hard_heap_limit64(sqlite3_int64 N)
     * }
     */
    public static MethodHandle sqlite3_hard_heap_limit64$handle() {
        return sqlite3_hard_heap_limit64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * sqlite3_int64 sqlite3_hard_heap_limit64(sqlite3_int64 N)
     * }
     */
    public static MemorySegment sqlite3_hard_heap_limit64$address() {
        return sqlite3_hard_heap_limit64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * sqlite3_int64 sqlite3_hard_heap_limit64(sqlite3_int64 N)
     * }
     */
    public static long sqlite3_hard_heap_limit64(long N) {
        var mh$ = sqlite3_hard_heap_limit64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_hard_heap_limit64", N);
            }
            return (long)mh$.invokeExact(N);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_soft_heap_limit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            sqlite3_h.C_INT
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_soft_heap_limit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void sqlite3_soft_heap_limit(int N)
     * }
     */
    public static FunctionDescriptor sqlite3_soft_heap_limit$descriptor() {
        return sqlite3_soft_heap_limit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void sqlite3_soft_heap_limit(int N)
     * }
     */
    public static MethodHandle sqlite3_soft_heap_limit$handle() {
        return sqlite3_soft_heap_limit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void sqlite3_soft_heap_limit(int N)
     * }
     */
    public static MemorySegment sqlite3_soft_heap_limit$address() {
        return sqlite3_soft_heap_limit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void sqlite3_soft_heap_limit(int N)
     * }
     */
    public static void sqlite3_soft_heap_limit(int N) {
        var mh$ = sqlite3_soft_heap_limit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_soft_heap_limit", N);
            }
            mh$.invokeExact(N);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_table_column_metadata {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_table_column_metadata");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_table_column_metadata(sqlite3 *db, const char *zDbName, const char *zTableName, const char *zColumnName, const char **pzDataType, const char **pzCollSeq, int *pNotNull, int *pPrimaryKey, int *pAutoinc)
     * }
     */
    public static FunctionDescriptor sqlite3_table_column_metadata$descriptor() {
        return sqlite3_table_column_metadata.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_table_column_metadata(sqlite3 *db, const char *zDbName, const char *zTableName, const char *zColumnName, const char **pzDataType, const char **pzCollSeq, int *pNotNull, int *pPrimaryKey, int *pAutoinc)
     * }
     */
    public static MethodHandle sqlite3_table_column_metadata$handle() {
        return sqlite3_table_column_metadata.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_table_column_metadata(sqlite3 *db, const char *zDbName, const char *zTableName, const char *zColumnName, const char **pzDataType, const char **pzCollSeq, int *pNotNull, int *pPrimaryKey, int *pAutoinc)
     * }
     */
    public static MemorySegment sqlite3_table_column_metadata$address() {
        return sqlite3_table_column_metadata.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_table_column_metadata(sqlite3 *db, const char *zDbName, const char *zTableName, const char *zColumnName, const char **pzDataType, const char **pzCollSeq, int *pNotNull, int *pPrimaryKey, int *pAutoinc)
     * }
     */
    public static int sqlite3_table_column_metadata(MemorySegment db, MemorySegment zDbName, MemorySegment zTableName, MemorySegment zColumnName, MemorySegment pzDataType, MemorySegment pzCollSeq, MemorySegment pNotNull, MemorySegment pPrimaryKey, MemorySegment pAutoinc) {
        var mh$ = sqlite3_table_column_metadata.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_table_column_metadata", db, zDbName, zTableName, zColumnName, pzDataType, pzCollSeq, pNotNull, pPrimaryKey, pAutoinc);
            }
            return (int)mh$.invokeExact(db, zDbName, zTableName, zColumnName, pzDataType, pzCollSeq, pNotNull, pPrimaryKey, pAutoinc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_load_extension {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_load_extension");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_load_extension(sqlite3 *db, const char *zFile, const char *zProc, char **pzErrMsg)
     * }
     */
    public static FunctionDescriptor sqlite3_load_extension$descriptor() {
        return sqlite3_load_extension.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_load_extension(sqlite3 *db, const char *zFile, const char *zProc, char **pzErrMsg)
     * }
     */
    public static MethodHandle sqlite3_load_extension$handle() {
        return sqlite3_load_extension.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_load_extension(sqlite3 *db, const char *zFile, const char *zProc, char **pzErrMsg)
     * }
     */
    public static MemorySegment sqlite3_load_extension$address() {
        return sqlite3_load_extension.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_load_extension(sqlite3 *db, const char *zFile, const char *zProc, char **pzErrMsg)
     * }
     */
    public static int sqlite3_load_extension(MemorySegment db, MemorySegment zFile, MemorySegment zProc, MemorySegment pzErrMsg) {
        var mh$ = sqlite3_load_extension.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_load_extension", db, zFile, zProc, pzErrMsg);
            }
            return (int)mh$.invokeExact(db, zFile, zProc, pzErrMsg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_enable_load_extension {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_enable_load_extension");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_enable_load_extension(sqlite3 *db, int onoff)
     * }
     */
    public static FunctionDescriptor sqlite3_enable_load_extension$descriptor() {
        return sqlite3_enable_load_extension.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_enable_load_extension(sqlite3 *db, int onoff)
     * }
     */
    public static MethodHandle sqlite3_enable_load_extension$handle() {
        return sqlite3_enable_load_extension.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_enable_load_extension(sqlite3 *db, int onoff)
     * }
     */
    public static MemorySegment sqlite3_enable_load_extension$address() {
        return sqlite3_enable_load_extension.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_enable_load_extension(sqlite3 *db, int onoff)
     * }
     */
    public static int sqlite3_enable_load_extension(MemorySegment db, int onoff) {
        var mh$ = sqlite3_enable_load_extension.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_enable_load_extension", db, onoff);
            }
            return (int)mh$.invokeExact(db, onoff);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_auto_extension {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_auto_extension");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_auto_extension(void (*xEntryPoint)(void))
     * }
     */
    public static FunctionDescriptor sqlite3_auto_extension$descriptor() {
        return sqlite3_auto_extension.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_auto_extension(void (*xEntryPoint)(void))
     * }
     */
    public static MethodHandle sqlite3_auto_extension$handle() {
        return sqlite3_auto_extension.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_auto_extension(void (*xEntryPoint)(void))
     * }
     */
    public static MemorySegment sqlite3_auto_extension$address() {
        return sqlite3_auto_extension.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_auto_extension(void (*xEntryPoint)(void))
     * }
     */
    public static int sqlite3_auto_extension(MemorySegment xEntryPoint) {
        var mh$ = sqlite3_auto_extension.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_auto_extension", xEntryPoint);
            }
            return (int)mh$.invokeExact(xEntryPoint);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_cancel_auto_extension {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_cancel_auto_extension");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_cancel_auto_extension(void (*xEntryPoint)(void))
     * }
     */
    public static FunctionDescriptor sqlite3_cancel_auto_extension$descriptor() {
        return sqlite3_cancel_auto_extension.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_cancel_auto_extension(void (*xEntryPoint)(void))
     * }
     */
    public static MethodHandle sqlite3_cancel_auto_extension$handle() {
        return sqlite3_cancel_auto_extension.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_cancel_auto_extension(void (*xEntryPoint)(void))
     * }
     */
    public static MemorySegment sqlite3_cancel_auto_extension$address() {
        return sqlite3_cancel_auto_extension.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_cancel_auto_extension(void (*xEntryPoint)(void))
     * }
     */
    public static int sqlite3_cancel_auto_extension(MemorySegment xEntryPoint) {
        var mh$ = sqlite3_cancel_auto_extension.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_cancel_auto_extension", xEntryPoint);
            }
            return (int)mh$.invokeExact(xEntryPoint);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_reset_auto_extension {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_reset_auto_extension");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void sqlite3_reset_auto_extension()
     * }
     */
    public static FunctionDescriptor sqlite3_reset_auto_extension$descriptor() {
        return sqlite3_reset_auto_extension.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void sqlite3_reset_auto_extension()
     * }
     */
    public static MethodHandle sqlite3_reset_auto_extension$handle() {
        return sqlite3_reset_auto_extension.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void sqlite3_reset_auto_extension()
     * }
     */
    public static MemorySegment sqlite3_reset_auto_extension$address() {
        return sqlite3_reset_auto_extension.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void sqlite3_reset_auto_extension()
     * }
     */
    public static void sqlite3_reset_auto_extension() {
        var mh$ = sqlite3_reset_auto_extension.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_reset_auto_extension");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_create_module {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_create_module");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_create_module(sqlite3 *db, const char *zName, const sqlite3_module *p, void *pClientData)
     * }
     */
    public static FunctionDescriptor sqlite3_create_module$descriptor() {
        return sqlite3_create_module.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_create_module(sqlite3 *db, const char *zName, const sqlite3_module *p, void *pClientData)
     * }
     */
    public static MethodHandle sqlite3_create_module$handle() {
        return sqlite3_create_module.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_create_module(sqlite3 *db, const char *zName, const sqlite3_module *p, void *pClientData)
     * }
     */
    public static MemorySegment sqlite3_create_module$address() {
        return sqlite3_create_module.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_create_module(sqlite3 *db, const char *zName, const sqlite3_module *p, void *pClientData)
     * }
     */
    public static int sqlite3_create_module(MemorySegment db, MemorySegment zName, MemorySegment p, MemorySegment pClientData) {
        var mh$ = sqlite3_create_module.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_create_module", db, zName, p, pClientData);
            }
            return (int)mh$.invokeExact(db, zName, p, pClientData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_create_module_v2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_create_module_v2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_create_module_v2(sqlite3 *db, const char *zName, const sqlite3_module *p, void *pClientData, void (*xDestroy)(void *))
     * }
     */
    public static FunctionDescriptor sqlite3_create_module_v2$descriptor() {
        return sqlite3_create_module_v2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_create_module_v2(sqlite3 *db, const char *zName, const sqlite3_module *p, void *pClientData, void (*xDestroy)(void *))
     * }
     */
    public static MethodHandle sqlite3_create_module_v2$handle() {
        return sqlite3_create_module_v2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_create_module_v2(sqlite3 *db, const char *zName, const sqlite3_module *p, void *pClientData, void (*xDestroy)(void *))
     * }
     */
    public static MemorySegment sqlite3_create_module_v2$address() {
        return sqlite3_create_module_v2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_create_module_v2(sqlite3 *db, const char *zName, const sqlite3_module *p, void *pClientData, void (*xDestroy)(void *))
     * }
     */
    public static int sqlite3_create_module_v2(MemorySegment db, MemorySegment zName, MemorySegment p, MemorySegment pClientData, MemorySegment xDestroy) {
        var mh$ = sqlite3_create_module_v2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_create_module_v2", db, zName, p, pClientData, xDestroy);
            }
            return (int)mh$.invokeExact(db, zName, p, pClientData, xDestroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_drop_modules {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_drop_modules");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_drop_modules(sqlite3 *db, const char **azKeep)
     * }
     */
    public static FunctionDescriptor sqlite3_drop_modules$descriptor() {
        return sqlite3_drop_modules.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_drop_modules(sqlite3 *db, const char **azKeep)
     * }
     */
    public static MethodHandle sqlite3_drop_modules$handle() {
        return sqlite3_drop_modules.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_drop_modules(sqlite3 *db, const char **azKeep)
     * }
     */
    public static MemorySegment sqlite3_drop_modules$address() {
        return sqlite3_drop_modules.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_drop_modules(sqlite3 *db, const char **azKeep)
     * }
     */
    public static int sqlite3_drop_modules(MemorySegment db, MemorySegment azKeep) {
        var mh$ = sqlite3_drop_modules.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_drop_modules", db, azKeep);
            }
            return (int)mh$.invokeExact(db, azKeep);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_declare_vtab {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_declare_vtab");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_declare_vtab(sqlite3 *, const char *zSQL)
     * }
     */
    public static FunctionDescriptor sqlite3_declare_vtab$descriptor() {
        return sqlite3_declare_vtab.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_declare_vtab(sqlite3 *, const char *zSQL)
     * }
     */
    public static MethodHandle sqlite3_declare_vtab$handle() {
        return sqlite3_declare_vtab.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_declare_vtab(sqlite3 *, const char *zSQL)
     * }
     */
    public static MemorySegment sqlite3_declare_vtab$address() {
        return sqlite3_declare_vtab.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_declare_vtab(sqlite3 *, const char *zSQL)
     * }
     */
    public static int sqlite3_declare_vtab(MemorySegment x0, MemorySegment zSQL) {
        var mh$ = sqlite3_declare_vtab.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_declare_vtab", x0, zSQL);
            }
            return (int)mh$.invokeExact(x0, zSQL);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_overload_function {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_overload_function");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_overload_function(sqlite3 *, const char *zFuncName, int nArg)
     * }
     */
    public static FunctionDescriptor sqlite3_overload_function$descriptor() {
        return sqlite3_overload_function.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_overload_function(sqlite3 *, const char *zFuncName, int nArg)
     * }
     */
    public static MethodHandle sqlite3_overload_function$handle() {
        return sqlite3_overload_function.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_overload_function(sqlite3 *, const char *zFuncName, int nArg)
     * }
     */
    public static MemorySegment sqlite3_overload_function$address() {
        return sqlite3_overload_function.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_overload_function(sqlite3 *, const char *zFuncName, int nArg)
     * }
     */
    public static int sqlite3_overload_function(MemorySegment x0, MemorySegment zFuncName, int nArg) {
        var mh$ = sqlite3_overload_function.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_overload_function", x0, zFuncName, nArg);
            }
            return (int)mh$.invokeExact(x0, zFuncName, nArg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_blob_open {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_LONG_LONG,
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_blob_open");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_blob_open(sqlite3 *, const char *zDb, const char *zTable, const char *zColumn, sqlite3_int64 iRow, int flags, sqlite3_blob **ppBlob)
     * }
     */
    public static FunctionDescriptor sqlite3_blob_open$descriptor() {
        return sqlite3_blob_open.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_blob_open(sqlite3 *, const char *zDb, const char *zTable, const char *zColumn, sqlite3_int64 iRow, int flags, sqlite3_blob **ppBlob)
     * }
     */
    public static MethodHandle sqlite3_blob_open$handle() {
        return sqlite3_blob_open.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_blob_open(sqlite3 *, const char *zDb, const char *zTable, const char *zColumn, sqlite3_int64 iRow, int flags, sqlite3_blob **ppBlob)
     * }
     */
    public static MemorySegment sqlite3_blob_open$address() {
        return sqlite3_blob_open.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_blob_open(sqlite3 *, const char *zDb, const char *zTable, const char *zColumn, sqlite3_int64 iRow, int flags, sqlite3_blob **ppBlob)
     * }
     */
    public static int sqlite3_blob_open(MemorySegment x0, MemorySegment zDb, MemorySegment zTable, MemorySegment zColumn, long iRow, int flags, MemorySegment ppBlob) {
        var mh$ = sqlite3_blob_open.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_blob_open", x0, zDb, zTable, zColumn, iRow, flags, ppBlob);
            }
            return (int)mh$.invokeExact(x0, zDb, zTable, zColumn, iRow, flags, ppBlob);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_blob_reopen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_blob_reopen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_blob_reopen(sqlite3_blob *, sqlite3_int64)
     * }
     */
    public static FunctionDescriptor sqlite3_blob_reopen$descriptor() {
        return sqlite3_blob_reopen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_blob_reopen(sqlite3_blob *, sqlite3_int64)
     * }
     */
    public static MethodHandle sqlite3_blob_reopen$handle() {
        return sqlite3_blob_reopen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_blob_reopen(sqlite3_blob *, sqlite3_int64)
     * }
     */
    public static MemorySegment sqlite3_blob_reopen$address() {
        return sqlite3_blob_reopen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_blob_reopen(sqlite3_blob *, sqlite3_int64)
     * }
     */
    public static int sqlite3_blob_reopen(MemorySegment x0, long x1) {
        var mh$ = sqlite3_blob_reopen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_blob_reopen", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_blob_close {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_blob_close");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_blob_close(sqlite3_blob *)
     * }
     */
    public static FunctionDescriptor sqlite3_blob_close$descriptor() {
        return sqlite3_blob_close.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_blob_close(sqlite3_blob *)
     * }
     */
    public static MethodHandle sqlite3_blob_close$handle() {
        return sqlite3_blob_close.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_blob_close(sqlite3_blob *)
     * }
     */
    public static MemorySegment sqlite3_blob_close$address() {
        return sqlite3_blob_close.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_blob_close(sqlite3_blob *)
     * }
     */
    public static int sqlite3_blob_close(MemorySegment x0) {
        var mh$ = sqlite3_blob_close.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_blob_close", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_blob_bytes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_blob_bytes");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_blob_bytes(sqlite3_blob *)
     * }
     */
    public static FunctionDescriptor sqlite3_blob_bytes$descriptor() {
        return sqlite3_blob_bytes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_blob_bytes(sqlite3_blob *)
     * }
     */
    public static MethodHandle sqlite3_blob_bytes$handle() {
        return sqlite3_blob_bytes.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_blob_bytes(sqlite3_blob *)
     * }
     */
    public static MemorySegment sqlite3_blob_bytes$address() {
        return sqlite3_blob_bytes.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_blob_bytes(sqlite3_blob *)
     * }
     */
    public static int sqlite3_blob_bytes(MemorySegment x0) {
        var mh$ = sqlite3_blob_bytes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_blob_bytes", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_blob_read {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT,
            sqlite3_h.C_INT
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_blob_read");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_blob_read(sqlite3_blob *, void *Z, int N, int iOffset)
     * }
     */
    public static FunctionDescriptor sqlite3_blob_read$descriptor() {
        return sqlite3_blob_read.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_blob_read(sqlite3_blob *, void *Z, int N, int iOffset)
     * }
     */
    public static MethodHandle sqlite3_blob_read$handle() {
        return sqlite3_blob_read.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_blob_read(sqlite3_blob *, void *Z, int N, int iOffset)
     * }
     */
    public static MemorySegment sqlite3_blob_read$address() {
        return sqlite3_blob_read.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_blob_read(sqlite3_blob *, void *Z, int N, int iOffset)
     * }
     */
    public static int sqlite3_blob_read(MemorySegment x0, MemorySegment Z, int N, int iOffset) {
        var mh$ = sqlite3_blob_read.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_blob_read", x0, Z, N, iOffset);
            }
            return (int)mh$.invokeExact(x0, Z, N, iOffset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_blob_write {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT,
            sqlite3_h.C_INT
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_blob_write");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_blob_write(sqlite3_blob *, const void *z, int n, int iOffset)
     * }
     */
    public static FunctionDescriptor sqlite3_blob_write$descriptor() {
        return sqlite3_blob_write.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_blob_write(sqlite3_blob *, const void *z, int n, int iOffset)
     * }
     */
    public static MethodHandle sqlite3_blob_write$handle() {
        return sqlite3_blob_write.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_blob_write(sqlite3_blob *, const void *z, int n, int iOffset)
     * }
     */
    public static MemorySegment sqlite3_blob_write$address() {
        return sqlite3_blob_write.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_blob_write(sqlite3_blob *, const void *z, int n, int iOffset)
     * }
     */
    public static int sqlite3_blob_write(MemorySegment x0, MemorySegment z, int n, int iOffset) {
        var mh$ = sqlite3_blob_write.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_blob_write", x0, z, n, iOffset);
            }
            return (int)mh$.invokeExact(x0, z, n, iOffset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_vfs_find {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_vfs_find");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * sqlite3_vfs *sqlite3_vfs_find(const char *zVfsName)
     * }
     */
    public static FunctionDescriptor sqlite3_vfs_find$descriptor() {
        return sqlite3_vfs_find.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * sqlite3_vfs *sqlite3_vfs_find(const char *zVfsName)
     * }
     */
    public static MethodHandle sqlite3_vfs_find$handle() {
        return sqlite3_vfs_find.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * sqlite3_vfs *sqlite3_vfs_find(const char *zVfsName)
     * }
     */
    public static MemorySegment sqlite3_vfs_find$address() {
        return sqlite3_vfs_find.ADDR;
    }

    /**
     * {@snippet lang=c :
     * sqlite3_vfs *sqlite3_vfs_find(const char *zVfsName)
     * }
     */
    public static MemorySegment sqlite3_vfs_find(MemorySegment zVfsName) {
        var mh$ = sqlite3_vfs_find.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_vfs_find", zVfsName);
            }
            return (MemorySegment)mh$.invokeExact(zVfsName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_vfs_register {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_vfs_register");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_vfs_register(sqlite3_vfs *, int makeDflt)
     * }
     */
    public static FunctionDescriptor sqlite3_vfs_register$descriptor() {
        return sqlite3_vfs_register.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_vfs_register(sqlite3_vfs *, int makeDflt)
     * }
     */
    public static MethodHandle sqlite3_vfs_register$handle() {
        return sqlite3_vfs_register.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_vfs_register(sqlite3_vfs *, int makeDflt)
     * }
     */
    public static MemorySegment sqlite3_vfs_register$address() {
        return sqlite3_vfs_register.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_vfs_register(sqlite3_vfs *, int makeDflt)
     * }
     */
    public static int sqlite3_vfs_register(MemorySegment x0, int makeDflt) {
        var mh$ = sqlite3_vfs_register.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_vfs_register", x0, makeDflt);
            }
            return (int)mh$.invokeExact(x0, makeDflt);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_vfs_unregister {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_vfs_unregister");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_vfs_unregister(sqlite3_vfs *)
     * }
     */
    public static FunctionDescriptor sqlite3_vfs_unregister$descriptor() {
        return sqlite3_vfs_unregister.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_vfs_unregister(sqlite3_vfs *)
     * }
     */
    public static MethodHandle sqlite3_vfs_unregister$handle() {
        return sqlite3_vfs_unregister.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_vfs_unregister(sqlite3_vfs *)
     * }
     */
    public static MemorySegment sqlite3_vfs_unregister$address() {
        return sqlite3_vfs_unregister.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_vfs_unregister(sqlite3_vfs *)
     * }
     */
    public static int sqlite3_vfs_unregister(MemorySegment x0) {
        var mh$ = sqlite3_vfs_unregister.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_vfs_unregister", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_mutex_alloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_mutex_alloc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * sqlite3_mutex *sqlite3_mutex_alloc(int)
     * }
     */
    public static FunctionDescriptor sqlite3_mutex_alloc$descriptor() {
        return sqlite3_mutex_alloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * sqlite3_mutex *sqlite3_mutex_alloc(int)
     * }
     */
    public static MethodHandle sqlite3_mutex_alloc$handle() {
        return sqlite3_mutex_alloc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * sqlite3_mutex *sqlite3_mutex_alloc(int)
     * }
     */
    public static MemorySegment sqlite3_mutex_alloc$address() {
        return sqlite3_mutex_alloc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * sqlite3_mutex *sqlite3_mutex_alloc(int)
     * }
     */
    public static MemorySegment sqlite3_mutex_alloc(int x0) {
        var mh$ = sqlite3_mutex_alloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_mutex_alloc", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_mutex_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_mutex_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void sqlite3_mutex_free(sqlite3_mutex *)
     * }
     */
    public static FunctionDescriptor sqlite3_mutex_free$descriptor() {
        return sqlite3_mutex_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void sqlite3_mutex_free(sqlite3_mutex *)
     * }
     */
    public static MethodHandle sqlite3_mutex_free$handle() {
        return sqlite3_mutex_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void sqlite3_mutex_free(sqlite3_mutex *)
     * }
     */
    public static MemorySegment sqlite3_mutex_free$address() {
        return sqlite3_mutex_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void sqlite3_mutex_free(sqlite3_mutex *)
     * }
     */
    public static void sqlite3_mutex_free(MemorySegment x0) {
        var mh$ = sqlite3_mutex_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_mutex_free", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_mutex_enter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_mutex_enter");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void sqlite3_mutex_enter(sqlite3_mutex *)
     * }
     */
    public static FunctionDescriptor sqlite3_mutex_enter$descriptor() {
        return sqlite3_mutex_enter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void sqlite3_mutex_enter(sqlite3_mutex *)
     * }
     */
    public static MethodHandle sqlite3_mutex_enter$handle() {
        return sqlite3_mutex_enter.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void sqlite3_mutex_enter(sqlite3_mutex *)
     * }
     */
    public static MemorySegment sqlite3_mutex_enter$address() {
        return sqlite3_mutex_enter.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void sqlite3_mutex_enter(sqlite3_mutex *)
     * }
     */
    public static void sqlite3_mutex_enter(MemorySegment x0) {
        var mh$ = sqlite3_mutex_enter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_mutex_enter", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_mutex_try {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_mutex_try");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_mutex_try(sqlite3_mutex *)
     * }
     */
    public static FunctionDescriptor sqlite3_mutex_try$descriptor() {
        return sqlite3_mutex_try.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_mutex_try(sqlite3_mutex *)
     * }
     */
    public static MethodHandle sqlite3_mutex_try$handle() {
        return sqlite3_mutex_try.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_mutex_try(sqlite3_mutex *)
     * }
     */
    public static MemorySegment sqlite3_mutex_try$address() {
        return sqlite3_mutex_try.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_mutex_try(sqlite3_mutex *)
     * }
     */
    public static int sqlite3_mutex_try(MemorySegment x0) {
        var mh$ = sqlite3_mutex_try.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_mutex_try", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_mutex_leave {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_mutex_leave");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void sqlite3_mutex_leave(sqlite3_mutex *)
     * }
     */
    public static FunctionDescriptor sqlite3_mutex_leave$descriptor() {
        return sqlite3_mutex_leave.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void sqlite3_mutex_leave(sqlite3_mutex *)
     * }
     */
    public static MethodHandle sqlite3_mutex_leave$handle() {
        return sqlite3_mutex_leave.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void sqlite3_mutex_leave(sqlite3_mutex *)
     * }
     */
    public static MemorySegment sqlite3_mutex_leave$address() {
        return sqlite3_mutex_leave.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void sqlite3_mutex_leave(sqlite3_mutex *)
     * }
     */
    public static void sqlite3_mutex_leave(MemorySegment x0) {
        var mh$ = sqlite3_mutex_leave.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_mutex_leave", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_mutex_held {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_mutex_held");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_mutex_held(sqlite3_mutex *)
     * }
     */
    public static FunctionDescriptor sqlite3_mutex_held$descriptor() {
        return sqlite3_mutex_held.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_mutex_held(sqlite3_mutex *)
     * }
     */
    public static MethodHandle sqlite3_mutex_held$handle() {
        return sqlite3_mutex_held.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_mutex_held(sqlite3_mutex *)
     * }
     */
    public static MemorySegment sqlite3_mutex_held$address() {
        return sqlite3_mutex_held.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_mutex_held(sqlite3_mutex *)
     * }
     */
    public static int sqlite3_mutex_held(MemorySegment x0) {
        var mh$ = sqlite3_mutex_held.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_mutex_held", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_mutex_notheld {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_mutex_notheld");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_mutex_notheld(sqlite3_mutex *)
     * }
     */
    public static FunctionDescriptor sqlite3_mutex_notheld$descriptor() {
        return sqlite3_mutex_notheld.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_mutex_notheld(sqlite3_mutex *)
     * }
     */
    public static MethodHandle sqlite3_mutex_notheld$handle() {
        return sqlite3_mutex_notheld.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_mutex_notheld(sqlite3_mutex *)
     * }
     */
    public static MemorySegment sqlite3_mutex_notheld$address() {
        return sqlite3_mutex_notheld.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_mutex_notheld(sqlite3_mutex *)
     * }
     */
    public static int sqlite3_mutex_notheld(MemorySegment x0) {
        var mh$ = sqlite3_mutex_notheld.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_mutex_notheld", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_db_mutex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_db_mutex");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * sqlite3_mutex *sqlite3_db_mutex(sqlite3 *)
     * }
     */
    public static FunctionDescriptor sqlite3_db_mutex$descriptor() {
        return sqlite3_db_mutex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * sqlite3_mutex *sqlite3_db_mutex(sqlite3 *)
     * }
     */
    public static MethodHandle sqlite3_db_mutex$handle() {
        return sqlite3_db_mutex.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * sqlite3_mutex *sqlite3_db_mutex(sqlite3 *)
     * }
     */
    public static MemorySegment sqlite3_db_mutex$address() {
        return sqlite3_db_mutex.ADDR;
    }

    /**
     * {@snippet lang=c :
     * sqlite3_mutex *sqlite3_db_mutex(sqlite3 *)
     * }
     */
    public static MemorySegment sqlite3_db_mutex(MemorySegment x0) {
        var mh$ = sqlite3_db_mutex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_db_mutex", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_file_control {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_file_control");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_file_control(sqlite3 *, const char *zDbName, int op, void *)
     * }
     */
    public static FunctionDescriptor sqlite3_file_control$descriptor() {
        return sqlite3_file_control.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_file_control(sqlite3 *, const char *zDbName, int op, void *)
     * }
     */
    public static MethodHandle sqlite3_file_control$handle() {
        return sqlite3_file_control.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_file_control(sqlite3 *, const char *zDbName, int op, void *)
     * }
     */
    public static MemorySegment sqlite3_file_control$address() {
        return sqlite3_file_control.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_file_control(sqlite3 *, const char *zDbName, int op, void *)
     * }
     */
    public static int sqlite3_file_control(MemorySegment x0, MemorySegment zDbName, int op, MemorySegment x3) {
        var mh$ = sqlite3_file_control.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_file_control", x0, zDbName, op, x3);
            }
            return (int)mh$.invokeExact(x0, zDbName, op, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * int sqlite3_test_control(int op, ...)
     * }
     */
    public static class sqlite3_test_control {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                sqlite3_h.C_INT,
                sqlite3_h.C_INT
            );
        private static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_test_control");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private sqlite3_test_control(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * int sqlite3_test_control(int op, ...)
         * }
         */
        public static sqlite3_test_control makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new sqlite3_test_control(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(int op, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("sqlite3_test_control", op, x1);
                }
                return (int)spreader.invokeExact(op, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class sqlite3_keyword_count {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT    );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_keyword_count");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_keyword_count()
     * }
     */
    public static FunctionDescriptor sqlite3_keyword_count$descriptor() {
        return sqlite3_keyword_count.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_keyword_count()
     * }
     */
    public static MethodHandle sqlite3_keyword_count$handle() {
        return sqlite3_keyword_count.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_keyword_count()
     * }
     */
    public static MemorySegment sqlite3_keyword_count$address() {
        return sqlite3_keyword_count.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_keyword_count()
     * }
     */
    public static int sqlite3_keyword_count() {
        var mh$ = sqlite3_keyword_count.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_keyword_count");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_keyword_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_keyword_name");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_keyword_name(int, const char **, int *)
     * }
     */
    public static FunctionDescriptor sqlite3_keyword_name$descriptor() {
        return sqlite3_keyword_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_keyword_name(int, const char **, int *)
     * }
     */
    public static MethodHandle sqlite3_keyword_name$handle() {
        return sqlite3_keyword_name.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_keyword_name(int, const char **, int *)
     * }
     */
    public static MemorySegment sqlite3_keyword_name$address() {
        return sqlite3_keyword_name.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_keyword_name(int, const char **, int *)
     * }
     */
    public static int sqlite3_keyword_name(int x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = sqlite3_keyword_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_keyword_name", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_keyword_check {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_keyword_check");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_keyword_check(const char *, int)
     * }
     */
    public static FunctionDescriptor sqlite3_keyword_check$descriptor() {
        return sqlite3_keyword_check.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_keyword_check(const char *, int)
     * }
     */
    public static MethodHandle sqlite3_keyword_check$handle() {
        return sqlite3_keyword_check.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_keyword_check(const char *, int)
     * }
     */
    public static MemorySegment sqlite3_keyword_check$address() {
        return sqlite3_keyword_check.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_keyword_check(const char *, int)
     * }
     */
    public static int sqlite3_keyword_check(MemorySegment x0, int x1) {
        var mh$ = sqlite3_keyword_check.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_keyword_check", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_str_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_str_new");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * sqlite3_str *sqlite3_str_new(sqlite3 *)
     * }
     */
    public static FunctionDescriptor sqlite3_str_new$descriptor() {
        return sqlite3_str_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * sqlite3_str *sqlite3_str_new(sqlite3 *)
     * }
     */
    public static MethodHandle sqlite3_str_new$handle() {
        return sqlite3_str_new.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * sqlite3_str *sqlite3_str_new(sqlite3 *)
     * }
     */
    public static MemorySegment sqlite3_str_new$address() {
        return sqlite3_str_new.ADDR;
    }

    /**
     * {@snippet lang=c :
     * sqlite3_str *sqlite3_str_new(sqlite3 *)
     * }
     */
    public static MemorySegment sqlite3_str_new(MemorySegment x0) {
        var mh$ = sqlite3_str_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_str_new", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_str_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_str_finish");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *sqlite3_str_finish(sqlite3_str *)
     * }
     */
    public static FunctionDescriptor sqlite3_str_finish$descriptor() {
        return sqlite3_str_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *sqlite3_str_finish(sqlite3_str *)
     * }
     */
    public static MethodHandle sqlite3_str_finish$handle() {
        return sqlite3_str_finish.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *sqlite3_str_finish(sqlite3_str *)
     * }
     */
    public static MemorySegment sqlite3_str_finish$address() {
        return sqlite3_str_finish.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *sqlite3_str_finish(sqlite3_str *)
     * }
     */
    public static MemorySegment sqlite3_str_finish(MemorySegment x0) {
        var mh$ = sqlite3_str_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_str_finish", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * void sqlite3_str_appendf(sqlite3_str *, const char *zFormat, ...)
     * }
     */
    public static class sqlite3_str_appendf {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                sqlite3_h.C_POINTER,
                sqlite3_h.C_POINTER
            );
        private static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_str_appendf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private sqlite3_str_appendf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * void sqlite3_str_appendf(sqlite3_str *, const char *zFormat, ...)
         * }
         */
        public static sqlite3_str_appendf makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new sqlite3_str_appendf(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment x0, MemorySegment zFormat, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("sqlite3_str_appendf", x0, zFormat, x2);
                }
                spreader.invokeExact(x0, zFormat, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class sqlite3_str_vappendf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_str_vappendf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void sqlite3_str_vappendf(sqlite3_str *, const char *zFormat, va_list)
     * }
     */
    public static FunctionDescriptor sqlite3_str_vappendf$descriptor() {
        return sqlite3_str_vappendf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void sqlite3_str_vappendf(sqlite3_str *, const char *zFormat, va_list)
     * }
     */
    public static MethodHandle sqlite3_str_vappendf$handle() {
        return sqlite3_str_vappendf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void sqlite3_str_vappendf(sqlite3_str *, const char *zFormat, va_list)
     * }
     */
    public static MemorySegment sqlite3_str_vappendf$address() {
        return sqlite3_str_vappendf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void sqlite3_str_vappendf(sqlite3_str *, const char *zFormat, va_list)
     * }
     */
    public static void sqlite3_str_vappendf(MemorySegment x0, MemorySegment zFormat, MemorySegment x2) {
        var mh$ = sqlite3_str_vappendf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_str_vappendf", x0, zFormat, x2);
            }
            mh$.invokeExact(x0, zFormat, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_str_append {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_str_append");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void sqlite3_str_append(sqlite3_str *, const char *zIn, int N)
     * }
     */
    public static FunctionDescriptor sqlite3_str_append$descriptor() {
        return sqlite3_str_append.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void sqlite3_str_append(sqlite3_str *, const char *zIn, int N)
     * }
     */
    public static MethodHandle sqlite3_str_append$handle() {
        return sqlite3_str_append.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void sqlite3_str_append(sqlite3_str *, const char *zIn, int N)
     * }
     */
    public static MemorySegment sqlite3_str_append$address() {
        return sqlite3_str_append.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void sqlite3_str_append(sqlite3_str *, const char *zIn, int N)
     * }
     */
    public static void sqlite3_str_append(MemorySegment x0, MemorySegment zIn, int N) {
        var mh$ = sqlite3_str_append.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_str_append", x0, zIn, N);
            }
            mh$.invokeExact(x0, zIn, N);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_str_appendall {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_str_appendall");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void sqlite3_str_appendall(sqlite3_str *, const char *zIn)
     * }
     */
    public static FunctionDescriptor sqlite3_str_appendall$descriptor() {
        return sqlite3_str_appendall.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void sqlite3_str_appendall(sqlite3_str *, const char *zIn)
     * }
     */
    public static MethodHandle sqlite3_str_appendall$handle() {
        return sqlite3_str_appendall.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void sqlite3_str_appendall(sqlite3_str *, const char *zIn)
     * }
     */
    public static MemorySegment sqlite3_str_appendall$address() {
        return sqlite3_str_appendall.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void sqlite3_str_appendall(sqlite3_str *, const char *zIn)
     * }
     */
    public static void sqlite3_str_appendall(MemorySegment x0, MemorySegment zIn) {
        var mh$ = sqlite3_str_appendall.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_str_appendall", x0, zIn);
            }
            mh$.invokeExact(x0, zIn);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_str_appendchar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT,
            sqlite3_h.C_CHAR
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_str_appendchar");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void sqlite3_str_appendchar(sqlite3_str *, int N, char C)
     * }
     */
    public static FunctionDescriptor sqlite3_str_appendchar$descriptor() {
        return sqlite3_str_appendchar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void sqlite3_str_appendchar(sqlite3_str *, int N, char C)
     * }
     */
    public static MethodHandle sqlite3_str_appendchar$handle() {
        return sqlite3_str_appendchar.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void sqlite3_str_appendchar(sqlite3_str *, int N, char C)
     * }
     */
    public static MemorySegment sqlite3_str_appendchar$address() {
        return sqlite3_str_appendchar.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void sqlite3_str_appendchar(sqlite3_str *, int N, char C)
     * }
     */
    public static void sqlite3_str_appendchar(MemorySegment x0, int N, byte C) {
        var mh$ = sqlite3_str_appendchar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_str_appendchar", x0, N, C);
            }
            mh$.invokeExact(x0, N, C);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_str_reset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_str_reset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void sqlite3_str_reset(sqlite3_str *)
     * }
     */
    public static FunctionDescriptor sqlite3_str_reset$descriptor() {
        return sqlite3_str_reset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void sqlite3_str_reset(sqlite3_str *)
     * }
     */
    public static MethodHandle sqlite3_str_reset$handle() {
        return sqlite3_str_reset.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void sqlite3_str_reset(sqlite3_str *)
     * }
     */
    public static MemorySegment sqlite3_str_reset$address() {
        return sqlite3_str_reset.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void sqlite3_str_reset(sqlite3_str *)
     * }
     */
    public static void sqlite3_str_reset(MemorySegment x0) {
        var mh$ = sqlite3_str_reset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_str_reset", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_str_errcode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_str_errcode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_str_errcode(sqlite3_str *)
     * }
     */
    public static FunctionDescriptor sqlite3_str_errcode$descriptor() {
        return sqlite3_str_errcode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_str_errcode(sqlite3_str *)
     * }
     */
    public static MethodHandle sqlite3_str_errcode$handle() {
        return sqlite3_str_errcode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_str_errcode(sqlite3_str *)
     * }
     */
    public static MemorySegment sqlite3_str_errcode$address() {
        return sqlite3_str_errcode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_str_errcode(sqlite3_str *)
     * }
     */
    public static int sqlite3_str_errcode(MemorySegment x0) {
        var mh$ = sqlite3_str_errcode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_str_errcode", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_str_length {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_str_length");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_str_length(sqlite3_str *)
     * }
     */
    public static FunctionDescriptor sqlite3_str_length$descriptor() {
        return sqlite3_str_length.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_str_length(sqlite3_str *)
     * }
     */
    public static MethodHandle sqlite3_str_length$handle() {
        return sqlite3_str_length.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_str_length(sqlite3_str *)
     * }
     */
    public static MemorySegment sqlite3_str_length$address() {
        return sqlite3_str_length.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_str_length(sqlite3_str *)
     * }
     */
    public static int sqlite3_str_length(MemorySegment x0) {
        var mh$ = sqlite3_str_length.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_str_length", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_str_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_str_value");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *sqlite3_str_value(sqlite3_str *)
     * }
     */
    public static FunctionDescriptor sqlite3_str_value$descriptor() {
        return sqlite3_str_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *sqlite3_str_value(sqlite3_str *)
     * }
     */
    public static MethodHandle sqlite3_str_value$handle() {
        return sqlite3_str_value.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *sqlite3_str_value(sqlite3_str *)
     * }
     */
    public static MemorySegment sqlite3_str_value$address() {
        return sqlite3_str_value.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *sqlite3_str_value(sqlite3_str *)
     * }
     */
    public static MemorySegment sqlite3_str_value(MemorySegment x0) {
        var mh$ = sqlite3_str_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_str_value", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_status {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_status");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_status(int op, int *pCurrent, int *pHighwater, int resetFlag)
     * }
     */
    public static FunctionDescriptor sqlite3_status$descriptor() {
        return sqlite3_status.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_status(int op, int *pCurrent, int *pHighwater, int resetFlag)
     * }
     */
    public static MethodHandle sqlite3_status$handle() {
        return sqlite3_status.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_status(int op, int *pCurrent, int *pHighwater, int resetFlag)
     * }
     */
    public static MemorySegment sqlite3_status$address() {
        return sqlite3_status.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_status(int op, int *pCurrent, int *pHighwater, int resetFlag)
     * }
     */
    public static int sqlite3_status(int op, MemorySegment pCurrent, MemorySegment pHighwater, int resetFlag) {
        var mh$ = sqlite3_status.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_status", op, pCurrent, pHighwater, resetFlag);
            }
            return (int)mh$.invokeExact(op, pCurrent, pHighwater, resetFlag);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_status64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_status64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_status64(int op, sqlite3_int64 *pCurrent, sqlite3_int64 *pHighwater, int resetFlag)
     * }
     */
    public static FunctionDescriptor sqlite3_status64$descriptor() {
        return sqlite3_status64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_status64(int op, sqlite3_int64 *pCurrent, sqlite3_int64 *pHighwater, int resetFlag)
     * }
     */
    public static MethodHandle sqlite3_status64$handle() {
        return sqlite3_status64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_status64(int op, sqlite3_int64 *pCurrent, sqlite3_int64 *pHighwater, int resetFlag)
     * }
     */
    public static MemorySegment sqlite3_status64$address() {
        return sqlite3_status64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_status64(int op, sqlite3_int64 *pCurrent, sqlite3_int64 *pHighwater, int resetFlag)
     * }
     */
    public static int sqlite3_status64(int op, MemorySegment pCurrent, MemorySegment pHighwater, int resetFlag) {
        var mh$ = sqlite3_status64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_status64", op, pCurrent, pHighwater, resetFlag);
            }
            return (int)mh$.invokeExact(op, pCurrent, pHighwater, resetFlag);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_db_status {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_db_status");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_db_status(sqlite3 *, int op, int *pCur, int *pHiwtr, int resetFlg)
     * }
     */
    public static FunctionDescriptor sqlite3_db_status$descriptor() {
        return sqlite3_db_status.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_db_status(sqlite3 *, int op, int *pCur, int *pHiwtr, int resetFlg)
     * }
     */
    public static MethodHandle sqlite3_db_status$handle() {
        return sqlite3_db_status.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_db_status(sqlite3 *, int op, int *pCur, int *pHiwtr, int resetFlg)
     * }
     */
    public static MemorySegment sqlite3_db_status$address() {
        return sqlite3_db_status.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_db_status(sqlite3 *, int op, int *pCur, int *pHiwtr, int resetFlg)
     * }
     */
    public static int sqlite3_db_status(MemorySegment x0, int op, MemorySegment pCur, MemorySegment pHiwtr, int resetFlg) {
        var mh$ = sqlite3_db_status.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_db_status", x0, op, pCur, pHiwtr, resetFlg);
            }
            return (int)mh$.invokeExact(x0, op, pCur, pHiwtr, resetFlg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_stmt_status {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT,
            sqlite3_h.C_INT
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_stmt_status");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_stmt_status(sqlite3_stmt *, int op, int resetFlg)
     * }
     */
    public static FunctionDescriptor sqlite3_stmt_status$descriptor() {
        return sqlite3_stmt_status.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_stmt_status(sqlite3_stmt *, int op, int resetFlg)
     * }
     */
    public static MethodHandle sqlite3_stmt_status$handle() {
        return sqlite3_stmt_status.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_stmt_status(sqlite3_stmt *, int op, int resetFlg)
     * }
     */
    public static MemorySegment sqlite3_stmt_status$address() {
        return sqlite3_stmt_status.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_stmt_status(sqlite3_stmt *, int op, int resetFlg)
     * }
     */
    public static int sqlite3_stmt_status(MemorySegment x0, int op, int resetFlg) {
        var mh$ = sqlite3_stmt_status.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_stmt_status", x0, op, resetFlg);
            }
            return (int)mh$.invokeExact(x0, op, resetFlg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_backup_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_backup_init");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * sqlite3_backup *sqlite3_backup_init(sqlite3 *pDest, const char *zDestName, sqlite3 *pSource, const char *zSourceName)
     * }
     */
    public static FunctionDescriptor sqlite3_backup_init$descriptor() {
        return sqlite3_backup_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * sqlite3_backup *sqlite3_backup_init(sqlite3 *pDest, const char *zDestName, sqlite3 *pSource, const char *zSourceName)
     * }
     */
    public static MethodHandle sqlite3_backup_init$handle() {
        return sqlite3_backup_init.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * sqlite3_backup *sqlite3_backup_init(sqlite3 *pDest, const char *zDestName, sqlite3 *pSource, const char *zSourceName)
     * }
     */
    public static MemorySegment sqlite3_backup_init$address() {
        return sqlite3_backup_init.ADDR;
    }

    /**
     * {@snippet lang=c :
     * sqlite3_backup *sqlite3_backup_init(sqlite3 *pDest, const char *zDestName, sqlite3 *pSource, const char *zSourceName)
     * }
     */
    public static MemorySegment sqlite3_backup_init(MemorySegment pDest, MemorySegment zDestName, MemorySegment pSource, MemorySegment zSourceName) {
        var mh$ = sqlite3_backup_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_backup_init", pDest, zDestName, pSource, zSourceName);
            }
            return (MemorySegment)mh$.invokeExact(pDest, zDestName, pSource, zSourceName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_backup_step {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_backup_step");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_backup_step(sqlite3_backup *p, int nPage)
     * }
     */
    public static FunctionDescriptor sqlite3_backup_step$descriptor() {
        return sqlite3_backup_step.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_backup_step(sqlite3_backup *p, int nPage)
     * }
     */
    public static MethodHandle sqlite3_backup_step$handle() {
        return sqlite3_backup_step.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_backup_step(sqlite3_backup *p, int nPage)
     * }
     */
    public static MemorySegment sqlite3_backup_step$address() {
        return sqlite3_backup_step.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_backup_step(sqlite3_backup *p, int nPage)
     * }
     */
    public static int sqlite3_backup_step(MemorySegment p, int nPage) {
        var mh$ = sqlite3_backup_step.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_backup_step", p, nPage);
            }
            return (int)mh$.invokeExact(p, nPage);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_backup_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_backup_finish");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_backup_finish(sqlite3_backup *p)
     * }
     */
    public static FunctionDescriptor sqlite3_backup_finish$descriptor() {
        return sqlite3_backup_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_backup_finish(sqlite3_backup *p)
     * }
     */
    public static MethodHandle sqlite3_backup_finish$handle() {
        return sqlite3_backup_finish.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_backup_finish(sqlite3_backup *p)
     * }
     */
    public static MemorySegment sqlite3_backup_finish$address() {
        return sqlite3_backup_finish.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_backup_finish(sqlite3_backup *p)
     * }
     */
    public static int sqlite3_backup_finish(MemorySegment p) {
        var mh$ = sqlite3_backup_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_backup_finish", p);
            }
            return (int)mh$.invokeExact(p);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_backup_remaining {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_backup_remaining");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_backup_remaining(sqlite3_backup *p)
     * }
     */
    public static FunctionDescriptor sqlite3_backup_remaining$descriptor() {
        return sqlite3_backup_remaining.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_backup_remaining(sqlite3_backup *p)
     * }
     */
    public static MethodHandle sqlite3_backup_remaining$handle() {
        return sqlite3_backup_remaining.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_backup_remaining(sqlite3_backup *p)
     * }
     */
    public static MemorySegment sqlite3_backup_remaining$address() {
        return sqlite3_backup_remaining.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_backup_remaining(sqlite3_backup *p)
     * }
     */
    public static int sqlite3_backup_remaining(MemorySegment p) {
        var mh$ = sqlite3_backup_remaining.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_backup_remaining", p);
            }
            return (int)mh$.invokeExact(p);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_backup_pagecount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_backup_pagecount");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_backup_pagecount(sqlite3_backup *p)
     * }
     */
    public static FunctionDescriptor sqlite3_backup_pagecount$descriptor() {
        return sqlite3_backup_pagecount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_backup_pagecount(sqlite3_backup *p)
     * }
     */
    public static MethodHandle sqlite3_backup_pagecount$handle() {
        return sqlite3_backup_pagecount.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_backup_pagecount(sqlite3_backup *p)
     * }
     */
    public static MemorySegment sqlite3_backup_pagecount$address() {
        return sqlite3_backup_pagecount.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_backup_pagecount(sqlite3_backup *p)
     * }
     */
    public static int sqlite3_backup_pagecount(MemorySegment p) {
        var mh$ = sqlite3_backup_pagecount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_backup_pagecount", p);
            }
            return (int)mh$.invokeExact(p);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_unlock_notify {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_unlock_notify");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_unlock_notify(sqlite3 *pBlocked, void (*xNotify)(void **, int), void *pNotifyArg)
     * }
     */
    public static FunctionDescriptor sqlite3_unlock_notify$descriptor() {
        return sqlite3_unlock_notify.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_unlock_notify(sqlite3 *pBlocked, void (*xNotify)(void **, int), void *pNotifyArg)
     * }
     */
    public static MethodHandle sqlite3_unlock_notify$handle() {
        return sqlite3_unlock_notify.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_unlock_notify(sqlite3 *pBlocked, void (*xNotify)(void **, int), void *pNotifyArg)
     * }
     */
    public static MemorySegment sqlite3_unlock_notify$address() {
        return sqlite3_unlock_notify.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_unlock_notify(sqlite3 *pBlocked, void (*xNotify)(void **, int), void *pNotifyArg)
     * }
     */
    public static int sqlite3_unlock_notify(MemorySegment pBlocked, MemorySegment xNotify, MemorySegment pNotifyArg) {
        var mh$ = sqlite3_unlock_notify.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_unlock_notify", pBlocked, xNotify, pNotifyArg);
            }
            return (int)mh$.invokeExact(pBlocked, xNotify, pNotifyArg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_stricmp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_stricmp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_stricmp(const char *, const char *)
     * }
     */
    public static FunctionDescriptor sqlite3_stricmp$descriptor() {
        return sqlite3_stricmp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_stricmp(const char *, const char *)
     * }
     */
    public static MethodHandle sqlite3_stricmp$handle() {
        return sqlite3_stricmp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_stricmp(const char *, const char *)
     * }
     */
    public static MemorySegment sqlite3_stricmp$address() {
        return sqlite3_stricmp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_stricmp(const char *, const char *)
     * }
     */
    public static int sqlite3_stricmp(MemorySegment x0, MemorySegment x1) {
        var mh$ = sqlite3_stricmp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_stricmp", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_strnicmp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_strnicmp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_strnicmp(const char *, const char *, int)
     * }
     */
    public static FunctionDescriptor sqlite3_strnicmp$descriptor() {
        return sqlite3_strnicmp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_strnicmp(const char *, const char *, int)
     * }
     */
    public static MethodHandle sqlite3_strnicmp$handle() {
        return sqlite3_strnicmp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_strnicmp(const char *, const char *, int)
     * }
     */
    public static MemorySegment sqlite3_strnicmp$address() {
        return sqlite3_strnicmp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_strnicmp(const char *, const char *, int)
     * }
     */
    public static int sqlite3_strnicmp(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = sqlite3_strnicmp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_strnicmp", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_strglob {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_strglob");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_strglob(const char *zGlob, const char *zStr)
     * }
     */
    public static FunctionDescriptor sqlite3_strglob$descriptor() {
        return sqlite3_strglob.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_strglob(const char *zGlob, const char *zStr)
     * }
     */
    public static MethodHandle sqlite3_strglob$handle() {
        return sqlite3_strglob.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_strglob(const char *zGlob, const char *zStr)
     * }
     */
    public static MemorySegment sqlite3_strglob$address() {
        return sqlite3_strglob.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_strglob(const char *zGlob, const char *zStr)
     * }
     */
    public static int sqlite3_strglob(MemorySegment zGlob, MemorySegment zStr) {
        var mh$ = sqlite3_strglob.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_strglob", zGlob, zStr);
            }
            return (int)mh$.invokeExact(zGlob, zStr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_strlike {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_strlike");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_strlike(const char *zGlob, const char *zStr, unsigned int cEsc)
     * }
     */
    public static FunctionDescriptor sqlite3_strlike$descriptor() {
        return sqlite3_strlike.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_strlike(const char *zGlob, const char *zStr, unsigned int cEsc)
     * }
     */
    public static MethodHandle sqlite3_strlike$handle() {
        return sqlite3_strlike.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_strlike(const char *zGlob, const char *zStr, unsigned int cEsc)
     * }
     */
    public static MemorySegment sqlite3_strlike$address() {
        return sqlite3_strlike.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_strlike(const char *zGlob, const char *zStr, unsigned int cEsc)
     * }
     */
    public static int sqlite3_strlike(MemorySegment zGlob, MemorySegment zStr, int cEsc) {
        var mh$ = sqlite3_strlike.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_strlike", zGlob, zStr, cEsc);
            }
            return (int)mh$.invokeExact(zGlob, zStr, cEsc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * void sqlite3_log(int iErrCode, const char *zFormat, ...)
     * }
     */
    public static class sqlite3_log {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                sqlite3_h.C_INT,
                sqlite3_h.C_POINTER
            );
        private static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_log");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private sqlite3_log(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * void sqlite3_log(int iErrCode, const char *zFormat, ...)
         * }
         */
        public static sqlite3_log makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new sqlite3_log(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(int iErrCode, MemorySegment zFormat, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("sqlite3_log", iErrCode, zFormat, x2);
                }
                spreader.invokeExact(iErrCode, zFormat, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class sqlite3_wal_hook {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_wal_hook");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *sqlite3_wal_hook(sqlite3 *, int (*)(void *, sqlite3 *, const char *, int), void *)
     * }
     */
    public static FunctionDescriptor sqlite3_wal_hook$descriptor() {
        return sqlite3_wal_hook.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *sqlite3_wal_hook(sqlite3 *, int (*)(void *, sqlite3 *, const char *, int), void *)
     * }
     */
    public static MethodHandle sqlite3_wal_hook$handle() {
        return sqlite3_wal_hook.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *sqlite3_wal_hook(sqlite3 *, int (*)(void *, sqlite3 *, const char *, int), void *)
     * }
     */
    public static MemorySegment sqlite3_wal_hook$address() {
        return sqlite3_wal_hook.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *sqlite3_wal_hook(sqlite3 *, int (*)(void *, sqlite3 *, const char *, int), void *)
     * }
     */
    public static MemorySegment sqlite3_wal_hook(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = sqlite3_wal_hook.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_wal_hook", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_wal_autocheckpoint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_wal_autocheckpoint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_wal_autocheckpoint(sqlite3 *db, int N)
     * }
     */
    public static FunctionDescriptor sqlite3_wal_autocheckpoint$descriptor() {
        return sqlite3_wal_autocheckpoint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_wal_autocheckpoint(sqlite3 *db, int N)
     * }
     */
    public static MethodHandle sqlite3_wal_autocheckpoint$handle() {
        return sqlite3_wal_autocheckpoint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_wal_autocheckpoint(sqlite3 *db, int N)
     * }
     */
    public static MemorySegment sqlite3_wal_autocheckpoint$address() {
        return sqlite3_wal_autocheckpoint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_wal_autocheckpoint(sqlite3 *db, int N)
     * }
     */
    public static int sqlite3_wal_autocheckpoint(MemorySegment db, int N) {
        var mh$ = sqlite3_wal_autocheckpoint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_wal_autocheckpoint", db, N);
            }
            return (int)mh$.invokeExact(db, N);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_wal_checkpoint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_wal_checkpoint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_wal_checkpoint(sqlite3 *db, const char *zDb)
     * }
     */
    public static FunctionDescriptor sqlite3_wal_checkpoint$descriptor() {
        return sqlite3_wal_checkpoint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_wal_checkpoint(sqlite3 *db, const char *zDb)
     * }
     */
    public static MethodHandle sqlite3_wal_checkpoint$handle() {
        return sqlite3_wal_checkpoint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_wal_checkpoint(sqlite3 *db, const char *zDb)
     * }
     */
    public static MemorySegment sqlite3_wal_checkpoint$address() {
        return sqlite3_wal_checkpoint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_wal_checkpoint(sqlite3 *db, const char *zDb)
     * }
     */
    public static int sqlite3_wal_checkpoint(MemorySegment db, MemorySegment zDb) {
        var mh$ = sqlite3_wal_checkpoint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_wal_checkpoint", db, zDb);
            }
            return (int)mh$.invokeExact(db, zDb);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_wal_checkpoint_v2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_wal_checkpoint_v2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_wal_checkpoint_v2(sqlite3 *db, const char *zDb, int eMode, int *pnLog, int *pnCkpt)
     * }
     */
    public static FunctionDescriptor sqlite3_wal_checkpoint_v2$descriptor() {
        return sqlite3_wal_checkpoint_v2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_wal_checkpoint_v2(sqlite3 *db, const char *zDb, int eMode, int *pnLog, int *pnCkpt)
     * }
     */
    public static MethodHandle sqlite3_wal_checkpoint_v2$handle() {
        return sqlite3_wal_checkpoint_v2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_wal_checkpoint_v2(sqlite3 *db, const char *zDb, int eMode, int *pnLog, int *pnCkpt)
     * }
     */
    public static MemorySegment sqlite3_wal_checkpoint_v2$address() {
        return sqlite3_wal_checkpoint_v2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_wal_checkpoint_v2(sqlite3 *db, const char *zDb, int eMode, int *pnLog, int *pnCkpt)
     * }
     */
    public static int sqlite3_wal_checkpoint_v2(MemorySegment db, MemorySegment zDb, int eMode, MemorySegment pnLog, MemorySegment pnCkpt) {
        var mh$ = sqlite3_wal_checkpoint_v2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_wal_checkpoint_v2", db, zDb, eMode, pnLog, pnCkpt);
            }
            return (int)mh$.invokeExact(db, zDb, eMode, pnLog, pnCkpt);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * int sqlite3_vtab_config(sqlite3 *, int op, ...)
     * }
     */
    public static class sqlite3_vtab_config {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                sqlite3_h.C_INT,
                sqlite3_h.C_POINTER,
                sqlite3_h.C_INT
            );
        private static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_vtab_config");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private sqlite3_vtab_config(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * int sqlite3_vtab_config(sqlite3 *, int op, ...)
         * }
         */
        public static sqlite3_vtab_config makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new sqlite3_vtab_config(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment x0, int op, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("sqlite3_vtab_config", x0, op, x2);
                }
                return (int)spreader.invokeExact(x0, op, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class sqlite3_vtab_on_conflict {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_vtab_on_conflict");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_vtab_on_conflict(sqlite3 *)
     * }
     */
    public static FunctionDescriptor sqlite3_vtab_on_conflict$descriptor() {
        return sqlite3_vtab_on_conflict.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_vtab_on_conflict(sqlite3 *)
     * }
     */
    public static MethodHandle sqlite3_vtab_on_conflict$handle() {
        return sqlite3_vtab_on_conflict.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_vtab_on_conflict(sqlite3 *)
     * }
     */
    public static MemorySegment sqlite3_vtab_on_conflict$address() {
        return sqlite3_vtab_on_conflict.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_vtab_on_conflict(sqlite3 *)
     * }
     */
    public static int sqlite3_vtab_on_conflict(MemorySegment x0) {
        var mh$ = sqlite3_vtab_on_conflict.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_vtab_on_conflict", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_vtab_nochange {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_vtab_nochange");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_vtab_nochange(sqlite3_context *)
     * }
     */
    public static FunctionDescriptor sqlite3_vtab_nochange$descriptor() {
        return sqlite3_vtab_nochange.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_vtab_nochange(sqlite3_context *)
     * }
     */
    public static MethodHandle sqlite3_vtab_nochange$handle() {
        return sqlite3_vtab_nochange.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_vtab_nochange(sqlite3_context *)
     * }
     */
    public static MemorySegment sqlite3_vtab_nochange$address() {
        return sqlite3_vtab_nochange.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_vtab_nochange(sqlite3_context *)
     * }
     */
    public static int sqlite3_vtab_nochange(MemorySegment x0) {
        var mh$ = sqlite3_vtab_nochange.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_vtab_nochange", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_vtab_collation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_vtab_collation");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *sqlite3_vtab_collation(sqlite3_index_info *, int)
     * }
     */
    public static FunctionDescriptor sqlite3_vtab_collation$descriptor() {
        return sqlite3_vtab_collation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *sqlite3_vtab_collation(sqlite3_index_info *, int)
     * }
     */
    public static MethodHandle sqlite3_vtab_collation$handle() {
        return sqlite3_vtab_collation.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const char *sqlite3_vtab_collation(sqlite3_index_info *, int)
     * }
     */
    public static MemorySegment sqlite3_vtab_collation$address() {
        return sqlite3_vtab_collation.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const char *sqlite3_vtab_collation(sqlite3_index_info *, int)
     * }
     */
    public static MemorySegment sqlite3_vtab_collation(MemorySegment x0, int x1) {
        var mh$ = sqlite3_vtab_collation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_vtab_collation", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_vtab_distinct {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_vtab_distinct");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_vtab_distinct(sqlite3_index_info *)
     * }
     */
    public static FunctionDescriptor sqlite3_vtab_distinct$descriptor() {
        return sqlite3_vtab_distinct.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_vtab_distinct(sqlite3_index_info *)
     * }
     */
    public static MethodHandle sqlite3_vtab_distinct$handle() {
        return sqlite3_vtab_distinct.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_vtab_distinct(sqlite3_index_info *)
     * }
     */
    public static MemorySegment sqlite3_vtab_distinct$address() {
        return sqlite3_vtab_distinct.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_vtab_distinct(sqlite3_index_info *)
     * }
     */
    public static int sqlite3_vtab_distinct(MemorySegment x0) {
        var mh$ = sqlite3_vtab_distinct.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_vtab_distinct", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_vtab_in {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT,
            sqlite3_h.C_INT
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_vtab_in");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_vtab_in(sqlite3_index_info *, int iCons, int bHandle)
     * }
     */
    public static FunctionDescriptor sqlite3_vtab_in$descriptor() {
        return sqlite3_vtab_in.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_vtab_in(sqlite3_index_info *, int iCons, int bHandle)
     * }
     */
    public static MethodHandle sqlite3_vtab_in$handle() {
        return sqlite3_vtab_in.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_vtab_in(sqlite3_index_info *, int iCons, int bHandle)
     * }
     */
    public static MemorySegment sqlite3_vtab_in$address() {
        return sqlite3_vtab_in.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_vtab_in(sqlite3_index_info *, int iCons, int bHandle)
     * }
     */
    public static int sqlite3_vtab_in(MemorySegment x0, int iCons, int bHandle) {
        var mh$ = sqlite3_vtab_in.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_vtab_in", x0, iCons, bHandle);
            }
            return (int)mh$.invokeExact(x0, iCons, bHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_vtab_in_first {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_vtab_in_first");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_vtab_in_first(sqlite3_value *pVal, sqlite3_value **ppOut)
     * }
     */
    public static FunctionDescriptor sqlite3_vtab_in_first$descriptor() {
        return sqlite3_vtab_in_first.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_vtab_in_first(sqlite3_value *pVal, sqlite3_value **ppOut)
     * }
     */
    public static MethodHandle sqlite3_vtab_in_first$handle() {
        return sqlite3_vtab_in_first.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_vtab_in_first(sqlite3_value *pVal, sqlite3_value **ppOut)
     * }
     */
    public static MemorySegment sqlite3_vtab_in_first$address() {
        return sqlite3_vtab_in_first.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_vtab_in_first(sqlite3_value *pVal, sqlite3_value **ppOut)
     * }
     */
    public static int sqlite3_vtab_in_first(MemorySegment pVal, MemorySegment ppOut) {
        var mh$ = sqlite3_vtab_in_first.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_vtab_in_first", pVal, ppOut);
            }
            return (int)mh$.invokeExact(pVal, ppOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_vtab_in_next {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_vtab_in_next");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_vtab_in_next(sqlite3_value *pVal, sqlite3_value **ppOut)
     * }
     */
    public static FunctionDescriptor sqlite3_vtab_in_next$descriptor() {
        return sqlite3_vtab_in_next.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_vtab_in_next(sqlite3_value *pVal, sqlite3_value **ppOut)
     * }
     */
    public static MethodHandle sqlite3_vtab_in_next$handle() {
        return sqlite3_vtab_in_next.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_vtab_in_next(sqlite3_value *pVal, sqlite3_value **ppOut)
     * }
     */
    public static MemorySegment sqlite3_vtab_in_next$address() {
        return sqlite3_vtab_in_next.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_vtab_in_next(sqlite3_value *pVal, sqlite3_value **ppOut)
     * }
     */
    public static int sqlite3_vtab_in_next(MemorySegment pVal, MemorySegment ppOut) {
        var mh$ = sqlite3_vtab_in_next.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_vtab_in_next", pVal, ppOut);
            }
            return (int)mh$.invokeExact(pVal, ppOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_vtab_rhs_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_vtab_rhs_value");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_vtab_rhs_value(sqlite3_index_info *, int, sqlite3_value **ppVal)
     * }
     */
    public static FunctionDescriptor sqlite3_vtab_rhs_value$descriptor() {
        return sqlite3_vtab_rhs_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_vtab_rhs_value(sqlite3_index_info *, int, sqlite3_value **ppVal)
     * }
     */
    public static MethodHandle sqlite3_vtab_rhs_value$handle() {
        return sqlite3_vtab_rhs_value.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_vtab_rhs_value(sqlite3_index_info *, int, sqlite3_value **ppVal)
     * }
     */
    public static MemorySegment sqlite3_vtab_rhs_value$address() {
        return sqlite3_vtab_rhs_value.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_vtab_rhs_value(sqlite3_index_info *, int, sqlite3_value **ppVal)
     * }
     */
    public static int sqlite3_vtab_rhs_value(MemorySegment x0, int x1, MemorySegment ppVal) {
        var mh$ = sqlite3_vtab_rhs_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_vtab_rhs_value", x0, x1, ppVal);
            }
            return (int)mh$.invokeExact(x0, x1, ppVal);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_stmt_scanstatus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT,
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_stmt_scanstatus");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_stmt_scanstatus(sqlite3_stmt *pStmt, int idx, int iScanStatusOp, void *pOut)
     * }
     */
    public static FunctionDescriptor sqlite3_stmt_scanstatus$descriptor() {
        return sqlite3_stmt_scanstatus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_stmt_scanstatus(sqlite3_stmt *pStmt, int idx, int iScanStatusOp, void *pOut)
     * }
     */
    public static MethodHandle sqlite3_stmt_scanstatus$handle() {
        return sqlite3_stmt_scanstatus.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_stmt_scanstatus(sqlite3_stmt *pStmt, int idx, int iScanStatusOp, void *pOut)
     * }
     */
    public static MemorySegment sqlite3_stmt_scanstatus$address() {
        return sqlite3_stmt_scanstatus.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_stmt_scanstatus(sqlite3_stmt *pStmt, int idx, int iScanStatusOp, void *pOut)
     * }
     */
    public static int sqlite3_stmt_scanstatus(MemorySegment pStmt, int idx, int iScanStatusOp, MemorySegment pOut) {
        var mh$ = sqlite3_stmt_scanstatus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_stmt_scanstatus", pStmt, idx, iScanStatusOp, pOut);
            }
            return (int)mh$.invokeExact(pStmt, idx, iScanStatusOp, pOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_stmt_scanstatus_v2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT,
            sqlite3_h.C_INT,
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_stmt_scanstatus_v2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_stmt_scanstatus_v2(sqlite3_stmt *pStmt, int idx, int iScanStatusOp, int flags, void *pOut)
     * }
     */
    public static FunctionDescriptor sqlite3_stmt_scanstatus_v2$descriptor() {
        return sqlite3_stmt_scanstatus_v2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_stmt_scanstatus_v2(sqlite3_stmt *pStmt, int idx, int iScanStatusOp, int flags, void *pOut)
     * }
     */
    public static MethodHandle sqlite3_stmt_scanstatus_v2$handle() {
        return sqlite3_stmt_scanstatus_v2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_stmt_scanstatus_v2(sqlite3_stmt *pStmt, int idx, int iScanStatusOp, int flags, void *pOut)
     * }
     */
    public static MemorySegment sqlite3_stmt_scanstatus_v2$address() {
        return sqlite3_stmt_scanstatus_v2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_stmt_scanstatus_v2(sqlite3_stmt *pStmt, int idx, int iScanStatusOp, int flags, void *pOut)
     * }
     */
    public static int sqlite3_stmt_scanstatus_v2(MemorySegment pStmt, int idx, int iScanStatusOp, int flags, MemorySegment pOut) {
        var mh$ = sqlite3_stmt_scanstatus_v2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_stmt_scanstatus_v2", pStmt, idx, iScanStatusOp, flags, pOut);
            }
            return (int)mh$.invokeExact(pStmt, idx, iScanStatusOp, flags, pOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_stmt_scanstatus_reset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_stmt_scanstatus_reset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void sqlite3_stmt_scanstatus_reset(sqlite3_stmt *)
     * }
     */
    public static FunctionDescriptor sqlite3_stmt_scanstatus_reset$descriptor() {
        return sqlite3_stmt_scanstatus_reset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void sqlite3_stmt_scanstatus_reset(sqlite3_stmt *)
     * }
     */
    public static MethodHandle sqlite3_stmt_scanstatus_reset$handle() {
        return sqlite3_stmt_scanstatus_reset.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void sqlite3_stmt_scanstatus_reset(sqlite3_stmt *)
     * }
     */
    public static MemorySegment sqlite3_stmt_scanstatus_reset$address() {
        return sqlite3_stmt_scanstatus_reset.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void sqlite3_stmt_scanstatus_reset(sqlite3_stmt *)
     * }
     */
    public static void sqlite3_stmt_scanstatus_reset(MemorySegment x0) {
        var mh$ = sqlite3_stmt_scanstatus_reset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_stmt_scanstatus_reset", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_db_cacheflush {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_db_cacheflush");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_db_cacheflush(sqlite3 *)
     * }
     */
    public static FunctionDescriptor sqlite3_db_cacheflush$descriptor() {
        return sqlite3_db_cacheflush.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_db_cacheflush(sqlite3 *)
     * }
     */
    public static MethodHandle sqlite3_db_cacheflush$handle() {
        return sqlite3_db_cacheflush.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_db_cacheflush(sqlite3 *)
     * }
     */
    public static MemorySegment sqlite3_db_cacheflush$address() {
        return sqlite3_db_cacheflush.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_db_cacheflush(sqlite3 *)
     * }
     */
    public static int sqlite3_db_cacheflush(MemorySegment x0) {
        var mh$ = sqlite3_db_cacheflush.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_db_cacheflush", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_system_errno {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_system_errno");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_system_errno(sqlite3 *)
     * }
     */
    public static FunctionDescriptor sqlite3_system_errno$descriptor() {
        return sqlite3_system_errno.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_system_errno(sqlite3 *)
     * }
     */
    public static MethodHandle sqlite3_system_errno$handle() {
        return sqlite3_system_errno.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_system_errno(sqlite3 *)
     * }
     */
    public static MemorySegment sqlite3_system_errno$address() {
        return sqlite3_system_errno.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_system_errno(sqlite3 *)
     * }
     */
    public static int sqlite3_system_errno(MemorySegment x0) {
        var mh$ = sqlite3_system_errno.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_system_errno", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_snapshot_get {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_snapshot_get");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_snapshot_get(sqlite3 *db, const char *zSchema, sqlite3_snapshot **ppSnapshot)
     * }
     */
    public static FunctionDescriptor sqlite3_snapshot_get$descriptor() {
        return sqlite3_snapshot_get.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_snapshot_get(sqlite3 *db, const char *zSchema, sqlite3_snapshot **ppSnapshot)
     * }
     */
    public static MethodHandle sqlite3_snapshot_get$handle() {
        return sqlite3_snapshot_get.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_snapshot_get(sqlite3 *db, const char *zSchema, sqlite3_snapshot **ppSnapshot)
     * }
     */
    public static MemorySegment sqlite3_snapshot_get$address() {
        return sqlite3_snapshot_get.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_snapshot_get(sqlite3 *db, const char *zSchema, sqlite3_snapshot **ppSnapshot)
     * }
     */
    public static int sqlite3_snapshot_get(MemorySegment db, MemorySegment zSchema, MemorySegment ppSnapshot) {
        var mh$ = sqlite3_snapshot_get.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_snapshot_get", db, zSchema, ppSnapshot);
            }
            return (int)mh$.invokeExact(db, zSchema, ppSnapshot);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_snapshot_open {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_snapshot_open");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_snapshot_open(sqlite3 *db, const char *zSchema, sqlite3_snapshot *pSnapshot)
     * }
     */
    public static FunctionDescriptor sqlite3_snapshot_open$descriptor() {
        return sqlite3_snapshot_open.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_snapshot_open(sqlite3 *db, const char *zSchema, sqlite3_snapshot *pSnapshot)
     * }
     */
    public static MethodHandle sqlite3_snapshot_open$handle() {
        return sqlite3_snapshot_open.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_snapshot_open(sqlite3 *db, const char *zSchema, sqlite3_snapshot *pSnapshot)
     * }
     */
    public static MemorySegment sqlite3_snapshot_open$address() {
        return sqlite3_snapshot_open.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_snapshot_open(sqlite3 *db, const char *zSchema, sqlite3_snapshot *pSnapshot)
     * }
     */
    public static int sqlite3_snapshot_open(MemorySegment db, MemorySegment zSchema, MemorySegment pSnapshot) {
        var mh$ = sqlite3_snapshot_open.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_snapshot_open", db, zSchema, pSnapshot);
            }
            return (int)mh$.invokeExact(db, zSchema, pSnapshot);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_snapshot_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_snapshot_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void sqlite3_snapshot_free(sqlite3_snapshot *)
     * }
     */
    public static FunctionDescriptor sqlite3_snapshot_free$descriptor() {
        return sqlite3_snapshot_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void sqlite3_snapshot_free(sqlite3_snapshot *)
     * }
     */
    public static MethodHandle sqlite3_snapshot_free$handle() {
        return sqlite3_snapshot_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void sqlite3_snapshot_free(sqlite3_snapshot *)
     * }
     */
    public static MemorySegment sqlite3_snapshot_free$address() {
        return sqlite3_snapshot_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void sqlite3_snapshot_free(sqlite3_snapshot *)
     * }
     */
    public static void sqlite3_snapshot_free(MemorySegment x0) {
        var mh$ = sqlite3_snapshot_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_snapshot_free", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_snapshot_cmp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_snapshot_cmp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_snapshot_cmp(sqlite3_snapshot *p1, sqlite3_snapshot *p2)
     * }
     */
    public static FunctionDescriptor sqlite3_snapshot_cmp$descriptor() {
        return sqlite3_snapshot_cmp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_snapshot_cmp(sqlite3_snapshot *p1, sqlite3_snapshot *p2)
     * }
     */
    public static MethodHandle sqlite3_snapshot_cmp$handle() {
        return sqlite3_snapshot_cmp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_snapshot_cmp(sqlite3_snapshot *p1, sqlite3_snapshot *p2)
     * }
     */
    public static MemorySegment sqlite3_snapshot_cmp$address() {
        return sqlite3_snapshot_cmp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_snapshot_cmp(sqlite3_snapshot *p1, sqlite3_snapshot *p2)
     * }
     */
    public static int sqlite3_snapshot_cmp(MemorySegment p1, MemorySegment p2) {
        var mh$ = sqlite3_snapshot_cmp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_snapshot_cmp", p1, p2);
            }
            return (int)mh$.invokeExact(p1, p2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_snapshot_recover {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_snapshot_recover");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_snapshot_recover(sqlite3 *db, const char *zDb)
     * }
     */
    public static FunctionDescriptor sqlite3_snapshot_recover$descriptor() {
        return sqlite3_snapshot_recover.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_snapshot_recover(sqlite3 *db, const char *zDb)
     * }
     */
    public static MethodHandle sqlite3_snapshot_recover$handle() {
        return sqlite3_snapshot_recover.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_snapshot_recover(sqlite3 *db, const char *zDb)
     * }
     */
    public static MemorySegment sqlite3_snapshot_recover$address() {
        return sqlite3_snapshot_recover.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_snapshot_recover(sqlite3 *db, const char *zDb)
     * }
     */
    public static int sqlite3_snapshot_recover(MemorySegment db, MemorySegment zDb) {
        var mh$ = sqlite3_snapshot_recover.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_snapshot_recover", db, zDb);
            }
            return (int)mh$.invokeExact(db, zDb);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_serialize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_serialize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *sqlite3_serialize(sqlite3 *db, const char *zSchema, sqlite3_int64 *piSize, unsigned int mFlags)
     * }
     */
    public static FunctionDescriptor sqlite3_serialize$descriptor() {
        return sqlite3_serialize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *sqlite3_serialize(sqlite3 *db, const char *zSchema, sqlite3_int64 *piSize, unsigned int mFlags)
     * }
     */
    public static MethodHandle sqlite3_serialize$handle() {
        return sqlite3_serialize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *sqlite3_serialize(sqlite3 *db, const char *zSchema, sqlite3_int64 *piSize, unsigned int mFlags)
     * }
     */
    public static MemorySegment sqlite3_serialize$address() {
        return sqlite3_serialize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *sqlite3_serialize(sqlite3 *db, const char *zSchema, sqlite3_int64 *piSize, unsigned int mFlags)
     * }
     */
    public static MemorySegment sqlite3_serialize(MemorySegment db, MemorySegment zSchema, MemorySegment piSize, int mFlags) {
        var mh$ = sqlite3_serialize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_serialize", db, zSchema, piSize, mFlags);
            }
            return (MemorySegment)mh$.invokeExact(db, zSchema, piSize, mFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_deserialize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_LONG_LONG,
            sqlite3_h.C_LONG_LONG,
            sqlite3_h.C_INT
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_deserialize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_deserialize(sqlite3 *db, const char *zSchema, unsigned char *pData, sqlite3_int64 szDb, sqlite3_int64 szBuf, unsigned int mFlags)
     * }
     */
    public static FunctionDescriptor sqlite3_deserialize$descriptor() {
        return sqlite3_deserialize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_deserialize(sqlite3 *db, const char *zSchema, unsigned char *pData, sqlite3_int64 szDb, sqlite3_int64 szBuf, unsigned int mFlags)
     * }
     */
    public static MethodHandle sqlite3_deserialize$handle() {
        return sqlite3_deserialize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_deserialize(sqlite3 *db, const char *zSchema, unsigned char *pData, sqlite3_int64 szDb, sqlite3_int64 szBuf, unsigned int mFlags)
     * }
     */
    public static MemorySegment sqlite3_deserialize$address() {
        return sqlite3_deserialize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_deserialize(sqlite3 *db, const char *zSchema, unsigned char *pData, sqlite3_int64 szDb, sqlite3_int64 szBuf, unsigned int mFlags)
     * }
     */
    public static int sqlite3_deserialize(MemorySegment db, MemorySegment zSchema, MemorySegment pData, long szDb, long szBuf, int mFlags) {
        var mh$ = sqlite3_deserialize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_deserialize", db, zSchema, pData, szDb, szBuf, mFlags);
            }
            return (int)mh$.invokeExact(db, zSchema, pData, szDb, szBuf, mFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef double sqlite3_rtree_dbl
     * }
     */
    public static final OfDouble sqlite3_rtree_dbl = sqlite3_h.C_DOUBLE;

    private static class sqlite3_rtree_geometry_callback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_rtree_geometry_callback");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_rtree_geometry_callback(sqlite3 *db, const char *zGeom, int (*xGeom)(sqlite3_rtree_geometry *, int, sqlite3_rtree_dbl *, int *), void *pContext)
     * }
     */
    public static FunctionDescriptor sqlite3_rtree_geometry_callback$descriptor() {
        return sqlite3_rtree_geometry_callback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_rtree_geometry_callback(sqlite3 *db, const char *zGeom, int (*xGeom)(sqlite3_rtree_geometry *, int, sqlite3_rtree_dbl *, int *), void *pContext)
     * }
     */
    public static MethodHandle sqlite3_rtree_geometry_callback$handle() {
        return sqlite3_rtree_geometry_callback.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_rtree_geometry_callback(sqlite3 *db, const char *zGeom, int (*xGeom)(sqlite3_rtree_geometry *, int, sqlite3_rtree_dbl *, int *), void *pContext)
     * }
     */
    public static MemorySegment sqlite3_rtree_geometry_callback$address() {
        return sqlite3_rtree_geometry_callback.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_rtree_geometry_callback(sqlite3 *db, const char *zGeom, int (*xGeom)(sqlite3_rtree_geometry *, int, sqlite3_rtree_dbl *, int *), void *pContext)
     * }
     */
    public static int sqlite3_rtree_geometry_callback(MemorySegment db, MemorySegment zGeom, MemorySegment xGeom, MemorySegment pContext) {
        var mh$ = sqlite3_rtree_geometry_callback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_rtree_geometry_callback", db, zGeom, xGeom, pContext);
            }
            return (int)mh$.invokeExact(db, zGeom, xGeom, pContext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sqlite3_rtree_query_callback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        public static final MemorySegment ADDR = sqlite3_h.findOrThrow("sqlite3_rtree_query_callback");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sqlite3_rtree_query_callback(sqlite3 *db, const char *zQueryFunc, int (*xQueryFunc)(sqlite3_rtree_query_info *), void *pContext, void (*xDestructor)(void *))
     * }
     */
    public static FunctionDescriptor sqlite3_rtree_query_callback$descriptor() {
        return sqlite3_rtree_query_callback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sqlite3_rtree_query_callback(sqlite3 *db, const char *zQueryFunc, int (*xQueryFunc)(sqlite3_rtree_query_info *), void *pContext, void (*xDestructor)(void *))
     * }
     */
    public static MethodHandle sqlite3_rtree_query_callback$handle() {
        return sqlite3_rtree_query_callback.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sqlite3_rtree_query_callback(sqlite3 *db, const char *zQueryFunc, int (*xQueryFunc)(sqlite3_rtree_query_info *), void *pContext, void (*xDestructor)(void *))
     * }
     */
    public static MemorySegment sqlite3_rtree_query_callback$address() {
        return sqlite3_rtree_query_callback.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sqlite3_rtree_query_callback(sqlite3 *db, const char *zQueryFunc, int (*xQueryFunc)(sqlite3_rtree_query_info *), void *pContext, void (*xDestructor)(void *))
     * }
     */
    public static int sqlite3_rtree_query_callback(MemorySegment db, MemorySegment zQueryFunc, MemorySegment xQueryFunc, MemorySegment pContext, MemorySegment xDestructor) {
        var mh$ = sqlite3_rtree_query_callback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sqlite3_rtree_query_callback", db, zQueryFunc, xQueryFunc, pContext, xDestructor);
            }
            return (int)mh$.invokeExact(db, zQueryFunc, xQueryFunc, pContext, xDestructor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * #define SQLITE_VERSION "3.46.0"
     * }
     */
    public static MemorySegment SQLITE_VERSION() {
        class Holder {
            static final MemorySegment SQLITE_VERSION
                = sqlite3_h.LIBRARY_ARENA.allocateFrom("3.46.0");
        }
        return Holder.SQLITE_VERSION;
    }
    /**
     * {@snippet lang=c :
     * #define SQLITE_SOURCE_ID "2024-05-23 13:25:27 96c92aba00c8375bc32fafcdf12429c58bd8aabfcadab6683e35bbb9cdebf19e"
     * }
     */
    public static MemorySegment SQLITE_SOURCE_ID() {
        class Holder {
            static final MemorySegment SQLITE_SOURCE_ID
                = sqlite3_h.LIBRARY_ARENA.allocateFrom("2024-05-23 13:25:27 96c92aba00c8375bc32fafcdf12429c58bd8aabfcadab6683e35bbb9cdebf19e");
        }
        return Holder.SQLITE_SOURCE_ID;
    }
    private static final int SQLITE_ERROR_MISSING_COLLSEQ = (int)257L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_ERROR_MISSING_COLLSEQ 257
     * }
     */
    public static int SQLITE_ERROR_MISSING_COLLSEQ() {
        return SQLITE_ERROR_MISSING_COLLSEQ;
    }
    private static final int SQLITE_ERROR_RETRY = (int)513L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_ERROR_RETRY 513
     * }
     */
    public static int SQLITE_ERROR_RETRY() {
        return SQLITE_ERROR_RETRY;
    }
    private static final int SQLITE_ERROR_SNAPSHOT = (int)769L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_ERROR_SNAPSHOT 769
     * }
     */
    public static int SQLITE_ERROR_SNAPSHOT() {
        return SQLITE_ERROR_SNAPSHOT;
    }
    private static final int SQLITE_IOERR_READ = (int)266L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_IOERR_READ 266
     * }
     */
    public static int SQLITE_IOERR_READ() {
        return SQLITE_IOERR_READ;
    }
    private static final int SQLITE_IOERR_SHORT_READ = (int)522L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_IOERR_SHORT_READ 522
     * }
     */
    public static int SQLITE_IOERR_SHORT_READ() {
        return SQLITE_IOERR_SHORT_READ;
    }
    private static final int SQLITE_IOERR_WRITE = (int)778L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_IOERR_WRITE 778
     * }
     */
    public static int SQLITE_IOERR_WRITE() {
        return SQLITE_IOERR_WRITE;
    }
    private static final int SQLITE_IOERR_FSYNC = (int)1034L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_IOERR_FSYNC 1034
     * }
     */
    public static int SQLITE_IOERR_FSYNC() {
        return SQLITE_IOERR_FSYNC;
    }
    private static final int SQLITE_IOERR_DIR_FSYNC = (int)1290L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_IOERR_DIR_FSYNC 1290
     * }
     */
    public static int SQLITE_IOERR_DIR_FSYNC() {
        return SQLITE_IOERR_DIR_FSYNC;
    }
    private static final int SQLITE_IOERR_TRUNCATE = (int)1546L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_IOERR_TRUNCATE 1546
     * }
     */
    public static int SQLITE_IOERR_TRUNCATE() {
        return SQLITE_IOERR_TRUNCATE;
    }
    private static final int SQLITE_IOERR_FSTAT = (int)1802L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_IOERR_FSTAT 1802
     * }
     */
    public static int SQLITE_IOERR_FSTAT() {
        return SQLITE_IOERR_FSTAT;
    }
    private static final int SQLITE_IOERR_UNLOCK = (int)2058L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_IOERR_UNLOCK 2058
     * }
     */
    public static int SQLITE_IOERR_UNLOCK() {
        return SQLITE_IOERR_UNLOCK;
    }
    private static final int SQLITE_IOERR_RDLOCK = (int)2314L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_IOERR_RDLOCK 2314
     * }
     */
    public static int SQLITE_IOERR_RDLOCK() {
        return SQLITE_IOERR_RDLOCK;
    }
    private static final int SQLITE_IOERR_DELETE = (int)2570L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_IOERR_DELETE 2570
     * }
     */
    public static int SQLITE_IOERR_DELETE() {
        return SQLITE_IOERR_DELETE;
    }
    private static final int SQLITE_IOERR_BLOCKED = (int)2826L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_IOERR_BLOCKED 2826
     * }
     */
    public static int SQLITE_IOERR_BLOCKED() {
        return SQLITE_IOERR_BLOCKED;
    }
    private static final int SQLITE_IOERR_NOMEM = (int)3082L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_IOERR_NOMEM 3082
     * }
     */
    public static int SQLITE_IOERR_NOMEM() {
        return SQLITE_IOERR_NOMEM;
    }
    private static final int SQLITE_IOERR_ACCESS = (int)3338L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_IOERR_ACCESS 3338
     * }
     */
    public static int SQLITE_IOERR_ACCESS() {
        return SQLITE_IOERR_ACCESS;
    }
    private static final int SQLITE_IOERR_CHECKRESERVEDLOCK = (int)3594L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_IOERR_CHECKRESERVEDLOCK 3594
     * }
     */
    public static int SQLITE_IOERR_CHECKRESERVEDLOCK() {
        return SQLITE_IOERR_CHECKRESERVEDLOCK;
    }
    private static final int SQLITE_IOERR_LOCK = (int)3850L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_IOERR_LOCK 3850
     * }
     */
    public static int SQLITE_IOERR_LOCK() {
        return SQLITE_IOERR_LOCK;
    }
    private static final int SQLITE_IOERR_CLOSE = (int)4106L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_IOERR_CLOSE 4106
     * }
     */
    public static int SQLITE_IOERR_CLOSE() {
        return SQLITE_IOERR_CLOSE;
    }
    private static final int SQLITE_IOERR_DIR_CLOSE = (int)4362L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_IOERR_DIR_CLOSE 4362
     * }
     */
    public static int SQLITE_IOERR_DIR_CLOSE() {
        return SQLITE_IOERR_DIR_CLOSE;
    }
    private static final int SQLITE_IOERR_SHMOPEN = (int)4618L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_IOERR_SHMOPEN 4618
     * }
     */
    public static int SQLITE_IOERR_SHMOPEN() {
        return SQLITE_IOERR_SHMOPEN;
    }
    private static final int SQLITE_IOERR_SHMSIZE = (int)4874L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_IOERR_SHMSIZE 4874
     * }
     */
    public static int SQLITE_IOERR_SHMSIZE() {
        return SQLITE_IOERR_SHMSIZE;
    }
    private static final int SQLITE_IOERR_SHMLOCK = (int)5130L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_IOERR_SHMLOCK 5130
     * }
     */
    public static int SQLITE_IOERR_SHMLOCK() {
        return SQLITE_IOERR_SHMLOCK;
    }
    private static final int SQLITE_IOERR_SHMMAP = (int)5386L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_IOERR_SHMMAP 5386
     * }
     */
    public static int SQLITE_IOERR_SHMMAP() {
        return SQLITE_IOERR_SHMMAP;
    }
    private static final int SQLITE_IOERR_SEEK = (int)5642L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_IOERR_SEEK 5642
     * }
     */
    public static int SQLITE_IOERR_SEEK() {
        return SQLITE_IOERR_SEEK;
    }
    private static final int SQLITE_IOERR_DELETE_NOENT = (int)5898L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_IOERR_DELETE_NOENT 5898
     * }
     */
    public static int SQLITE_IOERR_DELETE_NOENT() {
        return SQLITE_IOERR_DELETE_NOENT;
    }
    private static final int SQLITE_IOERR_MMAP = (int)6154L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_IOERR_MMAP 6154
     * }
     */
    public static int SQLITE_IOERR_MMAP() {
        return SQLITE_IOERR_MMAP;
    }
    private static final int SQLITE_IOERR_GETTEMPPATH = (int)6410L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_IOERR_GETTEMPPATH 6410
     * }
     */
    public static int SQLITE_IOERR_GETTEMPPATH() {
        return SQLITE_IOERR_GETTEMPPATH;
    }
    private static final int SQLITE_IOERR_CONVPATH = (int)6666L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_IOERR_CONVPATH 6666
     * }
     */
    public static int SQLITE_IOERR_CONVPATH() {
        return SQLITE_IOERR_CONVPATH;
    }
    private static final int SQLITE_IOERR_VNODE = (int)6922L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_IOERR_VNODE 6922
     * }
     */
    public static int SQLITE_IOERR_VNODE() {
        return SQLITE_IOERR_VNODE;
    }
    private static final int SQLITE_IOERR_AUTH = (int)7178L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_IOERR_AUTH 7178
     * }
     */
    public static int SQLITE_IOERR_AUTH() {
        return SQLITE_IOERR_AUTH;
    }
    private static final int SQLITE_IOERR_BEGIN_ATOMIC = (int)7434L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_IOERR_BEGIN_ATOMIC 7434
     * }
     */
    public static int SQLITE_IOERR_BEGIN_ATOMIC() {
        return SQLITE_IOERR_BEGIN_ATOMIC;
    }
    private static final int SQLITE_IOERR_COMMIT_ATOMIC = (int)7690L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_IOERR_COMMIT_ATOMIC 7690
     * }
     */
    public static int SQLITE_IOERR_COMMIT_ATOMIC() {
        return SQLITE_IOERR_COMMIT_ATOMIC;
    }
    private static final int SQLITE_IOERR_ROLLBACK_ATOMIC = (int)7946L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_IOERR_ROLLBACK_ATOMIC 7946
     * }
     */
    public static int SQLITE_IOERR_ROLLBACK_ATOMIC() {
        return SQLITE_IOERR_ROLLBACK_ATOMIC;
    }
    private static final int SQLITE_IOERR_DATA = (int)8202L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_IOERR_DATA 8202
     * }
     */
    public static int SQLITE_IOERR_DATA() {
        return SQLITE_IOERR_DATA;
    }
    private static final int SQLITE_IOERR_CORRUPTFS = (int)8458L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_IOERR_CORRUPTFS 8458
     * }
     */
    public static int SQLITE_IOERR_CORRUPTFS() {
        return SQLITE_IOERR_CORRUPTFS;
    }
    private static final int SQLITE_IOERR_IN_PAGE = (int)8714L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_IOERR_IN_PAGE 8714
     * }
     */
    public static int SQLITE_IOERR_IN_PAGE() {
        return SQLITE_IOERR_IN_PAGE;
    }
    private static final int SQLITE_LOCKED_SHAREDCACHE = (int)262L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_LOCKED_SHAREDCACHE 262
     * }
     */
    public static int SQLITE_LOCKED_SHAREDCACHE() {
        return SQLITE_LOCKED_SHAREDCACHE;
    }
    private static final int SQLITE_LOCKED_VTAB = (int)518L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_LOCKED_VTAB 518
     * }
     */
    public static int SQLITE_LOCKED_VTAB() {
        return SQLITE_LOCKED_VTAB;
    }
    private static final int SQLITE_BUSY_RECOVERY = (int)261L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_BUSY_RECOVERY 261
     * }
     */
    public static int SQLITE_BUSY_RECOVERY() {
        return SQLITE_BUSY_RECOVERY;
    }
    private static final int SQLITE_BUSY_SNAPSHOT = (int)517L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_BUSY_SNAPSHOT 517
     * }
     */
    public static int SQLITE_BUSY_SNAPSHOT() {
        return SQLITE_BUSY_SNAPSHOT;
    }
    private static final int SQLITE_BUSY_TIMEOUT = (int)773L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_BUSY_TIMEOUT 773
     * }
     */
    public static int SQLITE_BUSY_TIMEOUT() {
        return SQLITE_BUSY_TIMEOUT;
    }
    private static final int SQLITE_CANTOPEN_NOTEMPDIR = (int)270L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_CANTOPEN_NOTEMPDIR 270
     * }
     */
    public static int SQLITE_CANTOPEN_NOTEMPDIR() {
        return SQLITE_CANTOPEN_NOTEMPDIR;
    }
    private static final int SQLITE_CANTOPEN_ISDIR = (int)526L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_CANTOPEN_ISDIR 526
     * }
     */
    public static int SQLITE_CANTOPEN_ISDIR() {
        return SQLITE_CANTOPEN_ISDIR;
    }
    private static final int SQLITE_CANTOPEN_FULLPATH = (int)782L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_CANTOPEN_FULLPATH 782
     * }
     */
    public static int SQLITE_CANTOPEN_FULLPATH() {
        return SQLITE_CANTOPEN_FULLPATH;
    }
    private static final int SQLITE_CANTOPEN_CONVPATH = (int)1038L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_CANTOPEN_CONVPATH 1038
     * }
     */
    public static int SQLITE_CANTOPEN_CONVPATH() {
        return SQLITE_CANTOPEN_CONVPATH;
    }
    private static final int SQLITE_CANTOPEN_DIRTYWAL = (int)1294L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_CANTOPEN_DIRTYWAL 1294
     * }
     */
    public static int SQLITE_CANTOPEN_DIRTYWAL() {
        return SQLITE_CANTOPEN_DIRTYWAL;
    }
    private static final int SQLITE_CANTOPEN_SYMLINK = (int)1550L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_CANTOPEN_SYMLINK 1550
     * }
     */
    public static int SQLITE_CANTOPEN_SYMLINK() {
        return SQLITE_CANTOPEN_SYMLINK;
    }
    private static final int SQLITE_CORRUPT_VTAB = (int)267L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_CORRUPT_VTAB 267
     * }
     */
    public static int SQLITE_CORRUPT_VTAB() {
        return SQLITE_CORRUPT_VTAB;
    }
    private static final int SQLITE_CORRUPT_SEQUENCE = (int)523L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_CORRUPT_SEQUENCE 523
     * }
     */
    public static int SQLITE_CORRUPT_SEQUENCE() {
        return SQLITE_CORRUPT_SEQUENCE;
    }
    private static final int SQLITE_CORRUPT_INDEX = (int)779L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_CORRUPT_INDEX 779
     * }
     */
    public static int SQLITE_CORRUPT_INDEX() {
        return SQLITE_CORRUPT_INDEX;
    }
    private static final int SQLITE_READONLY_RECOVERY = (int)264L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_READONLY_RECOVERY 264
     * }
     */
    public static int SQLITE_READONLY_RECOVERY() {
        return SQLITE_READONLY_RECOVERY;
    }
    private static final int SQLITE_READONLY_CANTLOCK = (int)520L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_READONLY_CANTLOCK 520
     * }
     */
    public static int SQLITE_READONLY_CANTLOCK() {
        return SQLITE_READONLY_CANTLOCK;
    }
    private static final int SQLITE_READONLY_ROLLBACK = (int)776L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_READONLY_ROLLBACK 776
     * }
     */
    public static int SQLITE_READONLY_ROLLBACK() {
        return SQLITE_READONLY_ROLLBACK;
    }
    private static final int SQLITE_READONLY_DBMOVED = (int)1032L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_READONLY_DBMOVED 1032
     * }
     */
    public static int SQLITE_READONLY_DBMOVED() {
        return SQLITE_READONLY_DBMOVED;
    }
    private static final int SQLITE_READONLY_CANTINIT = (int)1288L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_READONLY_CANTINIT 1288
     * }
     */
    public static int SQLITE_READONLY_CANTINIT() {
        return SQLITE_READONLY_CANTINIT;
    }
    private static final int SQLITE_READONLY_DIRECTORY = (int)1544L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_READONLY_DIRECTORY 1544
     * }
     */
    public static int SQLITE_READONLY_DIRECTORY() {
        return SQLITE_READONLY_DIRECTORY;
    }
    private static final int SQLITE_ABORT_ROLLBACK = (int)516L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_ABORT_ROLLBACK 516
     * }
     */
    public static int SQLITE_ABORT_ROLLBACK() {
        return SQLITE_ABORT_ROLLBACK;
    }
    private static final int SQLITE_CONSTRAINT_CHECK = (int)275L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_CONSTRAINT_CHECK 275
     * }
     */
    public static int SQLITE_CONSTRAINT_CHECK() {
        return SQLITE_CONSTRAINT_CHECK;
    }
    private static final int SQLITE_CONSTRAINT_COMMITHOOK = (int)531L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_CONSTRAINT_COMMITHOOK 531
     * }
     */
    public static int SQLITE_CONSTRAINT_COMMITHOOK() {
        return SQLITE_CONSTRAINT_COMMITHOOK;
    }
    private static final int SQLITE_CONSTRAINT_FOREIGNKEY = (int)787L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_CONSTRAINT_FOREIGNKEY 787
     * }
     */
    public static int SQLITE_CONSTRAINT_FOREIGNKEY() {
        return SQLITE_CONSTRAINT_FOREIGNKEY;
    }
    private static final int SQLITE_CONSTRAINT_FUNCTION = (int)1043L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_CONSTRAINT_FUNCTION 1043
     * }
     */
    public static int SQLITE_CONSTRAINT_FUNCTION() {
        return SQLITE_CONSTRAINT_FUNCTION;
    }
    private static final int SQLITE_CONSTRAINT_NOTNULL = (int)1299L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_CONSTRAINT_NOTNULL 1299
     * }
     */
    public static int SQLITE_CONSTRAINT_NOTNULL() {
        return SQLITE_CONSTRAINT_NOTNULL;
    }
    private static final int SQLITE_CONSTRAINT_PRIMARYKEY = (int)1555L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_CONSTRAINT_PRIMARYKEY 1555
     * }
     */
    public static int SQLITE_CONSTRAINT_PRIMARYKEY() {
        return SQLITE_CONSTRAINT_PRIMARYKEY;
    }
    private static final int SQLITE_CONSTRAINT_TRIGGER = (int)1811L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_CONSTRAINT_TRIGGER 1811
     * }
     */
    public static int SQLITE_CONSTRAINT_TRIGGER() {
        return SQLITE_CONSTRAINT_TRIGGER;
    }
    private static final int SQLITE_CONSTRAINT_UNIQUE = (int)2067L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_CONSTRAINT_UNIQUE 2067
     * }
     */
    public static int SQLITE_CONSTRAINT_UNIQUE() {
        return SQLITE_CONSTRAINT_UNIQUE;
    }
    private static final int SQLITE_CONSTRAINT_VTAB = (int)2323L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_CONSTRAINT_VTAB 2323
     * }
     */
    public static int SQLITE_CONSTRAINT_VTAB() {
        return SQLITE_CONSTRAINT_VTAB;
    }
    private static final int SQLITE_CONSTRAINT_ROWID = (int)2579L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_CONSTRAINT_ROWID 2579
     * }
     */
    public static int SQLITE_CONSTRAINT_ROWID() {
        return SQLITE_CONSTRAINT_ROWID;
    }
    private static final int SQLITE_CONSTRAINT_PINNED = (int)2835L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_CONSTRAINT_PINNED 2835
     * }
     */
    public static int SQLITE_CONSTRAINT_PINNED() {
        return SQLITE_CONSTRAINT_PINNED;
    }
    private static final int SQLITE_CONSTRAINT_DATATYPE = (int)3091L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_CONSTRAINT_DATATYPE 3091
     * }
     */
    public static int SQLITE_CONSTRAINT_DATATYPE() {
        return SQLITE_CONSTRAINT_DATATYPE;
    }
    private static final int SQLITE_NOTICE_RECOVER_WAL = (int)283L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_NOTICE_RECOVER_WAL 283
     * }
     */
    public static int SQLITE_NOTICE_RECOVER_WAL() {
        return SQLITE_NOTICE_RECOVER_WAL;
    }
    private static final int SQLITE_NOTICE_RECOVER_ROLLBACK = (int)539L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_NOTICE_RECOVER_ROLLBACK 539
     * }
     */
    public static int SQLITE_NOTICE_RECOVER_ROLLBACK() {
        return SQLITE_NOTICE_RECOVER_ROLLBACK;
    }
    private static final int SQLITE_NOTICE_RBU = (int)795L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_NOTICE_RBU 795
     * }
     */
    public static int SQLITE_NOTICE_RBU() {
        return SQLITE_NOTICE_RBU;
    }
    private static final int SQLITE_WARNING_AUTOINDEX = (int)284L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_WARNING_AUTOINDEX 284
     * }
     */
    public static int SQLITE_WARNING_AUTOINDEX() {
        return SQLITE_WARNING_AUTOINDEX;
    }
    private static final int SQLITE_AUTH_USER = (int)279L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_AUTH_USER 279
     * }
     */
    public static int SQLITE_AUTH_USER() {
        return SQLITE_AUTH_USER;
    }
    private static final int SQLITE_OK_LOAD_PERMANENTLY = (int)256L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_OK_LOAD_PERMANENTLY 256
     * }
     */
    public static int SQLITE_OK_LOAD_PERMANENTLY() {
        return SQLITE_OK_LOAD_PERMANENTLY;
    }
    private static final int SQLITE_OK_SYMLINK = (int)512L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_OK_SYMLINK 512
     * }
     */
    public static int SQLITE_OK_SYMLINK() {
        return SQLITE_OK_SYMLINK;
    }
    private static final int SQLITE_GET_LOCKPROXYFILE = (int)2L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_GET_LOCKPROXYFILE 2
     * }
     */
    public static int SQLITE_GET_LOCKPROXYFILE() {
        return SQLITE_GET_LOCKPROXYFILE;
    }
    private static final int SQLITE_SET_LOCKPROXYFILE = (int)3L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_SET_LOCKPROXYFILE 3
     * }
     */
    public static int SQLITE_SET_LOCKPROXYFILE() {
        return SQLITE_SET_LOCKPROXYFILE;
    }
    private static final int SQLITE_LAST_ERRNO = (int)4L;
    /**
     * {@snippet lang=c :
     * #define SQLITE_LAST_ERRNO 4
     * }
     */
    public static int SQLITE_LAST_ERRNO() {
        return SQLITE_LAST_ERRNO;
    }
    private static final MemorySegment SQLITE_STATIC = MemorySegment.ofAddress(0L);
    /**
     * {@snippet lang=c :
     * #define SQLITE_STATIC (void*) 0
     * }
     */
    public static MemorySegment SQLITE_STATIC() {
        return SQLITE_STATIC;
    }
    private static final MemorySegment SQLITE_TRANSIENT = MemorySegment.ofAddress(-1L);
    /**
     * {@snippet lang=c :
     * #define SQLITE_TRANSIENT (void*) -1
     * }
     */
    public static MemorySegment SQLITE_TRANSIENT() {
        return SQLITE_TRANSIENT;
    }
}

