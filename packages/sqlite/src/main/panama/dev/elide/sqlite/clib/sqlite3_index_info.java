// Generated by jextract

package dev.elide.sqlite.clib;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct sqlite3_index_info {
 *     int nConstraint;
 *     struct sqlite3_index_constraint {
 *         int iColumn;
 *         unsigned char op;
 *         unsigned char usable;
 *         int iTermOffset;
 *     } *aConstraint;
 *     int nOrderBy;
 *     struct sqlite3_index_orderby {
 *         int iColumn;
 *         unsigned char desc;
 *     } *aOrderBy;
 *     struct sqlite3_index_constraint_usage {
 *         int argvIndex;
 *         unsigned char omit;
 *     } *aConstraintUsage;
 *     int idxNum;
 *     char *idxStr;
 *     int needToFreeIdxStr;
 *     int orderByConsumed;
 *     double estimatedCost;
 *     sqlite3_int64 estimatedRows;
 *     int idxFlags;
 *     sqlite3_uint64 colUsed;
 * }
 * }
 */
public class sqlite3_index_info {

    sqlite3_index_info() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        sqlite3_h.C_INT.withName("nConstraint"),
        MemoryLayout.paddingLayout(4),
        sqlite3_h.C_POINTER.withName("aConstraint"),
        sqlite3_h.C_INT.withName("nOrderBy"),
        MemoryLayout.paddingLayout(4),
        sqlite3_h.C_POINTER.withName("aOrderBy"),
        sqlite3_h.C_POINTER.withName("aConstraintUsage"),
        sqlite3_h.C_INT.withName("idxNum"),
        MemoryLayout.paddingLayout(4),
        sqlite3_h.C_POINTER.withName("idxStr"),
        sqlite3_h.C_INT.withName("needToFreeIdxStr"),
        sqlite3_h.C_INT.withName("orderByConsumed"),
        sqlite3_h.C_DOUBLE.withName("estimatedCost"),
        sqlite3_h.C_LONG_LONG.withName("estimatedRows"),
        sqlite3_h.C_INT.withName("idxFlags"),
        MemoryLayout.paddingLayout(4),
        sqlite3_h.C_LONG_LONG.withName("colUsed")
    ).withName("sqlite3_index_info");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt nConstraint$LAYOUT = (OfInt)$LAYOUT.select(groupElement("nConstraint"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int nConstraint
     * }
     */
    public static final OfInt nConstraint$layout() {
        return nConstraint$LAYOUT;
    }

    private static final long nConstraint$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int nConstraint
     * }
     */
    public static final long nConstraint$offset() {
        return nConstraint$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int nConstraint
     * }
     */
    public static int nConstraint(MemorySegment struct) {
        return struct.get(nConstraint$LAYOUT, nConstraint$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int nConstraint
     * }
     */
    public static void nConstraint(MemorySegment struct, int fieldValue) {
        struct.set(nConstraint$LAYOUT, nConstraint$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * struct sqlite3_index_constraint {
     *     int iColumn;
     *     unsigned char op;
     *     unsigned char usable;
     *     int iTermOffset;
     * }
     * }
     */
    public static class sqlite3_index_constraint {

        sqlite3_index_constraint() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            sqlite3_h.C_INT.withName("iColumn"),
            sqlite3_h.C_CHAR.withName("op"),
            sqlite3_h.C_CHAR.withName("usable"),
            MemoryLayout.paddingLayout(2),
            sqlite3_h.C_INT.withName("iTermOffset")
        ).withName("sqlite3_index_constraint");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final OfInt iColumn$LAYOUT = (OfInt)$LAYOUT.select(groupElement("iColumn"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * int iColumn
         * }
         */
        public static final OfInt iColumn$layout() {
            return iColumn$LAYOUT;
        }

        private static final long iColumn$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * int iColumn
         * }
         */
        public static final long iColumn$offset() {
            return iColumn$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * int iColumn
         * }
         */
        public static int iColumn(MemorySegment struct) {
            return struct.get(iColumn$LAYOUT, iColumn$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * int iColumn
         * }
         */
        public static void iColumn(MemorySegment struct, int fieldValue) {
            struct.set(iColumn$LAYOUT, iColumn$OFFSET, fieldValue);
        }

        private static final OfByte op$LAYOUT = (OfByte)$LAYOUT.select(groupElement("op"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * unsigned char op
         * }
         */
        public static final OfByte op$layout() {
            return op$LAYOUT;
        }

        private static final long op$OFFSET = 4;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * unsigned char op
         * }
         */
        public static final long op$offset() {
            return op$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * unsigned char op
         * }
         */
        public static byte op(MemorySegment struct) {
            return struct.get(op$LAYOUT, op$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * unsigned char op
         * }
         */
        public static void op(MemorySegment struct, byte fieldValue) {
            struct.set(op$LAYOUT, op$OFFSET, fieldValue);
        }

        private static final OfByte usable$LAYOUT = (OfByte)$LAYOUT.select(groupElement("usable"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * unsigned char usable
         * }
         */
        public static final OfByte usable$layout() {
            return usable$LAYOUT;
        }

        private static final long usable$OFFSET = 5;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * unsigned char usable
         * }
         */
        public static final long usable$offset() {
            return usable$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * unsigned char usable
         * }
         */
        public static byte usable(MemorySegment struct) {
            return struct.get(usable$LAYOUT, usable$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * unsigned char usable
         * }
         */
        public static void usable(MemorySegment struct, byte fieldValue) {
            struct.set(usable$LAYOUT, usable$OFFSET, fieldValue);
        }

        private static final OfInt iTermOffset$LAYOUT = (OfInt)$LAYOUT.select(groupElement("iTermOffset"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * int iTermOffset
         * }
         */
        public static final OfInt iTermOffset$layout() {
            return iTermOffset$LAYOUT;
        }

        private static final long iTermOffset$OFFSET = 8;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * int iTermOffset
         * }
         */
        public static final long iTermOffset$offset() {
            return iTermOffset$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * int iTermOffset
         * }
         */
        public static int iTermOffset(MemorySegment struct) {
            return struct.get(iTermOffset$LAYOUT, iTermOffset$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * int iTermOffset
         * }
         */
        public static void iTermOffset(MemorySegment struct, int fieldValue) {
            struct.set(iTermOffset$LAYOUT, iTermOffset$OFFSET, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final AddressLayout aConstraint$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("aConstraint"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct sqlite3_index_constraint *aConstraint
     * }
     */
    public static final AddressLayout aConstraint$layout() {
        return aConstraint$LAYOUT;
    }

    private static final long aConstraint$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct sqlite3_index_constraint *aConstraint
     * }
     */
    public static final long aConstraint$offset() {
        return aConstraint$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct sqlite3_index_constraint *aConstraint
     * }
     */
    public static MemorySegment aConstraint(MemorySegment struct) {
        return struct.get(aConstraint$LAYOUT, aConstraint$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct sqlite3_index_constraint *aConstraint
     * }
     */
    public static void aConstraint(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(aConstraint$LAYOUT, aConstraint$OFFSET, fieldValue);
    }

    private static final OfInt nOrderBy$LAYOUT = (OfInt)$LAYOUT.select(groupElement("nOrderBy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int nOrderBy
     * }
     */
    public static final OfInt nOrderBy$layout() {
        return nOrderBy$LAYOUT;
    }

    private static final long nOrderBy$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int nOrderBy
     * }
     */
    public static final long nOrderBy$offset() {
        return nOrderBy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int nOrderBy
     * }
     */
    public static int nOrderBy(MemorySegment struct) {
        return struct.get(nOrderBy$LAYOUT, nOrderBy$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int nOrderBy
     * }
     */
    public static void nOrderBy(MemorySegment struct, int fieldValue) {
        struct.set(nOrderBy$LAYOUT, nOrderBy$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * struct sqlite3_index_orderby {
     *     int iColumn;
     *     unsigned char desc;
     * }
     * }
     */
    public static class sqlite3_index_orderby {

        sqlite3_index_orderby() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            sqlite3_h.C_INT.withName("iColumn"),
            sqlite3_h.C_CHAR.withName("desc"),
            MemoryLayout.paddingLayout(3)
        ).withName("sqlite3_index_orderby");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final OfInt iColumn$LAYOUT = (OfInt)$LAYOUT.select(groupElement("iColumn"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * int iColumn
         * }
         */
        public static final OfInt iColumn$layout() {
            return iColumn$LAYOUT;
        }

        private static final long iColumn$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * int iColumn
         * }
         */
        public static final long iColumn$offset() {
            return iColumn$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * int iColumn
         * }
         */
        public static int iColumn(MemorySegment struct) {
            return struct.get(iColumn$LAYOUT, iColumn$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * int iColumn
         * }
         */
        public static void iColumn(MemorySegment struct, int fieldValue) {
            struct.set(iColumn$LAYOUT, iColumn$OFFSET, fieldValue);
        }

        private static final OfByte desc$LAYOUT = (OfByte)$LAYOUT.select(groupElement("desc"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * unsigned char desc
         * }
         */
        public static final OfByte desc$layout() {
            return desc$LAYOUT;
        }

        private static final long desc$OFFSET = 4;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * unsigned char desc
         * }
         */
        public static final long desc$offset() {
            return desc$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * unsigned char desc
         * }
         */
        public static byte desc(MemorySegment struct) {
            return struct.get(desc$LAYOUT, desc$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * unsigned char desc
         * }
         */
        public static void desc(MemorySegment struct, byte fieldValue) {
            struct.set(desc$LAYOUT, desc$OFFSET, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final AddressLayout aOrderBy$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("aOrderBy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct sqlite3_index_orderby *aOrderBy
     * }
     */
    public static final AddressLayout aOrderBy$layout() {
        return aOrderBy$LAYOUT;
    }

    private static final long aOrderBy$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct sqlite3_index_orderby *aOrderBy
     * }
     */
    public static final long aOrderBy$offset() {
        return aOrderBy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct sqlite3_index_orderby *aOrderBy
     * }
     */
    public static MemorySegment aOrderBy(MemorySegment struct) {
        return struct.get(aOrderBy$LAYOUT, aOrderBy$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct sqlite3_index_orderby *aOrderBy
     * }
     */
    public static void aOrderBy(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(aOrderBy$LAYOUT, aOrderBy$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * struct sqlite3_index_constraint_usage {
     *     int argvIndex;
     *     unsigned char omit;
     * }
     * }
     */
    public static class sqlite3_index_constraint_usage {

        sqlite3_index_constraint_usage() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            sqlite3_h.C_INT.withName("argvIndex"),
            sqlite3_h.C_CHAR.withName("omit"),
            MemoryLayout.paddingLayout(3)
        ).withName("sqlite3_index_constraint_usage");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final OfInt argvIndex$LAYOUT = (OfInt)$LAYOUT.select(groupElement("argvIndex"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * int argvIndex
         * }
         */
        public static final OfInt argvIndex$layout() {
            return argvIndex$LAYOUT;
        }

        private static final long argvIndex$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * int argvIndex
         * }
         */
        public static final long argvIndex$offset() {
            return argvIndex$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * int argvIndex
         * }
         */
        public static int argvIndex(MemorySegment struct) {
            return struct.get(argvIndex$LAYOUT, argvIndex$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * int argvIndex
         * }
         */
        public static void argvIndex(MemorySegment struct, int fieldValue) {
            struct.set(argvIndex$LAYOUT, argvIndex$OFFSET, fieldValue);
        }

        private static final OfByte omit$LAYOUT = (OfByte)$LAYOUT.select(groupElement("omit"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * unsigned char omit
         * }
         */
        public static final OfByte omit$layout() {
            return omit$LAYOUT;
        }

        private static final long omit$OFFSET = 4;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * unsigned char omit
         * }
         */
        public static final long omit$offset() {
            return omit$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * unsigned char omit
         * }
         */
        public static byte omit(MemorySegment struct) {
            return struct.get(omit$LAYOUT, omit$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * unsigned char omit
         * }
         */
        public static void omit(MemorySegment struct, byte fieldValue) {
            struct.set(omit$LAYOUT, omit$OFFSET, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final AddressLayout aConstraintUsage$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("aConstraintUsage"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct sqlite3_index_constraint_usage *aConstraintUsage
     * }
     */
    public static final AddressLayout aConstraintUsage$layout() {
        return aConstraintUsage$LAYOUT;
    }

    private static final long aConstraintUsage$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct sqlite3_index_constraint_usage *aConstraintUsage
     * }
     */
    public static final long aConstraintUsage$offset() {
        return aConstraintUsage$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct sqlite3_index_constraint_usage *aConstraintUsage
     * }
     */
    public static MemorySegment aConstraintUsage(MemorySegment struct) {
        return struct.get(aConstraintUsage$LAYOUT, aConstraintUsage$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct sqlite3_index_constraint_usage *aConstraintUsage
     * }
     */
    public static void aConstraintUsage(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(aConstraintUsage$LAYOUT, aConstraintUsage$OFFSET, fieldValue);
    }

    private static final OfInt idxNum$LAYOUT = (OfInt)$LAYOUT.select(groupElement("idxNum"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int idxNum
     * }
     */
    public static final OfInt idxNum$layout() {
        return idxNum$LAYOUT;
    }

    private static final long idxNum$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int idxNum
     * }
     */
    public static final long idxNum$offset() {
        return idxNum$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int idxNum
     * }
     */
    public static int idxNum(MemorySegment struct) {
        return struct.get(idxNum$LAYOUT, idxNum$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int idxNum
     * }
     */
    public static void idxNum(MemorySegment struct, int fieldValue) {
        struct.set(idxNum$LAYOUT, idxNum$OFFSET, fieldValue);
    }

    private static final AddressLayout idxStr$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("idxStr"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *idxStr
     * }
     */
    public static final AddressLayout idxStr$layout() {
        return idxStr$LAYOUT;
    }

    private static final long idxStr$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *idxStr
     * }
     */
    public static final long idxStr$offset() {
        return idxStr$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *idxStr
     * }
     */
    public static MemorySegment idxStr(MemorySegment struct) {
        return struct.get(idxStr$LAYOUT, idxStr$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *idxStr
     * }
     */
    public static void idxStr(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(idxStr$LAYOUT, idxStr$OFFSET, fieldValue);
    }

    private static final OfInt needToFreeIdxStr$LAYOUT = (OfInt)$LAYOUT.select(groupElement("needToFreeIdxStr"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int needToFreeIdxStr
     * }
     */
    public static final OfInt needToFreeIdxStr$layout() {
        return needToFreeIdxStr$LAYOUT;
    }

    private static final long needToFreeIdxStr$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int needToFreeIdxStr
     * }
     */
    public static final long needToFreeIdxStr$offset() {
        return needToFreeIdxStr$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int needToFreeIdxStr
     * }
     */
    public static int needToFreeIdxStr(MemorySegment struct) {
        return struct.get(needToFreeIdxStr$LAYOUT, needToFreeIdxStr$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int needToFreeIdxStr
     * }
     */
    public static void needToFreeIdxStr(MemorySegment struct, int fieldValue) {
        struct.set(needToFreeIdxStr$LAYOUT, needToFreeIdxStr$OFFSET, fieldValue);
    }

    private static final OfInt orderByConsumed$LAYOUT = (OfInt)$LAYOUT.select(groupElement("orderByConsumed"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int orderByConsumed
     * }
     */
    public static final OfInt orderByConsumed$layout() {
        return orderByConsumed$LAYOUT;
    }

    private static final long orderByConsumed$OFFSET = 60;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int orderByConsumed
     * }
     */
    public static final long orderByConsumed$offset() {
        return orderByConsumed$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int orderByConsumed
     * }
     */
    public static int orderByConsumed(MemorySegment struct) {
        return struct.get(orderByConsumed$LAYOUT, orderByConsumed$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int orderByConsumed
     * }
     */
    public static void orderByConsumed(MemorySegment struct, int fieldValue) {
        struct.set(orderByConsumed$LAYOUT, orderByConsumed$OFFSET, fieldValue);
    }

    private static final OfDouble estimatedCost$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("estimatedCost"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double estimatedCost
     * }
     */
    public static final OfDouble estimatedCost$layout() {
        return estimatedCost$LAYOUT;
    }

    private static final long estimatedCost$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double estimatedCost
     * }
     */
    public static final long estimatedCost$offset() {
        return estimatedCost$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double estimatedCost
     * }
     */
    public static double estimatedCost(MemorySegment struct) {
        return struct.get(estimatedCost$LAYOUT, estimatedCost$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double estimatedCost
     * }
     */
    public static void estimatedCost(MemorySegment struct, double fieldValue) {
        struct.set(estimatedCost$LAYOUT, estimatedCost$OFFSET, fieldValue);
    }

    private static final OfLong estimatedRows$LAYOUT = (OfLong)$LAYOUT.select(groupElement("estimatedRows"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * sqlite3_int64 estimatedRows
     * }
     */
    public static final OfLong estimatedRows$layout() {
        return estimatedRows$LAYOUT;
    }

    private static final long estimatedRows$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * sqlite3_int64 estimatedRows
     * }
     */
    public static final long estimatedRows$offset() {
        return estimatedRows$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * sqlite3_int64 estimatedRows
     * }
     */
    public static long estimatedRows(MemorySegment struct) {
        return struct.get(estimatedRows$LAYOUT, estimatedRows$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * sqlite3_int64 estimatedRows
     * }
     */
    public static void estimatedRows(MemorySegment struct, long fieldValue) {
        struct.set(estimatedRows$LAYOUT, estimatedRows$OFFSET, fieldValue);
    }

    private static final OfInt idxFlags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("idxFlags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int idxFlags
     * }
     */
    public static final OfInt idxFlags$layout() {
        return idxFlags$LAYOUT;
    }

    private static final long idxFlags$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int idxFlags
     * }
     */
    public static final long idxFlags$offset() {
        return idxFlags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int idxFlags
     * }
     */
    public static int idxFlags(MemorySegment struct) {
        return struct.get(idxFlags$LAYOUT, idxFlags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int idxFlags
     * }
     */
    public static void idxFlags(MemorySegment struct, int fieldValue) {
        struct.set(idxFlags$LAYOUT, idxFlags$OFFSET, fieldValue);
    }

    private static final OfLong colUsed$LAYOUT = (OfLong)$LAYOUT.select(groupElement("colUsed"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * sqlite3_uint64 colUsed
     * }
     */
    public static final OfLong colUsed$layout() {
        return colUsed$LAYOUT;
    }

    private static final long colUsed$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * sqlite3_uint64 colUsed
     * }
     */
    public static final long colUsed$offset() {
        return colUsed$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * sqlite3_uint64 colUsed
     * }
     */
    public static long colUsed(MemorySegment struct) {
        return struct.get(colUsed$LAYOUT, colUsed$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * sqlite3_uint64 colUsed
     * }
     */
    public static void colUsed(MemorySegment struct, long fieldValue) {
        struct.set(colUsed$LAYOUT, colUsed$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

