// Generated by jextract

package dev.elide.sqlite.clib;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct sqlite3_io_methods {
 *     int iVersion;
 *     int (*xClose)(sqlite3_file *);
 *     int (*xRead)(sqlite3_file *, void *, int, sqlite3_int64);
 *     int (*xWrite)(sqlite3_file *, const void *, int, sqlite3_int64);
 *     int (*xTruncate)(sqlite3_file *, sqlite3_int64);
 *     int (*xSync)(sqlite3_file *, int);
 *     int (*xFileSize)(sqlite3_file *, sqlite3_int64 *);
 *     int (*xLock)(sqlite3_file *, int);
 *     int (*xUnlock)(sqlite3_file *, int);
 *     int (*xCheckReservedLock)(sqlite3_file *, int *);
 *     int (*xFileControl)(sqlite3_file *, int, void *);
 *     int (*xSectorSize)(sqlite3_file *);
 *     int (*xDeviceCharacteristics)(sqlite3_file *);
 *     int (*xShmMap)(sqlite3_file *, int, int, int, volatile void **);
 *     int (*xShmLock)(sqlite3_file *, int, int, int);
 *     void (*xShmBarrier)(sqlite3_file *);
 *     int (*xShmUnmap)(sqlite3_file *, int);
 *     int (*xFetch)(sqlite3_file *, sqlite3_int64, int, void **);
 *     int (*xUnfetch)(sqlite3_file *, sqlite3_int64, void *);
 * }
 * }
 */
public class sqlite3_io_methods {

    sqlite3_io_methods() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        sqlite3_h.C_INT.withName("iVersion"),
        MemoryLayout.paddingLayout(4),
        sqlite3_h.C_POINTER.withName("xClose"),
        sqlite3_h.C_POINTER.withName("xRead"),
        sqlite3_h.C_POINTER.withName("xWrite"),
        sqlite3_h.C_POINTER.withName("xTruncate"),
        sqlite3_h.C_POINTER.withName("xSync"),
        sqlite3_h.C_POINTER.withName("xFileSize"),
        sqlite3_h.C_POINTER.withName("xLock"),
        sqlite3_h.C_POINTER.withName("xUnlock"),
        sqlite3_h.C_POINTER.withName("xCheckReservedLock"),
        sqlite3_h.C_POINTER.withName("xFileControl"),
        sqlite3_h.C_POINTER.withName("xSectorSize"),
        sqlite3_h.C_POINTER.withName("xDeviceCharacteristics"),
        sqlite3_h.C_POINTER.withName("xShmMap"),
        sqlite3_h.C_POINTER.withName("xShmLock"),
        sqlite3_h.C_POINTER.withName("xShmBarrier"),
        sqlite3_h.C_POINTER.withName("xShmUnmap"),
        sqlite3_h.C_POINTER.withName("xFetch"),
        sqlite3_h.C_POINTER.withName("xUnfetch")
    ).withName("sqlite3_io_methods");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt iVersion$LAYOUT = (OfInt)$LAYOUT.select(groupElement("iVersion"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int iVersion
     * }
     */
    public static final OfInt iVersion$layout() {
        return iVersion$LAYOUT;
    }

    private static final long iVersion$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int iVersion
     * }
     */
    public static final long iVersion$offset() {
        return iVersion$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int iVersion
     * }
     */
    public static int iVersion(MemorySegment struct) {
        return struct.get(iVersion$LAYOUT, iVersion$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int iVersion
     * }
     */
    public static void iVersion(MemorySegment struct, int fieldValue) {
        struct.set(iVersion$LAYOUT, iVersion$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (*xClose)(sqlite3_file *)
     * }
     */
    public static class xClose {

        xClose() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = sqlite3_h.upcallHandle(xClose.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(xClose.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout xClose$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("xClose"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*xClose)(sqlite3_file *)
     * }
     */
    public static final AddressLayout xClose$layout() {
        return xClose$LAYOUT;
    }

    private static final long xClose$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*xClose)(sqlite3_file *)
     * }
     */
    public static final long xClose$offset() {
        return xClose$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*xClose)(sqlite3_file *)
     * }
     */
    public static MemorySegment xClose(MemorySegment struct) {
        return struct.get(xClose$LAYOUT, xClose$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*xClose)(sqlite3_file *)
     * }
     */
    public static void xClose(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(xClose$LAYOUT, xClose$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (*xRead)(sqlite3_file *, void *, int, sqlite3_int64)
     * }
     */
    public static class xRead {

        xRead() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, int _x2, long _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT,
            sqlite3_h.C_LONG_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = sqlite3_h.upcallHandle(xRead.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(xRead.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, int _x2, long _x3) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout xRead$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("xRead"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*xRead)(sqlite3_file *, void *, int, sqlite3_int64)
     * }
     */
    public static final AddressLayout xRead$layout() {
        return xRead$LAYOUT;
    }

    private static final long xRead$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*xRead)(sqlite3_file *, void *, int, sqlite3_int64)
     * }
     */
    public static final long xRead$offset() {
        return xRead$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*xRead)(sqlite3_file *, void *, int, sqlite3_int64)
     * }
     */
    public static MemorySegment xRead(MemorySegment struct) {
        return struct.get(xRead$LAYOUT, xRead$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*xRead)(sqlite3_file *, void *, int, sqlite3_int64)
     * }
     */
    public static void xRead(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(xRead$LAYOUT, xRead$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (*xWrite)(sqlite3_file *, const void *, int, sqlite3_int64)
     * }
     */
    public static class xWrite {

        xWrite() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, int _x2, long _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT,
            sqlite3_h.C_LONG_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = sqlite3_h.upcallHandle(xWrite.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(xWrite.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, int _x2, long _x3) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout xWrite$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("xWrite"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*xWrite)(sqlite3_file *, const void *, int, sqlite3_int64)
     * }
     */
    public static final AddressLayout xWrite$layout() {
        return xWrite$LAYOUT;
    }

    private static final long xWrite$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*xWrite)(sqlite3_file *, const void *, int, sqlite3_int64)
     * }
     */
    public static final long xWrite$offset() {
        return xWrite$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*xWrite)(sqlite3_file *, const void *, int, sqlite3_int64)
     * }
     */
    public static MemorySegment xWrite(MemorySegment struct) {
        return struct.get(xWrite$LAYOUT, xWrite$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*xWrite)(sqlite3_file *, const void *, int, sqlite3_int64)
     * }
     */
    public static void xWrite(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(xWrite$LAYOUT, xWrite$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (*xTruncate)(sqlite3_file *, sqlite3_int64)
     * }
     */
    public static class xTruncate {

        xTruncate() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, long _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_LONG_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = sqlite3_h.upcallHandle(xTruncate.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(xTruncate.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, long _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout xTruncate$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("xTruncate"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*xTruncate)(sqlite3_file *, sqlite3_int64)
     * }
     */
    public static final AddressLayout xTruncate$layout() {
        return xTruncate$LAYOUT;
    }

    private static final long xTruncate$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*xTruncate)(sqlite3_file *, sqlite3_int64)
     * }
     */
    public static final long xTruncate$offset() {
        return xTruncate$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*xTruncate)(sqlite3_file *, sqlite3_int64)
     * }
     */
    public static MemorySegment xTruncate(MemorySegment struct) {
        return struct.get(xTruncate$LAYOUT, xTruncate$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*xTruncate)(sqlite3_file *, sqlite3_int64)
     * }
     */
    public static void xTruncate(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(xTruncate$LAYOUT, xTruncate$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (*xSync)(sqlite3_file *, int)
     * }
     */
    public static class xSync {

        xSync() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = sqlite3_h.upcallHandle(xSync.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(xSync.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout xSync$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("xSync"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*xSync)(sqlite3_file *, int)
     * }
     */
    public static final AddressLayout xSync$layout() {
        return xSync$LAYOUT;
    }

    private static final long xSync$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*xSync)(sqlite3_file *, int)
     * }
     */
    public static final long xSync$offset() {
        return xSync$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*xSync)(sqlite3_file *, int)
     * }
     */
    public static MemorySegment xSync(MemorySegment struct) {
        return struct.get(xSync$LAYOUT, xSync$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*xSync)(sqlite3_file *, int)
     * }
     */
    public static void xSync(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(xSync$LAYOUT, xSync$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (*xFileSize)(sqlite3_file *, sqlite3_int64 *)
     * }
     */
    public static class xFileSize {

        xFileSize() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = sqlite3_h.upcallHandle(xFileSize.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(xFileSize.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout xFileSize$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("xFileSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*xFileSize)(sqlite3_file *, sqlite3_int64 *)
     * }
     */
    public static final AddressLayout xFileSize$layout() {
        return xFileSize$LAYOUT;
    }

    private static final long xFileSize$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*xFileSize)(sqlite3_file *, sqlite3_int64 *)
     * }
     */
    public static final long xFileSize$offset() {
        return xFileSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*xFileSize)(sqlite3_file *, sqlite3_int64 *)
     * }
     */
    public static MemorySegment xFileSize(MemorySegment struct) {
        return struct.get(xFileSize$LAYOUT, xFileSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*xFileSize)(sqlite3_file *, sqlite3_int64 *)
     * }
     */
    public static void xFileSize(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(xFileSize$LAYOUT, xFileSize$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (*xLock)(sqlite3_file *, int)
     * }
     */
    public static class xLock {

        xLock() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = sqlite3_h.upcallHandle(xLock.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(xLock.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout xLock$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("xLock"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*xLock)(sqlite3_file *, int)
     * }
     */
    public static final AddressLayout xLock$layout() {
        return xLock$LAYOUT;
    }

    private static final long xLock$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*xLock)(sqlite3_file *, int)
     * }
     */
    public static final long xLock$offset() {
        return xLock$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*xLock)(sqlite3_file *, int)
     * }
     */
    public static MemorySegment xLock(MemorySegment struct) {
        return struct.get(xLock$LAYOUT, xLock$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*xLock)(sqlite3_file *, int)
     * }
     */
    public static void xLock(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(xLock$LAYOUT, xLock$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (*xUnlock)(sqlite3_file *, int)
     * }
     */
    public static class xUnlock {

        xUnlock() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = sqlite3_h.upcallHandle(xUnlock.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(xUnlock.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout xUnlock$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("xUnlock"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*xUnlock)(sqlite3_file *, int)
     * }
     */
    public static final AddressLayout xUnlock$layout() {
        return xUnlock$LAYOUT;
    }

    private static final long xUnlock$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*xUnlock)(sqlite3_file *, int)
     * }
     */
    public static final long xUnlock$offset() {
        return xUnlock$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*xUnlock)(sqlite3_file *, int)
     * }
     */
    public static MemorySegment xUnlock(MemorySegment struct) {
        return struct.get(xUnlock$LAYOUT, xUnlock$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*xUnlock)(sqlite3_file *, int)
     * }
     */
    public static void xUnlock(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(xUnlock$LAYOUT, xUnlock$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (*xCheckReservedLock)(sqlite3_file *, int *)
     * }
     */
    public static class xCheckReservedLock {

        xCheckReservedLock() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = sqlite3_h.upcallHandle(xCheckReservedLock.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(xCheckReservedLock.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout xCheckReservedLock$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("xCheckReservedLock"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*xCheckReservedLock)(sqlite3_file *, int *)
     * }
     */
    public static final AddressLayout xCheckReservedLock$layout() {
        return xCheckReservedLock$LAYOUT;
    }

    private static final long xCheckReservedLock$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*xCheckReservedLock)(sqlite3_file *, int *)
     * }
     */
    public static final long xCheckReservedLock$offset() {
        return xCheckReservedLock$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*xCheckReservedLock)(sqlite3_file *, int *)
     * }
     */
    public static MemorySegment xCheckReservedLock(MemorySegment struct) {
        return struct.get(xCheckReservedLock$LAYOUT, xCheckReservedLock$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*xCheckReservedLock)(sqlite3_file *, int *)
     * }
     */
    public static void xCheckReservedLock(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(xCheckReservedLock$LAYOUT, xCheckReservedLock$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (*xFileControl)(sqlite3_file *, int, void *)
     * }
     */
    public static class xFileControl {

        xFileControl() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = sqlite3_h.upcallHandle(xFileControl.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(xFileControl.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout xFileControl$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("xFileControl"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*xFileControl)(sqlite3_file *, int, void *)
     * }
     */
    public static final AddressLayout xFileControl$layout() {
        return xFileControl$LAYOUT;
    }

    private static final long xFileControl$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*xFileControl)(sqlite3_file *, int, void *)
     * }
     */
    public static final long xFileControl$offset() {
        return xFileControl$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*xFileControl)(sqlite3_file *, int, void *)
     * }
     */
    public static MemorySegment xFileControl(MemorySegment struct) {
        return struct.get(xFileControl$LAYOUT, xFileControl$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*xFileControl)(sqlite3_file *, int, void *)
     * }
     */
    public static void xFileControl(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(xFileControl$LAYOUT, xFileControl$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (*xSectorSize)(sqlite3_file *)
     * }
     */
    public static class xSectorSize {

        xSectorSize() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = sqlite3_h.upcallHandle(xSectorSize.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(xSectorSize.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout xSectorSize$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("xSectorSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*xSectorSize)(sqlite3_file *)
     * }
     */
    public static final AddressLayout xSectorSize$layout() {
        return xSectorSize$LAYOUT;
    }

    private static final long xSectorSize$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*xSectorSize)(sqlite3_file *)
     * }
     */
    public static final long xSectorSize$offset() {
        return xSectorSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*xSectorSize)(sqlite3_file *)
     * }
     */
    public static MemorySegment xSectorSize(MemorySegment struct) {
        return struct.get(xSectorSize$LAYOUT, xSectorSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*xSectorSize)(sqlite3_file *)
     * }
     */
    public static void xSectorSize(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(xSectorSize$LAYOUT, xSectorSize$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (*xDeviceCharacteristics)(sqlite3_file *)
     * }
     */
    public static class xDeviceCharacteristics {

        xDeviceCharacteristics() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = sqlite3_h.upcallHandle(xDeviceCharacteristics.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(xDeviceCharacteristics.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout xDeviceCharacteristics$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("xDeviceCharacteristics"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*xDeviceCharacteristics)(sqlite3_file *)
     * }
     */
    public static final AddressLayout xDeviceCharacteristics$layout() {
        return xDeviceCharacteristics$LAYOUT;
    }

    private static final long xDeviceCharacteristics$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*xDeviceCharacteristics)(sqlite3_file *)
     * }
     */
    public static final long xDeviceCharacteristics$offset() {
        return xDeviceCharacteristics$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*xDeviceCharacteristics)(sqlite3_file *)
     * }
     */
    public static MemorySegment xDeviceCharacteristics(MemorySegment struct) {
        return struct.get(xDeviceCharacteristics$LAYOUT, xDeviceCharacteristics$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*xDeviceCharacteristics)(sqlite3_file *)
     * }
     */
    public static void xDeviceCharacteristics(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(xDeviceCharacteristics$LAYOUT, xDeviceCharacteristics$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (*xShmMap)(sqlite3_file *, int, int, int, volatile void **)
     * }
     */
    public static class xShmMap {

        xShmMap() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, int _x2, int _x3, MemorySegment _x4);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT,
            sqlite3_h.C_INT,
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = sqlite3_h.upcallHandle(xShmMap.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(xShmMap.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, int _x2, int _x3, MemorySegment _x4) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout xShmMap$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("xShmMap"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*xShmMap)(sqlite3_file *, int, int, int, volatile void **)
     * }
     */
    public static final AddressLayout xShmMap$layout() {
        return xShmMap$LAYOUT;
    }

    private static final long xShmMap$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*xShmMap)(sqlite3_file *, int, int, int, volatile void **)
     * }
     */
    public static final long xShmMap$offset() {
        return xShmMap$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*xShmMap)(sqlite3_file *, int, int, int, volatile void **)
     * }
     */
    public static MemorySegment xShmMap(MemorySegment struct) {
        return struct.get(xShmMap$LAYOUT, xShmMap$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*xShmMap)(sqlite3_file *, int, int, int, volatile void **)
     * }
     */
    public static void xShmMap(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(xShmMap$LAYOUT, xShmMap$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (*xShmLock)(sqlite3_file *, int, int, int)
     * }
     */
    public static class xShmLock {

        xShmLock() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, int _x2, int _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT,
            sqlite3_h.C_INT,
            sqlite3_h.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = sqlite3_h.upcallHandle(xShmLock.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(xShmLock.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, int _x2, int _x3) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout xShmLock$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("xShmLock"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*xShmLock)(sqlite3_file *, int, int, int)
     * }
     */
    public static final AddressLayout xShmLock$layout() {
        return xShmLock$LAYOUT;
    }

    private static final long xShmLock$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*xShmLock)(sqlite3_file *, int, int, int)
     * }
     */
    public static final long xShmLock$offset() {
        return xShmLock$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*xShmLock)(sqlite3_file *, int, int, int)
     * }
     */
    public static MemorySegment xShmLock(MemorySegment struct) {
        return struct.get(xShmLock$LAYOUT, xShmLock$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*xShmLock)(sqlite3_file *, int, int, int)
     * }
     */
    public static void xShmLock(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(xShmLock$LAYOUT, xShmLock$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*xShmBarrier)(sqlite3_file *)
     * }
     */
    public static class xShmBarrier {

        xShmBarrier() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            sqlite3_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = sqlite3_h.upcallHandle(xShmBarrier.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(xShmBarrier.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout xShmBarrier$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("xShmBarrier"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*xShmBarrier)(sqlite3_file *)
     * }
     */
    public static final AddressLayout xShmBarrier$layout() {
        return xShmBarrier$LAYOUT;
    }

    private static final long xShmBarrier$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*xShmBarrier)(sqlite3_file *)
     * }
     */
    public static final long xShmBarrier$offset() {
        return xShmBarrier$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*xShmBarrier)(sqlite3_file *)
     * }
     */
    public static MemorySegment xShmBarrier(MemorySegment struct) {
        return struct.get(xShmBarrier$LAYOUT, xShmBarrier$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*xShmBarrier)(sqlite3_file *)
     * }
     */
    public static void xShmBarrier(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(xShmBarrier$LAYOUT, xShmBarrier$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (*xShmUnmap)(sqlite3_file *, int)
     * }
     */
    public static class xShmUnmap {

        xShmUnmap() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = sqlite3_h.upcallHandle(xShmUnmap.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(xShmUnmap.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout xShmUnmap$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("xShmUnmap"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*xShmUnmap)(sqlite3_file *, int)
     * }
     */
    public static final AddressLayout xShmUnmap$layout() {
        return xShmUnmap$LAYOUT;
    }

    private static final long xShmUnmap$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*xShmUnmap)(sqlite3_file *, int)
     * }
     */
    public static final long xShmUnmap$offset() {
        return xShmUnmap$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*xShmUnmap)(sqlite3_file *, int)
     * }
     */
    public static MemorySegment xShmUnmap(MemorySegment struct) {
        return struct.get(xShmUnmap$LAYOUT, xShmUnmap$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*xShmUnmap)(sqlite3_file *, int)
     * }
     */
    public static void xShmUnmap(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(xShmUnmap$LAYOUT, xShmUnmap$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (*xFetch)(sqlite3_file *, sqlite3_int64, int, void **)
     * }
     */
    public static class xFetch {

        xFetch() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, long _x1, int _x2, MemorySegment _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_LONG_LONG,
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = sqlite3_h.upcallHandle(xFetch.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(xFetch.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, long _x1, int _x2, MemorySegment _x3) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout xFetch$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("xFetch"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*xFetch)(sqlite3_file *, sqlite3_int64, int, void **)
     * }
     */
    public static final AddressLayout xFetch$layout() {
        return xFetch$LAYOUT;
    }

    private static final long xFetch$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*xFetch)(sqlite3_file *, sqlite3_int64, int, void **)
     * }
     */
    public static final long xFetch$offset() {
        return xFetch$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*xFetch)(sqlite3_file *, sqlite3_int64, int, void **)
     * }
     */
    public static MemorySegment xFetch(MemorySegment struct) {
        return struct.get(xFetch$LAYOUT, xFetch$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*xFetch)(sqlite3_file *, sqlite3_int64, int, void **)
     * }
     */
    public static void xFetch(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(xFetch$LAYOUT, xFetch$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (*xUnfetch)(sqlite3_file *, sqlite3_int64, void *)
     * }
     */
    public static class xUnfetch {

        xUnfetch() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, long _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_LONG_LONG,
            sqlite3_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = sqlite3_h.upcallHandle(xUnfetch.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(xUnfetch.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, long _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout xUnfetch$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("xUnfetch"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*xUnfetch)(sqlite3_file *, sqlite3_int64, void *)
     * }
     */
    public static final AddressLayout xUnfetch$layout() {
        return xUnfetch$LAYOUT;
    }

    private static final long xUnfetch$OFFSET = 144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*xUnfetch)(sqlite3_file *, sqlite3_int64, void *)
     * }
     */
    public static final long xUnfetch$offset() {
        return xUnfetch$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*xUnfetch)(sqlite3_file *, sqlite3_int64, void *)
     * }
     */
    public static MemorySegment xUnfetch(MemorySegment struct) {
        return struct.get(xUnfetch$LAYOUT, xUnfetch$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*xUnfetch)(sqlite3_file *, sqlite3_int64, void *)
     * }
     */
    public static void xUnfetch(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(xUnfetch$LAYOUT, xUnfetch$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

