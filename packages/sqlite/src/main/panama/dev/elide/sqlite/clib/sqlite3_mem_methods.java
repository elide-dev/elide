// Generated by jextract

package dev.elide.sqlite.clib;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct sqlite3_mem_methods {
 *     void *(*xMalloc)(int);
 *     void (*xFree)(void *);
 *     void *(*xRealloc)(void *, int);
 *     int (*xSize)(void *);
 *     int (*xRoundup)(int);
 *     int (*xInit)(void *);
 *     void (*xShutdown)(void *);
 *     void *pAppData;
 * }
 * }
 */
public class sqlite3_mem_methods {

    sqlite3_mem_methods() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        sqlite3_h.C_POINTER.withName("xMalloc"),
        sqlite3_h.C_POINTER.withName("xFree"),
        sqlite3_h.C_POINTER.withName("xRealloc"),
        sqlite3_h.C_POINTER.withName("xSize"),
        sqlite3_h.C_POINTER.withName("xRoundup"),
        sqlite3_h.C_POINTER.withName("xInit"),
        sqlite3_h.C_POINTER.withName("xShutdown"),
        sqlite3_h.C_POINTER.withName("pAppData")
    ).withName("sqlite3_mem_methods");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    /**
     * {@snippet lang=c :
     * void *(*xMalloc)(int)
     * }
     */
    public static class xMalloc {

        xMalloc() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(int _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = sqlite3_h.upcallHandle(xMalloc.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(xMalloc.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,int _x0) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout xMalloc$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("xMalloc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *(*xMalloc)(int)
     * }
     */
    public static final AddressLayout xMalloc$layout() {
        return xMalloc$LAYOUT;
    }

    private static final long xMalloc$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *(*xMalloc)(int)
     * }
     */
    public static final long xMalloc$offset() {
        return xMalloc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *(*xMalloc)(int)
     * }
     */
    public static MemorySegment xMalloc(MemorySegment struct) {
        return struct.get(xMalloc$LAYOUT, xMalloc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *(*xMalloc)(int)
     * }
     */
    public static void xMalloc(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(xMalloc$LAYOUT, xMalloc$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*xFree)(void *)
     * }
     */
    public static class xFree {

        xFree() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            sqlite3_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = sqlite3_h.upcallHandle(xFree.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(xFree.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout xFree$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("xFree"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*xFree)(void *)
     * }
     */
    public static final AddressLayout xFree$layout() {
        return xFree$LAYOUT;
    }

    private static final long xFree$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*xFree)(void *)
     * }
     */
    public static final long xFree$offset() {
        return xFree$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*xFree)(void *)
     * }
     */
    public static MemorySegment xFree(MemorySegment struct) {
        return struct.get(xFree$LAYOUT, xFree$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*xFree)(void *)
     * }
     */
    public static void xFree(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(xFree$LAYOUT, xFree$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void *(*xRealloc)(void *, int)
     * }
     */
    public static class xRealloc {

        xRealloc() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0, int _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = sqlite3_h.upcallHandle(xRealloc.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(xRealloc.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout xRealloc$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("xRealloc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *(*xRealloc)(void *, int)
     * }
     */
    public static final AddressLayout xRealloc$layout() {
        return xRealloc$LAYOUT;
    }

    private static final long xRealloc$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *(*xRealloc)(void *, int)
     * }
     */
    public static final long xRealloc$offset() {
        return xRealloc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *(*xRealloc)(void *, int)
     * }
     */
    public static MemorySegment xRealloc(MemorySegment struct) {
        return struct.get(xRealloc$LAYOUT, xRealloc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *(*xRealloc)(void *, int)
     * }
     */
    public static void xRealloc(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(xRealloc$LAYOUT, xRealloc$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (*xSize)(void *)
     * }
     */
    public static class xSize {

        xSize() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = sqlite3_h.upcallHandle(xSize.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(xSize.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout xSize$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("xSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*xSize)(void *)
     * }
     */
    public static final AddressLayout xSize$layout() {
        return xSize$LAYOUT;
    }

    private static final long xSize$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*xSize)(void *)
     * }
     */
    public static final long xSize$offset() {
        return xSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*xSize)(void *)
     * }
     */
    public static MemorySegment xSize(MemorySegment struct) {
        return struct.get(xSize$LAYOUT, xSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*xSize)(void *)
     * }
     */
    public static void xSize(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(xSize$LAYOUT, xSize$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (*xRoundup)(int)
     * }
     */
    public static class xRoundup {

        xRoundup() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(int _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = sqlite3_h.upcallHandle(xRoundup.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(xRoundup.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,int _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout xRoundup$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("xRoundup"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*xRoundup)(int)
     * }
     */
    public static final AddressLayout xRoundup$layout() {
        return xRoundup$LAYOUT;
    }

    private static final long xRoundup$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*xRoundup)(int)
     * }
     */
    public static final long xRoundup$offset() {
        return xRoundup$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*xRoundup)(int)
     * }
     */
    public static MemorySegment xRoundup(MemorySegment struct) {
        return struct.get(xRoundup$LAYOUT, xRoundup$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*xRoundup)(int)
     * }
     */
    public static void xRoundup(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(xRoundup$LAYOUT, xRoundup$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (*xInit)(void *)
     * }
     */
    public static class xInit {

        xInit() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = sqlite3_h.upcallHandle(xInit.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(xInit.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout xInit$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("xInit"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*xInit)(void *)
     * }
     */
    public static final AddressLayout xInit$layout() {
        return xInit$LAYOUT;
    }

    private static final long xInit$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*xInit)(void *)
     * }
     */
    public static final long xInit$offset() {
        return xInit$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*xInit)(void *)
     * }
     */
    public static MemorySegment xInit(MemorySegment struct) {
        return struct.get(xInit$LAYOUT, xInit$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*xInit)(void *)
     * }
     */
    public static void xInit(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(xInit$LAYOUT, xInit$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*xShutdown)(void *)
     * }
     */
    public static class xShutdown {

        xShutdown() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            sqlite3_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = sqlite3_h.upcallHandle(xShutdown.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(xShutdown.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout xShutdown$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("xShutdown"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*xShutdown)(void *)
     * }
     */
    public static final AddressLayout xShutdown$layout() {
        return xShutdown$LAYOUT;
    }

    private static final long xShutdown$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*xShutdown)(void *)
     * }
     */
    public static final long xShutdown$offset() {
        return xShutdown$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*xShutdown)(void *)
     * }
     */
    public static MemorySegment xShutdown(MemorySegment struct) {
        return struct.get(xShutdown$LAYOUT, xShutdown$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*xShutdown)(void *)
     * }
     */
    public static void xShutdown(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(xShutdown$LAYOUT, xShutdown$OFFSET, fieldValue);
    }

    private static final AddressLayout pAppData$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pAppData"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *pAppData
     * }
     */
    public static final AddressLayout pAppData$layout() {
        return pAppData$LAYOUT;
    }

    private static final long pAppData$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *pAppData
     * }
     */
    public static final long pAppData$offset() {
        return pAppData$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *pAppData
     * }
     */
    public static MemorySegment pAppData(MemorySegment struct) {
        return struct.get(pAppData$LAYOUT, pAppData$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *pAppData
     * }
     */
    public static void pAppData(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pAppData$LAYOUT, pAppData$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

