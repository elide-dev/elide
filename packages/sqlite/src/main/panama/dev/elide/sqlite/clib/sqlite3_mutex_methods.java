// Generated by jextract

package dev.elide.sqlite.clib;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct sqlite3_mutex_methods {
 *     int (*xMutexInit)(void);
 *     int (*xMutexEnd)(void);
 *     sqlite3_mutex *(*xMutexAlloc)(int);
 *     void (*xMutexFree)(sqlite3_mutex *);
 *     void (*xMutexEnter)(sqlite3_mutex *);
 *     int (*xMutexTry)(sqlite3_mutex *);
 *     void (*xMutexLeave)(sqlite3_mutex *);
 *     int (*xMutexHeld)(sqlite3_mutex *);
 *     int (*xMutexNotheld)(sqlite3_mutex *);
 * }
 * }
 */
public class sqlite3_mutex_methods {

    sqlite3_mutex_methods() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        sqlite3_h.C_POINTER.withName("xMutexInit"),
        sqlite3_h.C_POINTER.withName("xMutexEnd"),
        sqlite3_h.C_POINTER.withName("xMutexAlloc"),
        sqlite3_h.C_POINTER.withName("xMutexFree"),
        sqlite3_h.C_POINTER.withName("xMutexEnter"),
        sqlite3_h.C_POINTER.withName("xMutexTry"),
        sqlite3_h.C_POINTER.withName("xMutexLeave"),
        sqlite3_h.C_POINTER.withName("xMutexHeld"),
        sqlite3_h.C_POINTER.withName("xMutexNotheld")
    ).withName("sqlite3_mutex_methods");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    /**
     * {@snippet lang=c :
     * int (*xMutexInit)(void)
     * }
     */
    public static class xMutexInit {

        xMutexInit() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply();
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT);

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = sqlite3_h.upcallHandle(xMutexInit.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(xMutexInit.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout xMutexInit$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("xMutexInit"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*xMutexInit)(void)
     * }
     */
    public static final AddressLayout xMutexInit$layout() {
        return xMutexInit$LAYOUT;
    }

    private static final long xMutexInit$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*xMutexInit)(void)
     * }
     */
    public static final long xMutexInit$offset() {
        return xMutexInit$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*xMutexInit)(void)
     * }
     */
    public static MemorySegment xMutexInit(MemorySegment struct) {
        return struct.get(xMutexInit$LAYOUT, xMutexInit$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*xMutexInit)(void)
     * }
     */
    public static void xMutexInit(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(xMutexInit$LAYOUT, xMutexInit$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (*xMutexEnd)(void)
     * }
     */
    public static class xMutexEnd {

        xMutexEnd() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply();
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT);

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = sqlite3_h.upcallHandle(xMutexEnd.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(xMutexEnd.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout xMutexEnd$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("xMutexEnd"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*xMutexEnd)(void)
     * }
     */
    public static final AddressLayout xMutexEnd$layout() {
        return xMutexEnd$LAYOUT;
    }

    private static final long xMutexEnd$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*xMutexEnd)(void)
     * }
     */
    public static final long xMutexEnd$offset() {
        return xMutexEnd$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*xMutexEnd)(void)
     * }
     */
    public static MemorySegment xMutexEnd(MemorySegment struct) {
        return struct.get(xMutexEnd$LAYOUT, xMutexEnd$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*xMutexEnd)(void)
     * }
     */
    public static void xMutexEnd(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(xMutexEnd$LAYOUT, xMutexEnd$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * sqlite3_mutex *(*xMutexAlloc)(int)
     * }
     */
    public static class xMutexAlloc {

        xMutexAlloc() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(int _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = sqlite3_h.upcallHandle(xMutexAlloc.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(xMutexAlloc.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,int _x0) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout xMutexAlloc$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("xMutexAlloc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * sqlite3_mutex *(*xMutexAlloc)(int)
     * }
     */
    public static final AddressLayout xMutexAlloc$layout() {
        return xMutexAlloc$LAYOUT;
    }

    private static final long xMutexAlloc$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * sqlite3_mutex *(*xMutexAlloc)(int)
     * }
     */
    public static final long xMutexAlloc$offset() {
        return xMutexAlloc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * sqlite3_mutex *(*xMutexAlloc)(int)
     * }
     */
    public static MemorySegment xMutexAlloc(MemorySegment struct) {
        return struct.get(xMutexAlloc$LAYOUT, xMutexAlloc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * sqlite3_mutex *(*xMutexAlloc)(int)
     * }
     */
    public static void xMutexAlloc(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(xMutexAlloc$LAYOUT, xMutexAlloc$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*xMutexFree)(sqlite3_mutex *)
     * }
     */
    public static class xMutexFree {

        xMutexFree() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            sqlite3_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = sqlite3_h.upcallHandle(xMutexFree.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(xMutexFree.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout xMutexFree$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("xMutexFree"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*xMutexFree)(sqlite3_mutex *)
     * }
     */
    public static final AddressLayout xMutexFree$layout() {
        return xMutexFree$LAYOUT;
    }

    private static final long xMutexFree$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*xMutexFree)(sqlite3_mutex *)
     * }
     */
    public static final long xMutexFree$offset() {
        return xMutexFree$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*xMutexFree)(sqlite3_mutex *)
     * }
     */
    public static MemorySegment xMutexFree(MemorySegment struct) {
        return struct.get(xMutexFree$LAYOUT, xMutexFree$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*xMutexFree)(sqlite3_mutex *)
     * }
     */
    public static void xMutexFree(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(xMutexFree$LAYOUT, xMutexFree$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*xMutexEnter)(sqlite3_mutex *)
     * }
     */
    public static class xMutexEnter {

        xMutexEnter() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            sqlite3_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = sqlite3_h.upcallHandle(xMutexEnter.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(xMutexEnter.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout xMutexEnter$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("xMutexEnter"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*xMutexEnter)(sqlite3_mutex *)
     * }
     */
    public static final AddressLayout xMutexEnter$layout() {
        return xMutexEnter$LAYOUT;
    }

    private static final long xMutexEnter$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*xMutexEnter)(sqlite3_mutex *)
     * }
     */
    public static final long xMutexEnter$offset() {
        return xMutexEnter$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*xMutexEnter)(sqlite3_mutex *)
     * }
     */
    public static MemorySegment xMutexEnter(MemorySegment struct) {
        return struct.get(xMutexEnter$LAYOUT, xMutexEnter$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*xMutexEnter)(sqlite3_mutex *)
     * }
     */
    public static void xMutexEnter(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(xMutexEnter$LAYOUT, xMutexEnter$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (*xMutexTry)(sqlite3_mutex *)
     * }
     */
    public static class xMutexTry {

        xMutexTry() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = sqlite3_h.upcallHandle(xMutexTry.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(xMutexTry.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout xMutexTry$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("xMutexTry"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*xMutexTry)(sqlite3_mutex *)
     * }
     */
    public static final AddressLayout xMutexTry$layout() {
        return xMutexTry$LAYOUT;
    }

    private static final long xMutexTry$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*xMutexTry)(sqlite3_mutex *)
     * }
     */
    public static final long xMutexTry$offset() {
        return xMutexTry$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*xMutexTry)(sqlite3_mutex *)
     * }
     */
    public static MemorySegment xMutexTry(MemorySegment struct) {
        return struct.get(xMutexTry$LAYOUT, xMutexTry$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*xMutexTry)(sqlite3_mutex *)
     * }
     */
    public static void xMutexTry(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(xMutexTry$LAYOUT, xMutexTry$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*xMutexLeave)(sqlite3_mutex *)
     * }
     */
    public static class xMutexLeave {

        xMutexLeave() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            sqlite3_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = sqlite3_h.upcallHandle(xMutexLeave.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(xMutexLeave.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout xMutexLeave$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("xMutexLeave"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*xMutexLeave)(sqlite3_mutex *)
     * }
     */
    public static final AddressLayout xMutexLeave$layout() {
        return xMutexLeave$LAYOUT;
    }

    private static final long xMutexLeave$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*xMutexLeave)(sqlite3_mutex *)
     * }
     */
    public static final long xMutexLeave$offset() {
        return xMutexLeave$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*xMutexLeave)(sqlite3_mutex *)
     * }
     */
    public static MemorySegment xMutexLeave(MemorySegment struct) {
        return struct.get(xMutexLeave$LAYOUT, xMutexLeave$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*xMutexLeave)(sqlite3_mutex *)
     * }
     */
    public static void xMutexLeave(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(xMutexLeave$LAYOUT, xMutexLeave$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (*xMutexHeld)(sqlite3_mutex *)
     * }
     */
    public static class xMutexHeld {

        xMutexHeld() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = sqlite3_h.upcallHandle(xMutexHeld.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(xMutexHeld.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout xMutexHeld$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("xMutexHeld"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*xMutexHeld)(sqlite3_mutex *)
     * }
     */
    public static final AddressLayout xMutexHeld$layout() {
        return xMutexHeld$LAYOUT;
    }

    private static final long xMutexHeld$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*xMutexHeld)(sqlite3_mutex *)
     * }
     */
    public static final long xMutexHeld$offset() {
        return xMutexHeld$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*xMutexHeld)(sqlite3_mutex *)
     * }
     */
    public static MemorySegment xMutexHeld(MemorySegment struct) {
        return struct.get(xMutexHeld$LAYOUT, xMutexHeld$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*xMutexHeld)(sqlite3_mutex *)
     * }
     */
    public static void xMutexHeld(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(xMutexHeld$LAYOUT, xMutexHeld$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (*xMutexNotheld)(sqlite3_mutex *)
     * }
     */
    public static class xMutexNotheld {

        xMutexNotheld() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = sqlite3_h.upcallHandle(xMutexNotheld.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(xMutexNotheld.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout xMutexNotheld$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("xMutexNotheld"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*xMutexNotheld)(sqlite3_mutex *)
     * }
     */
    public static final AddressLayout xMutexNotheld$layout() {
        return xMutexNotheld$LAYOUT;
    }

    private static final long xMutexNotheld$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*xMutexNotheld)(sqlite3_mutex *)
     * }
     */
    public static final long xMutexNotheld$offset() {
        return xMutexNotheld$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*xMutexNotheld)(sqlite3_mutex *)
     * }
     */
    public static MemorySegment xMutexNotheld(MemorySegment struct) {
        return struct.get(xMutexNotheld$LAYOUT, xMutexNotheld$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*xMutexNotheld)(sqlite3_mutex *)
     * }
     */
    public static void xMutexNotheld(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(xMutexNotheld$LAYOUT, xMutexNotheld$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

