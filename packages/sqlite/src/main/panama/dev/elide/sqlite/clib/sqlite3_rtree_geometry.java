// Generated by jextract

package dev.elide.sqlite.clib;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct sqlite3_rtree_geometry {
 *     void *pContext;
 *     int nParam;
 *     sqlite3_rtree_dbl *aParam;
 *     void *pUser;
 *     void (*xDelUser)(void *);
 * }
 * }
 */
public class sqlite3_rtree_geometry {

    sqlite3_rtree_geometry() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        sqlite3_h.C_POINTER.withName("pContext"),
        sqlite3_h.C_INT.withName("nParam"),
        MemoryLayout.paddingLayout(4),
        sqlite3_h.C_POINTER.withName("aParam"),
        sqlite3_h.C_POINTER.withName("pUser"),
        sqlite3_h.C_POINTER.withName("xDelUser")
    ).withName("sqlite3_rtree_geometry");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout pContext$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pContext"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *pContext
     * }
     */
    public static final AddressLayout pContext$layout() {
        return pContext$LAYOUT;
    }

    private static final long pContext$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *pContext
     * }
     */
    public static final long pContext$offset() {
        return pContext$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *pContext
     * }
     */
    public static MemorySegment pContext(MemorySegment struct) {
        return struct.get(pContext$LAYOUT, pContext$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *pContext
     * }
     */
    public static void pContext(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pContext$LAYOUT, pContext$OFFSET, fieldValue);
    }

    private static final OfInt nParam$LAYOUT = (OfInt)$LAYOUT.select(groupElement("nParam"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int nParam
     * }
     */
    public static final OfInt nParam$layout() {
        return nParam$LAYOUT;
    }

    private static final long nParam$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int nParam
     * }
     */
    public static final long nParam$offset() {
        return nParam$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int nParam
     * }
     */
    public static int nParam(MemorySegment struct) {
        return struct.get(nParam$LAYOUT, nParam$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int nParam
     * }
     */
    public static void nParam(MemorySegment struct, int fieldValue) {
        struct.set(nParam$LAYOUT, nParam$OFFSET, fieldValue);
    }

    private static final AddressLayout aParam$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("aParam"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * sqlite3_rtree_dbl *aParam
     * }
     */
    public static final AddressLayout aParam$layout() {
        return aParam$LAYOUT;
    }

    private static final long aParam$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * sqlite3_rtree_dbl *aParam
     * }
     */
    public static final long aParam$offset() {
        return aParam$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * sqlite3_rtree_dbl *aParam
     * }
     */
    public static MemorySegment aParam(MemorySegment struct) {
        return struct.get(aParam$LAYOUT, aParam$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * sqlite3_rtree_dbl *aParam
     * }
     */
    public static void aParam(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(aParam$LAYOUT, aParam$OFFSET, fieldValue);
    }

    private static final AddressLayout pUser$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pUser"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *pUser
     * }
     */
    public static final AddressLayout pUser$layout() {
        return pUser$LAYOUT;
    }

    private static final long pUser$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *pUser
     * }
     */
    public static final long pUser$offset() {
        return pUser$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *pUser
     * }
     */
    public static MemorySegment pUser(MemorySegment struct) {
        return struct.get(pUser$LAYOUT, pUser$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *pUser
     * }
     */
    public static void pUser(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pUser$LAYOUT, pUser$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*xDelUser)(void *)
     * }
     */
    public static class xDelUser {

        xDelUser() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            sqlite3_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = sqlite3_h.upcallHandle(xDelUser.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(xDelUser.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout xDelUser$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("xDelUser"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*xDelUser)(void *)
     * }
     */
    public static final AddressLayout xDelUser$layout() {
        return xDelUser$LAYOUT;
    }

    private static final long xDelUser$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*xDelUser)(void *)
     * }
     */
    public static final long xDelUser$offset() {
        return xDelUser$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*xDelUser)(void *)
     * }
     */
    public static MemorySegment xDelUser(MemorySegment struct) {
        return struct.get(xDelUser$LAYOUT, xDelUser$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*xDelUser)(void *)
     * }
     */
    public static void xDelUser(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(xDelUser$LAYOUT, xDelUser$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

