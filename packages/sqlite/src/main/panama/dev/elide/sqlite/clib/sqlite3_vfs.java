// Generated by jextract

package dev.elide.sqlite.clib;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct sqlite3_vfs {
 *     int iVersion;
 *     int szOsFile;
 *     int mxPathname;
 *     sqlite3_vfs *pNext;
 *     const char *zName;
 *     void *pAppData;
 *     int (*xOpen)(sqlite3_vfs *, sqlite3_filename, sqlite3_file *, int, int *);
 *     int (*xDelete)(sqlite3_vfs *, const char *, int);
 *     int (*xAccess)(sqlite3_vfs *, const char *, int, int *);
 *     int (*xFullPathname)(sqlite3_vfs *, const char *, int, char *);
 *     void *(*xDlOpen)(sqlite3_vfs *, const char *);
 *     void (*xDlError)(sqlite3_vfs *, int, char *);
 *     void (*(*xDlSym)(sqlite3_vfs *, void *, const char *))(void);
 *     void (*xDlClose)(sqlite3_vfs *, void *);
 *     int (*xRandomness)(sqlite3_vfs *, int, char *);
 *     int (*xSleep)(sqlite3_vfs *, int);
 *     int (*xCurrentTime)(sqlite3_vfs *, double *);
 *     int (*xGetLastError)(sqlite3_vfs *, int, char *);
 *     int (*xCurrentTimeInt64)(sqlite3_vfs *, sqlite3_int64 *);
 *     int (*xSetSystemCall)(sqlite3_vfs *, const char *, sqlite3_syscall_ptr);
 *     sqlite3_syscall_ptr (*xGetSystemCall)(sqlite3_vfs *, const char *);
 *     const char *(*xNextSystemCall)(sqlite3_vfs *, const char *);
 * }
 * }
 */
public class sqlite3_vfs {

    sqlite3_vfs() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        sqlite3_h.C_INT.withName("iVersion"),
        sqlite3_h.C_INT.withName("szOsFile"),
        sqlite3_h.C_INT.withName("mxPathname"),
        MemoryLayout.paddingLayout(4),
        sqlite3_h.C_POINTER.withName("pNext"),
        sqlite3_h.C_POINTER.withName("zName"),
        sqlite3_h.C_POINTER.withName("pAppData"),
        sqlite3_h.C_POINTER.withName("xOpen"),
        sqlite3_h.C_POINTER.withName("xDelete"),
        sqlite3_h.C_POINTER.withName("xAccess"),
        sqlite3_h.C_POINTER.withName("xFullPathname"),
        sqlite3_h.C_POINTER.withName("xDlOpen"),
        sqlite3_h.C_POINTER.withName("xDlError"),
        sqlite3_h.C_POINTER.withName("xDlSym"),
        sqlite3_h.C_POINTER.withName("xDlClose"),
        sqlite3_h.C_POINTER.withName("xRandomness"),
        sqlite3_h.C_POINTER.withName("xSleep"),
        sqlite3_h.C_POINTER.withName("xCurrentTime"),
        sqlite3_h.C_POINTER.withName("xGetLastError"),
        sqlite3_h.C_POINTER.withName("xCurrentTimeInt64"),
        sqlite3_h.C_POINTER.withName("xSetSystemCall"),
        sqlite3_h.C_POINTER.withName("xGetSystemCall"),
        sqlite3_h.C_POINTER.withName("xNextSystemCall")
    ).withName("sqlite3_vfs");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt iVersion$LAYOUT = (OfInt)$LAYOUT.select(groupElement("iVersion"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int iVersion
     * }
     */
    public static final OfInt iVersion$layout() {
        return iVersion$LAYOUT;
    }

    private static final long iVersion$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int iVersion
     * }
     */
    public static final long iVersion$offset() {
        return iVersion$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int iVersion
     * }
     */
    public static int iVersion(MemorySegment struct) {
        return struct.get(iVersion$LAYOUT, iVersion$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int iVersion
     * }
     */
    public static void iVersion(MemorySegment struct, int fieldValue) {
        struct.set(iVersion$LAYOUT, iVersion$OFFSET, fieldValue);
    }

    private static final OfInt szOsFile$LAYOUT = (OfInt)$LAYOUT.select(groupElement("szOsFile"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int szOsFile
     * }
     */
    public static final OfInt szOsFile$layout() {
        return szOsFile$LAYOUT;
    }

    private static final long szOsFile$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int szOsFile
     * }
     */
    public static final long szOsFile$offset() {
        return szOsFile$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int szOsFile
     * }
     */
    public static int szOsFile(MemorySegment struct) {
        return struct.get(szOsFile$LAYOUT, szOsFile$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int szOsFile
     * }
     */
    public static void szOsFile(MemorySegment struct, int fieldValue) {
        struct.set(szOsFile$LAYOUT, szOsFile$OFFSET, fieldValue);
    }

    private static final OfInt mxPathname$LAYOUT = (OfInt)$LAYOUT.select(groupElement("mxPathname"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int mxPathname
     * }
     */
    public static final OfInt mxPathname$layout() {
        return mxPathname$LAYOUT;
    }

    private static final long mxPathname$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int mxPathname
     * }
     */
    public static final long mxPathname$offset() {
        return mxPathname$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int mxPathname
     * }
     */
    public static int mxPathname(MemorySegment struct) {
        return struct.get(mxPathname$LAYOUT, mxPathname$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int mxPathname
     * }
     */
    public static void mxPathname(MemorySegment struct, int fieldValue) {
        struct.set(mxPathname$LAYOUT, mxPathname$OFFSET, fieldValue);
    }

    private static final AddressLayout pNext$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pNext"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * sqlite3_vfs *pNext
     * }
     */
    public static final AddressLayout pNext$layout() {
        return pNext$LAYOUT;
    }

    private static final long pNext$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * sqlite3_vfs *pNext
     * }
     */
    public static final long pNext$offset() {
        return pNext$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * sqlite3_vfs *pNext
     * }
     */
    public static MemorySegment pNext(MemorySegment struct) {
        return struct.get(pNext$LAYOUT, pNext$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * sqlite3_vfs *pNext
     * }
     */
    public static void pNext(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pNext$LAYOUT, pNext$OFFSET, fieldValue);
    }

    private static final AddressLayout zName$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("zName"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *zName
     * }
     */
    public static final AddressLayout zName$layout() {
        return zName$LAYOUT;
    }

    private static final long zName$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *zName
     * }
     */
    public static final long zName$offset() {
        return zName$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *zName
     * }
     */
    public static MemorySegment zName(MemorySegment struct) {
        return struct.get(zName$LAYOUT, zName$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *zName
     * }
     */
    public static void zName(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(zName$LAYOUT, zName$OFFSET, fieldValue);
    }

    private static final AddressLayout pAppData$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pAppData"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *pAppData
     * }
     */
    public static final AddressLayout pAppData$layout() {
        return pAppData$LAYOUT;
    }

    private static final long pAppData$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *pAppData
     * }
     */
    public static final long pAppData$offset() {
        return pAppData$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *pAppData
     * }
     */
    public static MemorySegment pAppData(MemorySegment struct) {
        return struct.get(pAppData$LAYOUT, pAppData$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *pAppData
     * }
     */
    public static void pAppData(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pAppData$LAYOUT, pAppData$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (*xOpen)(sqlite3_vfs *, sqlite3_filename, sqlite3_file *, int, int *)
     * }
     */
    public static class xOpen {

        xOpen() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, int _x3, MemorySegment _x4);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = sqlite3_h.upcallHandle(xOpen.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(xOpen.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, int _x3, MemorySegment _x4) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout xOpen$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("xOpen"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*xOpen)(sqlite3_vfs *, sqlite3_filename, sqlite3_file *, int, int *)
     * }
     */
    public static final AddressLayout xOpen$layout() {
        return xOpen$LAYOUT;
    }

    private static final long xOpen$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*xOpen)(sqlite3_vfs *, sqlite3_filename, sqlite3_file *, int, int *)
     * }
     */
    public static final long xOpen$offset() {
        return xOpen$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*xOpen)(sqlite3_vfs *, sqlite3_filename, sqlite3_file *, int, int *)
     * }
     */
    public static MemorySegment xOpen(MemorySegment struct) {
        return struct.get(xOpen$LAYOUT, xOpen$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*xOpen)(sqlite3_vfs *, sqlite3_filename, sqlite3_file *, int, int *)
     * }
     */
    public static void xOpen(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(xOpen$LAYOUT, xOpen$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (*xDelete)(sqlite3_vfs *, const char *, int)
     * }
     */
    public static class xDelete {

        xDelete() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, int _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = sqlite3_h.upcallHandle(xDelete.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(xDelete.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, int _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout xDelete$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("xDelete"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*xDelete)(sqlite3_vfs *, const char *, int)
     * }
     */
    public static final AddressLayout xDelete$layout() {
        return xDelete$LAYOUT;
    }

    private static final long xDelete$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*xDelete)(sqlite3_vfs *, const char *, int)
     * }
     */
    public static final long xDelete$offset() {
        return xDelete$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*xDelete)(sqlite3_vfs *, const char *, int)
     * }
     */
    public static MemorySegment xDelete(MemorySegment struct) {
        return struct.get(xDelete$LAYOUT, xDelete$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*xDelete)(sqlite3_vfs *, const char *, int)
     * }
     */
    public static void xDelete(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(xDelete$LAYOUT, xDelete$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (*xAccess)(sqlite3_vfs *, const char *, int, int *)
     * }
     */
    public static class xAccess {

        xAccess() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, int _x2, MemorySegment _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = sqlite3_h.upcallHandle(xAccess.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(xAccess.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, int _x2, MemorySegment _x3) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout xAccess$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("xAccess"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*xAccess)(sqlite3_vfs *, const char *, int, int *)
     * }
     */
    public static final AddressLayout xAccess$layout() {
        return xAccess$LAYOUT;
    }

    private static final long xAccess$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*xAccess)(sqlite3_vfs *, const char *, int, int *)
     * }
     */
    public static final long xAccess$offset() {
        return xAccess$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*xAccess)(sqlite3_vfs *, const char *, int, int *)
     * }
     */
    public static MemorySegment xAccess(MemorySegment struct) {
        return struct.get(xAccess$LAYOUT, xAccess$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*xAccess)(sqlite3_vfs *, const char *, int, int *)
     * }
     */
    public static void xAccess(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(xAccess$LAYOUT, xAccess$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (*xFullPathname)(sqlite3_vfs *, const char *, int, char *)
     * }
     */
    public static class xFullPathname {

        xFullPathname() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, int _x2, MemorySegment _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = sqlite3_h.upcallHandle(xFullPathname.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(xFullPathname.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, int _x2, MemorySegment _x3) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout xFullPathname$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("xFullPathname"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*xFullPathname)(sqlite3_vfs *, const char *, int, char *)
     * }
     */
    public static final AddressLayout xFullPathname$layout() {
        return xFullPathname$LAYOUT;
    }

    private static final long xFullPathname$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*xFullPathname)(sqlite3_vfs *, const char *, int, char *)
     * }
     */
    public static final long xFullPathname$offset() {
        return xFullPathname$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*xFullPathname)(sqlite3_vfs *, const char *, int, char *)
     * }
     */
    public static MemorySegment xFullPathname(MemorySegment struct) {
        return struct.get(xFullPathname$LAYOUT, xFullPathname$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*xFullPathname)(sqlite3_vfs *, const char *, int, char *)
     * }
     */
    public static void xFullPathname(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(xFullPathname$LAYOUT, xFullPathname$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void *(*xDlOpen)(sqlite3_vfs *, const char *)
     * }
     */
    public static class xDlOpen {

        xDlOpen() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = sqlite3_h.upcallHandle(xDlOpen.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(xDlOpen.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout xDlOpen$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("xDlOpen"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *(*xDlOpen)(sqlite3_vfs *, const char *)
     * }
     */
    public static final AddressLayout xDlOpen$layout() {
        return xDlOpen$LAYOUT;
    }

    private static final long xDlOpen$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *(*xDlOpen)(sqlite3_vfs *, const char *)
     * }
     */
    public static final long xDlOpen$offset() {
        return xDlOpen$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *(*xDlOpen)(sqlite3_vfs *, const char *)
     * }
     */
    public static MemorySegment xDlOpen(MemorySegment struct) {
        return struct.get(xDlOpen$LAYOUT, xDlOpen$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *(*xDlOpen)(sqlite3_vfs *, const char *)
     * }
     */
    public static void xDlOpen(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(xDlOpen$LAYOUT, xDlOpen$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*xDlError)(sqlite3_vfs *, int, char *)
     * }
     */
    public static class xDlError {

        xDlError() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, int _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = sqlite3_h.upcallHandle(xDlError.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(xDlError.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, MemorySegment _x2) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout xDlError$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("xDlError"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*xDlError)(sqlite3_vfs *, int, char *)
     * }
     */
    public static final AddressLayout xDlError$layout() {
        return xDlError$LAYOUT;
    }

    private static final long xDlError$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*xDlError)(sqlite3_vfs *, int, char *)
     * }
     */
    public static final long xDlError$offset() {
        return xDlError$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*xDlError)(sqlite3_vfs *, int, char *)
     * }
     */
    public static MemorySegment xDlError(MemorySegment struct) {
        return struct.get(xDlError$LAYOUT, xDlError$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*xDlError)(sqlite3_vfs *, int, char *)
     * }
     */
    public static void xDlError(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(xDlError$LAYOUT, xDlError$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*(*xDlSym)(sqlite3_vfs *, void *, const char *))(void)
     * }
     */
    public static class xDlSym {

        xDlSym() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = sqlite3_h.upcallHandle(xDlSym.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(xDlSym.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout xDlSym$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("xDlSym"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*(*xDlSym)(sqlite3_vfs *, void *, const char *))(void)
     * }
     */
    public static final AddressLayout xDlSym$layout() {
        return xDlSym$LAYOUT;
    }

    private static final long xDlSym$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*(*xDlSym)(sqlite3_vfs *, void *, const char *))(void)
     * }
     */
    public static final long xDlSym$offset() {
        return xDlSym$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*(*xDlSym)(sqlite3_vfs *, void *, const char *))(void)
     * }
     */
    public static MemorySegment xDlSym(MemorySegment struct) {
        return struct.get(xDlSym$LAYOUT, xDlSym$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*(*xDlSym)(sqlite3_vfs *, void *, const char *))(void)
     * }
     */
    public static void xDlSym(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(xDlSym$LAYOUT, xDlSym$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*xDlClose)(sqlite3_vfs *, void *)
     * }
     */
    public static class xDlClose {

        xDlClose() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = sqlite3_h.upcallHandle(xDlClose.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(xDlClose.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout xDlClose$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("xDlClose"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*xDlClose)(sqlite3_vfs *, void *)
     * }
     */
    public static final AddressLayout xDlClose$layout() {
        return xDlClose$LAYOUT;
    }

    private static final long xDlClose$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*xDlClose)(sqlite3_vfs *, void *)
     * }
     */
    public static final long xDlClose$offset() {
        return xDlClose$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*xDlClose)(sqlite3_vfs *, void *)
     * }
     */
    public static MemorySegment xDlClose(MemorySegment struct) {
        return struct.get(xDlClose$LAYOUT, xDlClose$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*xDlClose)(sqlite3_vfs *, void *)
     * }
     */
    public static void xDlClose(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(xDlClose$LAYOUT, xDlClose$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (*xRandomness)(sqlite3_vfs *, int, char *)
     * }
     */
    public static class xRandomness {

        xRandomness() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = sqlite3_h.upcallHandle(xRandomness.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(xRandomness.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout xRandomness$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("xRandomness"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*xRandomness)(sqlite3_vfs *, int, char *)
     * }
     */
    public static final AddressLayout xRandomness$layout() {
        return xRandomness$LAYOUT;
    }

    private static final long xRandomness$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*xRandomness)(sqlite3_vfs *, int, char *)
     * }
     */
    public static final long xRandomness$offset() {
        return xRandomness$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*xRandomness)(sqlite3_vfs *, int, char *)
     * }
     */
    public static MemorySegment xRandomness(MemorySegment struct) {
        return struct.get(xRandomness$LAYOUT, xRandomness$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*xRandomness)(sqlite3_vfs *, int, char *)
     * }
     */
    public static void xRandomness(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(xRandomness$LAYOUT, xRandomness$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (*xSleep)(sqlite3_vfs *, int)
     * }
     */
    public static class xSleep {

        xSleep() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = sqlite3_h.upcallHandle(xSleep.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(xSleep.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout xSleep$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("xSleep"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*xSleep)(sqlite3_vfs *, int)
     * }
     */
    public static final AddressLayout xSleep$layout() {
        return xSleep$LAYOUT;
    }

    private static final long xSleep$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*xSleep)(sqlite3_vfs *, int)
     * }
     */
    public static final long xSleep$offset() {
        return xSleep$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*xSleep)(sqlite3_vfs *, int)
     * }
     */
    public static MemorySegment xSleep(MemorySegment struct) {
        return struct.get(xSleep$LAYOUT, xSleep$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*xSleep)(sqlite3_vfs *, int)
     * }
     */
    public static void xSleep(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(xSleep$LAYOUT, xSleep$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (*xCurrentTime)(sqlite3_vfs *, double *)
     * }
     */
    public static class xCurrentTime {

        xCurrentTime() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = sqlite3_h.upcallHandle(xCurrentTime.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(xCurrentTime.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout xCurrentTime$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("xCurrentTime"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*xCurrentTime)(sqlite3_vfs *, double *)
     * }
     */
    public static final AddressLayout xCurrentTime$layout() {
        return xCurrentTime$LAYOUT;
    }

    private static final long xCurrentTime$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*xCurrentTime)(sqlite3_vfs *, double *)
     * }
     */
    public static final long xCurrentTime$offset() {
        return xCurrentTime$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*xCurrentTime)(sqlite3_vfs *, double *)
     * }
     */
    public static MemorySegment xCurrentTime(MemorySegment struct) {
        return struct.get(xCurrentTime$LAYOUT, xCurrentTime$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*xCurrentTime)(sqlite3_vfs *, double *)
     * }
     */
    public static void xCurrentTime(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(xCurrentTime$LAYOUT, xCurrentTime$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (*xGetLastError)(sqlite3_vfs *, int, char *)
     * }
     */
    public static class xGetLastError {

        xGetLastError() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = sqlite3_h.upcallHandle(xGetLastError.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(xGetLastError.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout xGetLastError$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("xGetLastError"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*xGetLastError)(sqlite3_vfs *, int, char *)
     * }
     */
    public static final AddressLayout xGetLastError$layout() {
        return xGetLastError$LAYOUT;
    }

    private static final long xGetLastError$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*xGetLastError)(sqlite3_vfs *, int, char *)
     * }
     */
    public static final long xGetLastError$offset() {
        return xGetLastError$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*xGetLastError)(sqlite3_vfs *, int, char *)
     * }
     */
    public static MemorySegment xGetLastError(MemorySegment struct) {
        return struct.get(xGetLastError$LAYOUT, xGetLastError$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*xGetLastError)(sqlite3_vfs *, int, char *)
     * }
     */
    public static void xGetLastError(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(xGetLastError$LAYOUT, xGetLastError$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (*xCurrentTimeInt64)(sqlite3_vfs *, sqlite3_int64 *)
     * }
     */
    public static class xCurrentTimeInt64 {

        xCurrentTimeInt64() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = sqlite3_h.upcallHandle(xCurrentTimeInt64.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(xCurrentTimeInt64.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout xCurrentTimeInt64$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("xCurrentTimeInt64"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*xCurrentTimeInt64)(sqlite3_vfs *, sqlite3_int64 *)
     * }
     */
    public static final AddressLayout xCurrentTimeInt64$layout() {
        return xCurrentTimeInt64$LAYOUT;
    }

    private static final long xCurrentTimeInt64$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*xCurrentTimeInt64)(sqlite3_vfs *, sqlite3_int64 *)
     * }
     */
    public static final long xCurrentTimeInt64$offset() {
        return xCurrentTimeInt64$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*xCurrentTimeInt64)(sqlite3_vfs *, sqlite3_int64 *)
     * }
     */
    public static MemorySegment xCurrentTimeInt64(MemorySegment struct) {
        return struct.get(xCurrentTimeInt64$LAYOUT, xCurrentTimeInt64$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*xCurrentTimeInt64)(sqlite3_vfs *, sqlite3_int64 *)
     * }
     */
    public static void xCurrentTimeInt64(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(xCurrentTimeInt64$LAYOUT, xCurrentTimeInt64$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (*xSetSystemCall)(sqlite3_vfs *, const char *, sqlite3_syscall_ptr)
     * }
     */
    public static class xSetSystemCall {

        xSetSystemCall() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            sqlite3_h.C_INT,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = sqlite3_h.upcallHandle(xSetSystemCall.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(xSetSystemCall.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout xSetSystemCall$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("xSetSystemCall"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*xSetSystemCall)(sqlite3_vfs *, const char *, sqlite3_syscall_ptr)
     * }
     */
    public static final AddressLayout xSetSystemCall$layout() {
        return xSetSystemCall$LAYOUT;
    }

    private static final long xSetSystemCall$OFFSET = 144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*xSetSystemCall)(sqlite3_vfs *, const char *, sqlite3_syscall_ptr)
     * }
     */
    public static final long xSetSystemCall$offset() {
        return xSetSystemCall$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*xSetSystemCall)(sqlite3_vfs *, const char *, sqlite3_syscall_ptr)
     * }
     */
    public static MemorySegment xSetSystemCall(MemorySegment struct) {
        return struct.get(xSetSystemCall$LAYOUT, xSetSystemCall$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*xSetSystemCall)(sqlite3_vfs *, const char *, sqlite3_syscall_ptr)
     * }
     */
    public static void xSetSystemCall(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(xSetSystemCall$LAYOUT, xSetSystemCall$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * sqlite3_syscall_ptr (*xGetSystemCall)(sqlite3_vfs *, const char *)
     * }
     */
    public static class xGetSystemCall {

        xGetSystemCall() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = sqlite3_h.upcallHandle(xGetSystemCall.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(xGetSystemCall.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout xGetSystemCall$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("xGetSystemCall"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * sqlite3_syscall_ptr (*xGetSystemCall)(sqlite3_vfs *, const char *)
     * }
     */
    public static final AddressLayout xGetSystemCall$layout() {
        return xGetSystemCall$LAYOUT;
    }

    private static final long xGetSystemCall$OFFSET = 152;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * sqlite3_syscall_ptr (*xGetSystemCall)(sqlite3_vfs *, const char *)
     * }
     */
    public static final long xGetSystemCall$offset() {
        return xGetSystemCall$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * sqlite3_syscall_ptr (*xGetSystemCall)(sqlite3_vfs *, const char *)
     * }
     */
    public static MemorySegment xGetSystemCall(MemorySegment struct) {
        return struct.get(xGetSystemCall$LAYOUT, xGetSystemCall$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * sqlite3_syscall_ptr (*xGetSystemCall)(sqlite3_vfs *, const char *)
     * }
     */
    public static void xGetSystemCall(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(xGetSystemCall$LAYOUT, xGetSystemCall$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * const char *(*xNextSystemCall)(sqlite3_vfs *, const char *)
     * }
     */
    public static class xNextSystemCall {

        xNextSystemCall() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER,
            sqlite3_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = sqlite3_h.upcallHandle(xNextSystemCall.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(xNextSystemCall.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout xNextSystemCall$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("xNextSystemCall"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *(*xNextSystemCall)(sqlite3_vfs *, const char *)
     * }
     */
    public static final AddressLayout xNextSystemCall$layout() {
        return xNextSystemCall$LAYOUT;
    }

    private static final long xNextSystemCall$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *(*xNextSystemCall)(sqlite3_vfs *, const char *)
     * }
     */
    public static final long xNextSystemCall$offset() {
        return xNextSystemCall$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *(*xNextSystemCall)(sqlite3_vfs *, const char *)
     * }
     */
    public static MemorySegment xNextSystemCall(MemorySegment struct) {
        return struct.get(xNextSystemCall$LAYOUT, xNextSystemCall$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *(*xNextSystemCall)(sqlite3_vfs *, const char *)
     * }
     */
    public static void xNextSystemCall(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(xNextSystemCall$LAYOUT, xNextSystemCall$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

