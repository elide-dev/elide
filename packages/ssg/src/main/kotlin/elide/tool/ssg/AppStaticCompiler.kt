/*
 * Copyright (c) 2023 Elide Ventures, LLC.
 *
 * Licensed under the MIT license (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 *   https://opensource.org/license/mit/
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under the License.
 */

package elide.tool.ssg

import java.io.Closeable
import kotlinx.coroutines.Deferred

/**
 * # SSG: Static Compiler
 *
 * This class is responsible for the actual business logic of compiling a static site from generated requests, based on
 * the app's metadata. Requests are generated by the [AppLoader] in cooperation with the [RequestFactory]; with requests
 * and configured endpoints in hand, this class kicks in to recursively fulfill the full tree of requests.
 *
 * ## URL discovery
 *
 * To account for static assets and other handlers which are not marked as page controllers, additional URLs may be
 * added statically or discovered at runtime based on the returned HTML, which is parsed to discover these assets. As
 * URLs are discovered and deemed eligible for compilation, they are added to the queue of requests to be fulfilled,
 * which enqueues a new tree of requests within this class.
 */
public interface AppStaticCompiler : Closeable, AutoCloseable {
  /**
   * Prepare the static site compiler with input [params] and interpreted [appInfo]; the compiler may also make use of
   * the provided [loader] to fire requests at the user's app.
   *
   * @param params Compiler parameters provided via the command line or via programmatic invocation.
   * @param appInfo Loaded application manifest and info.
   * @param loader App loader to use for firing requests.
   */
  public fun prepare(params: SiteCompilerParams, appInfo: LoadedAppInfo, loader: AppLoader)

  /**
   * Run the static site compiler with the provided expected [seed] inputs (of length [count]); if so directed via the
   * params passed to [prepare], the compiler will also attempt to discover additional URLs in returned HTML responses.
   *
   * This method will execute until all requests have been fulfilled, or until the compiler has been interrupted. A call
   * is considered "fulfilled" when the following conditions are true:
   *
   * 1) A response has been received from the application, or
   * 2) An error has been encountered while fulfilling the request, or
   * 3) The request timeout value elapsed (a subset of case 2).
   *
   * This method operates synchronously, via suspension. For asynchronous dispatch, see [compileStaticSiteAsync], which
   * this method calls into.
   *
   * @see compileStaticSiteAsync for asynchronous dispatch.
   * @param count Count of seed requests to begin the compilation with.
   * @param appInfo Loaded application manifest and info.
   * @param seed Expected requests which should be used to start the execution.
   * @param buffer Buffer which holds the results from each request/response cycle.
   * @return Compiler execution result.
   * @throws SSGCompilerError in the event of an unrecoverable error.
   */
  @Throws(SSGCompilerError::class)
  public suspend fun compileStaticSite(
    count: Int,
    appInfo: LoadedAppInfo,
    seed: Sequence<StaticFragmentSpec>,
    buffer: StaticSiteBuffer,
  ): SiteCompileResult = compileStaticSiteAsync(
    count,
    appInfo,
    seed,
    buffer,
  ).await()

  /**
   * Run the static site compiler with the provided expected [seed] inputs (of length [count]); if so directed via the
   * params passed to [prepare], the compiler will also attempt to discover additional URLs in returned HTML responses.
   *
   * This method will execute until all requests have been fulfilled, or until the compiler has been interrupted. A call
   * is considered "fulfilled" when the following conditions are true:
   *
   * 1) A response has been received from the application, or
   * 2) An error has been encountered while fulfilling the request, or
   * 3) The request timeout value elapsed (a subset of case 2).
   *
   * This method operates asynchronously, by returning a [Deferred] job which evaluates to the compiler result. For
   * synchronous dispatch, see [compileStaticSite].
   *
   * @see compileStaticSite for synchronous dispatch.
   * @param count Count of seed requests to begin the compilation with.
   * @param appInfo Loaded application manifest and info.
   * @param seed Expected requests which should be used to start the execution.
   * @param buffer Buffer which holds the results from each request/response cycle.
   * @return Compiler execution result.
   * @throws SSGCompilerError in the event of an unrecoverable error.
   */
  public suspend fun compileStaticSiteAsync(
    count: Int,
    appInfo: LoadedAppInfo,
    seed: Sequence<StaticFragmentSpec>,
    buffer: StaticSiteBuffer,
  ): Deferred<SiteCompileResult>
}
