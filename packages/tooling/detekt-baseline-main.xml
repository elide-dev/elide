<?xml version='1.0' encoding='UTF-8'?>
<SmellBaseline>
  <ManuallySuppressedIssues/>
  <CurrentIssues>
    <ID>ExplicitItLambdaMultipleParameters:KotlinCompiler.kt:KotlinCompiler${ index, it -> debugLog("Flattening arg $index") it.asArgumentSequence() }</ID>
    <ID>ExplicitItLambdaMultipleParameters:KotlinCompiler.kt:KotlinCompiler${ index, it -> debugLog("Rendering flattened arg $index") try { it.asArgumentString(renderCtx).split(' ').also { debugLog("Rendered arg $index: $it") } } catch (err: Throwable) { val msg = "Failed to render argument: ${err.message}" debugLog(msg) embeddedToolError(kotlinc, msg, cause = err) } }</ID>
    <ID>LongParameterList:JvmBuildConfigurator.kt:JvmBuildConfigurator$( name: String, resolver: MavenAetherResolver?, state: ElideBuildState, config: BuildConfigurator.BuildConfiguration, srcSet: SourceSet, additionalDeps: Classpath? = null, tests: Boolean = false, dependencies: List&lt;Task> = emptyList(), argsAmender: K2JVMCompilerArguments.() -> Unit = {}, )</ID>
    <ID>NestedBlockDepth:JvmBuildConfigurator.kt:JvmBuildConfigurator$@Suppress("unused", "CyclomaticComplexMethod", "LongMethod") override suspend fun contribute(state: ElideBuildState, config: BuildConfigurator.BuildConfiguration)</ID>
    <ID>UnreachableCode:ElideProject.kt:SourceSetType$return when (this) { Sources -> return when (other) { Sources -> 0 Tests -> -1 } Tests -> return when (other) { Sources -> 1 Tests -> 0 } }</ID>
    <ID>UnusedPrivateProperty:MavenAetherResolver.kt:MavenAetherResolver.ElideLocalRepositoryListener$private val state: ElideBuildState</ID>
    <ID>UnusedPrivateProperty:MavenAetherResolver.kt:MavenAetherResolver.ElideMavenTransferListener$private val state: ElideBuildState</ID>
    <ID>VarCouldBeVal:MavenAetherResolver.kt:MavenAetherResolver$// Repository system session; available by injection. @Inject private lateinit var session: DefaultRepositorySystemSession</ID>
    <ID>VarCouldBeVal:MavenAetherResolver.kt:MavenAetherResolver$// Repository system; available by injection. @Inject private lateinit var system: RepositorySystem</ID>
    <ID>VarCouldBeVal:MavenAetherResolver.kt:MavenAetherResolver$var errors = mutableListOf&lt;Throwable>()</ID>
    <ID>VarCouldBeVal:ProcessRunner.kt:ProcessRunner$var effectiveOptions: ProcessOptions = options ?: ProcessOptions(ProcessShell.None)</ID>
    <ID>VarCouldBeVal:ProcessRunner.kt:ProcessRunner$var effectiveStreams: StdStreams = streams ?: StdStreams.Defaults</ID>
    <ID>VarCouldBeVal:ProcessRunner.kt:ProcessRunner$var executablePath: Path = exec</ID>
  </CurrentIssues>
</SmellBaseline>
