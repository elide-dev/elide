// Generated by jextract

package dev.elide.transport.bridge;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * union jvalue {
 *     jboolean z;
 *     jbyte b;
 *     jchar c;
 *     jshort s;
 *     jint i;
 *     jlong j;
 *     jfloat f;
 *     jdouble d;
 *     jobject l;
 * }
 * }
 */
public class jvalue {

    jvalue() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.unionLayout(
        netty_unix_socket_h.C_CHAR.withName("z"),
        netty_unix_socket_h.C_CHAR.withName("b"),
        netty_unix_socket_h.C_SHORT.withName("c"),
        netty_unix_socket_h.C_SHORT.withName("s"),
        netty_unix_socket_h.C_INT.withName("i"),
        netty_unix_socket_h.C_LONG.withName("j"),
        netty_unix_socket_h.C_FLOAT.withName("f"),
        netty_unix_socket_h.C_DOUBLE.withName("d"),
        netty_unix_socket_h.C_POINTER.withName("l")
    ).withName("jvalue");

    /**
     * The layout of this union
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfByte z$LAYOUT = (OfByte)$LAYOUT.select(groupElement("z"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * jboolean z
     * }
     */
    public static final OfByte z$layout() {
        return z$LAYOUT;
    }

    private static final long z$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * jboolean z
     * }
     */
    public static final long z$offset() {
        return z$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * jboolean z
     * }
     */
    public static byte z(MemorySegment union) {
        return union.get(z$LAYOUT, z$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * jboolean z
     * }
     */
    public static void z(MemorySegment union, byte fieldValue) {
        union.set(z$LAYOUT, z$OFFSET, fieldValue);
    }

    private static final OfByte b$LAYOUT = (OfByte)$LAYOUT.select(groupElement("b"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * jbyte b
     * }
     */
    public static final OfByte b$layout() {
        return b$LAYOUT;
    }

    private static final long b$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * jbyte b
     * }
     */
    public static final long b$offset() {
        return b$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * jbyte b
     * }
     */
    public static byte b(MemorySegment union) {
        return union.get(b$LAYOUT, b$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * jbyte b
     * }
     */
    public static void b(MemorySegment union, byte fieldValue) {
        union.set(b$LAYOUT, b$OFFSET, fieldValue);
    }

    private static final OfShort c$LAYOUT = (OfShort)$LAYOUT.select(groupElement("c"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * jchar c
     * }
     */
    public static final OfShort c$layout() {
        return c$LAYOUT;
    }

    private static final long c$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * jchar c
     * }
     */
    public static final long c$offset() {
        return c$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * jchar c
     * }
     */
    public static short c(MemorySegment union) {
        return union.get(c$LAYOUT, c$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * jchar c
     * }
     */
    public static void c(MemorySegment union, short fieldValue) {
        union.set(c$LAYOUT, c$OFFSET, fieldValue);
    }

    private static final OfShort s$LAYOUT = (OfShort)$LAYOUT.select(groupElement("s"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * jshort s
     * }
     */
    public static final OfShort s$layout() {
        return s$LAYOUT;
    }

    private static final long s$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * jshort s
     * }
     */
    public static final long s$offset() {
        return s$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * jshort s
     * }
     */
    public static short s(MemorySegment union) {
        return union.get(s$LAYOUT, s$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * jshort s
     * }
     */
    public static void s(MemorySegment union, short fieldValue) {
        union.set(s$LAYOUT, s$OFFSET, fieldValue);
    }

    private static final OfInt i$LAYOUT = (OfInt)$LAYOUT.select(groupElement("i"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * jint i
     * }
     */
    public static final OfInt i$layout() {
        return i$LAYOUT;
    }

    private static final long i$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * jint i
     * }
     */
    public static final long i$offset() {
        return i$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * jint i
     * }
     */
    public static int i(MemorySegment union) {
        return union.get(i$LAYOUT, i$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * jint i
     * }
     */
    public static void i(MemorySegment union, int fieldValue) {
        union.set(i$LAYOUT, i$OFFSET, fieldValue);
    }

    private static final OfLong j$LAYOUT = (OfLong)$LAYOUT.select(groupElement("j"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * jlong j
     * }
     */
    public static final OfLong j$layout() {
        return j$LAYOUT;
    }

    private static final long j$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * jlong j
     * }
     */
    public static final long j$offset() {
        return j$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * jlong j
     * }
     */
    public static long j(MemorySegment union) {
        return union.get(j$LAYOUT, j$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * jlong j
     * }
     */
    public static void j(MemorySegment union, long fieldValue) {
        union.set(j$LAYOUT, j$OFFSET, fieldValue);
    }

    private static final OfFloat f$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("f"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * jfloat f
     * }
     */
    public static final OfFloat f$layout() {
        return f$LAYOUT;
    }

    private static final long f$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * jfloat f
     * }
     */
    public static final long f$offset() {
        return f$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * jfloat f
     * }
     */
    public static float f(MemorySegment union) {
        return union.get(f$LAYOUT, f$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * jfloat f
     * }
     */
    public static void f(MemorySegment union, float fieldValue) {
        union.set(f$LAYOUT, f$OFFSET, fieldValue);
    }

    private static final OfDouble d$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("d"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * jdouble d
     * }
     */
    public static final OfDouble d$layout() {
        return d$LAYOUT;
    }

    private static final long d$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * jdouble d
     * }
     */
    public static final long d$offset() {
        return d$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * jdouble d
     * }
     */
    public static double d(MemorySegment union) {
        return union.get(d$LAYOUT, d$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * jdouble d
     * }
     */
    public static void d(MemorySegment union, double fieldValue) {
        union.set(d$LAYOUT, d$OFFSET, fieldValue);
    }

    private static final AddressLayout l$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("l"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * jobject l
     * }
     */
    public static final AddressLayout l$layout() {
        return l$LAYOUT;
    }

    private static final long l$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * jobject l
     * }
     */
    public static final long l$offset() {
        return l$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * jobject l
     * }
     */
    public static MemorySegment l(MemorySegment union) {
        return union.get(l$LAYOUT, l$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * jobject l
     * }
     */
    public static void l(MemorySegment union, MemorySegment fieldValue) {
        union.set(l$LAYOUT, l$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this union
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

