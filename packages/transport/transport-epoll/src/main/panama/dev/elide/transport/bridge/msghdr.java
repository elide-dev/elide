// Generated by jextract

package dev.elide.transport.bridge;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct msghdr {
 *     void *msg_name;
 *     socklen_t msg_namelen;
 *     struct iovec *msg_iov;
 *     int msg_iovlen;
 *     void *msg_control;
 *     socklen_t msg_controllen;
 *     int msg_flags;
 * }
 * }
 */
public class msghdr {

    msghdr() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        netty_unix_socket_h.C_POINTER.withName("msg_name"),
        netty_unix_socket_h.C_INT.withName("msg_namelen"),
        MemoryLayout.paddingLayout(4),
        netty_unix_socket_h.C_POINTER.withName("msg_iov"),
        netty_unix_socket_h.C_INT.withName("msg_iovlen"),
        MemoryLayout.paddingLayout(4),
        netty_unix_socket_h.C_POINTER.withName("msg_control"),
        netty_unix_socket_h.C_INT.withName("msg_controllen"),
        netty_unix_socket_h.C_INT.withName("msg_flags")
    ).withName("msghdr");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout msg_name$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("msg_name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *msg_name
     * }
     */
    public static final AddressLayout msg_name$layout() {
        return msg_name$LAYOUT;
    }

    private static final long msg_name$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *msg_name
     * }
     */
    public static final long msg_name$offset() {
        return msg_name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *msg_name
     * }
     */
    public static MemorySegment msg_name(MemorySegment struct) {
        return struct.get(msg_name$LAYOUT, msg_name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *msg_name
     * }
     */
    public static void msg_name(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(msg_name$LAYOUT, msg_name$OFFSET, fieldValue);
    }

    private static final OfInt msg_namelen$LAYOUT = (OfInt)$LAYOUT.select(groupElement("msg_namelen"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * socklen_t msg_namelen
     * }
     */
    public static final OfInt msg_namelen$layout() {
        return msg_namelen$LAYOUT;
    }

    private static final long msg_namelen$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * socklen_t msg_namelen
     * }
     */
    public static final long msg_namelen$offset() {
        return msg_namelen$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * socklen_t msg_namelen
     * }
     */
    public static int msg_namelen(MemorySegment struct) {
        return struct.get(msg_namelen$LAYOUT, msg_namelen$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * socklen_t msg_namelen
     * }
     */
    public static void msg_namelen(MemorySegment struct, int fieldValue) {
        struct.set(msg_namelen$LAYOUT, msg_namelen$OFFSET, fieldValue);
    }

    private static final AddressLayout msg_iov$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("msg_iov"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct iovec *msg_iov
     * }
     */
    public static final AddressLayout msg_iov$layout() {
        return msg_iov$LAYOUT;
    }

    private static final long msg_iov$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct iovec *msg_iov
     * }
     */
    public static final long msg_iov$offset() {
        return msg_iov$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct iovec *msg_iov
     * }
     */
    public static MemorySegment msg_iov(MemorySegment struct) {
        return struct.get(msg_iov$LAYOUT, msg_iov$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct iovec *msg_iov
     * }
     */
    public static void msg_iov(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(msg_iov$LAYOUT, msg_iov$OFFSET, fieldValue);
    }

    private static final OfInt msg_iovlen$LAYOUT = (OfInt)$LAYOUT.select(groupElement("msg_iovlen"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int msg_iovlen
     * }
     */
    public static final OfInt msg_iovlen$layout() {
        return msg_iovlen$LAYOUT;
    }

    private static final long msg_iovlen$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int msg_iovlen
     * }
     */
    public static final long msg_iovlen$offset() {
        return msg_iovlen$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int msg_iovlen
     * }
     */
    public static int msg_iovlen(MemorySegment struct) {
        return struct.get(msg_iovlen$LAYOUT, msg_iovlen$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int msg_iovlen
     * }
     */
    public static void msg_iovlen(MemorySegment struct, int fieldValue) {
        struct.set(msg_iovlen$LAYOUT, msg_iovlen$OFFSET, fieldValue);
    }

    private static final AddressLayout msg_control$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("msg_control"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *msg_control
     * }
     */
    public static final AddressLayout msg_control$layout() {
        return msg_control$LAYOUT;
    }

    private static final long msg_control$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *msg_control
     * }
     */
    public static final long msg_control$offset() {
        return msg_control$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *msg_control
     * }
     */
    public static MemorySegment msg_control(MemorySegment struct) {
        return struct.get(msg_control$LAYOUT, msg_control$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *msg_control
     * }
     */
    public static void msg_control(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(msg_control$LAYOUT, msg_control$OFFSET, fieldValue);
    }

    private static final OfInt msg_controllen$LAYOUT = (OfInt)$LAYOUT.select(groupElement("msg_controllen"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * socklen_t msg_controllen
     * }
     */
    public static final OfInt msg_controllen$layout() {
        return msg_controllen$LAYOUT;
    }

    private static final long msg_controllen$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * socklen_t msg_controllen
     * }
     */
    public static final long msg_controllen$offset() {
        return msg_controllen$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * socklen_t msg_controllen
     * }
     */
    public static int msg_controllen(MemorySegment struct) {
        return struct.get(msg_controllen$LAYOUT, msg_controllen$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * socklen_t msg_controllen
     * }
     */
    public static void msg_controllen(MemorySegment struct, int fieldValue) {
        struct.set(msg_controllen$LAYOUT, msg_controllen$OFFSET, fieldValue);
    }

    private static final OfInt msg_flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("msg_flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int msg_flags
     * }
     */
    public static final OfInt msg_flags$layout() {
        return msg_flags$LAYOUT;
    }

    private static final long msg_flags$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int msg_flags
     * }
     */
    public static final long msg_flags$offset() {
        return msg_flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int msg_flags
     * }
     */
    public static int msg_flags(MemorySegment struct) {
        return struct.get(msg_flags$LAYOUT, msg_flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int msg_flags
     * }
     */
    public static void msg_flags(MemorySegment struct, int fieldValue) {
        struct.set(msg_flags$LAYOUT, msg_flags$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

