// Generated by jextract

package dev.elide.transport.bridge;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class netty_unix_socket_h extends netty_unix_socket_h_1 {

    netty_unix_socket_h() {
        // Should not be called directly
    }
    private static final int PF_ISO = (int)7L;
    /**
     * {@snippet lang=c :
     * #define PF_ISO 7
     * }
     */
    public static int PF_ISO() {
        return PF_ISO;
    }
    private static final int PF_OSI = (int)7L;
    /**
     * {@snippet lang=c :
     * #define PF_OSI 7
     * }
     */
    public static int PF_OSI() {
        return PF_OSI;
    }
    private static final int PF_ECMA = (int)8L;
    /**
     * {@snippet lang=c :
     * #define PF_ECMA 8
     * }
     */
    public static int PF_ECMA() {
        return PF_ECMA;
    }
    private static final int PF_DATAKIT = (int)9L;
    /**
     * {@snippet lang=c :
     * #define PF_DATAKIT 9
     * }
     */
    public static int PF_DATAKIT() {
        return PF_DATAKIT;
    }
    private static final int PF_CCITT = (int)10L;
    /**
     * {@snippet lang=c :
     * #define PF_CCITT 10
     * }
     */
    public static int PF_CCITT() {
        return PF_CCITT;
    }
    private static final int PF_SNA = (int)11L;
    /**
     * {@snippet lang=c :
     * #define PF_SNA 11
     * }
     */
    public static int PF_SNA() {
        return PF_SNA;
    }
    private static final int PF_DECnet = (int)12L;
    /**
     * {@snippet lang=c :
     * #define PF_DECnet 12
     * }
     */
    public static int PF_DECnet() {
        return PF_DECnet;
    }
    private static final int PF_DLI = (int)13L;
    /**
     * {@snippet lang=c :
     * #define PF_DLI 13
     * }
     */
    public static int PF_DLI() {
        return PF_DLI;
    }
    private static final int PF_LAT = (int)14L;
    /**
     * {@snippet lang=c :
     * #define PF_LAT 14
     * }
     */
    public static int PF_LAT() {
        return PF_LAT;
    }
    private static final int PF_HYLINK = (int)15L;
    /**
     * {@snippet lang=c :
     * #define PF_HYLINK 15
     * }
     */
    public static int PF_HYLINK() {
        return PF_HYLINK;
    }
    private static final int PF_APPLETALK = (int)16L;
    /**
     * {@snippet lang=c :
     * #define PF_APPLETALK 16
     * }
     */
    public static int PF_APPLETALK() {
        return PF_APPLETALK;
    }
    private static final int PF_ROUTE = (int)17L;
    /**
     * {@snippet lang=c :
     * #define PF_ROUTE 17
     * }
     */
    public static int PF_ROUTE() {
        return PF_ROUTE;
    }
    private static final int PF_LINK = (int)18L;
    /**
     * {@snippet lang=c :
     * #define PF_LINK 18
     * }
     */
    public static int PF_LINK() {
        return PF_LINK;
    }
    private static final int PF_XTP = (int)19L;
    /**
     * {@snippet lang=c :
     * #define PF_XTP 19
     * }
     */
    public static int PF_XTP() {
        return PF_XTP;
    }
    private static final int PF_COIP = (int)20L;
    /**
     * {@snippet lang=c :
     * #define PF_COIP 20
     * }
     */
    public static int PF_COIP() {
        return PF_COIP;
    }
    private static final int PF_CNT = (int)21L;
    /**
     * {@snippet lang=c :
     * #define PF_CNT 21
     * }
     */
    public static int PF_CNT() {
        return PF_CNT;
    }
    private static final int PF_SIP = (int)24L;
    /**
     * {@snippet lang=c :
     * #define PF_SIP 24
     * }
     */
    public static int PF_SIP() {
        return PF_SIP;
    }
    private static final int PF_IPX = (int)23L;
    /**
     * {@snippet lang=c :
     * #define PF_IPX 23
     * }
     */
    public static int PF_IPX() {
        return PF_IPX;
    }
    private static final int PF_RTIP = (int)22L;
    /**
     * {@snippet lang=c :
     * #define PF_RTIP 22
     * }
     */
    public static int PF_RTIP() {
        return PF_RTIP;
    }
    private static final int PF_PIP = (int)25L;
    /**
     * {@snippet lang=c :
     * #define PF_PIP 25
     * }
     */
    public static int PF_PIP() {
        return PF_PIP;
    }
    private static final int PF_NDRV = (int)27L;
    /**
     * {@snippet lang=c :
     * #define PF_NDRV 27
     * }
     */
    public static int PF_NDRV() {
        return PF_NDRV;
    }
    private static final int PF_ISDN = (int)28L;
    /**
     * {@snippet lang=c :
     * #define PF_ISDN 28
     * }
     */
    public static int PF_ISDN() {
        return PF_ISDN;
    }
    private static final int PF_KEY = (int)29L;
    /**
     * {@snippet lang=c :
     * #define PF_KEY 29
     * }
     */
    public static int PF_KEY() {
        return PF_KEY;
    }
    private static final int PF_INET6 = (int)30L;
    /**
     * {@snippet lang=c :
     * #define PF_INET6 30
     * }
     */
    public static int PF_INET6() {
        return PF_INET6;
    }
    private static final int PF_NATM = (int)31L;
    /**
     * {@snippet lang=c :
     * #define PF_NATM 31
     * }
     */
    public static int PF_NATM() {
        return PF_NATM;
    }
    private static final int PF_SYSTEM = (int)32L;
    /**
     * {@snippet lang=c :
     * #define PF_SYSTEM 32
     * }
     */
    public static int PF_SYSTEM() {
        return PF_SYSTEM;
    }
    private static final int PF_NETBIOS = (int)33L;
    /**
     * {@snippet lang=c :
     * #define PF_NETBIOS 33
     * }
     */
    public static int PF_NETBIOS() {
        return PF_NETBIOS;
    }
    private static final int PF_PPP = (int)34L;
    /**
     * {@snippet lang=c :
     * #define PF_PPP 34
     * }
     */
    public static int PF_PPP() {
        return PF_PPP;
    }
    private static final int PF_RESERVED_36 = (int)36L;
    /**
     * {@snippet lang=c :
     * #define PF_RESERVED_36 36
     * }
     */
    public static int PF_RESERVED_36() {
        return PF_RESERVED_36;
    }
    private static final int PF_UTUN = (int)38L;
    /**
     * {@snippet lang=c :
     * #define PF_UTUN 38
     * }
     */
    public static int PF_UTUN() {
        return PF_UTUN;
    }
    private static final int PF_VSOCK = (int)40L;
    /**
     * {@snippet lang=c :
     * #define PF_VSOCK 40
     * }
     */
    public static int PF_VSOCK() {
        return PF_VSOCK;
    }
    private static final int PF_MAX = (int)41L;
    /**
     * {@snippet lang=c :
     * #define PF_MAX 41
     * }
     */
    public static int PF_MAX() {
        return PF_MAX;
    }
    private static final int PF_VLAN = (int)1986814318L;
    /**
     * {@snippet lang=c :
     * #define PF_VLAN 1986814318
     * }
     */
    public static int PF_VLAN() {
        return PF_VLAN;
    }
    private static final int PF_BOND = (int)1651469924L;
    /**
     * {@snippet lang=c :
     * #define PF_BOND 1651469924
     * }
     */
    public static int PF_BOND() {
        return PF_BOND;
    }
    private static final int NET_MAXID = (int)41L;
    /**
     * {@snippet lang=c :
     * #define NET_MAXID 41
     * }
     */
    public static int NET_MAXID() {
        return NET_MAXID;
    }
    private static final int __DARWIN_WCHAR_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_WCHAR_MAX 2147483647
     * }
     */
    public static int __DARWIN_WCHAR_MAX() {
        return __DARWIN_WCHAR_MAX;
    }
    private static final int __DARWIN_WCHAR_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_WCHAR_MIN -2147483648
     * }
     */
    public static int __DARWIN_WCHAR_MIN() {
        return __DARWIN_WCHAR_MIN;
    }
    private static final int __DARWIN_WEOF = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_WEOF -1
     * }
     */
    public static int __DARWIN_WEOF() {
        return __DARWIN_WEOF;
    }
    private static final MemorySegment NULL = MemorySegment.ofAddress(0L);
    /**
     * {@snippet lang=c :
     * #define NULL (void*) 0
     * }
     */
    public static MemorySegment NULL() {
        return NULL;
    }
    private static final int EOF = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define EOF -1
     * }
     */
    public static int EOF() {
        return EOF;
    }
    /**
     * {@snippet lang=c :
     * #define P_tmpdir "/var/tmp/"
     * }
     */
    public static MemorySegment P_tmpdir() {
        class Holder {
            static final MemorySegment P_tmpdir
                = netty_unix_socket_h.LIBRARY_ARENA.allocateFrom("/var/tmp/");
        }
        return Holder.P_tmpdir;
    }
    private static final int JNI_ERR = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define JNI_ERR -1
     * }
     */
    public static int JNI_ERR() {
        return JNI_ERR;
    }
    private static final int JNI_EDETACHED = (int)-2L;
    /**
     * {@snippet lang=c :
     * #define JNI_EDETACHED -2
     * }
     */
    public static int JNI_EDETACHED() {
        return JNI_EDETACHED;
    }
    private static final int JNI_EVERSION = (int)-3L;
    /**
     * {@snippet lang=c :
     * #define JNI_EVERSION -3
     * }
     */
    public static int JNI_EVERSION() {
        return JNI_EVERSION;
    }
    private static final int JNI_ENOMEM = (int)-4L;
    /**
     * {@snippet lang=c :
     * #define JNI_ENOMEM -4
     * }
     */
    public static int JNI_ENOMEM() {
        return JNI_ENOMEM;
    }
    private static final int JNI_EEXIST = (int)-5L;
    /**
     * {@snippet lang=c :
     * #define JNI_EEXIST -5
     * }
     */
    public static int JNI_EEXIST() {
        return JNI_EEXIST;
    }
    private static final int JNI_EINVAL = (int)-6L;
    /**
     * {@snippet lang=c :
     * #define JNI_EINVAL -6
     * }
     */
    public static int JNI_EINVAL() {
        return JNI_EINVAL;
    }
}

