// Generated by jextract

package dev.elide.transport.bridge;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct sockaddr_storage {
 *     __uint8_t ss_len;
 *     sa_family_t ss_family;
 *     char __ss_pad1[6];
 *     __int64_t __ss_align;
 *     char __ss_pad2[112];
 * }
 * }
 */
public class sockaddr_storage {

    sockaddr_storage() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        netty_unix_socket_h.C_CHAR.withName("ss_len"),
        netty_unix_socket_h.C_CHAR.withName("ss_family"),
        MemoryLayout.sequenceLayout(6, netty_unix_socket_h.C_CHAR).withName("__ss_pad1"),
        netty_unix_socket_h.C_LONG_LONG.withName("__ss_align"),
        MemoryLayout.sequenceLayout(112, netty_unix_socket_h.C_CHAR).withName("__ss_pad2")
    ).withName("sockaddr_storage");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfByte ss_len$LAYOUT = (OfByte)$LAYOUT.select(groupElement("ss_len"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __uint8_t ss_len
     * }
     */
    public static final OfByte ss_len$layout() {
        return ss_len$LAYOUT;
    }

    private static final long ss_len$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __uint8_t ss_len
     * }
     */
    public static final long ss_len$offset() {
        return ss_len$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __uint8_t ss_len
     * }
     */
    public static byte ss_len(MemorySegment struct) {
        return struct.get(ss_len$LAYOUT, ss_len$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __uint8_t ss_len
     * }
     */
    public static void ss_len(MemorySegment struct, byte fieldValue) {
        struct.set(ss_len$LAYOUT, ss_len$OFFSET, fieldValue);
    }

    private static final OfByte ss_family$LAYOUT = (OfByte)$LAYOUT.select(groupElement("ss_family"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * sa_family_t ss_family
     * }
     */
    public static final OfByte ss_family$layout() {
        return ss_family$LAYOUT;
    }

    private static final long ss_family$OFFSET = 1;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * sa_family_t ss_family
     * }
     */
    public static final long ss_family$offset() {
        return ss_family$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * sa_family_t ss_family
     * }
     */
    public static byte ss_family(MemorySegment struct) {
        return struct.get(ss_family$LAYOUT, ss_family$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * sa_family_t ss_family
     * }
     */
    public static void ss_family(MemorySegment struct, byte fieldValue) {
        struct.set(ss_family$LAYOUT, ss_family$OFFSET, fieldValue);
    }

    private static final SequenceLayout __ss_pad1$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("__ss_pad1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char __ss_pad1[6]
     * }
     */
    public static final SequenceLayout __ss_pad1$layout() {
        return __ss_pad1$LAYOUT;
    }

    private static final long __ss_pad1$OFFSET = 2;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char __ss_pad1[6]
     * }
     */
    public static final long __ss_pad1$offset() {
        return __ss_pad1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char __ss_pad1[6]
     * }
     */
    public static MemorySegment __ss_pad1(MemorySegment struct) {
        return struct.asSlice(__ss_pad1$OFFSET, __ss_pad1$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char __ss_pad1[6]
     * }
     */
    public static void __ss_pad1(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, __ss_pad1$OFFSET, __ss_pad1$LAYOUT.byteSize());
    }

    private static long[] __ss_pad1$DIMS = { 6 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char __ss_pad1[6]
     * }
     */
    public static long[] __ss_pad1$dimensions() {
        return __ss_pad1$DIMS;
    }
    private static final VarHandle __ss_pad1$ELEM_HANDLE = __ss_pad1$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char __ss_pad1[6]
     * }
     */
    public static byte __ss_pad1(MemorySegment struct, long index0) {
        return (byte)__ss_pad1$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char __ss_pad1[6]
     * }
     */
    public static void __ss_pad1(MemorySegment struct, long index0, byte fieldValue) {
        __ss_pad1$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfLong __ss_align$LAYOUT = (OfLong)$LAYOUT.select(groupElement("__ss_align"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __int64_t __ss_align
     * }
     */
    public static final OfLong __ss_align$layout() {
        return __ss_align$LAYOUT;
    }

    private static final long __ss_align$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __int64_t __ss_align
     * }
     */
    public static final long __ss_align$offset() {
        return __ss_align$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __int64_t __ss_align
     * }
     */
    public static long __ss_align(MemorySegment struct) {
        return struct.get(__ss_align$LAYOUT, __ss_align$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __int64_t __ss_align
     * }
     */
    public static void __ss_align(MemorySegment struct, long fieldValue) {
        struct.set(__ss_align$LAYOUT, __ss_align$OFFSET, fieldValue);
    }

    private static final SequenceLayout __ss_pad2$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("__ss_pad2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char __ss_pad2[112]
     * }
     */
    public static final SequenceLayout __ss_pad2$layout() {
        return __ss_pad2$LAYOUT;
    }

    private static final long __ss_pad2$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char __ss_pad2[112]
     * }
     */
    public static final long __ss_pad2$offset() {
        return __ss_pad2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char __ss_pad2[112]
     * }
     */
    public static MemorySegment __ss_pad2(MemorySegment struct) {
        return struct.asSlice(__ss_pad2$OFFSET, __ss_pad2$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char __ss_pad2[112]
     * }
     */
    public static void __ss_pad2(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, __ss_pad2$OFFSET, __ss_pad2$LAYOUT.byteSize());
    }

    private static long[] __ss_pad2$DIMS = { 112 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char __ss_pad2[112]
     * }
     */
    public static long[] __ss_pad2$dimensions() {
        return __ss_pad2$DIMS;
    }
    private static final VarHandle __ss_pad2$ELEM_HANDLE = __ss_pad2$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char __ss_pad2[112]
     * }
     */
    public static byte __ss_pad2(MemorySegment struct, long index0) {
        return (byte)__ss_pad2$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char __ss_pad2[112]
     * }
     */
    public static void __ss_pad2(MemorySegment struct, long index0, byte fieldValue) {
        __ss_pad2$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

