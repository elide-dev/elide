// Generated by jextract

package dev.elide.transport.bridge;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct sockaddr_vm {
 *     sa_family_t svm_family;
 *     unsigned short svm_reserved1;
 *     unsigned int svm_port;
 *     unsigned int svm_cid;
 *     unsigned char svm_zero[5];
 * }
 * }
 */
public class sockaddr_vm {

    sockaddr_vm() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        netty_epoll_vmsocket_h.C_CHAR.withName("svm_family"),
        MemoryLayout.paddingLayout(1),
        netty_epoll_vmsocket_h.C_SHORT.withName("svm_reserved1"),
        netty_epoll_vmsocket_h.C_INT.withName("svm_port"),
        netty_epoll_vmsocket_h.C_INT.withName("svm_cid"),
        MemoryLayout.sequenceLayout(5, netty_epoll_vmsocket_h.C_CHAR).withName("svm_zero"),
        MemoryLayout.paddingLayout(3)
    ).withName("sockaddr_vm");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfByte svm_family$LAYOUT = (OfByte)$LAYOUT.select(groupElement("svm_family"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * sa_family_t svm_family
     * }
     */
    public static final OfByte svm_family$layout() {
        return svm_family$LAYOUT;
    }

    private static final long svm_family$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * sa_family_t svm_family
     * }
     */
    public static final long svm_family$offset() {
        return svm_family$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * sa_family_t svm_family
     * }
     */
    public static byte svm_family(MemorySegment struct) {
        return struct.get(svm_family$LAYOUT, svm_family$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * sa_family_t svm_family
     * }
     */
    public static void svm_family(MemorySegment struct, byte fieldValue) {
        struct.set(svm_family$LAYOUT, svm_family$OFFSET, fieldValue);
    }

    private static final OfShort svm_reserved1$LAYOUT = (OfShort)$LAYOUT.select(groupElement("svm_reserved1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned short svm_reserved1
     * }
     */
    public static final OfShort svm_reserved1$layout() {
        return svm_reserved1$LAYOUT;
    }

    private static final long svm_reserved1$OFFSET = 2;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned short svm_reserved1
     * }
     */
    public static final long svm_reserved1$offset() {
        return svm_reserved1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned short svm_reserved1
     * }
     */
    public static short svm_reserved1(MemorySegment struct) {
        return struct.get(svm_reserved1$LAYOUT, svm_reserved1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned short svm_reserved1
     * }
     */
    public static void svm_reserved1(MemorySegment struct, short fieldValue) {
        struct.set(svm_reserved1$LAYOUT, svm_reserved1$OFFSET, fieldValue);
    }

    private static final OfInt svm_port$LAYOUT = (OfInt)$LAYOUT.select(groupElement("svm_port"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int svm_port
     * }
     */
    public static final OfInt svm_port$layout() {
        return svm_port$LAYOUT;
    }

    private static final long svm_port$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int svm_port
     * }
     */
    public static final long svm_port$offset() {
        return svm_port$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int svm_port
     * }
     */
    public static int svm_port(MemorySegment struct) {
        return struct.get(svm_port$LAYOUT, svm_port$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int svm_port
     * }
     */
    public static void svm_port(MemorySegment struct, int fieldValue) {
        struct.set(svm_port$LAYOUT, svm_port$OFFSET, fieldValue);
    }

    private static final OfInt svm_cid$LAYOUT = (OfInt)$LAYOUT.select(groupElement("svm_cid"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int svm_cid
     * }
     */
    public static final OfInt svm_cid$layout() {
        return svm_cid$LAYOUT;
    }

    private static final long svm_cid$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int svm_cid
     * }
     */
    public static final long svm_cid$offset() {
        return svm_cid$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int svm_cid
     * }
     */
    public static int svm_cid(MemorySegment struct) {
        return struct.get(svm_cid$LAYOUT, svm_cid$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int svm_cid
     * }
     */
    public static void svm_cid(MemorySegment struct, int fieldValue) {
        struct.set(svm_cid$LAYOUT, svm_cid$OFFSET, fieldValue);
    }

    private static final SequenceLayout svm_zero$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("svm_zero"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned char svm_zero[5]
     * }
     */
    public static final SequenceLayout svm_zero$layout() {
        return svm_zero$LAYOUT;
    }

    private static final long svm_zero$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned char svm_zero[5]
     * }
     */
    public static final long svm_zero$offset() {
        return svm_zero$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned char svm_zero[5]
     * }
     */
    public static MemorySegment svm_zero(MemorySegment struct) {
        return struct.asSlice(svm_zero$OFFSET, svm_zero$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned char svm_zero[5]
     * }
     */
    public static void svm_zero(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, svm_zero$OFFSET, svm_zero$LAYOUT.byteSize());
    }

    private static long[] svm_zero$DIMS = { 5 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * unsigned char svm_zero[5]
     * }
     */
    public static long[] svm_zero$dimensions() {
        return svm_zero$DIMS;
    }
    private static final VarHandle svm_zero$ELEM_HANDLE = svm_zero$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * unsigned char svm_zero[5]
     * }
     */
    public static byte svm_zero(MemorySegment struct, long index0) {
        return (byte)svm_zero$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * unsigned char svm_zero[5]
     * }
     */
    public static void svm_zero(MemorySegment struct, long index0, byte fieldValue) {
        svm_zero$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

