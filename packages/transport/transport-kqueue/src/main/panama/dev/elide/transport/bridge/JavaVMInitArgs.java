// Generated by jextract

package dev.elide.transport.bridge;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct JavaVMInitArgs {
 *     jint version;
 *     jint nOptions;
 *     JavaVMOption *options;
 *     jboolean ignoreUnrecognized;
 * }
 * }
 */
public class JavaVMInitArgs {

    JavaVMInitArgs() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        netty_unix_util_h.C_INT.withName("version"),
        netty_unix_util_h.C_INT.withName("nOptions"),
        netty_unix_util_h.C_POINTER.withName("options"),
        netty_unix_util_h.C_CHAR.withName("ignoreUnrecognized"),
        MemoryLayout.paddingLayout(7)
    ).withName("JavaVMInitArgs");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt version$LAYOUT = (OfInt)$LAYOUT.select(groupElement("version"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * jint version
     * }
     */
    public static final OfInt version$layout() {
        return version$LAYOUT;
    }

    private static final long version$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * jint version
     * }
     */
    public static final long version$offset() {
        return version$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * jint version
     * }
     */
    public static int version(MemorySegment struct) {
        return struct.get(version$LAYOUT, version$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * jint version
     * }
     */
    public static void version(MemorySegment struct, int fieldValue) {
        struct.set(version$LAYOUT, version$OFFSET, fieldValue);
    }

    private static final OfInt nOptions$LAYOUT = (OfInt)$LAYOUT.select(groupElement("nOptions"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * jint nOptions
     * }
     */
    public static final OfInt nOptions$layout() {
        return nOptions$LAYOUT;
    }

    private static final long nOptions$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * jint nOptions
     * }
     */
    public static final long nOptions$offset() {
        return nOptions$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * jint nOptions
     * }
     */
    public static int nOptions(MemorySegment struct) {
        return struct.get(nOptions$LAYOUT, nOptions$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * jint nOptions
     * }
     */
    public static void nOptions(MemorySegment struct, int fieldValue) {
        struct.set(nOptions$LAYOUT, nOptions$OFFSET, fieldValue);
    }

    private static final AddressLayout options$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("options"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * JavaVMOption *options
     * }
     */
    public static final AddressLayout options$layout() {
        return options$LAYOUT;
    }

    private static final long options$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * JavaVMOption *options
     * }
     */
    public static final long options$offset() {
        return options$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * JavaVMOption *options
     * }
     */
    public static MemorySegment options(MemorySegment struct) {
        return struct.get(options$LAYOUT, options$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * JavaVMOption *options
     * }
     */
    public static void options(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(options$LAYOUT, options$OFFSET, fieldValue);
    }

    private static final OfByte ignoreUnrecognized$LAYOUT = (OfByte)$LAYOUT.select(groupElement("ignoreUnrecognized"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * jboolean ignoreUnrecognized
     * }
     */
    public static final OfByte ignoreUnrecognized$layout() {
        return ignoreUnrecognized$LAYOUT;
    }

    private static final long ignoreUnrecognized$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * jboolean ignoreUnrecognized
     * }
     */
    public static final long ignoreUnrecognized$offset() {
        return ignoreUnrecognized$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * jboolean ignoreUnrecognized
     * }
     */
    public static byte ignoreUnrecognized(MemorySegment struct) {
        return struct.get(ignoreUnrecognized$LAYOUT, ignoreUnrecognized$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * jboolean ignoreUnrecognized
     * }
     */
    public static void ignoreUnrecognized(MemorySegment struct, byte fieldValue) {
        struct.set(ignoreUnrecognized$LAYOUT, ignoreUnrecognized$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

