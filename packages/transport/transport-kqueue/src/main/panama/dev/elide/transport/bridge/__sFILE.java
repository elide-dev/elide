// Generated by jextract

package dev.elide.transport.bridge;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct __sFILE {
 *     unsigned char *_p;
 *     int _r;
 *     int _w;
 *     short _flags;
 *     short _file;
 *     struct __sbuf _bf;
 *     int _lbfsize;
 *     void *_cookie;
 *     int (* _Nullable _close)(void *);
 *     int (* _Nullable _read)(void *, char *, int);
 *     fpos_t (* _Nullable _seek)(void *, fpos_t, int);
 *     int (* _Nullable _write)(void *, const char *, int);
 *     struct __sbuf _ub;
 *     struct __sFILEX *_extra;
 *     int _ur;
 *     unsigned char _ubuf[3];
 *     unsigned char _nbuf[1];
 *     struct __sbuf _lb;
 *     int _blksize;
 *     fpos_t _offset;
 * }
 * }
 */
public class __sFILE {

    __sFILE() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        netty_unix_util_h.C_POINTER.withName("_p"),
        netty_unix_util_h.C_INT.withName("_r"),
        netty_unix_util_h.C_INT.withName("_w"),
        netty_unix_util_h.C_SHORT.withName("_flags"),
        netty_unix_util_h.C_SHORT.withName("_file"),
        MemoryLayout.paddingLayout(4),
        __sbuf.layout().withName("_bf"),
        netty_unix_util_h.C_INT.withName("_lbfsize"),
        MemoryLayout.paddingLayout(4),
        netty_unix_util_h.C_POINTER.withName("_cookie"),
        netty_unix_util_h.C_POINTER.withName("_close"),
        netty_unix_util_h.C_POINTER.withName("_read"),
        netty_unix_util_h.C_POINTER.withName("_seek"),
        netty_unix_util_h.C_POINTER.withName("_write"),
        __sbuf.layout().withName("_ub"),
        netty_unix_util_h.C_POINTER.withName("_extra"),
        netty_unix_util_h.C_INT.withName("_ur"),
        MemoryLayout.sequenceLayout(3, netty_unix_util_h.C_CHAR).withName("_ubuf"),
        MemoryLayout.sequenceLayout(1, netty_unix_util_h.C_CHAR).withName("_nbuf"),
        __sbuf.layout().withName("_lb"),
        netty_unix_util_h.C_INT.withName("_blksize"),
        MemoryLayout.paddingLayout(4),
        netty_unix_util_h.C_LONG_LONG.withName("_offset")
    ).withName("__sFILE");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout _p$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("_p"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned char *_p
     * }
     */
    public static final AddressLayout _p$layout() {
        return _p$LAYOUT;
    }

    private static final long _p$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned char *_p
     * }
     */
    public static final long _p$offset() {
        return _p$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned char *_p
     * }
     */
    public static MemorySegment _p(MemorySegment struct) {
        return struct.get(_p$LAYOUT, _p$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned char *_p
     * }
     */
    public static void _p(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(_p$LAYOUT, _p$OFFSET, fieldValue);
    }

    private static final OfInt _r$LAYOUT = (OfInt)$LAYOUT.select(groupElement("_r"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int _r
     * }
     */
    public static final OfInt _r$layout() {
        return _r$LAYOUT;
    }

    private static final long _r$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int _r
     * }
     */
    public static final long _r$offset() {
        return _r$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int _r
     * }
     */
    public static int _r(MemorySegment struct) {
        return struct.get(_r$LAYOUT, _r$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int _r
     * }
     */
    public static void _r(MemorySegment struct, int fieldValue) {
        struct.set(_r$LAYOUT, _r$OFFSET, fieldValue);
    }

    private static final OfInt _w$LAYOUT = (OfInt)$LAYOUT.select(groupElement("_w"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int _w
     * }
     */
    public static final OfInt _w$layout() {
        return _w$LAYOUT;
    }

    private static final long _w$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int _w
     * }
     */
    public static final long _w$offset() {
        return _w$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int _w
     * }
     */
    public static int _w(MemorySegment struct) {
        return struct.get(_w$LAYOUT, _w$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int _w
     * }
     */
    public static void _w(MemorySegment struct, int fieldValue) {
        struct.set(_w$LAYOUT, _w$OFFSET, fieldValue);
    }

    private static final OfShort _flags$LAYOUT = (OfShort)$LAYOUT.select(groupElement("_flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * short _flags
     * }
     */
    public static final OfShort _flags$layout() {
        return _flags$LAYOUT;
    }

    private static final long _flags$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * short _flags
     * }
     */
    public static final long _flags$offset() {
        return _flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * short _flags
     * }
     */
    public static short _flags(MemorySegment struct) {
        return struct.get(_flags$LAYOUT, _flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * short _flags
     * }
     */
    public static void _flags(MemorySegment struct, short fieldValue) {
        struct.set(_flags$LAYOUT, _flags$OFFSET, fieldValue);
    }

    private static final OfShort _file$LAYOUT = (OfShort)$LAYOUT.select(groupElement("_file"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * short _file
     * }
     */
    public static final OfShort _file$layout() {
        return _file$LAYOUT;
    }

    private static final long _file$OFFSET = 18;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * short _file
     * }
     */
    public static final long _file$offset() {
        return _file$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * short _file
     * }
     */
    public static short _file(MemorySegment struct) {
        return struct.get(_file$LAYOUT, _file$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * short _file
     * }
     */
    public static void _file(MemorySegment struct, short fieldValue) {
        struct.set(_file$LAYOUT, _file$OFFSET, fieldValue);
    }

    private static final GroupLayout _bf$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_bf"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct __sbuf _bf
     * }
     */
    public static final GroupLayout _bf$layout() {
        return _bf$LAYOUT;
    }

    private static final long _bf$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct __sbuf _bf
     * }
     */
    public static final long _bf$offset() {
        return _bf$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct __sbuf _bf
     * }
     */
    public static MemorySegment _bf(MemorySegment struct) {
        return struct.asSlice(_bf$OFFSET, _bf$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct __sbuf _bf
     * }
     */
    public static void _bf(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, _bf$OFFSET, _bf$LAYOUT.byteSize());
    }

    private static final OfInt _lbfsize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("_lbfsize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int _lbfsize
     * }
     */
    public static final OfInt _lbfsize$layout() {
        return _lbfsize$LAYOUT;
    }

    private static final long _lbfsize$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int _lbfsize
     * }
     */
    public static final long _lbfsize$offset() {
        return _lbfsize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int _lbfsize
     * }
     */
    public static int _lbfsize(MemorySegment struct) {
        return struct.get(_lbfsize$LAYOUT, _lbfsize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int _lbfsize
     * }
     */
    public static void _lbfsize(MemorySegment struct, int fieldValue) {
        struct.set(_lbfsize$LAYOUT, _lbfsize$OFFSET, fieldValue);
    }

    private static final AddressLayout _cookie$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("_cookie"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *_cookie
     * }
     */
    public static final AddressLayout _cookie$layout() {
        return _cookie$LAYOUT;
    }

    private static final long _cookie$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *_cookie
     * }
     */
    public static final long _cookie$offset() {
        return _cookie$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *_cookie
     * }
     */
    public static MemorySegment _cookie(MemorySegment struct) {
        return struct.get(_cookie$LAYOUT, _cookie$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *_cookie
     * }
     */
    public static void _cookie(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(_cookie$LAYOUT, _cookie$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (* _Nullable _close)(void *)
     * }
     */
    public static class _close {

        _close() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            netty_unix_util_h.C_INT,
            netty_unix_util_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = netty_unix_util_h.upcallHandle(_close.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(_close.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout _close$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("_close"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (* _Nullable _close)(void *)
     * }
     */
    public static final AddressLayout _close$layout() {
        return _close$LAYOUT;
    }

    private static final long _close$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (* _Nullable _close)(void *)
     * }
     */
    public static final long _close$offset() {
        return _close$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (* _Nullable _close)(void *)
     * }
     */
    public static MemorySegment _close(MemorySegment struct) {
        return struct.get(_close$LAYOUT, _close$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (* _Nullable _close)(void *)
     * }
     */
    public static void _close(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(_close$LAYOUT, _close$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (* _Nullable _read)(void *, char *, int)
     * }
     */
    public static class _read {

        _read() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, int _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            netty_unix_util_h.C_INT,
            netty_unix_util_h.C_POINTER,
            netty_unix_util_h.C_POINTER,
            netty_unix_util_h.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = netty_unix_util_h.upcallHandle(_read.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(_read.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, int _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout _read$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("_read"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (* _Nullable _read)(void *, char *, int)
     * }
     */
    public static final AddressLayout _read$layout() {
        return _read$LAYOUT;
    }

    private static final long _read$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (* _Nullable _read)(void *, char *, int)
     * }
     */
    public static final long _read$offset() {
        return _read$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (* _Nullable _read)(void *, char *, int)
     * }
     */
    public static MemorySegment _read(MemorySegment struct) {
        return struct.get(_read$LAYOUT, _read$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (* _Nullable _read)(void *, char *, int)
     * }
     */
    public static void _read(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(_read$LAYOUT, _read$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * fpos_t (* _Nullable _seek)(void *, fpos_t, int)
     * }
     */
    public static class _seek {

        _seek() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            long apply(MemorySegment _x0, long _x1, int _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            netty_unix_util_h.C_LONG_LONG,
            netty_unix_util_h.C_POINTER,
            netty_unix_util_h.C_LONG_LONG,
            netty_unix_util_h.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = netty_unix_util_h.upcallHandle(_seek.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(_seek.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static long invoke(MemorySegment funcPtr,MemorySegment _x0, long _x1, int _x2) {
            try {
                return (long) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout _seek$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("_seek"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * fpos_t (* _Nullable _seek)(void *, fpos_t, int)
     * }
     */
    public static final AddressLayout _seek$layout() {
        return _seek$LAYOUT;
    }

    private static final long _seek$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * fpos_t (* _Nullable _seek)(void *, fpos_t, int)
     * }
     */
    public static final long _seek$offset() {
        return _seek$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * fpos_t (* _Nullable _seek)(void *, fpos_t, int)
     * }
     */
    public static MemorySegment _seek(MemorySegment struct) {
        return struct.get(_seek$LAYOUT, _seek$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * fpos_t (* _Nullable _seek)(void *, fpos_t, int)
     * }
     */
    public static void _seek(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(_seek$LAYOUT, _seek$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (* _Nullable _write)(void *, const char *, int)
     * }
     */
    public static class _write {

        _write() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, int _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            netty_unix_util_h.C_INT,
            netty_unix_util_h.C_POINTER,
            netty_unix_util_h.C_POINTER,
            netty_unix_util_h.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = netty_unix_util_h.upcallHandle(_write.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(_write.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, int _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout _write$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("_write"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (* _Nullable _write)(void *, const char *, int)
     * }
     */
    public static final AddressLayout _write$layout() {
        return _write$LAYOUT;
    }

    private static final long _write$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (* _Nullable _write)(void *, const char *, int)
     * }
     */
    public static final long _write$offset() {
        return _write$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (* _Nullable _write)(void *, const char *, int)
     * }
     */
    public static MemorySegment _write(MemorySegment struct) {
        return struct.get(_write$LAYOUT, _write$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (* _Nullable _write)(void *, const char *, int)
     * }
     */
    public static void _write(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(_write$LAYOUT, _write$OFFSET, fieldValue);
    }

    private static final GroupLayout _ub$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_ub"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct __sbuf _ub
     * }
     */
    public static final GroupLayout _ub$layout() {
        return _ub$LAYOUT;
    }

    private static final long _ub$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct __sbuf _ub
     * }
     */
    public static final long _ub$offset() {
        return _ub$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct __sbuf _ub
     * }
     */
    public static MemorySegment _ub(MemorySegment struct) {
        return struct.asSlice(_ub$OFFSET, _ub$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct __sbuf _ub
     * }
     */
    public static void _ub(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, _ub$OFFSET, _ub$LAYOUT.byteSize());
    }

    private static final AddressLayout _extra$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("_extra"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct __sFILEX *_extra
     * }
     */
    public static final AddressLayout _extra$layout() {
        return _extra$LAYOUT;
    }

    private static final long _extra$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct __sFILEX *_extra
     * }
     */
    public static final long _extra$offset() {
        return _extra$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct __sFILEX *_extra
     * }
     */
    public static MemorySegment _extra(MemorySegment struct) {
        return struct.get(_extra$LAYOUT, _extra$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct __sFILEX *_extra
     * }
     */
    public static void _extra(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(_extra$LAYOUT, _extra$OFFSET, fieldValue);
    }

    private static final OfInt _ur$LAYOUT = (OfInt)$LAYOUT.select(groupElement("_ur"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int _ur
     * }
     */
    public static final OfInt _ur$layout() {
        return _ur$LAYOUT;
    }

    private static final long _ur$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int _ur
     * }
     */
    public static final long _ur$offset() {
        return _ur$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int _ur
     * }
     */
    public static int _ur(MemorySegment struct) {
        return struct.get(_ur$LAYOUT, _ur$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int _ur
     * }
     */
    public static void _ur(MemorySegment struct, int fieldValue) {
        struct.set(_ur$LAYOUT, _ur$OFFSET, fieldValue);
    }

    private static final SequenceLayout _ubuf$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("_ubuf"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned char _ubuf[3]
     * }
     */
    public static final SequenceLayout _ubuf$layout() {
        return _ubuf$LAYOUT;
    }

    private static final long _ubuf$OFFSET = 116;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned char _ubuf[3]
     * }
     */
    public static final long _ubuf$offset() {
        return _ubuf$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned char _ubuf[3]
     * }
     */
    public static MemorySegment _ubuf(MemorySegment struct) {
        return struct.asSlice(_ubuf$OFFSET, _ubuf$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned char _ubuf[3]
     * }
     */
    public static void _ubuf(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, _ubuf$OFFSET, _ubuf$LAYOUT.byteSize());
    }

    private static long[] _ubuf$DIMS = { 3 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * unsigned char _ubuf[3]
     * }
     */
    public static long[] _ubuf$dimensions() {
        return _ubuf$DIMS;
    }
    private static final VarHandle _ubuf$ELEM_HANDLE = _ubuf$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * unsigned char _ubuf[3]
     * }
     */
    public static byte _ubuf(MemorySegment struct, long index0) {
        return (byte)_ubuf$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * unsigned char _ubuf[3]
     * }
     */
    public static void _ubuf(MemorySegment struct, long index0, byte fieldValue) {
        _ubuf$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout _nbuf$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("_nbuf"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned char _nbuf[1]
     * }
     */
    public static final SequenceLayout _nbuf$layout() {
        return _nbuf$LAYOUT;
    }

    private static final long _nbuf$OFFSET = 119;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned char _nbuf[1]
     * }
     */
    public static final long _nbuf$offset() {
        return _nbuf$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned char _nbuf[1]
     * }
     */
    public static MemorySegment _nbuf(MemorySegment struct) {
        return struct.asSlice(_nbuf$OFFSET, _nbuf$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned char _nbuf[1]
     * }
     */
    public static void _nbuf(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, _nbuf$OFFSET, _nbuf$LAYOUT.byteSize());
    }

    private static long[] _nbuf$DIMS = { 1 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * unsigned char _nbuf[1]
     * }
     */
    public static long[] _nbuf$dimensions() {
        return _nbuf$DIMS;
    }
    private static final VarHandle _nbuf$ELEM_HANDLE = _nbuf$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * unsigned char _nbuf[1]
     * }
     */
    public static byte _nbuf(MemorySegment struct, long index0) {
        return (byte)_nbuf$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * unsigned char _nbuf[1]
     * }
     */
    public static void _nbuf(MemorySegment struct, long index0, byte fieldValue) {
        _nbuf$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final GroupLayout _lb$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_lb"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct __sbuf _lb
     * }
     */
    public static final GroupLayout _lb$layout() {
        return _lb$LAYOUT;
    }

    private static final long _lb$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct __sbuf _lb
     * }
     */
    public static final long _lb$offset() {
        return _lb$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct __sbuf _lb
     * }
     */
    public static MemorySegment _lb(MemorySegment struct) {
        return struct.asSlice(_lb$OFFSET, _lb$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct __sbuf _lb
     * }
     */
    public static void _lb(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, _lb$OFFSET, _lb$LAYOUT.byteSize());
    }

    private static final OfInt _blksize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("_blksize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int _blksize
     * }
     */
    public static final OfInt _blksize$layout() {
        return _blksize$LAYOUT;
    }

    private static final long _blksize$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int _blksize
     * }
     */
    public static final long _blksize$offset() {
        return _blksize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int _blksize
     * }
     */
    public static int _blksize(MemorySegment struct) {
        return struct.get(_blksize$LAYOUT, _blksize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int _blksize
     * }
     */
    public static void _blksize(MemorySegment struct, int fieldValue) {
        struct.set(_blksize$LAYOUT, _blksize$OFFSET, fieldValue);
    }

    private static final OfLong _offset$LAYOUT = (OfLong)$LAYOUT.select(groupElement("_offset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * fpos_t _offset
     * }
     */
    public static final OfLong _offset$layout() {
        return _offset$LAYOUT;
    }

    private static final long _offset$OFFSET = 144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * fpos_t _offset
     * }
     */
    public static final long _offset$offset() {
        return _offset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * fpos_t _offset
     * }
     */
    public static long _offset(MemorySegment struct) {
        return struct.get(_offset$LAYOUT, _offset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * fpos_t _offset
     * }
     */
    public static void _offset(MemorySegment struct, long fieldValue) {
        struct.set(_offset$LAYOUT, _offset$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

