// Generated by jextract

package dev.elide.transport.bridge;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct sa_endpoints {
 *     unsigned int sae_srcif;
 *     const struct sockaddr *sae_srcaddr;
 *     socklen_t sae_srcaddrlen;
 *     const struct sockaddr *sae_dstaddr;
 *     socklen_t sae_dstaddrlen;
 * }
 * }
 */
public class sa_endpoints {

    sa_endpoints() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        netty_unix_socket_h.C_INT.withName("sae_srcif"),
        MemoryLayout.paddingLayout(4),
        netty_unix_socket_h.C_POINTER.withName("sae_srcaddr"),
        netty_unix_socket_h.C_INT.withName("sae_srcaddrlen"),
        MemoryLayout.paddingLayout(4),
        netty_unix_socket_h.C_POINTER.withName("sae_dstaddr"),
        netty_unix_socket_h.C_INT.withName("sae_dstaddrlen"),
        MemoryLayout.paddingLayout(4)
    ).withName("sa_endpoints");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt sae_srcif$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sae_srcif"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int sae_srcif
     * }
     */
    public static final OfInt sae_srcif$layout() {
        return sae_srcif$LAYOUT;
    }

    private static final long sae_srcif$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int sae_srcif
     * }
     */
    public static final long sae_srcif$offset() {
        return sae_srcif$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int sae_srcif
     * }
     */
    public static int sae_srcif(MemorySegment struct) {
        return struct.get(sae_srcif$LAYOUT, sae_srcif$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int sae_srcif
     * }
     */
    public static void sae_srcif(MemorySegment struct, int fieldValue) {
        struct.set(sae_srcif$LAYOUT, sae_srcif$OFFSET, fieldValue);
    }

    private static final AddressLayout sae_srcaddr$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("sae_srcaddr"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const struct sockaddr *sae_srcaddr
     * }
     */
    public static final AddressLayout sae_srcaddr$layout() {
        return sae_srcaddr$LAYOUT;
    }

    private static final long sae_srcaddr$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const struct sockaddr *sae_srcaddr
     * }
     */
    public static final long sae_srcaddr$offset() {
        return sae_srcaddr$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const struct sockaddr *sae_srcaddr
     * }
     */
    public static MemorySegment sae_srcaddr(MemorySegment struct) {
        return struct.get(sae_srcaddr$LAYOUT, sae_srcaddr$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const struct sockaddr *sae_srcaddr
     * }
     */
    public static void sae_srcaddr(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(sae_srcaddr$LAYOUT, sae_srcaddr$OFFSET, fieldValue);
    }

    private static final OfInt sae_srcaddrlen$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sae_srcaddrlen"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * socklen_t sae_srcaddrlen
     * }
     */
    public static final OfInt sae_srcaddrlen$layout() {
        return sae_srcaddrlen$LAYOUT;
    }

    private static final long sae_srcaddrlen$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * socklen_t sae_srcaddrlen
     * }
     */
    public static final long sae_srcaddrlen$offset() {
        return sae_srcaddrlen$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * socklen_t sae_srcaddrlen
     * }
     */
    public static int sae_srcaddrlen(MemorySegment struct) {
        return struct.get(sae_srcaddrlen$LAYOUT, sae_srcaddrlen$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * socklen_t sae_srcaddrlen
     * }
     */
    public static void sae_srcaddrlen(MemorySegment struct, int fieldValue) {
        struct.set(sae_srcaddrlen$LAYOUT, sae_srcaddrlen$OFFSET, fieldValue);
    }

    private static final AddressLayout sae_dstaddr$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("sae_dstaddr"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const struct sockaddr *sae_dstaddr
     * }
     */
    public static final AddressLayout sae_dstaddr$layout() {
        return sae_dstaddr$LAYOUT;
    }

    private static final long sae_dstaddr$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const struct sockaddr *sae_dstaddr
     * }
     */
    public static final long sae_dstaddr$offset() {
        return sae_dstaddr$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const struct sockaddr *sae_dstaddr
     * }
     */
    public static MemorySegment sae_dstaddr(MemorySegment struct) {
        return struct.get(sae_dstaddr$LAYOUT, sae_dstaddr$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const struct sockaddr *sae_dstaddr
     * }
     */
    public static void sae_dstaddr(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(sae_dstaddr$LAYOUT, sae_dstaddr$OFFSET, fieldValue);
    }

    private static final OfInt sae_dstaddrlen$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sae_dstaddrlen"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * socklen_t sae_dstaddrlen
     * }
     */
    public static final OfInt sae_dstaddrlen$layout() {
        return sae_dstaddrlen$LAYOUT;
    }

    private static final long sae_dstaddrlen$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * socklen_t sae_dstaddrlen
     * }
     */
    public static final long sae_dstaddrlen$offset() {
        return sae_dstaddrlen$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * socklen_t sae_dstaddrlen
     * }
     */
    public static int sae_dstaddrlen(MemorySegment struct) {
        return struct.get(sae_dstaddrlen$LAYOUT, sae_dstaddrlen$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * socklen_t sae_dstaddrlen
     * }
     */
    public static void sae_dstaddrlen(MemorySegment struct, int fieldValue) {
        struct.set(sae_dstaddrlen$LAYOUT, sae_dstaddrlen$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

