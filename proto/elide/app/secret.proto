/*
 * Copyright Â© 2022, The Elide Framework Authors. All rights reserved.
 *
 * The Gust/Elide framework and tools, and all associated source or object computer code, except where otherwise noted,
 * are licensed under the Zero Prosperity license, which is enclosed in this repository, in the file LICENSE.txt. Use of
 * this code in object or source form requires and implies consent and agreement to that license in principle and
 * practice. Source or object code not listing this header, or unless specified otherwise, remain the property of
 * Elide LLC and its suppliers, if any. The intellectual and technical concepts contained herein are proprietary to
 * Elide LLC and its suppliers and may be covered by U.S. and Foreign Patents, or patents in process, and are protected
 * by trade secret and copyright law. Dissemination of this information, or reproduction of this material, in any form,
 * is strictly forbidden except in adherence with assigned license requirements.
 */

syntax = "proto3";
package elide.app;

import "elide/crypto/symmetric.proto";

option optimize_for = SPEED;
option cc_enable_arenas = true;
option java_multiple_files = true;
option java_string_check_utf8 = true;
option php_class_prefix = "ELD";
option swift_prefix = "Elide";
option objc_class_prefix = "ELD";
option java_package = "tools.elide.app";
option csharp_namespace = "Elide.App";
option go_package = "github.com/elide-tools/elide/app;app";

// Describes a reference to a secret associated with an application.
message SecretReference {
  // Name of the secret under reference.
  string name = 1;

  // Owner of the secret under reference.
  string owner = 2;
}

// Describes a secret value associated with an application, and made available to an application at runtime.
message Secret {
  // Specifies the unique, developer-assigned name for this secret.
  string name = 2;
}

// Describes an encrypted secret value, as expressed in a rendered final application bundle.
message EncryptedSecret {
  // Reference to the secret which this value originates from.
  SecretReference ref = 1;

  // Cipher information for this encrypted secret.
  elide.crypto.SymmetricPreamble preamble = 2;

  // Encrypted data.
  bytes data = 3;
}
