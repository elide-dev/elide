/*
 * Copyright Â© 2022, The Elide Framework Authors. All rights reserved.
 *
 * The Gust/Elide framework and tools, and all associated source or object computer code, except where otherwise noted,
 * are licensed under the Zero Prosperity license, which is enclosed in this repository, in the file LICENSE.txt. Use of
 * this code in object or source form requires and implies consent and agreement to that license in principle and
 * practice. Source or object code not listing this header, or unless specified otherwise, remain the property of
 * Elide LLC and its suppliers, if any. The intellectual and technical concepts contained herein are proprietary to
 * Elide LLC and its suppliers and may be covered by U.S. and Foreign Patents, or patents in process, and are protected
 * by trade secret and copyright law. Dissemination of this information, or reproduction of this material, in any form,
 * is strictly forbidden except in adherence with assigned license requirements.
 */

/*
 * Specifies core structures related to cryptographic operations and primitives. These records and enumerates are used
 * throughout the codebase as a standard base set of definitions for hashing, encryption, and more.
 */
syntax = "proto3";
package elide.crypto;

option optimize_for = SPEED;
option cc_enable_arenas = true;
option java_multiple_files = true;
option java_string_check_utf8 = true;
option php_class_prefix = "ELD";
option swift_prefix = "Elide";
option objc_class_prefix = "ELD";
option java_package = "tools.elide.crypto";
option csharp_namespace = "Elide.Crypto";
option go_package = "github.com/elide-tools/elide/crypto;crypto";

// Specifies known ciphers to this version of the protocol.
enum KnownCipher {
  // Specifies an unrecognized cipher for this version of the protocol; should not be used by regular code.
  CIPHER_UNRECOGNIZED = 0;

  // Specifies the AES-128 cipher, operating in CBC mode.
  AES_128_CBC = 1;

  // Specifies the AES-256 cipher, operating in CBC mode.
  AES_256_CBC = 2;

  // Specifies the AES-128 cipher, operating in GCM mode.
  AES_128_GCM = 3;

  // Specifies the AES-256 cipher, operating in GCM mode.
  AES_256_GCM = 4;

  // Specifies the ChaCha20 cipher, operating in Poly1305 mode.
  CHACHA20_POLY1305 = 5;
}

// Specifies cipher information in a given context.
message CipherInfo {
  // Specifies a cipher in use.
  oneof cipher {
    // Specifies a known cipher.
    KnownCipher known = 1;

    // Specifies a custom cipher.
    string custom = 2;
  }

  // Key ID in use for this value; expected to be accessible to the receiving application.
  string kid = 3;

  // IV for encryption/decryption of this value.
  bytes iv = 4;
}
