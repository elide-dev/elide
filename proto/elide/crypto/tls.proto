/*
 * Copyright Â© 2022, The Elide Framework Authors. All rights reserved.
 *
 * The Gust/Elide framework and tools, and all associated source or object computer code, except where otherwise noted,
 * are licensed under the Zero Prosperity license, which is enclosed in this repository, in the file LICENSE.txt. Use of
 * this code in object or source form requires and implies consent and agreement to that license in principle and
 * practice. Source or object code not listing this header, or unless specified otherwise, remain the property of
 * Elide LLC and its suppliers, if any. The intellectual and technical concepts contained herein are proprietary to
 * Elide LLC and its suppliers and may be covered by U.S. and Foreign Patents, or patents in process, and are protected
 * by trade secret and copyright law. Dissemination of this information, or reproduction of this material, in any form,
 * is strictly forbidden except in adherence with assigned license requirements.
 */

syntax = "proto3";
package elide.crypto;

option optimize_for = SPEED;
option cc_enable_arenas = true;
option java_multiple_files = true;
option java_string_check_utf8 = true;
option php_class_prefix = "ELD";
option swift_prefix = "Elide";
option objc_class_prefix = "ELD";
option java_package = "tools.elide.crypto";
option csharp_namespace = "Elide.Crypto";
option go_package = "github.com/elide-tools/elide/crypto;crypto";

// Enumerates TLS versions known to this protocol suite.
enum TlsVersion {
  // Indicates a protocol-incompatible enumeration value, or that TLS is not active.
  TLS_INACTIVE = 0;

  // buf:lint:ignore ENUM_VALUE_UPPER_SNAKE_CASE
  // Indicates that TLS 1.0 is active.
  TLSv1_0 = 1;

  // buf:lint:ignore ENUM_VALUE_UPPER_SNAKE_CASE
  // Indicates that TLS 1.1 is active.
  TLSv1_1 = 2;

  // buf:lint:ignore ENUM_VALUE_UPPER_SNAKE_CASE
  // Indicates that TLS 1.2 is active.
  TLSv1_2 = 3;

  // buf:lint:ignore ENUM_VALUE_UPPER_SNAKE_CASE
  // Indicates that TLS 1.3 is active.
  TLSv1_3 = 4;
}

// Specifies information about a TLS certificate.
message Certificate {
  // Specifies the TLS peer's certificate fingerprint, if any.
  bytes fingerprint = 1;

  // Specifies the certificate content, if available.
  bytes certificate = 2;
}

// Specifies information about the active TLS peer.
message TlsPeer {
  // Specifies the TLS peer's certificate, if any.
  Certificate certificate = 1;

  // Specifies the TLS peer's certificate chain, if any.
  repeated Certificate chain = 2;
}

// Specifies information about a TLS-enabled connection, as applicable.
message TlsConnectionInfo {
  // Specifies the TLS version in use.
  TlsVersion version = 1;

  // Specifies the TLS peer, if any.
  TlsPeer peer = 2;
}
