/*
 * Copyright Â© 2022, The Elide Framework Authors. All rights reserved.
 *
 * The Gust/Elide framework and tools, and all associated source or object computer code, except where otherwise noted,
 * are licensed under the Zero Prosperity license, which is enclosed in this repository, in the file LICENSE.txt. Use of
 * this code in object or source form requires and implies consent and agreement to that license in principle and
 * practice. Source or object code not listing this header, or unless specified otherwise, remain the property of
 * Elide LLC and its suppliers, if any. The intellectual and technical concepts contained herein are proprietary to
 * Elide LLC and its suppliers and may be covered by U.S. and Foreign Patents, or patents in process, and are protected
 * by trade secret and copyright law. Dissemination of this information, or reproduction of this material, in any form,
 * is strictly forbidden except in adherence with assigned license requirements.
 */

syntax = "proto3";
package elide.kv;

option optimize_for = SPEED;
option cc_enable_arenas = true;
option java_multiple_files = true;
option java_string_check_utf8 = true;
option php_class_prefix = "ELD";
option swift_prefix = "Elide";
option objc_class_prefix = "ELD";
option java_package = "tools.elide.kv";
option csharp_namespace = "Elide.Kv";
option go_package = "github.com/elide-tools/elide/kv;kv";

// Describes a key/value storage namespace, which is addressed by an identifier, and may be bound to a specific name or
// other identifier when surfacing to the user's application.
message Namespace {
  // Unique identifier for the namespace.
  string id = 1;

  // Optional variable binding for the namespace.
  string binding = 2;
}

// Describes a value held by the key/value storage system, including metadata describing type and other information.
message Value {
  // Specifies the value held by this key/value pair.
  oneof value {
    // Raw data for this value; if no special type is specified, this is the default value used.
    bytes data = 1;
  }
}

// Specifies a key associated with a stored value of some kind.
message KeyValue {
  // Key for the value.
  string key = 1;

  // Value associated with the key.
  Value value = 2;
}

// Specifies a key/value message paired to the owning namespace.
message OwnedKeyValue {
  // Owning namespace for this key/value pair.
  Namespace namespace = 1;

  // Key/value pair information.
  KeyValue key_value = 2;
}
