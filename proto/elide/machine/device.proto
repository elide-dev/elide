/*
 * Copyright Â© 2022, The Elide Framework Authors. All rights reserved.
 *
 * The Gust/Elide framework and tools, and all associated source or object computer code, except where otherwise noted,
 * are licensed under the Zero Prosperity license, which is enclosed in this repository, in the file LICENSE.txt. Use of
 * this code in object or source form requires and implies consent and agreement to that license in principle and
 * practice. Source or object code not listing this header, or unless specified otherwise, remain the property of
 * Elide LLC and its suppliers, if any. The intellectual and technical concepts contained herein are proprietary to
 * Elide LLC and its suppliers and may be covered by U.S. and Foreign Patents, or patents in process, and are protected
 * by trade secret and copyright law. Dissemination of this information, or reproduction of this material, in any form,
 * is strictly forbidden except in adherence with assigned license requirements.
 */

syntax = "proto3";
package elide.machine;

option optimize_for = SPEED;
option cc_enable_arenas = true;
option java_multiple_files = true;
option java_string_check_utf8 = true;
option php_class_prefix = "ELDM";
option swift_prefix = "ElideMachine";
option objc_class_prefix = "ELDM";
option java_package = "tools.elide.machine";
option csharp_namespace = "Elide.Machine";
option go_package = "github.com/elide-tools/elide/machine";

// Enumerates broad families of devices and peripherals which may be connected to a given machine.
enum DeviceFamily {
  // Indicates an unknown or unrecognized device family to this version of the protocol; should not be used by regular
  // code.
  DEVICE_FAMILY_UNKNOWN = 0;

  // Describes block storage devices.
  BLOCK_STORAGE = 1;

  // Describes network devices.
  NETWORK = 2;

  // Describes accelerator devices.
  ACCELERATOR = 3;

  // Describes GPU devices.
  GPU = 4;
}

// Describes info for a connected peripheral or device.
message DeviceInfo {
  // ID assigned to this device.
  string id = 1;

  // Family or type of device.
  DeviceFamily family = 2;

  // Vendor of this device.
  string vendor = 3;

  // Model of this device.
  string model = 4;

  // Capacity rating for this device; for storage, this is expressed as a count of gigabytes. For network devices, this
  // is expressed as a count of megabits per second. For accelerators, this is expressed as a count of compute units.
  uint32 capacity = 5;

  // Whether this device or peripheral is available for use.
  bool available = 6;
}
