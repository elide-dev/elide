/*
 * Copyright Â© 2022, The Elide Framework Authors. All rights reserved.
 *
 * The Gust/Elide framework and tools, and all associated source or object computer code, except where otherwise noted,
 * are licensed under the Zero Prosperity license, which is enclosed in this repository, in the file LICENSE.txt. Use of
 * this code in object or source form requires and implies consent and agreement to that license in principle and
 * practice. Source or object code not listing this header, or unless specified otherwise, remain the property of
 * Elide LLC and its suppliers, if any. The intellectual and technical concepts contained herein are proprietary to
 * Elide LLC and its suppliers and may be covered by U.S. and Foreign Patents, or patents in process, and are protected
 * by trade secret and copyright law. Dissemination of this information, or reproduction of this material, in any form,
 * is strictly forbidden except in adherence with assigned license requirements.
 */

syntax = "proto3";
package elide.net;

import "elide/net/protocol.proto";

option optimize_for = SPEED;
option cc_enable_arenas = true;
option java_multiple_files = true;
option java_string_check_utf8 = true;
option php_class_prefix = "ELDN";
option swift_prefix = "ElideNet";
option objc_class_prefix = "ELDN";
option java_package = "tools.elide.net";
option csharp_namespace = "Elide.Net";
option go_package = "github.com/elide-tools/elide/net";

// Specifies a subset of relevant well-known ports registered with IANA.
enum WellKnownPort {
  // Unspecified well-known port.
  WELL_KNOWN_PORT_UNSPECIFIED = 0;

  // SSH port.
  SSH = 22;

  // HTTP port.
  HTTP = 80;

  // HTTPS port.
  HTTPS = 443;

  // MySQL port.
  MYSQL = 3306;

  // PostgreSQL port.
  POSTGRESQL = 5432;

  // Redis port.
  REDIS = 6379;

  // gRPC port.
  GRPC = 50051;
}

// Describes a single network port, potentially with mapping information.
message Port {
  // Address specification for the port.
  oneof address {
    // Well-known port.
    WellKnownPort well_known = 1;

    // Arbitrary port number.
    uint32 number = 2;
  }

  // Protocols for this port.
  repeated elide.net.Layer4Protocol protocol = 3;

  // Target port number, if applicable.
  uint32 target = 4;
}
