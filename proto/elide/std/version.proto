/*
 * Copyright Â© 2022, The Elide Framework Authors. All rights reserved.
 *
 * The Gust/Elide framework and tools, and all associated source or object computer code, except where otherwise noted,
 * are licensed under the Zero Prosperity license, which is enclosed in this repository, in the file LICENSE.txt. Use of
 * this code in object or source form requires and implies consent and agreement to that license in principle and
 * practice. Source or object code not listing this header, or unless specified otherwise, remain the property of
 * Elide LLC and its suppliers, if any. The intellectual and technical concepts contained herein are proprietary to
 * Elide LLC and its suppliers and may be covered by U.S. and Foreign Patents, or patents in process, and are protected
 * by trade secret and copyright law. Dissemination of this information, or reproduction of this material, in any form,
 * is strictly forbidden except in adherence with assigned license requirements.
 */

syntax = "proto3";

/*
 * Provides "standard" records for basic concepts like versions, timestamps, and identifiers; these records are entirely
 * generic and used throughout the protocol model.
 */
package elide.std;

option optimize_for = SPEED;
option cc_enable_arenas = true;
option java_multiple_files = true;
option java_string_check_utf8 = true;
option php_class_prefix = "ELD";
option swift_prefix = "Elide";
option objc_class_prefix = "ELD";
option java_package = "tools.elide.std";
option csharp_namespace = "Elide.Std";
option go_package = "github.com/elide-tools/elide/std;std";

// Specifies generic version information; comparable via "semver" (Semantic Versioning) semantics.
message Version {
  // Specifies structured version information.
  message SemanticVersioning {
    // Major version number.
    uint32 major = 1;

    // Minor version number.
    uint32 minor = 2;

    // Patch version number.
    uint32 patch = 3;

    // Pre-release version information.
    string pre_release = 4;

    // Build metadata.
    string build_metadata = 5;
  }

  // Specifies a version number based on a timestamp or calendar date.
  message CalendarVersioning {
    // Year.
    uint32 year = 1;

    // Month.
    uint32 month = 2;

    // Day.
    uint32 day = 3;

    // Hour.
    uint32 hour = 4;

    // Minute.
    uint32 minute = 5;

    // Second.
    uint32 second = 6;
  }

  // Specifies a name which maps to a version; typically, named versions are expected to sort lexicographically.
  message NameVersioning {
    // Name of the version.
    string name = 1;
  }

  // Specifies associated version information.
  oneof version {
    // Specifies semantic version information.
    SemanticVersioning semantic = 1;

    // Specifies calendar version information.
    CalendarVersioning calendar = 2;

    // Specifies named version information.
    NameVersioning name = 3;

    // Specifies a simple string value.
    string value = 4;
  }
}
