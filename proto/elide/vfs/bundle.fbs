/*
 * Copyright Â© 2022, The Elide Framework Authors. All rights reserved.
 *
 * The Gust/Elide framework and tools, and all associated source or object computer code, except where otherwise noted,
 * are licensed under the Zero Prosperity license, which is enclosed in this repository, in the file LICENSE.txt. Use of
 * this code in object or source form requires and implies consent and agreement to that license in principle and
 * practice. Source or object code not listing this header, or unless specified otherwise, remain the property of
 * Elide LLC and its suppliers, if any. The intellectual and technical concepts contained herein are proprietary to
 * Elide LLC and its suppliers and may be covered by U.S. and Foreign Patents, or patents in process, and are protected
 * by trade secret and copyright law. Dissemination of this information, or reproduction of this material, in any form,
 * is strictly forbidden except in adherence with assigned license requirements.
 */

include "../../google/protobuf/timestamp.fbs";
include "../crypto/crypto.fbs";
include "../data/data.fbs";
include "../data/encoding.fbs";
include "./tree.fbs";
include "./file.fbs";

/*
 * Defines structures which are used to express Elide VFS bundle files. VFS bundle files contain all the metadata and
 * file data necessary to reconstruct a virtual file system. The bundle file format is designed to be compact and easily
 * debuggable by developers; read on for more information.
 */
namespace elide.vfs;

// # VFS: Bundle Header
//
// Defines the packed layout of an Elide VFS bundle's file header. The file header contains just enough data to safely
// de-compress and unpack the file-tree metadata, and the associated raw filesystem data. The header is designed to
// evolve over time; the format version, at this time, is always `1`.
table BundleHeader {
  // ## Header: Magic number.
  //
  // The magic number is a constant value known by the Elide framework, which is used to identify the file as an Elide
  // VFS bundle. The magic number is a 32-bit unsigned integer, and is always the numeric equivalent of the ASCII string
  // `ELDE`, or, `0x454C4445`.
  magic: uint;

  // ## Header: Format version.
  //
  // The format version is an 16-bit unsigned integer which identifies the version of the bundle file format. The format
  // version is always `1` at this time.
  format_version: uint;

  // ## Header: Compression mode.
  //
  // The compression mode is an 16-bit unsigned integer which identifies the compression mode used to compress the file
  // tree metadata and filesystem data.
  compression_mode: elide.data.CompressionMode;

  // ## Header: CRC32.
  //
  // The CRC32 is a 32-bit unsigned integer which is used to verify the integrity of the decompressed tree metadata.
  // After (or during) decompression, a CRC32 checksum is calculated over the decompressed data, and compared against
  // this reference value to ensure data integrity remains intact.
  crc32: uint;
}

// # VFS: Bundle Artifacts
//
// Structure of the JSON file which is embedded in a bundle file to enable easy inspection of filesystem contents. The
// artifacts file is always appended at the end of the outer bundle tarball, and is always named `artifacts.json.gz`, to
// reflect that it is always gzip-encoded.
//
// The artifacts file specifies the following information for each artifact embedded within the file-system:
// - The active compression format.
// - The artifact's name (path).
// - Several hashes of the artifact's un-compressed contents.
// - The artifact's un-compressed size.
// - The artifact's compressed size using the active compression format.
// - The artifact's compressed-data CRC32 checksum.
table BundleArtifacts {
}

// # VFS: Bundle Info
//
// Structure which defines a full suite of metadata for a given VFS bundle file. This record is only used during
// construction or loading of the bundle, as a utility; it is never serialized into the bundle itself.
table BundleInfo {
  // Header which is present at the top of the bundle, and which provides a CRC32 of the de-compressed file-tree data.
  header: elide.vfs.BundleHeader;

  // Filesystem tree, with an entry for each file and directory present in the bundle.
  tree: elide.vfs.Filesystem;

  // Artifacts file, which is held in JSON format at the end of the bundle.
  artifacts: elide.vfs.BundleArtifacts;
}
