/*
 * Copyright Â© 2022, The Elide Framework Authors. All rights reserved.
 *
 * The Gust/Elide framework and tools, and all associated source or object computer code, except where otherwise noted,
 * are licensed under the Zero Prosperity license, which is enclosed in this repository, in the file LICENSE.txt. Use of
 * this code in object or source form requires and implies consent and agreement to that license in principle and
 * practice. Source or object code not listing this header, or unless specified otherwise, remain the property of
 * Elide LLC and its suppliers, if any. The intellectual and technical concepts contained herein are proprietary to
 * Elide LLC and its suppliers and may be covered by U.S. and Foreign Patents, or patents in process, and are protected
 * by trade secret and copyright law. Dissemination of this information, or reproduction of this material, in any form,
 * is strictly forbidden except in adherence with assigned license requirements.
 */

include "../../google/protobuf/timestamp.fbs";
include "../crypto/crypto.fbs";
include "../data/data.fbs";
include "../data/encoding.fbs";
include "./file.fbs";

/*
 * Specifies structures which are used at runtime to implement the virtual file system provided to Elide application
 * guest VMs; see also `directory` and `file`.
 */
namespace elide.vfs;

// # VFS: Directory
//
// Describes a directory-type entry within a given `TreeEntry`, within a virtual file system managed by Elide. Directory
// entries can hold children (either `File` or other `Directory` objects), by way of their `TreeEntry` children. Entries
// of type `Directory` are virtualized and carry no data.
table Directory {
  // Name of the directory.
  name: string;

  // Children held by this directory.
  children: [elide.vfs.TreeEntry];
}

// # VFS: Tree Entry
//
// Describes a single entry within a given virtual file system managed by Elide. Tree entries can hold `File` or
// `Directory` objects. Directories can, themselves, hold child `TreeEntry` objects, but files cannot.
table TreeEntry {
  // Reference to the tree entry which holds this entry as a parent. If no parent is present, the `TreeEntry` models the
  // root entry of the virtual file system. In other words, all non-root `TreeEntry` objects have a parent.
  parent: elide.vfs.TreeEntry;

  // Describes the file system entry held by this tree entry.
  entry: elide.vfs.TreeEntry_.TreeEntrySpec;
}

namespace elide.vfs.TreeEntry_;

// Describes the file system entry held by this tree entry.
table TreeEntrySpec {
  // Describes a directory held by this tree entry.
  directory: elide.vfs.Directory;

  // Describes a file held by this tree entry.
  file: elide.vfs.File;
}

namespace elide.vfs;

// # VFS: File System
//
// Describes a root singleton metadata record which points to the root `TreeEntry` of a given virtual file system
// managed by Elide. Only one `Filesystem` may exist per image.
table Filesystem {
  // Metadata describing this filesystem.
  metadata: elide.vfs.Filesystem_.Metadata;

  // Root `TreeEntry` of the virtual file system.
  root: elide.vfs.TreeEntry;
}

namespace elide.vfs.Filesystem_;

// Filesystem-wide metadata calculated by build tools and provided at runtime.
table Metadata {
  // Size of the entire virtual file system, uncompressed, in bytes.
  size: ulong;

  // Size of the entire virtual file system, compressed, in bytes.
  compressed: ulong;

  // Compression mode applied to the virtual file system.
  compression: elide.data.CompressionMode;

  // Describes the most-recent modification timestamp of any constituent file within the virtual file system.
  modified: google.protobuf.Timestamp;
}
